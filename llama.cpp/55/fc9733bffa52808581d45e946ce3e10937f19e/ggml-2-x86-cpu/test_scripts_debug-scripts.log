+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.025.604 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.616 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.710 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.723 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.731 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.733 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.734 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.736 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.737 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.744 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.746 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.747 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.748 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.749 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.939 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.973 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.474 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.483 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.485 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.486 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.487 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.490 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.504 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.505 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.506 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.514 I llama_model_loader: - type  f32:   37 tensors
0.00.266.516 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.662 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.729 I llm_load_vocab: special tokens cache size = 5
0.00.625.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.305 I llm_load_print_meta: arch             = gemma
0.00.625.306 I llm_load_print_meta: vocab type       = SPM
0.00.625.307 I llm_load_print_meta: n_vocab          = 256000
0.00.625.309 I llm_load_print_meta: n_merges         = 0
0.00.625.309 I llm_load_print_meta: vocab_only       = 0
0.00.625.310 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.310 I llm_load_print_meta: n_embd           = 2048
0.00.625.311 I llm_load_print_meta: n_layer          = 18
0.00.625.375 I llm_load_print_meta: n_head           = 8
0.00.625.382 I llm_load_print_meta: n_head_kv        = 1
0.00.625.383 I llm_load_print_meta: n_rot            = 256
0.00.625.383 I llm_load_print_meta: n_swa            = 0
0.00.625.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.389 I llm_load_print_meta: n_gqa            = 8
0.00.625.393 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.398 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.403 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.404 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.409 I llm_load_print_meta: n_ff             = 16384
0.00.625.410 I llm_load_print_meta: n_expert         = 0
0.00.625.410 I llm_load_print_meta: n_expert_used    = 0
0.00.625.411 I llm_load_print_meta: causal attn      = 1
0.00.625.411 I llm_load_print_meta: pooling type     = 0
0.00.625.411 I llm_load_print_meta: rope type        = 2
0.00.625.412 I llm_load_print_meta: rope scaling     = linear
0.00.625.414 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.415 I llm_load_print_meta: freq_scale_train = 1
0.00.625.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.416 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.419 I llm_load_print_meta: model type       = 2B
0.00.625.420 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.421 I llm_load_print_meta: model params     = 2.51 B
0.00.625.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.432 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.433 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.443 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.443 I llm_load_print_meta: max token length = 93
0.00.727.673 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.727.684 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.727.685 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.727.685 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.727.686 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.727.687 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.733.522 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.529 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.530 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.530 I llama_new_context_with_model: n_batch       = 2048
0.00.733.531 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.531 I llama_new_context_with_model: flash_attn    = 0
0.00.733.534 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.535 I llama_new_context_with_model: freq_scale    = 1
0.00.733.536 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.748.456 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.748.496 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.748.620 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.174 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.751.178 I llama_new_context_with_model: graph nodes  = 601
0.00.751.179 I llama_new_context_with_model: graph splits = 1
0.00.751.203 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.692 I main: llama threadpool init, n_threads = 4
0.01.356.706 I 
0.01.356.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.815 I 
0.01.357.043 I sampler seed: 587672719
0.01.357.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.065 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.066 I 
 increably, and then slumped back in exhaustion. The setting sun cast long shadows across the deserted road, a melancholic backdrop to the quiet hum of the wind

0.14.906.894 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.24 tokens per second)
0.14.906.899 I llama_perf_context_print:        load time =    1353.81 ms
0.14.906.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.906.903 I llama_perf_context_print:        eval time =   13459.70 ms /    32 runs   (  420.62 ms per token,     2.38 tokens per second)
0.14.906.904 I llama_perf_context_print:       total time =   13550.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.715 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.743 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.747 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.749 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.751 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.758 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.767 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.773 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.782 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.788 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.789 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.934 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.935 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.939 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.942 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.942 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.944 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.952 I llama_model_loader: - type  f32:   37 tensors
0.00.265.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.553 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.122 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.013 I llm_load_vocab: special tokens cache size = 5
0.00.615.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.493 I llm_load_print_meta: arch             = gemma
0.00.615.493 I llm_load_print_meta: vocab type       = SPM
0.00.615.494 I llm_load_print_meta: n_vocab          = 256000
0.00.615.497 I llm_load_print_meta: n_merges         = 0
0.00.615.497 I llm_load_print_meta: vocab_only       = 0
0.00.615.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.498 I llm_load_print_meta: n_embd           = 2048
0.00.615.498 I llm_load_print_meta: n_layer          = 18
0.00.615.568 I llm_load_print_meta: n_head           = 8
0.00.615.581 I llm_load_print_meta: n_head_kv        = 1
0.00.615.582 I llm_load_print_meta: n_rot            = 256
0.00.615.583 I llm_load_print_meta: n_swa            = 0
0.00.615.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.593 I llm_load_print_meta: n_gqa            = 8
0.00.615.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.612 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.613 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.624 I llm_load_print_meta: n_ff             = 16384
0.00.615.625 I llm_load_print_meta: n_expert         = 0
0.00.615.625 I llm_load_print_meta: n_expert_used    = 0
0.00.615.626 I llm_load_print_meta: causal attn      = 1
0.00.615.628 I llm_load_print_meta: pooling type     = 0
0.00.615.629 I llm_load_print_meta: rope type        = 2
0.00.615.630 I llm_load_print_meta: rope scaling     = linear
0.00.615.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.633 I llm_load_print_meta: freq_scale_train = 1
0.00.615.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.638 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.640 I llm_load_print_meta: model type       = 2B
0.00.615.642 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.642 I llm_load_print_meta: model params     = 2.51 B
0.00.615.658 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.662 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.663 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.665 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.666 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.673 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.675 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.676 I llm_load_print_meta: max token length = 93
0.00.714.599 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.720.895 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.902 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.902 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.903 I llama_new_context_with_model: n_batch       = 2048
0.00.720.903 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.904 I llama_new_context_with_model: flash_attn    = 0
0.00.720.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.907 I llama_new_context_with_model: freq_scale    = 1
0.00.720.908 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.060 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.103 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.231 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.783 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.787 I llama_new_context_with_model: graph nodes  = 601
0.00.738.787 I llama_new_context_with_model: graph splits = 1
0.00.738.813 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.305 I main: llama threadpool init, n_threads = 4
0.01.342.317 I 
0.01.342.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.438 I 
0.01.342.674 I sampler seed: 3451043807
0.01.342.687 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.695 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.699 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.699 I 
 increamental in the following sentence: "The increased demand for goods and services has increamental effects on the economy."

The correct answer is: enhancing.



0.14.899.531 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.44 tokens per second)
0.14.899.534 I llama_perf_context_print:        load time =    1339.38 ms
0.14.899.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.899.536 I llama_perf_context_print:        eval time =   13467.48 ms /    32 runs   (  420.86 ms per token,     2.38 tokens per second)
0.14.899.537 I llama_perf_context_print:       total time =   13557.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.025.412 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.530 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.540 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.542 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.548 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.569 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.731 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.569 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.583 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.584 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.585 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.593 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.594 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.595 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.596 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.597 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.605 I llama_model_loader: - type  f32:   37 tensors
0.00.265.607 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.468 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.177 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.160 I llm_load_vocab: special tokens cache size = 5
0.00.602.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.791 I llm_load_print_meta: arch             = gemma
0.00.602.792 I llm_load_print_meta: vocab type       = SPM
0.00.602.793 I llm_load_print_meta: n_vocab          = 256000
0.00.602.796 I llm_load_print_meta: n_merges         = 0
0.00.602.796 I llm_load_print_meta: vocab_only       = 0
0.00.602.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.797 I llm_load_print_meta: n_embd           = 2048
0.00.602.798 I llm_load_print_meta: n_layer          = 18
0.00.602.863 I llm_load_print_meta: n_head           = 8
0.00.602.872 I llm_load_print_meta: n_head_kv        = 1
0.00.602.874 I llm_load_print_meta: n_rot            = 256
0.00.602.876 I llm_load_print_meta: n_swa            = 0
0.00.602.877 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.898 I llm_load_print_meta: n_gqa            = 8
0.00.602.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.921 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.921 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.929 I llm_load_print_meta: n_ff             = 16384
0.00.602.932 I llm_load_print_meta: n_expert         = 0
0.00.602.933 I llm_load_print_meta: n_expert_used    = 0
0.00.602.933 I llm_load_print_meta: causal attn      = 1
0.00.602.934 I llm_load_print_meta: pooling type     = 0
0.00.602.934 I llm_load_print_meta: rope type        = 2
0.00.602.935 I llm_load_print_meta: rope scaling     = linear
0.00.602.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.938 I llm_load_print_meta: freq_scale_train = 1
0.00.602.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.941 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.951 I llm_load_print_meta: model type       = 2B
0.00.602.953 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.954 I llm_load_print_meta: model params     = 2.51 B
0.00.602.966 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.969 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.974 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.975 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.982 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.986 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.987 I llm_load_print_meta: max token length = 93
0.00.700.329 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.700.340 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.700.341 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.700.341 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.700.342 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.700.343 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.706.507 I llama_new_context_with_model: n_seq_max     = 1
0.00.706.515 I llama_new_context_with_model: n_ctx         = 4096
0.00.706.515 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.706.516 I llama_new_context_with_model: n_batch       = 2048
0.00.706.516 I llama_new_context_with_model: n_ubatch      = 512
0.00.706.517 I llama_new_context_with_model: flash_attn    = 0
0.00.706.519 I llama_new_context_with_model: freq_base     = 10000.0
0.00.706.520 I llama_new_context_with_model: freq_scale    = 1
0.00.706.520 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.721.916 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.721.962 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.722.089 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.703 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.724.707 I llama_new_context_with_model: graph nodes  = 601
0.00.724.707 I llama_new_context_with_model: graph splits = 1
0.00.724.733 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.737 I main: llama threadpool init, n_threads = 4
0.01.329.751 I 
0.01.329.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.872 I 
0.01.330.108 I sampler seed: 3757634024
0.01.330.121 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.129 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.133 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.133 I 
 increably.

I cannot answer this question as it is inappropriate and potentially harmful. [end of text]


0.08.957.321 I llama_perf_sampler_print:    sampling time =      27.69 ms /    19 runs   (    1.46 ms per token,   686.22 tokens per second)
0.08.957.325 I llama_perf_context_print:        load time =    1326.83 ms
0.08.957.327 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.957.329 I llama_perf_context_print:        eval time =    7575.76 ms /    18 runs   (  420.88 ms per token,     2.38 tokens per second)
0.08.957.330 I llama_perf_context_print:       total time =    7627.59 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.757 I main: load the model and apply lora adapter, if any
0.00.025.212 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.221 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.308 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.319 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.321 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.326 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.331 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.332 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.333 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.334 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.340 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.343 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.345 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.123 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.128 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.129 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.132 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.135 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.144 I llama_model_loader: - type  f32:   37 tensors
0.00.265.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.485 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.298 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.170 I llm_load_vocab: special tokens cache size = 5
0.00.610.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.272 I llm_load_print_meta: arch             = gemma
0.00.610.273 I llm_load_print_meta: vocab type       = SPM
0.00.610.273 I llm_load_print_meta: n_vocab          = 256000
0.00.610.276 I llm_load_print_meta: n_merges         = 0
0.00.610.276 I llm_load_print_meta: vocab_only       = 0
0.00.610.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.277 I llm_load_print_meta: n_embd           = 2048
0.00.610.277 I llm_load_print_meta: n_layer          = 18
0.00.610.343 I llm_load_print_meta: n_head           = 8
0.00.610.350 I llm_load_print_meta: n_head_kv        = 1
0.00.610.350 I llm_load_print_meta: n_rot            = 256
0.00.610.351 I llm_load_print_meta: n_swa            = 0
0.00.610.352 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.353 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.357 I llm_load_print_meta: n_gqa            = 8
0.00.610.362 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.367 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.370 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.371 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.376 I llm_load_print_meta: n_ff             = 16384
0.00.610.376 I llm_load_print_meta: n_expert         = 0
0.00.610.377 I llm_load_print_meta: n_expert_used    = 0
0.00.610.378 I llm_load_print_meta: causal attn      = 1
0.00.610.379 I llm_load_print_meta: pooling type     = 0
0.00.610.388 I llm_load_print_meta: rope type        = 2
0.00.610.398 I llm_load_print_meta: rope scaling     = linear
0.00.610.400 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.405 I llm_load_print_meta: freq_scale_train = 1
0.00.610.409 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.410 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.410 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.410 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.411 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.411 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.412 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.413 I llm_load_print_meta: model type       = 2B
0.00.610.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.414 I llm_load_print_meta: model params     = 2.51 B
0.00.610.423 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.428 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.429 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.430 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.430 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.435 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.436 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.436 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.443 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.450 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.451 I llm_load_print_meta: max token length = 93
0.00.683.170 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.683.180 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.689.020 I llama_new_context_with_model: n_seq_max     = 1
0.00.689.027 I llama_new_context_with_model: n_ctx         = 4096
0.00.689.027 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.689.027 I llama_new_context_with_model: n_batch       = 2048
0.00.689.028 I llama_new_context_with_model: n_ubatch      = 512
0.00.689.028 I llama_new_context_with_model: flash_attn    = 0
0.00.689.031 I llama_new_context_with_model: freq_base     = 10000.0
0.00.689.031 I llama_new_context_with_model: freq_scale    = 1
0.00.689.032 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.620 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.658 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.332 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.337 I llama_new_context_with_model: graph nodes  = 601
0.00.706.337 I llama_new_context_with_model: graph splits = 1
0.00.706.362 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.373 I main: llama threadpool init, n_threads = 4
0.01.311.385 I 
0.01.311.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.492 I 
0.01.311.718 I sampler seed: 2429448563
0.01.311.730 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.737 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.740 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.740 I 
 maneuvled

I am unable to answer this question as it requires access to personally identifiable information. [end of text]


0.10.196.747 I llama_perf_sampler_print:    sampling time =      32.22 ms /    22 runs   (    1.46 ms per token,   682.81 tokens per second)
0.10.196.750 I llama_perf_context_print:        load time =    1308.52 ms
0.10.196.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.196.763 I llama_perf_context_print:        eval time =    8825.32 ms /    21 runs   (  420.25 ms per token,     2.38 tokens per second)
0.10.196.764 I llama_perf_context_print:       total time =    8885.38 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.943s
user	3m7.132s
sys	0m9.419s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4020 (55fc9733)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200071.93 ms
main:    total time = 200071.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.025.836 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.848 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.939 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.949 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.955 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.956 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.958 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.959 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.961 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.962 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.968 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.970 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.971 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.980 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.697 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.228 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.236 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.239 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.249 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.250 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.258 I llama_model_loader: - type  f32:   37 tensors
0.00.266.261 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.261 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.816 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.796 I llm_load_vocab: special tokens cache size = 5
0.00.605.125 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.197 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.198 I llm_load_print_meta: arch             = gemma
0.00.605.198 I llm_load_print_meta: vocab type       = SPM
0.00.605.200 I llm_load_print_meta: n_vocab          = 256000
0.00.605.202 I llm_load_print_meta: n_merges         = 0
0.00.605.203 I llm_load_print_meta: vocab_only       = 0
0.00.605.203 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.204 I llm_load_print_meta: n_embd           = 2048
0.00.605.204 I llm_load_print_meta: n_layer          = 18
0.00.605.267 I llm_load_print_meta: n_head           = 8
0.00.605.274 I llm_load_print_meta: n_head_kv        = 1
0.00.605.275 I llm_load_print_meta: n_rot            = 256
0.00.605.275 I llm_load_print_meta: n_swa            = 0
0.00.605.276 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.281 I llm_load_print_meta: n_gqa            = 8
0.00.605.285 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.294 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.318 I llm_load_print_meta: n_ff             = 16384
0.00.605.320 I llm_load_print_meta: n_expert         = 0
0.00.605.320 I llm_load_print_meta: n_expert_used    = 0
0.00.605.321 I llm_load_print_meta: causal attn      = 1
0.00.605.321 I llm_load_print_meta: pooling type     = 0
0.00.605.321 I llm_load_print_meta: rope type        = 2
0.00.605.322 I llm_load_print_meta: rope scaling     = linear
0.00.605.324 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.324 I llm_load_print_meta: freq_scale_train = 1
0.00.605.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.326 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.326 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.326 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.327 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.328 I llm_load_print_meta: model type       = 2B
0.00.605.329 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.338 I llm_load_print_meta: model params     = 2.51 B
0.00.605.350 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.352 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.352 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.358 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.359 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.359 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.360 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.370 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.370 I llm_load_print_meta: max token length = 93
0.00.669.882 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.669.892 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.669.893 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.669.893 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.669.895 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.669.895 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.676.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.676.011 I llama_new_context_with_model: n_ctx         = 4096
0.00.676.011 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.676.012 I llama_new_context_with_model: n_batch       = 2048
0.00.676.012 I llama_new_context_with_model: n_ubatch      = 512
0.00.676.013 I llama_new_context_with_model: flash_attn    = 0
0.00.676.015 I llama_new_context_with_model: freq_base     = 10000.0
0.00.676.016 I llama_new_context_with_model: freq_scale    = 1
0.00.676.017 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.690.951 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.690.990 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.691.115 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.693.685 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.693.689 I llama_new_context_with_model: graph nodes  = 601
0.00.693.689 I llama_new_context_with_model: graph splits = 1
0.00.693.715 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.799 I main: llama threadpool init, n_threads = 4
0.01.264.812 I 
0.01.264.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.925 I 
0.01.265.152 I sampler seed: 320730588
0.01.265.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.171 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.265.175 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.175 I 
 encompantly.

**Answer:**

I am unable to provide an answer as I am not sentient and do not have personal opinions or emotions. [end of text]


0.11.418.764 I llama_perf_sampler_print:    sampling time =      45.99 ms /    31 runs   (    1.48 ms per token,   674.00 tokens per second)
0.11.418.782 I llama_perf_context_print:        load time =    1261.93 ms
0.11.418.784 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.418.785 I llama_perf_context_print:        eval time =   10069.85 ms /    30 runs   (  335.66 ms per token,     2.98 tokens per second)
0.11.418.786 I llama_perf_context_print:       total time =   10153.97 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4020 (55fc9733)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198966.96 ms
main:    total time = 198966.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.025.273 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.367 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.379 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.381 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.399 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.366 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.667 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.689 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.697 I llama_model_loader: - type  f32:   37 tensors
0.00.266.699 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.700 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.166 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.148 I llm_load_vocab: special tokens cache size = 5
0.00.604.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.447 I llm_load_print_meta: arch             = gemma
0.00.604.448 I llm_load_print_meta: vocab type       = SPM
0.00.604.449 I llm_load_print_meta: n_vocab          = 256000
0.00.604.451 I llm_load_print_meta: n_merges         = 0
0.00.604.451 I llm_load_print_meta: vocab_only       = 0
0.00.604.452 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.452 I llm_load_print_meta: n_embd           = 2048
0.00.604.453 I llm_load_print_meta: n_layer          = 18
0.00.604.515 I llm_load_print_meta: n_head           = 8
0.00.604.523 I llm_load_print_meta: n_head_kv        = 1
0.00.604.524 I llm_load_print_meta: n_rot            = 256
0.00.604.525 I llm_load_print_meta: n_swa            = 0
0.00.604.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.530 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.535 I llm_load_print_meta: n_gqa            = 8
0.00.604.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.545 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.547 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.568 I llm_load_print_meta: n_ff             = 16384
0.00.604.569 I llm_load_print_meta: n_expert         = 0
0.00.604.569 I llm_load_print_meta: n_expert_used    = 0
0.00.604.582 I llm_load_print_meta: causal attn      = 1
0.00.604.586 I llm_load_print_meta: pooling type     = 0
0.00.604.586 I llm_load_print_meta: rope type        = 2
0.00.604.587 I llm_load_print_meta: rope scaling     = linear
0.00.604.588 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.589 I llm_load_print_meta: freq_scale_train = 1
0.00.604.589 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.590 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.590 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.591 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.591 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.591 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.592 I llm_load_print_meta: model type       = 2B
0.00.604.594 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.595 I llm_load_print_meta: model params     = 2.51 B
0.00.604.603 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.604 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.605 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.605 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.607 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.607 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.613 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.615 I llm_load_print_meta: max token length = 93
0.00.666.134 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.671.898 I llama_new_context_with_model: n_seq_max     = 1
0.00.671.905 I llama_new_context_with_model: n_ctx         = 4096
0.00.671.905 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.671.906 I llama_new_context_with_model: n_batch       = 2048
0.00.671.906 I llama_new_context_with_model: n_ubatch      = 512
0.00.671.907 I llama_new_context_with_model: flash_attn    = 0
0.00.671.909 I llama_new_context_with_model: freq_base     = 10000.0
0.00.671.910 I llama_new_context_with_model: freq_scale    = 1
0.00.671.911 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.687.154 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.687.193 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.323 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.890 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.689.893 I llama_new_context_with_model: graph nodes  = 601
0.00.689.894 I llama_new_context_with_model: graph splits = 1
0.00.689.918 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.261.968 I main: llama threadpool init, n_threads = 4
0.01.261.980 I 
0.01.262.085 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.089 I 
0.01.262.315 I sampler seed: 2984364587
0.01.262.328 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.262.334 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.262.337 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.262.338 I 
 seconded in this context.

**Assistant**

I understand. I will ensure to flag this question for appropriate review and response. [end of text]


0.10.770.592 I llama_perf_sampler_print:    sampling time =      43.07 ms /    29 runs   (    1.49 ms per token,   673.39 tokens per second)
0.10.770.596 I llama_perf_context_print:        load time =    1259.05 ms
0.10.770.597 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.770.599 I llama_perf_context_print:        eval time =    9429.96 ms /    28 runs   (  336.78 ms per token,     2.97 tokens per second)
0.10.770.600 I llama_perf_context_print:       total time =    9508.63 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.119s
user	49m57.875s
sys	0m6.368s
