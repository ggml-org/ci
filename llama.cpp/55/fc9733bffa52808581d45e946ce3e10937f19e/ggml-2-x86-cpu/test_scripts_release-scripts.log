+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.001.818 I main: load the model and apply lora adapter, if any
0.00.022.409 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.433 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.437 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.438 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.439 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.446 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.220 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.859 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.753 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.760 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.761 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.762 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.762 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.765 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.767 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.767 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.768 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.771 I llama_model_loader: - type  f32:   37 tensors
0.00.132.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.389 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.272 I llm_load_vocab: special tokens cache size = 5
0.00.267.857 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.873 I llm_load_print_meta: arch             = gemma
0.00.267.873 I llm_load_print_meta: vocab type       = SPM
0.00.267.874 I llm_load_print_meta: n_vocab          = 256000
0.00.267.875 I llm_load_print_meta: n_merges         = 0
0.00.267.875 I llm_load_print_meta: vocab_only       = 0
0.00.267.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.876 I llm_load_print_meta: n_embd           = 2048
0.00.267.876 I llm_load_print_meta: n_layer          = 18
0.00.267.887 I llm_load_print_meta: n_head           = 8
0.00.267.888 I llm_load_print_meta: n_head_kv        = 1
0.00.267.889 I llm_load_print_meta: n_rot            = 256
0.00.267.889 I llm_load_print_meta: n_swa            = 0
0.00.267.889 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.891 I llm_load_print_meta: n_gqa            = 8
0.00.267.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.894 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.896 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.896 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.896 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.897 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.898 I llm_load_print_meta: n_ff             = 16384
0.00.267.898 I llm_load_print_meta: n_expert         = 0
0.00.267.898 I llm_load_print_meta: n_expert_used    = 0
0.00.267.899 I llm_load_print_meta: causal attn      = 1
0.00.267.899 I llm_load_print_meta: pooling type     = 0
0.00.267.899 I llm_load_print_meta: rope type        = 2
0.00.267.900 I llm_load_print_meta: rope scaling     = linear
0.00.267.901 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.901 I llm_load_print_meta: freq_scale_train = 1
0.00.267.902 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.902 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.902 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.903 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.903 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.904 I llm_load_print_meta: model type       = 2B
0.00.267.904 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.905 I llm_load_print_meta: model params     = 2.51 B
0.00.267.906 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.907 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.908 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.909 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.909 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.910 I llm_load_print_meta: max token length = 93
0.00.370.277 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.370.286 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.370.286 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.370.287 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.370.287 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.370.288 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.512 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.519 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.519 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.519 I llama_new_context_with_model: n_batch       = 2048
0.00.375.520 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.520 I llama_new_context_with_model: flash_attn    = 0
0.00.375.523 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.524 I llama_new_context_with_model: freq_scale    = 1
0.00.375.525 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.500 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.594 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.856 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.864 I llama_new_context_with_model: graph nodes  = 601
0.00.391.865 I llama_new_context_with_model: graph splits = 1
0.00.391.866 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.988 I main: llama threadpool init, n_threads = 4
0.00.480.002 I 
0.00.480.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.082 I 
0.00.480.129 I sampler seed: 17323992
0.00.480.140 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.143 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.143 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.144 I 
 increasities in the comments. [end of text]


0.00.973.756 I llama_perf_sampler_print:    sampling time =       1.04 ms /     8 runs   (    0.13 ms per token,  7670.18 tokens per second)
0.00.973.759 I llama_perf_context_print:        load time =     478.15 ms
0.00.973.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.973.762 I llama_perf_context_print:        eval time =     488.63 ms /     7 runs   (   69.80 ms per token,    14.33 tokens per second)
0.00.973.763 I llama_perf_context_print:       total time =     493.78 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.022.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.309 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.322 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.322 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.323 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.323 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.324 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.329 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.330 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.330 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.331 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.682 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.475 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.308 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.309 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.310 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.311 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.313 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.316 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.316 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.317 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.318 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.319 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.323 I llama_model_loader: - type  f32:   37 tensors
0.00.132.324 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.300 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.409 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.966 I llm_load_vocab: special tokens cache size = 5
0.00.265.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.665 I llm_load_print_meta: arch             = gemma
0.00.265.666 I llm_load_print_meta: vocab type       = SPM
0.00.265.667 I llm_load_print_meta: n_vocab          = 256000
0.00.265.667 I llm_load_print_meta: n_merges         = 0
0.00.265.667 I llm_load_print_meta: vocab_only       = 0
0.00.265.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.668 I llm_load_print_meta: n_embd           = 2048
0.00.265.668 I llm_load_print_meta: n_layer          = 18
0.00.265.681 I llm_load_print_meta: n_head           = 8
0.00.265.682 I llm_load_print_meta: n_head_kv        = 1
0.00.265.682 I llm_load_print_meta: n_rot            = 256
0.00.265.683 I llm_load_print_meta: n_swa            = 0
0.00.265.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.683 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.684 I llm_load_print_meta: n_gqa            = 8
0.00.265.685 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.686 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.687 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.688 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.688 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.689 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.689 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.690 I llm_load_print_meta: n_ff             = 16384
0.00.265.690 I llm_load_print_meta: n_expert         = 0
0.00.265.690 I llm_load_print_meta: n_expert_used    = 0
0.00.265.691 I llm_load_print_meta: causal attn      = 1
0.00.265.691 I llm_load_print_meta: pooling type     = 0
0.00.265.691 I llm_load_print_meta: rope type        = 2
0.00.265.692 I llm_load_print_meta: rope scaling     = linear
0.00.265.693 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.694 I llm_load_print_meta: freq_scale_train = 1
0.00.265.694 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.695 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.695 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.695 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.696 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.696 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.696 I llm_load_print_meta: model type       = 2B
0.00.265.697 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.698 I llm_load_print_meta: model params     = 2.51 B
0.00.265.698 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.699 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.699 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.699 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.700 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.700 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.701 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.701 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.702 I llm_load_print_meta: max token length = 93
0.00.362.528 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.012 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.018 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.019 I llama_new_context_with_model: n_batch       = 2048
0.00.368.019 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.020 I llama_new_context_with_model: flash_attn    = 0
0.00.368.022 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.023 I llama_new_context_with_model: freq_scale    = 1
0.00.368.024 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.935 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.948 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.260 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.267 I llama_new_context_with_model: graph nodes  = 601
0.00.384.268 I llama_new_context_with_model: graph splits = 1
0.00.384.270 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.886 I main: llama threadpool init, n_threads = 4
0.00.465.901 I 
0.00.465.978 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.981 I 
0.00.466.027 I sampler seed: 2764359234
0.00.466.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.041 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.041 I 
 increasities by turning the page and voila! The text magically appears on the opposite side.

This is a metaphor for the way our thoughts and beliefs can appear

0.02.670.312 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7093.72 tokens per second)
0.02.670.315 I llama_perf_context_print:        load time =     464.03 ms
0.02.670.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.670.318 I llama_perf_context_print:        eval time =    2186.08 ms /    32 runs   (   68.31 ms per token,    14.64 tokens per second)
0.02.670.318 I llama_perf_context_print:       total time =    2204.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.827 I main: load the model and apply lora adapter, if any
0.00.028.093 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.028.103 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.028.111 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.116 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.118 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.130 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.131 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.132 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.119 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.951 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.952 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.953 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.954 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.956 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.957 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.958 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.958 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.144.959 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.963 I llama_model_loader: - type  f32:   37 tensors
0.00.144.964 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.563 I llm_load_vocab: special tokens cache size = 5
0.00.283.234 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.250 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.251 I llm_load_print_meta: arch             = gemma
0.00.283.251 I llm_load_print_meta: vocab type       = SPM
0.00.283.252 I llm_load_print_meta: n_vocab          = 256000
0.00.283.252 I llm_load_print_meta: n_merges         = 0
0.00.283.253 I llm_load_print_meta: vocab_only       = 0
0.00.283.253 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.253 I llm_load_print_meta: n_embd           = 2048
0.00.283.254 I llm_load_print_meta: n_layer          = 18
0.00.283.266 I llm_load_print_meta: n_head           = 8
0.00.283.267 I llm_load_print_meta: n_head_kv        = 1
0.00.283.267 I llm_load_print_meta: n_rot            = 256
0.00.283.268 I llm_load_print_meta: n_swa            = 0
0.00.283.268 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.268 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.269 I llm_load_print_meta: n_gqa            = 8
0.00.283.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.271 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.272 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.273 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.274 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.274 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.274 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.275 I llm_load_print_meta: n_ff             = 16384
0.00.283.275 I llm_load_print_meta: n_expert         = 0
0.00.283.276 I llm_load_print_meta: n_expert_used    = 0
0.00.283.276 I llm_load_print_meta: causal attn      = 1
0.00.283.276 I llm_load_print_meta: pooling type     = 0
0.00.283.277 I llm_load_print_meta: rope type        = 2
0.00.283.277 I llm_load_print_meta: rope scaling     = linear
0.00.283.278 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.279 I llm_load_print_meta: freq_scale_train = 1
0.00.283.279 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.280 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.280 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.281 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.281 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.281 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.281 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.282 I llm_load_print_meta: model type       = 2B
0.00.283.282 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.283 I llm_load_print_meta: model params     = 2.51 B
0.00.283.284 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.284 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.285 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.285 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.286 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.287 I llm_load_print_meta: max token length = 93
0.00.382.530 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.382.535 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.382.535 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.382.536 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.382.536 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.382.537 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.387.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.677 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.677 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.678 I llama_new_context_with_model: n_batch       = 2048
0.00.387.678 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.678 I llama_new_context_with_model: flash_attn    = 0
0.00.387.681 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.682 I llama_new_context_with_model: freq_scale    = 1
0.00.387.682 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.412 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.426 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.127 I llama_new_context_with_model: graph nodes  = 601
0.00.404.128 I llama_new_context_with_model: graph splits = 1
0.00.404.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.344 I main: llama threadpool init, n_threads = 4
0.00.489.356 I 
0.00.489.430 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.433 I 
0.00.489.473 I sampler seed: 2541999708
0.00.489.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.486 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.487 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.487 I 
 increasively. [end of text]


0.00.763.554 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8183.31 tokens per second)
0.00.763.556 I llama_perf_context_print:        load time =     487.50 ms
0.00.763.557 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.763.559 I llama_perf_context_print:        eval time =     270.70 ms /     4 runs   (   67.68 ms per token,    14.78 tokens per second)
0.00.763.559 I llama_perf_context_print:       total time =     274.22 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.558 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.022.337 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.348 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.355 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.372 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.373 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.381 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.382 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.383 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.775 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.920 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.921 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.921 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.922 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.923 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.924 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.926 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.926 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.927 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.927 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.928 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.932 I llama_model_loader: - type  f32:   37 tensors
0.00.132.933 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.106 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.658 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.245 I llm_load_vocab: special tokens cache size = 5
0.00.284.566 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.581 I llm_load_print_meta: arch             = gemma
0.00.284.581 I llm_load_print_meta: vocab type       = SPM
0.00.284.582 I llm_load_print_meta: n_vocab          = 256000
0.00.284.583 I llm_load_print_meta: n_merges         = 0
0.00.284.583 I llm_load_print_meta: vocab_only       = 0
0.00.284.583 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.584 I llm_load_print_meta: n_embd           = 2048
0.00.284.584 I llm_load_print_meta: n_layer          = 18
0.00.284.596 I llm_load_print_meta: n_head           = 8
0.00.284.596 I llm_load_print_meta: n_head_kv        = 1
0.00.284.597 I llm_load_print_meta: n_rot            = 256
0.00.284.597 I llm_load_print_meta: n_swa            = 0
0.00.284.597 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.598 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.599 I llm_load_print_meta: n_gqa            = 8
0.00.284.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.603 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.603 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.604 I llm_load_print_meta: n_ff             = 16384
0.00.284.605 I llm_load_print_meta: n_expert         = 0
0.00.284.605 I llm_load_print_meta: n_expert_used    = 0
0.00.284.605 I llm_load_print_meta: causal attn      = 1
0.00.284.606 I llm_load_print_meta: pooling type     = 0
0.00.284.606 I llm_load_print_meta: rope type        = 2
0.00.284.606 I llm_load_print_meta: rope scaling     = linear
0.00.284.608 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.608 I llm_load_print_meta: freq_scale_train = 1
0.00.284.609 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.609 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.609 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.610 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.610 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.611 I llm_load_print_meta: model type       = 2B
0.00.284.611 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.612 I llm_load_print_meta: model params     = 2.51 B
0.00.284.613 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.613 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.614 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.614 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.615 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.616 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.617 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.617 I llm_load_print_meta: max token length = 93
0.00.356.463 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.356.469 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.472 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.478 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.478 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.479 I llama_new_context_with_model: n_batch       = 2048
0.00.361.479 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.480 I llama_new_context_with_model: flash_attn    = 0
0.00.361.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.483 I llama_new_context_with_model: freq_scale    = 1
0.00.361.484 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.833 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.936 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.175 I llama_new_context_with_model: graph nodes  = 601
0.00.377.175 I llama_new_context_with_model: graph splits = 1
0.00.377.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.618 I main: llama threadpool init, n_threads = 4
0.00.464.630 I 
0.00.464.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.707 I 
0.00.464.747 I sampler seed: 319256029
0.00.464.758 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.761 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.762 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.762 I 
 increably.

I am unable to understand the provided context. Could you please provide more information about the context? [end of text]


0.02.208.839 I llama_perf_sampler_print:    sampling time =       3.88 ms /    25 runs   (    0.16 ms per token,  6436.66 tokens per second)
0.02.208.842 I llama_perf_context_print:        load time =     462.76 ms
0.02.208.843 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.208.846 I llama_perf_context_print:        eval time =    1729.63 ms /    24 runs   (   72.07 ms per token,    13.88 tokens per second)
0.02.208.847 I llama_perf_context_print:       total time =    1744.23 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.405s
user	0m21.749s
sys	0m9.488s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4020 (55fc9733)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32001.81 ms
main:    total time = 32001.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.602 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.912 I main: load the model and apply lora adapter, if any
0.00.022.623 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.634 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.643 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.649 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.655 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.657 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.658 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.658 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.659 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.663 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.664 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.664 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.665 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.666 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.708 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.716 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.717 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.718 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.718 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.719 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.720 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.725 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.726 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.727 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.727 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.733 I llama_model_loader: - type  f32:   37 tensors
0.00.132.735 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.735 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.228 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.354 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.001 I llm_load_vocab: special tokens cache size = 5
0.00.273.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.968 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.968 I llm_load_print_meta: arch             = gemma
0.00.273.969 I llm_load_print_meta: vocab type       = SPM
0.00.273.970 I llm_load_print_meta: n_vocab          = 256000
0.00.273.970 I llm_load_print_meta: n_merges         = 0
0.00.273.971 I llm_load_print_meta: vocab_only       = 0
0.00.273.972 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.972 I llm_load_print_meta: n_embd           = 2048
0.00.273.972 I llm_load_print_meta: n_layer          = 18
0.00.273.984 I llm_load_print_meta: n_head           = 8
0.00.273.985 I llm_load_print_meta: n_head_kv        = 1
0.00.273.985 I llm_load_print_meta: n_rot            = 256
0.00.273.985 I llm_load_print_meta: n_swa            = 0
0.00.273.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.986 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.987 I llm_load_print_meta: n_gqa            = 8
0.00.273.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.989 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.990 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.991 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.992 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.992 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.993 I llm_load_print_meta: n_ff             = 16384
0.00.273.993 I llm_load_print_meta: n_expert         = 0
0.00.273.994 I llm_load_print_meta: n_expert_used    = 0
0.00.273.994 I llm_load_print_meta: causal attn      = 1
0.00.273.994 I llm_load_print_meta: pooling type     = 0
0.00.273.995 I llm_load_print_meta: rope type        = 2
0.00.273.995 I llm_load_print_meta: rope scaling     = linear
0.00.273.996 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.997 I llm_load_print_meta: freq_scale_train = 1
0.00.273.997 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.998 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.998 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.998 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.999 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.999 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.999 I llm_load_print_meta: model type       = 2B
0.00.274.000 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.001 I llm_load_print_meta: model params     = 2.51 B
0.00.274.002 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.002 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.003 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.004 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.004 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.004 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.004 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.005 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.005 I llm_load_print_meta: max token length = 93
0.00.337.373 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.337.381 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.337.381 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.337.382 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.337.383 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.337.383 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.649 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.656 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.657 I llama_new_context_with_model: n_batch       = 2048
0.00.342.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.657 I llama_new_context_with_model: flash_attn    = 0
0.00.342.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.660 I llama_new_context_with_model: freq_scale    = 1
0.00.342.661 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.719 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.114 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.118 I llama_new_context_with_model: graph nodes  = 601
0.00.359.119 I llama_new_context_with_model: graph splits = 1
0.00.359.121 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.512 I main: llama threadpool init, n_threads = 4
0.00.436.526 I 
0.00.436.597 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.601 I 
0.00.436.646 I sampler seed: 1397289514
0.00.436.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.661 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.662 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.662 I 
 seconde est une marque de vêtements de mode unisex. Elle propose des vêtements de haute qualité, avec des designs uniques et des matériaux de haute qualité.

**

0.02.098.410 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6503.74 tokens per second)
0.02.098.412 I llama_perf_context_print:        load time =     434.58 ms
0.02.098.414 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.098.415 I llama_perf_context_print:        eval time =    1643.22 ms /    32 runs   (   51.35 ms per token,    19.47 tokens per second)
0.02.098.416 I llama_perf_context_print:       total time =    1661.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4020 (55fc9733)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32033.61 ms
main:    total time = 32033.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 4020 (55fc9733) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.022.377 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.402 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.410 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.412 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.414 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.415 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.416 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.417 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.422 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.423 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.425 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.426 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.862 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.702 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.709 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.710 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.711 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.712 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.713 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.714 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.718 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.719 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.723 I llama_model_loader: - type  f32:   37 tensors
0.00.132.725 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.725 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.015 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.781 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.378 I llm_load_vocab: special tokens cache size = 5
0.00.265.978 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.995 I llm_load_print_meta: arch             = gemma
0.00.265.996 I llm_load_print_meta: vocab type       = SPM
0.00.265.996 I llm_load_print_meta: n_vocab          = 256000
0.00.265.997 I llm_load_print_meta: n_merges         = 0
0.00.265.997 I llm_load_print_meta: vocab_only       = 0
0.00.265.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.998 I llm_load_print_meta: n_embd           = 2048
0.00.265.998 I llm_load_print_meta: n_layer          = 18
0.00.266.010 I llm_load_print_meta: n_head           = 8
0.00.266.011 I llm_load_print_meta: n_head_kv        = 1
0.00.266.011 I llm_load_print_meta: n_rot            = 256
0.00.266.012 I llm_load_print_meta: n_swa            = 0
0.00.266.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.013 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.014 I llm_load_print_meta: n_gqa            = 8
0.00.266.015 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.017 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.020 I llm_load_print_meta: n_ff             = 16384
0.00.266.020 I llm_load_print_meta: n_expert         = 0
0.00.266.021 I llm_load_print_meta: n_expert_used    = 0
0.00.266.021 I llm_load_print_meta: causal attn      = 1
0.00.266.021 I llm_load_print_meta: pooling type     = 0
0.00.266.021 I llm_load_print_meta: rope type        = 2
0.00.266.022 I llm_load_print_meta: rope scaling     = linear
0.00.266.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.024 I llm_load_print_meta: freq_scale_train = 1
0.00.266.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.025 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.026 I llm_load_print_meta: model type       = 2B
0.00.266.026 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.027 I llm_load_print_meta: model params     = 2.51 B
0.00.266.028 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.030 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.030 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.030 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.031 I llm_load_print_meta: max token length = 93
0.00.600.953 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.606.679 I llama_new_context_with_model: n_seq_max     = 1
0.00.606.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.606.688 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.606.689 I llama_new_context_with_model: n_batch       = 2048
0.00.606.689 I llama_new_context_with_model: n_ubatch      = 512
0.00.606.690 I llama_new_context_with_model: flash_attn    = 0
0.00.606.694 I llama_new_context_with_model: freq_base     = 10000.0
0.00.606.695 I llama_new_context_with_model: freq_scale    = 1
0.00.606.696 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.622.586 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.622.602 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.622.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.624.000 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.624.007 I llama_new_context_with_model: graph nodes  = 601
0.00.624.008 I llama_new_context_with_model: graph splits = 1
0.00.624.010 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.700.645 I main: llama threadpool init, n_threads = 4
0.00.700.659 I 
0.00.700.744 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.700.748 I 
0.00.700.792 I sampler seed: 3019512948
0.00.700.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.700.809 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.700.809 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.700.809 I 
 increasities. [end of text]


0.00.898.741 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8169.93 tokens per second)
0.00.898.743 I llama_perf_context_print:        load time =     698.73 ms
0.00.898.744 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.898.745 I llama_perf_context_print:        eval time =     194.66 ms /     4 runs   (   48.66 ms per token,    20.55 tokens per second)
0.00.898.746 I llama_perf_context_print:       total time =     198.10 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.824s
user	8m9.015s
sys	0m6.804s
