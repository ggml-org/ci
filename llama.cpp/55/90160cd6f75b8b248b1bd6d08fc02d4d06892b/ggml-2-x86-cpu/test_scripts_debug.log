+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.000.906 I main: load the model and apply lora adapter, if any
0.00.023.725 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.739 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.835 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.847 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.849 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.856 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.860 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.864 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.867 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.884 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.984 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.526 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.528 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.529 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.530 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.532 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.533 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.538 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.539 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.542 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.355.544 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.553 I llama_model_loader: - type  f32:   37 tensors
0.00.355.556 I llama_model_loader: - type q8_0:  127 tensors
0.00.648.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.779.489 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.780.530 I llm_load_vocab: special tokens cache size = 5
0.00.969.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.969.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.969.867 I llm_load_print_meta: arch             = gemma
0.00.969.868 I llm_load_print_meta: vocab type       = SPM
0.00.969.869 I llm_load_print_meta: n_vocab          = 256000
0.00.969.871 I llm_load_print_meta: n_merges         = 0
0.00.969.872 I llm_load_print_meta: vocab_only       = 0
0.00.969.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.969.873 I llm_load_print_meta: n_embd           = 2048
0.00.969.873 I llm_load_print_meta: n_layer          = 18
0.00.969.935 I llm_load_print_meta: n_head           = 8
0.00.969.943 I llm_load_print_meta: n_head_kv        = 1
0.00.969.944 I llm_load_print_meta: n_rot            = 256
0.00.969.944 I llm_load_print_meta: n_swa            = 0
0.00.969.944 I llm_load_print_meta: n_embd_head_k    = 256
0.00.969.945 I llm_load_print_meta: n_embd_head_v    = 256
0.00.969.949 I llm_load_print_meta: n_gqa            = 8
0.00.969.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.969.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.969.986 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.969.988 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.969.989 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.969.989 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.969.990 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.969.995 I llm_load_print_meta: n_ff             = 16384
0.00.969.996 I llm_load_print_meta: n_expert         = 0
0.00.969.996 I llm_load_print_meta: n_expert_used    = 0
0.00.969.996 I llm_load_print_meta: causal attn      = 1
0.00.969.997 I llm_load_print_meta: pooling type     = 0
0.00.969.998 I llm_load_print_meta: rope type        = 2
0.00.969.998 I llm_load_print_meta: rope scaling     = linear
0.00.970.000 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.970.001 I llm_load_print_meta: freq_scale_train = 1
0.00.970.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.970.009 I llm_load_print_meta: rope_finetuned   = unknown
0.00.970.012 I llm_load_print_meta: ssm_d_conv       = 0
0.00.970.013 I llm_load_print_meta: ssm_d_inner      = 0
0.00.970.013 I llm_load_print_meta: ssm_d_state      = 0
0.00.970.014 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.970.014 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.970.023 I llm_load_print_meta: model type       = 2B
0.00.970.025 I llm_load_print_meta: model ftype      = Q8_0
0.00.970.026 I llm_load_print_meta: model params     = 2.51 B
0.00.970.035 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.970.035 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.970.036 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.970.037 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.970.038 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.970.038 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.970.039 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.970.040 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.970.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.970.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.970.047 I llm_load_print_meta: max token length = 93
0.01.071.142 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.071.153 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.071.154 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.071.155 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.071.155 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.071.156 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.077.299 I llama_new_context_with_model: n_seq_max     = 1
0.01.077.309 I llama_new_context_with_model: n_ctx         = 4096
0.01.077.309 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.077.310 I llama_new_context_with_model: n_batch       = 2048
0.01.077.310 I llama_new_context_with_model: n_ubatch      = 512
0.01.077.311 I llama_new_context_with_model: flash_attn    = 0
0.01.077.314 I llama_new_context_with_model: freq_base     = 10000.0
0.01.077.315 I llama_new_context_with_model: freq_scale    = 1
0.01.077.316 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.092.270 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.092.313 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.092.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.095.040 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.095.044 I llama_new_context_with_model: graph nodes  = 601
0.01.095.044 I llama_new_context_with_model: graph splits = 1
0.01.095.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.705.781 I main: llama threadpool init, n_threads = 4
0.01.705.800 I 
0.01.705.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.705.924 I 
0.01.706.161 I sampler seed: 1606176170
0.01.706.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.706.187 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.706.188 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.706.189 I 
 increably!

I'm not sure if you're aware of this, but there is a phenomenon known as quantum entanglement. This is a phenomenon in

0.15.294.519 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.21 tokens per second)
0.15.294.543 I llama_perf_context_print:        load time =    1704.77 ms
0.15.294.545 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.294.547 I llama_perf_context_print:        eval time =   13496.59 ms /    32 runs   (  421.77 ms per token,     2.37 tokens per second)
0.15.294.547 I llama_perf_context_print:       total time =   13588.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.705 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.910 I main: llama backend init
0.00.000.919 I main: load the model and apply lora adapter, if any
0.00.023.797 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.936 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.938 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.954 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.957 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.964 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.966 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.707 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.718 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.723 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.734 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.736 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.744 I llama_model_loader: - type  f32:   37 tensors
0.00.357.746 I llama_model_loader: - type q8_0:  127 tensors
0.00.652.621 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.784.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.785.397 I llm_load_vocab: special tokens cache size = 5
0.00.973.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.973.772 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.973.773 I llm_load_print_meta: arch             = gemma
0.00.973.774 I llm_load_print_meta: vocab type       = SPM
0.00.973.775 I llm_load_print_meta: n_vocab          = 256000
0.00.973.777 I llm_load_print_meta: n_merges         = 0
0.00.973.777 I llm_load_print_meta: vocab_only       = 0
0.00.973.778 I llm_load_print_meta: n_ctx_train      = 8192
0.00.973.778 I llm_load_print_meta: n_embd           = 2048
0.00.973.779 I llm_load_print_meta: n_layer          = 18
0.00.973.845 I llm_load_print_meta: n_head           = 8
0.00.973.853 I llm_load_print_meta: n_head_kv        = 1
0.00.973.854 I llm_load_print_meta: n_rot            = 256
0.00.973.854 I llm_load_print_meta: n_swa            = 0
0.00.973.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.973.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.973.859 I llm_load_print_meta: n_gqa            = 8
0.00.973.864 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.973.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.973.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.973.871 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.973.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.973.872 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.973.872 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.973.878 I llm_load_print_meta: n_ff             = 16384
0.00.973.878 I llm_load_print_meta: n_expert         = 0
0.00.973.878 I llm_load_print_meta: n_expert_used    = 0
0.00.973.879 I llm_load_print_meta: causal attn      = 1
0.00.973.879 I llm_load_print_meta: pooling type     = 0
0.00.973.879 I llm_load_print_meta: rope type        = 2
0.00.973.880 I llm_load_print_meta: rope scaling     = linear
0.00.973.881 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.973.881 I llm_load_print_meta: freq_scale_train = 1
0.00.973.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.973.882 I llm_load_print_meta: rope_finetuned   = unknown
0.00.973.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.973.883 I llm_load_print_meta: ssm_d_inner      = 0
0.00.973.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.973.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.973.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.973.884 I llm_load_print_meta: model type       = 2B
0.00.973.885 I llm_load_print_meta: model ftype      = Q8_0
0.00.973.886 I llm_load_print_meta: model params     = 2.51 B
0.00.973.895 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.973.895 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.973.896 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.973.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.973.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.973.900 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.973.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.973.919 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.973.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.973.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.973.931 I llm_load_print_meta: max token length = 93
0.01.070.376 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.076.750 I llama_new_context_with_model: n_seq_max     = 1
0.01.076.762 I llama_new_context_with_model: n_ctx         = 4096
0.01.076.763 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.076.763 I llama_new_context_with_model: n_batch       = 2048
0.01.076.763 I llama_new_context_with_model: n_ubatch      = 512
0.01.076.764 I llama_new_context_with_model: flash_attn    = 0
0.01.076.769 I llama_new_context_with_model: freq_base     = 10000.0
0.01.076.769 I llama_new_context_with_model: freq_scale    = 1
0.01.076.770 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.093.916 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.093.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.094.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.096.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.096.761 I llama_new_context_with_model: graph nodes  = 601
0.01.096.761 I llama_new_context_with_model: graph splits = 1
0.01.096.787 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.707.380 I main: llama threadpool init, n_threads = 4
0.01.707.396 I 
0.01.707.515 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.707.519 I 
0.01.707.756 I sampler seed: 2433261973
0.01.707.769 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.707.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.707.782 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.707.782 I 
 increasities for their "disturbing" content, rather than recognizing the artistry and technical skill involved in creating such art.

It's important to recognize that

0.15.429.227 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.81 tokens per second)
0.15.429.230 I llama_perf_context_print:        load time =    1706.36 ms
0.15.429.232 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.429.246 I llama_perf_context_print:        eval time =   13631.04 ms /    32 runs   (  425.97 ms per token,     2.35 tokens per second)
0.15.429.248 I llama_perf_context_print:       total time =   13721.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.023.556 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.663 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.681 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.689 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.693 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.706 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.709 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.718 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.576 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.588 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.589 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.590 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.592 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.593 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.599 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.600 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.602 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.603 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.605 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.615 I llama_model_loader: - type  f32:   37 tensors
0.00.354.618 I llama_model_loader: - type q8_0:  127 tensors
0.00.651.339 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.783.833 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.784.861 I llm_load_vocab: special tokens cache size = 5
0.00.975.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.975.431 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.975.435 I llm_load_print_meta: arch             = gemma
0.00.975.436 I llm_load_print_meta: vocab type       = SPM
0.00.975.437 I llm_load_print_meta: n_vocab          = 256000
0.00.975.439 I llm_load_print_meta: n_merges         = 0
0.00.975.440 I llm_load_print_meta: vocab_only       = 0
0.00.975.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.975.440 I llm_load_print_meta: n_embd           = 2048
0.00.975.441 I llm_load_print_meta: n_layer          = 18
0.00.975.510 I llm_load_print_meta: n_head           = 8
0.00.975.521 I llm_load_print_meta: n_head_kv        = 1
0.00.975.522 I llm_load_print_meta: n_rot            = 256
0.00.975.523 I llm_load_print_meta: n_swa            = 0
0.00.975.523 I llm_load_print_meta: n_embd_head_k    = 256
0.00.975.523 I llm_load_print_meta: n_embd_head_v    = 256
0.00.975.528 I llm_load_print_meta: n_gqa            = 8
0.00.975.532 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.975.537 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.975.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.975.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.975.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.975.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.975.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.975.549 I llm_load_print_meta: n_ff             = 16384
0.00.975.549 I llm_load_print_meta: n_expert         = 0
0.00.975.550 I llm_load_print_meta: n_expert_used    = 0
0.00.975.550 I llm_load_print_meta: causal attn      = 1
0.00.975.551 I llm_load_print_meta: pooling type     = 0
0.00.975.552 I llm_load_print_meta: rope type        = 2
0.00.975.552 I llm_load_print_meta: rope scaling     = linear
0.00.975.554 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.975.555 I llm_load_print_meta: freq_scale_train = 1
0.00.975.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.975.558 I llm_load_print_meta: rope_finetuned   = unknown
0.00.975.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.975.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.975.559 I llm_load_print_meta: ssm_d_state      = 0
0.00.975.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.975.559 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.975.560 I llm_load_print_meta: model type       = 2B
0.00.975.562 I llm_load_print_meta: model ftype      = Q8_0
0.00.975.563 I llm_load_print_meta: model params     = 2.51 B
0.00.975.720 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.975.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.975.724 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.975.725 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.975.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.975.726 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.975.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.975.727 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.975.734 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.975.736 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.975.736 I llm_load_print_meta: max token length = 93
0.01.053.139 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.053.153 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.154 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.053.154 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.053.155 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.156 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.058.897 I llama_new_context_with_model: n_seq_max     = 1
0.01.058.904 I llama_new_context_with_model: n_ctx         = 4096
0.01.058.904 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.058.905 I llama_new_context_with_model: n_batch       = 2048
0.01.058.905 I llama_new_context_with_model: n_ubatch      = 512
0.01.058.905 I llama_new_context_with_model: flash_attn    = 0
0.01.058.908 I llama_new_context_with_model: freq_base     = 10000.0
0.01.058.909 I llama_new_context_with_model: freq_scale    = 1
0.01.058.909 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.073.412 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.073.453 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.073.582 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.076.142 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.076.146 I llama_new_context_with_model: graph nodes  = 601
0.01.076.147 I llama_new_context_with_model: graph splits = 1
0.01.076.170 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.684.618 I main: llama threadpool init, n_threads = 4
0.01.684.637 I 
0.01.684.776 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.684.781 I 
0.01.685.056 I sampler seed: 1293379098
0.01.685.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.685.082 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.685.083 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.685.083 I 
 increasities:

I. The narrator's dream was a haunting vision of a dark forest with twisted trees and a skeletal tree standing solitary in the center.

0.15.301.640 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.57 tokens per second)
0.15.301.643 I llama_perf_context_print:        load time =    1683.67 ms
0.15.301.645 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.301.646 I llama_perf_context_print:        eval time =   13527.52 ms /    32 runs   (  422.73 ms per token,     2.37 tokens per second)
0.15.301.647 I llama_perf_context_print:       total time =   13617.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.695 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.901 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.023.878 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.986 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.002 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.014 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.015 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.018 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.037 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.039 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.206 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.757 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.067 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.084 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.085 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.086 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.088 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.093 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.097 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.357.099 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.110 I llama_model_loader: - type  f32:   37 tensors
0.00.357.112 I llama_model_loader: - type q8_0:  127 tensors
0.00.645.918 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.775.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.776.844 I llm_load_vocab: special tokens cache size = 5
0.00.967.084 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.967.160 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.967.161 I llm_load_print_meta: arch             = gemma
0.00.967.162 I llm_load_print_meta: vocab type       = SPM
0.00.967.163 I llm_load_print_meta: n_vocab          = 256000
0.00.967.165 I llm_load_print_meta: n_merges         = 0
0.00.967.166 I llm_load_print_meta: vocab_only       = 0
0.00.967.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.967.167 I llm_load_print_meta: n_embd           = 2048
0.00.967.167 I llm_load_print_meta: n_layer          = 18
0.00.967.242 I llm_load_print_meta: n_head           = 8
0.00.967.249 I llm_load_print_meta: n_head_kv        = 1
0.00.967.250 I llm_load_print_meta: n_rot            = 256
0.00.967.250 I llm_load_print_meta: n_swa            = 0
0.00.967.251 I llm_load_print_meta: n_embd_head_k    = 256
0.00.967.251 I llm_load_print_meta: n_embd_head_v    = 256
0.00.967.268 I llm_load_print_meta: n_gqa            = 8
0.00.967.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.967.278 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.967.279 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.967.280 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.967.281 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.967.281 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.967.282 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.967.286 I llm_load_print_meta: n_ff             = 16384
0.00.967.287 I llm_load_print_meta: n_expert         = 0
0.00.967.287 I llm_load_print_meta: n_expert_used    = 0
0.00.967.287 I llm_load_print_meta: causal attn      = 1
0.00.967.288 I llm_load_print_meta: pooling type     = 0
0.00.967.289 I llm_load_print_meta: rope type        = 2
0.00.967.289 I llm_load_print_meta: rope scaling     = linear
0.00.967.290 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.967.296 I llm_load_print_meta: freq_scale_train = 1
0.00.967.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.967.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.967.297 I llm_load_print_meta: ssm_d_conv       = 0
0.00.967.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.967.312 I llm_load_print_meta: ssm_d_state      = 0
0.00.967.313 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.967.313 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.967.314 I llm_load_print_meta: model type       = 2B
0.00.967.315 I llm_load_print_meta: model ftype      = Q8_0
0.00.967.316 I llm_load_print_meta: model params     = 2.51 B
0.00.967.325 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.967.326 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.967.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.967.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.967.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.967.337 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.967.341 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.967.341 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.967.348 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.967.350 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.967.351 I llm_load_print_meta: max token length = 93
0.01.040.886 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.040.898 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.046.827 I llama_new_context_with_model: n_seq_max     = 1
0.01.046.835 I llama_new_context_with_model: n_ctx         = 4096
0.01.046.835 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.046.836 I llama_new_context_with_model: n_batch       = 2048
0.01.046.836 I llama_new_context_with_model: n_ubatch      = 512
0.01.046.837 I llama_new_context_with_model: flash_attn    = 0
0.01.046.841 I llama_new_context_with_model: freq_base     = 10000.0
0.01.046.842 I llama_new_context_with_model: freq_scale    = 1
0.01.046.843 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.062.185 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.062.226 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.062.362 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.065.077 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.065.082 I llama_new_context_with_model: graph nodes  = 601
0.01.065.082 I llama_new_context_with_model: graph splits = 1
0.01.065.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.672.711 I main: llama threadpool init, n_threads = 4
0.01.672.728 I 
0.01.672.853 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.672.857 I 
0.01.673.092 I sampler seed: 3850740357
0.01.673.105 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.673.115 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.673.118 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.673.119 I 
 increasities is a form of digital storytelling that uses multimedia elements to create an immersive and engaging experience. It can be used to tell stories, educate viewers, or

0.15.304.081 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.15 tokens per second)
0.15.304.084 I llama_perf_context_print:        load time =    1671.69 ms
0.15.304.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.304.087 I llama_perf_context_print:        eval time =   13541.06 ms /    32 runs   (  423.16 ms per token,     2.36 tokens per second)
0.15.304.088 I llama_perf_context_print:       total time =   13631.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.293s
user	3m52.423s
sys	0m9.606s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4242 (5590160c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186513.14 ms
main:    total time = 186513.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.786 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.799 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.915 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.923 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.945 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.947 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.961 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.966 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.967 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.782 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.122 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.138 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.139 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.140 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.145 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.148 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.149 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.160 I llama_model_loader: - type  f32:   37 tensors
0.00.356.163 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.164 I llama_model_loader: - type q6_K:   19 tensors
0.00.675.516 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.839.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.840.297 I llm_load_vocab: special tokens cache size = 5
0.01.043.109 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.043.182 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.043.183 I llm_load_print_meta: arch             = gemma
0.01.043.183 I llm_load_print_meta: vocab type       = SPM
0.01.043.184 I llm_load_print_meta: n_vocab          = 256000
0.01.043.187 I llm_load_print_meta: n_merges         = 0
0.01.043.188 I llm_load_print_meta: vocab_only       = 0
0.01.043.188 I llm_load_print_meta: n_ctx_train      = 8192
0.01.043.189 I llm_load_print_meta: n_embd           = 2048
0.01.043.189 I llm_load_print_meta: n_layer          = 18
0.01.043.254 I llm_load_print_meta: n_head           = 8
0.01.043.261 I llm_load_print_meta: n_head_kv        = 1
0.01.043.262 I llm_load_print_meta: n_rot            = 256
0.01.043.262 I llm_load_print_meta: n_swa            = 0
0.01.043.263 I llm_load_print_meta: n_embd_head_k    = 256
0.01.043.263 I llm_load_print_meta: n_embd_head_v    = 256
0.01.043.268 I llm_load_print_meta: n_gqa            = 8
0.01.043.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.043.277 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.043.279 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.043.281 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.043.281 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.043.282 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.043.282 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.043.313 I llm_load_print_meta: n_ff             = 16384
0.01.043.315 I llm_load_print_meta: n_expert         = 0
0.01.043.316 I llm_load_print_meta: n_expert_used    = 0
0.01.043.316 I llm_load_print_meta: causal attn      = 1
0.01.043.317 I llm_load_print_meta: pooling type     = 0
0.01.043.324 I llm_load_print_meta: rope type        = 2
0.01.043.325 I llm_load_print_meta: rope scaling     = linear
0.01.043.327 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.043.327 I llm_load_print_meta: freq_scale_train = 1
0.01.043.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.043.329 I llm_load_print_meta: rope_finetuned   = unknown
0.01.043.333 I llm_load_print_meta: ssm_d_conv       = 0
0.01.043.333 I llm_load_print_meta: ssm_d_inner      = 0
0.01.043.334 I llm_load_print_meta: ssm_d_state      = 0
0.01.043.334 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.043.334 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.043.335 I llm_load_print_meta: model type       = 2B
0.01.043.336 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.043.337 I llm_load_print_meta: model params     = 2.51 B
0.01.043.347 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.043.348 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.043.349 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.043.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.043.351 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.043.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.043.352 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.043.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.043.360 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.043.362 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.043.362 I llm_load_print_meta: max token length = 93
0.01.105.616 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.105.627 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.105.627 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.105.628 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.105.629 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.105.629 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.111.636 I llama_new_context_with_model: n_seq_max     = 1
0.01.111.644 I llama_new_context_with_model: n_ctx         = 4096
0.01.111.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.111.645 I llama_new_context_with_model: n_batch       = 2048
0.01.111.646 I llama_new_context_with_model: n_ubatch      = 512
0.01.111.646 I llama_new_context_with_model: flash_attn    = 0
0.01.111.649 I llama_new_context_with_model: freq_base     = 10000.0
0.01.111.650 I llama_new_context_with_model: freq_scale    = 1
0.01.111.651 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.127.513 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.127.557 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.127.687 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.130.314 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.130.318 I llama_new_context_with_model: graph nodes  = 601
0.01.130.318 I llama_new_context_with_model: graph splits = 1
0.01.130.341 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.716.353 I main: llama threadpool init, n_threads = 4
0.01.716.371 I 
0.01.716.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.716.498 I 
0.01.716.738 I sampler seed: 953651631
0.01.716.753 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.716.762 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.716.765 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.716.765 I 
 increasities of the universe and the existence of extraterrestrial civilizations.

**The Universe's Mysteries**

The vast expanse of the universe remains shrouded in mystery

0.12.933.126 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.06 tokens per second)
0.12.933.129 I llama_perf_context_print:        load time =    1715.36 ms
0.12.933.141 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.933.144 I llama_perf_context_print:        eval time =   11127.05 ms /    32 runs   (  347.72 ms per token,     2.88 tokens per second)
0.12.933.145 I llama_perf_context_print:       total time =   11216.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4242 (5590160c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186593.20 ms
main:    total time = 186593.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4242 (5590160c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.295 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.426 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.431 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.443 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.449 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.451 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.468 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.480 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.589 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.215 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.512 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.514 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.515 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.516 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.518 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.524 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.534 I llama_model_loader: - type  f32:   37 tensors
0.00.364.536 I llama_model_loader: - type q4_K:  108 tensors
0.00.364.537 I llama_model_loader: - type q6_K:   19 tensors
0.00.660.021 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.791.075 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.792.128 I llm_load_vocab: special tokens cache size = 5
0.00.980.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.980.150 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.980.155 I llm_load_print_meta: arch             = gemma
0.00.980.155 I llm_load_print_meta: vocab type       = SPM
0.00.980.156 I llm_load_print_meta: n_vocab          = 256000
0.00.980.159 I llm_load_print_meta: n_merges         = 0
0.00.980.159 I llm_load_print_meta: vocab_only       = 0
0.00.980.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.980.160 I llm_load_print_meta: n_embd           = 2048
0.00.980.161 I llm_load_print_meta: n_layer          = 18
0.00.980.226 I llm_load_print_meta: n_head           = 8
0.00.980.236 I llm_load_print_meta: n_head_kv        = 1
0.00.980.237 I llm_load_print_meta: n_rot            = 256
0.00.980.237 I llm_load_print_meta: n_swa            = 0
0.00.980.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.980.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.980.244 I llm_load_print_meta: n_gqa            = 8
0.00.980.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.980.254 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.980.255 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.980.257 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.980.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.980.258 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.980.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.980.292 I llm_load_print_meta: n_ff             = 16384
0.00.980.293 I llm_load_print_meta: n_expert         = 0
0.00.980.293 I llm_load_print_meta: n_expert_used    = 0
0.00.980.293 I llm_load_print_meta: causal attn      = 1
0.00.980.293 I llm_load_print_meta: pooling type     = 0
0.00.980.294 I llm_load_print_meta: rope type        = 2
0.00.980.294 I llm_load_print_meta: rope scaling     = linear
0.00.980.296 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.980.297 I llm_load_print_meta: freq_scale_train = 1
0.00.980.298 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.980.298 I llm_load_print_meta: rope_finetuned   = unknown
0.00.980.299 I llm_load_print_meta: ssm_d_conv       = 0
0.00.980.299 I llm_load_print_meta: ssm_d_inner      = 0
0.00.980.299 I llm_load_print_meta: ssm_d_state      = 0
0.00.980.302 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.980.302 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.980.303 I llm_load_print_meta: model type       = 2B
0.00.980.305 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.980.305 I llm_load_print_meta: model params     = 2.51 B
0.00.980.315 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.980.316 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.980.318 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.980.319 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.980.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.980.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.980.320 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.980.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.980.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.980.328 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.980.328 I llm_load_print_meta: max token length = 93
0.01.038.418 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.044.796 I llama_new_context_with_model: n_seq_max     = 1
0.01.044.805 I llama_new_context_with_model: n_ctx         = 4096
0.01.044.806 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.044.806 I llama_new_context_with_model: n_batch       = 2048
0.01.044.807 I llama_new_context_with_model: n_ubatch      = 512
0.01.044.807 I llama_new_context_with_model: flash_attn    = 0
0.01.044.811 I llama_new_context_with_model: freq_base     = 10000.0
0.01.044.812 I llama_new_context_with_model: freq_scale    = 1
0.01.044.812 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.061.198 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.061.258 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.061.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.064.022 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.064.027 I llama_new_context_with_model: graph nodes  = 601
0.01.064.027 I llama_new_context_with_model: graph splits = 1
0.01.064.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.651.876 I main: llama threadpool init, n_threads = 4
0.01.651.893 I 
0.01.652.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.652.019 I 
0.01.652.251 I sampler seed: 109264105
0.01.652.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.652.277 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.652.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.652.278 I 
 seconded in the second sentence of the paragraph. [end of text]


0.05.536.864 I llama_perf_sampler_print:    sampling time =      17.03 ms /    12 runs   (    1.42 ms per token,   704.51 tokens per second)
0.05.536.867 I llama_perf_context_print:        load time =    1650.92 ms
0.05.536.880 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.536.882 I llama_perf_context_print:        eval time =    3852.83 ms /    11 runs   (  350.26 ms per token,     2.86 tokens per second)
0.05.536.883 I llama_perf_context_print:       total time =    3885.00 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m34.514s
user	46m19.612s
sys	0m6.394s
