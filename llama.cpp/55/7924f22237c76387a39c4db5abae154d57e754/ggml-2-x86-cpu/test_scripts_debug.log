+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.000.822 I main: load the model and apply lora adapter, if any
0.00.025.798 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.805 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.891 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.903 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.908 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.913 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.914 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.915 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.917 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.925 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.926 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.927 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.025 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.084 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.093 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.095 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.096 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.097 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.098 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.100 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.107 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.108 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.116 I llama_model_loader: - type  f32:   37 tensors
0.00.272.119 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.255 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.758 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.647 I llm_load_vocab: special tokens cache size = 5
0.00.607.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.491 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.492 I llm_load_print_meta: arch             = gemma
0.00.607.493 I llm_load_print_meta: vocab type       = SPM
0.00.607.494 I llm_load_print_meta: n_vocab          = 256000
0.00.607.496 I llm_load_print_meta: n_merges         = 0
0.00.607.497 I llm_load_print_meta: vocab_only       = 0
0.00.607.497 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.497 I llm_load_print_meta: n_embd           = 2048
0.00.607.498 I llm_load_print_meta: n_layer          = 18
0.00.607.563 I llm_load_print_meta: n_head           = 8
0.00.607.571 I llm_load_print_meta: n_head_kv        = 1
0.00.607.575 I llm_load_print_meta: n_rot            = 256
0.00.607.576 I llm_load_print_meta: n_swa            = 0
0.00.607.576 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.576 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.581 I llm_load_print_meta: n_gqa            = 8
0.00.607.585 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.591 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.594 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.600 I llm_load_print_meta: n_ff             = 16384
0.00.607.601 I llm_load_print_meta: n_expert         = 0
0.00.607.601 I llm_load_print_meta: n_expert_used    = 0
0.00.607.602 I llm_load_print_meta: causal attn      = 1
0.00.607.602 I llm_load_print_meta: pooling type     = 0
0.00.607.603 I llm_load_print_meta: rope type        = 2
0.00.607.604 I llm_load_print_meta: rope scaling     = linear
0.00.607.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.606 I llm_load_print_meta: freq_scale_train = 1
0.00.607.606 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.609 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.610 I llm_load_print_meta: model type       = 2B
0.00.607.611 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.611 I llm_load_print_meta: model params     = 2.51 B
0.00.607.621 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.621 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.625 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.625 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.626 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.626 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.627 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.627 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.633 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.635 I llm_load_print_meta: max token length = 93
0.00.708.998 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.709.009 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.709.009 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.709.010 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.709.011 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.709.011 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.715.012 I llama_new_context_with_model: n_seq_max     = 1
0.00.715.020 I llama_new_context_with_model: n_ctx         = 4096
0.00.715.020 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.715.020 I llama_new_context_with_model: n_batch       = 2048
0.00.715.021 I llama_new_context_with_model: n_ubatch      = 512
0.00.715.021 I llama_new_context_with_model: flash_attn    = 0
0.00.715.025 I llama_new_context_with_model: freq_base     = 10000.0
0.00.715.026 I llama_new_context_with_model: freq_scale    = 1
0.00.715.027 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.730.720 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.730.761 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.730.892 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.512 I llama_new_context_with_model: graph nodes  = 601
0.00.733.512 I llama_new_context_with_model: graph splits = 1
0.00.733.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.689 I main: llama threadpool init, n_threads = 4
0.01.341.704 I 
0.01.341.818 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.821 I 
0.01.342.050 I sampler seed: 2239884829
0.01.342.063 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.342.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.342.072 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.342.072 I 
 increasels is an ancient tradition that involves the creation of intricate patterns using clay.

**a) What is the purpose of increasels?**
**b

0.14.953.356 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.02 tokens per second)
0.14.953.360 I llama_perf_context_print:        load time =    1340.78 ms
0.14.953.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.953.374 I llama_perf_context_print:        eval time =   13523.04 ms /    32 runs   (  422.60 ms per token,     2.37 tokens per second)
0.14.953.375 I llama_perf_context_print:       total time =   13611.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.862 I main: load the model and apply lora adapter, if any
0.00.022.945 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.051 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.053 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.062 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.063 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.064 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.072 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.187 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.150 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.231 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.232 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.234 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.237 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.238 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.239 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.240 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.242 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.249 I llama_model_loader: - type  f32:   37 tensors
0.00.268.252 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.828 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.127 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.030 I llm_load_vocab: special tokens cache size = 5
0.00.595.486 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.554 I llm_load_print_meta: arch             = gemma
0.00.595.554 I llm_load_print_meta: vocab type       = SPM
0.00.595.555 I llm_load_print_meta: n_vocab          = 256000
0.00.595.557 I llm_load_print_meta: n_merges         = 0
0.00.595.558 I llm_load_print_meta: vocab_only       = 0
0.00.595.558 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.558 I llm_load_print_meta: n_embd           = 2048
0.00.595.559 I llm_load_print_meta: n_layer          = 18
0.00.595.621 I llm_load_print_meta: n_head           = 8
0.00.595.629 I llm_load_print_meta: n_head_kv        = 1
0.00.595.629 I llm_load_print_meta: n_rot            = 256
0.00.595.630 I llm_load_print_meta: n_swa            = 0
0.00.595.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.635 I llm_load_print_meta: n_gqa            = 8
0.00.595.640 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.646 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.666 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.681 I llm_load_print_meta: n_ff             = 16384
0.00.595.682 I llm_load_print_meta: n_expert         = 0
0.00.595.682 I llm_load_print_meta: n_expert_used    = 0
0.00.595.687 I llm_load_print_meta: causal attn      = 1
0.00.595.687 I llm_load_print_meta: pooling type     = 0
0.00.595.687 I llm_load_print_meta: rope type        = 2
0.00.595.688 I llm_load_print_meta: rope scaling     = linear
0.00.595.689 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.690 I llm_load_print_meta: freq_scale_train = 1
0.00.595.690 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.691 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.694 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.694 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.695 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.695 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.695 I llm_load_print_meta: model type       = 2B
0.00.595.696 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.697 I llm_load_print_meta: model params     = 2.51 B
0.00.595.706 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.707 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.710 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.711 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.712 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.718 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.719 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.719 I llm_load_print_meta: max token length = 93
0.00.690.541 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.696.395 I llama_new_context_with_model: n_seq_max     = 1
0.00.696.404 I llama_new_context_with_model: n_ctx         = 4096
0.00.696.405 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.696.405 I llama_new_context_with_model: n_batch       = 2048
0.00.696.406 I llama_new_context_with_model: n_ubatch      = 512
0.00.696.406 I llama_new_context_with_model: flash_attn    = 0
0.00.696.410 I llama_new_context_with_model: freq_base     = 10000.0
0.00.696.410 I llama_new_context_with_model: freq_scale    = 1
0.00.696.411 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.071 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.116 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.244 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.817 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.822 I llama_new_context_with_model: graph nodes  = 601
0.00.714.822 I llama_new_context_with_model: graph splits = 1
0.00.714.847 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.635 I main: llama threadpool init, n_threads = 4
0.01.329.650 I 
0.01.329.755 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.759 I 
0.01.329.989 I sampler seed: 2969154805
0.01.330.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.012 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.012 I 
 seconally. [end of text]


0.03.065.836 I llama_perf_sampler_print:    sampling time =       6.42 ms /     5 runs   (    1.28 ms per token,   778.82 tokens per second)
0.03.065.840 I llama_perf_context_print:        load time =    1328.68 ms
0.03.065.842 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.065.843 I llama_perf_context_print:        eval time =    1722.73 ms /     4 runs   (  430.68 ms per token,     2.32 tokens per second)
0.03.065.852 I llama_perf_context_print:       total time =    1736.21 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.097 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.108 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.213 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.215 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.217 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.219 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.220 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.221 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.231 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.407 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.421 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.429 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.430 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.431 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.432 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.433 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.438 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.439 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.440 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.441 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.442 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.451 I llama_model_loader: - type  f32:   37 tensors
0.00.269.454 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.977 I llm_load_vocab: special tokens cache size = 5
0.00.596.181 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.251 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.256 I llm_load_print_meta: arch             = gemma
0.00.596.256 I llm_load_print_meta: vocab type       = SPM
0.00.596.257 I llm_load_print_meta: n_vocab          = 256000
0.00.596.259 I llm_load_print_meta: n_merges         = 0
0.00.596.260 I llm_load_print_meta: vocab_only       = 0
0.00.596.260 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.261 I llm_load_print_meta: n_embd           = 2048
0.00.596.261 I llm_load_print_meta: n_layer          = 18
0.00.596.326 I llm_load_print_meta: n_head           = 8
0.00.596.336 I llm_load_print_meta: n_head_kv        = 1
0.00.596.338 I llm_load_print_meta: n_rot            = 256
0.00.596.338 I llm_load_print_meta: n_swa            = 0
0.00.596.338 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.339 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.344 I llm_load_print_meta: n_gqa            = 8
0.00.596.348 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.353 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.355 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.356 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.357 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.357 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.363 I llm_load_print_meta: n_ff             = 16384
0.00.596.364 I llm_load_print_meta: n_expert         = 0
0.00.596.364 I llm_load_print_meta: n_expert_used    = 0
0.00.596.365 I llm_load_print_meta: causal attn      = 1
0.00.596.365 I llm_load_print_meta: pooling type     = 0
0.00.596.366 I llm_load_print_meta: rope type        = 2
0.00.596.366 I llm_load_print_meta: rope scaling     = linear
0.00.596.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.369 I llm_load_print_meta: freq_scale_train = 1
0.00.596.369 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.379 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.381 I llm_load_print_meta: model type       = 2B
0.00.596.382 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.383 I llm_load_print_meta: model params     = 2.51 B
0.00.596.392 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.393 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.393 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.395 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.396 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.396 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.402 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.404 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.404 I llm_load_print_meta: max token length = 93
0.00.673.214 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.673.224 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.673.225 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.673.226 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.673.226 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.673.227 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.679.093 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.100 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.101 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.101 I llama_new_context_with_model: n_batch       = 2048
0.00.679.102 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.102 I llama_new_context_with_model: flash_attn    = 0
0.00.679.105 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.105 I llama_new_context_with_model: freq_scale    = 1
0.00.679.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.081 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.121 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.696.820 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.696.824 I llama_new_context_with_model: graph nodes  = 601
0.00.696.824 I llama_new_context_with_model: graph splits = 1
0.00.696.848 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.092 I main: llama threadpool init, n_threads = 4
0.01.306.106 I 
0.01.306.209 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.213 I 
0.01.306.443 I sampler seed: 1124921572
0.01.306.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.306.462 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.306.466 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.306.466 I 
 increably.

I am a large language model, trained by Google. I am able to generate human-quality text and translate languages.

**Capabilities:**

0.14.906.424 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.77 tokens per second)
0.14.906.428 I llama_perf_context_print:        load time =    1305.17 ms
0.14.906.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.906.432 I llama_perf_context_print:        eval time =   13510.64 ms /    32 runs   (  422.21 ms per token,     2.37 tokens per second)
0.14.906.436 I llama_perf_context_print:       total time =   13600.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.613 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.809 I main: llama backend init
0.00.000.817 I main: load the model and apply lora adapter, if any
0.00.024.159 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.288 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.297 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.309 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.327 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.329 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.527 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.225 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.581 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.592 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.593 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.594 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.598 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.599 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.601 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.602 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.278.603 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.611 I llama_model_loader: - type  f32:   37 tensors
0.00.278.613 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.941 I llm_load_vocab: special tokens cache size = 5
0.00.615.117 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.190 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.194 I llm_load_print_meta: arch             = gemma
0.00.615.195 I llm_load_print_meta: vocab type       = SPM
0.00.615.196 I llm_load_print_meta: n_vocab          = 256000
0.00.615.198 I llm_load_print_meta: n_merges         = 0
0.00.615.198 I llm_load_print_meta: vocab_only       = 0
0.00.615.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.199 I llm_load_print_meta: n_embd           = 2048
0.00.615.199 I llm_load_print_meta: n_layer          = 18
0.00.615.262 I llm_load_print_meta: n_head           = 8
0.00.615.272 I llm_load_print_meta: n_head_kv        = 1
0.00.615.273 I llm_load_print_meta: n_rot            = 256
0.00.615.273 I llm_load_print_meta: n_swa            = 0
0.00.615.274 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.274 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.279 I llm_load_print_meta: n_gqa            = 8
0.00.615.284 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.293 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.294 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.300 I llm_load_print_meta: n_ff             = 16384
0.00.615.300 I llm_load_print_meta: n_expert         = 0
0.00.615.301 I llm_load_print_meta: n_expert_used    = 0
0.00.615.301 I llm_load_print_meta: causal attn      = 1
0.00.615.302 I llm_load_print_meta: pooling type     = 0
0.00.615.303 I llm_load_print_meta: rope type        = 2
0.00.615.311 I llm_load_print_meta: rope scaling     = linear
0.00.615.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.314 I llm_load_print_meta: freq_scale_train = 1
0.00.615.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.330 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.331 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.331 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.332 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.333 I llm_load_print_meta: model type       = 2B
0.00.615.334 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.335 I llm_load_print_meta: model params     = 2.51 B
0.00.615.344 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.353 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.354 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.355 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.355 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.356 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.357 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.357 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.363 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.365 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.365 I llm_load_print_meta: max token length = 93
0.00.689.045 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.689.055 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.803 I llama_new_context_with_model: n_seq_max     = 1
0.00.694.811 I llama_new_context_with_model: n_ctx         = 4096
0.00.694.812 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.694.812 I llama_new_context_with_model: n_batch       = 2048
0.00.694.812 I llama_new_context_with_model: n_ubatch      = 512
0.00.694.813 I llama_new_context_with_model: flash_attn    = 0
0.00.694.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.694.817 I llama_new_context_with_model: freq_scale    = 1
0.00.694.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.710.375 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.710.418 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.710.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.309 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.713.312 I llama_new_context_with_model: graph nodes  = 601
0.00.713.313 I llama_new_context_with_model: graph splits = 1
0.00.713.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.863 I main: llama threadpool init, n_threads = 4
0.01.327.880 I 
0.01.327.988 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.992 I 
0.01.328.244 I sampler seed: 3170694446
0.01.328.257 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.328.263 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.328.266 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.328.267 I 
 increasities. [end of text]


0.03.029.335 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.62 tokens per second)
0.03.029.338 I llama_perf_context_print:        load time =    1326.96 ms
0.03.029.339 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.029.353 I llama_perf_context_print:        eval time =    1688.69 ms /     4 runs   (  422.17 ms per token,     2.37 tokens per second)
0.03.029.354 I llama_perf_context_print:       total time =    1701.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.726s
user	2m15.347s
sys	0m9.346s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4127 (557924f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187441.48 ms
main:    total time = 187441.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.979 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.992 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.097 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.107 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.108 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.111 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.112 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.113 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.124 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.280 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.289 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.290 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.291 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.292 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.294 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.295 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.298 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.299 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.300 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.301 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.311 I llama_model_loader: - type  f32:   37 tensors
0.00.270.313 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.314 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.574 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.823 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.752 I llm_load_vocab: special tokens cache size = 5
0.00.594.212 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.283 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.284 I llm_load_print_meta: arch             = gemma
0.00.594.285 I llm_load_print_meta: vocab type       = SPM
0.00.594.285 I llm_load_print_meta: n_vocab          = 256000
0.00.594.288 I llm_load_print_meta: n_merges         = 0
0.00.594.288 I llm_load_print_meta: vocab_only       = 0
0.00.594.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.289 I llm_load_print_meta: n_embd           = 2048
0.00.594.289 I llm_load_print_meta: n_layer          = 18
0.00.594.375 I llm_load_print_meta: n_head           = 8
0.00.594.383 I llm_load_print_meta: n_head_kv        = 1
0.00.594.384 I llm_load_print_meta: n_rot            = 256
0.00.594.385 I llm_load_print_meta: n_swa            = 0
0.00.594.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.390 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.394 I llm_load_print_meta: n_gqa            = 8
0.00.594.399 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.407 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.407 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.408 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.411 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.416 I llm_load_print_meta: n_ff             = 16384
0.00.594.416 I llm_load_print_meta: n_expert         = 0
0.00.594.417 I llm_load_print_meta: n_expert_used    = 0
0.00.594.426 I llm_load_print_meta: causal attn      = 1
0.00.594.427 I llm_load_print_meta: pooling type     = 0
0.00.594.427 I llm_load_print_meta: rope type        = 2
0.00.594.428 I llm_load_print_meta: rope scaling     = linear
0.00.594.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.432 I llm_load_print_meta: freq_scale_train = 1
0.00.594.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.434 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.435 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.435 I llm_load_print_meta: model type       = 2B
0.00.594.436 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.445 I llm_load_print_meta: model params     = 2.51 B
0.00.594.453 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.454 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.455 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.455 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.456 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.467 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.468 I llm_load_print_meta: max token length = 93
0.00.656.464 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.656.472 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.656.473 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.656.474 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.656.474 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.656.475 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.662.230 I llama_new_context_with_model: n_seq_max     = 1
0.00.662.238 I llama_new_context_with_model: n_ctx         = 4096
0.00.662.238 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.662.238 I llama_new_context_with_model: n_batch       = 2048
0.00.662.239 I llama_new_context_with_model: n_ubatch      = 512
0.00.662.239 I llama_new_context_with_model: flash_attn    = 0
0.00.662.241 I llama_new_context_with_model: freq_base     = 10000.0
0.00.662.242 I llama_new_context_with_model: freq_scale    = 1
0.00.662.243 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.676.755 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.676.797 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.676.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.679.518 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.679.522 I llama_new_context_with_model: graph nodes  = 601
0.00.679.523 I llama_new_context_with_model: graph splits = 1
0.00.679.544 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.431 I main: llama threadpool init, n_threads = 4
0.01.265.446 I 
0.01.265.553 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.557 I 
0.01.265.786 I sampler seed: 1851193927
0.01.265.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.804 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.265.807 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.807 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and provide information within

0.12.397.502 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.17 tokens per second)
0.12.397.509 I llama_perf_context_print:        load time =    1264.45 ms
0.12.397.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.397.512 I llama_perf_context_print:        eval time =   11042.97 ms /    32 runs   (  345.09 ms per token,     2.90 tokens per second)
0.12.397.513 I llama_perf_context_print:       total time =   11132.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4127 (557924f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187595.64 ms
main:    total time = 187595.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4127 (557924f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.375 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.478 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.493 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.494 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.501 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.502 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.503 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.504 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.505 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.512 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.514 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.931 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.049 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.059 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.061 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.062 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.063 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.064 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.065 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.094 I llama_model_loader: - type  f32:   37 tensors
0.00.270.097 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.097 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.775 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.140 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.027 I llm_load_vocab: special tokens cache size = 5
0.00.633.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.457 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.459 I llm_load_print_meta: arch             = gemma
0.00.633.459 I llm_load_print_meta: vocab type       = SPM
0.00.633.460 I llm_load_print_meta: n_vocab          = 256000
0.00.633.462 I llm_load_print_meta: n_merges         = 0
0.00.633.463 I llm_load_print_meta: vocab_only       = 0
0.00.633.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.463 I llm_load_print_meta: n_embd           = 2048
0.00.633.464 I llm_load_print_meta: n_layer          = 18
0.00.633.528 I llm_load_print_meta: n_head           = 8
0.00.633.535 I llm_load_print_meta: n_head_kv        = 1
0.00.633.536 I llm_load_print_meta: n_rot            = 256
0.00.633.536 I llm_load_print_meta: n_swa            = 0
0.00.633.537 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.537 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.542 I llm_load_print_meta: n_gqa            = 8
0.00.633.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.552 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.554 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.556 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.556 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.557 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.563 I llm_load_print_meta: n_ff             = 16384
0.00.633.563 I llm_load_print_meta: n_expert         = 0
0.00.633.564 I llm_load_print_meta: n_expert_used    = 0
0.00.633.564 I llm_load_print_meta: causal attn      = 1
0.00.633.565 I llm_load_print_meta: pooling type     = 0
0.00.633.565 I llm_load_print_meta: rope type        = 2
0.00.633.565 I llm_load_print_meta: rope scaling     = linear
0.00.633.567 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.568 I llm_load_print_meta: freq_scale_train = 1
0.00.633.568 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.570 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.570 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.571 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.571 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.572 I llm_load_print_meta: model type       = 2B
0.00.633.573 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.633.574 I llm_load_print_meta: model params     = 2.51 B
0.00.633.583 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.633.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.585 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.585 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.592 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.594 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.594 I llm_load_print_meta: max token length = 93
0.00.691.558 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.697.299 I llama_new_context_with_model: n_seq_max     = 1
0.00.697.307 I llama_new_context_with_model: n_ctx         = 4096
0.00.697.307 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.697.308 I llama_new_context_with_model: n_batch       = 2048
0.00.697.308 I llama_new_context_with_model: n_ubatch      = 512
0.00.697.308 I llama_new_context_with_model: flash_attn    = 0
0.00.697.311 I llama_new_context_with_model: freq_base     = 10000.0
0.00.697.311 I llama_new_context_with_model: freq_scale    = 1
0.00.697.312 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.995 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.036 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.161 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.869 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.873 I llama_new_context_with_model: graph nodes  = 601
0.00.714.873 I llama_new_context_with_model: graph splits = 1
0.00.714.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.441 I main: llama threadpool init, n_threads = 4
0.01.300.455 I 
0.01.300.561 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.565 I 
0.01.300.800 I sampler seed: 1506570860
0.01.300.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.820 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.300.820 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.821 I 
 maneuort.

**Answer:**

I am unable to provide answers that promote or contain potentially harmful or inappropriate content. [end of text]


0.10.007.524 I llama_perf_sampler_print:    sampling time =      38.53 ms /    26 runs   (    1.48 ms per token,   674.83 tokens per second)
0.10.007.527 I llama_perf_context_print:        load time =    1299.48 ms
0.10.007.529 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.007.531 I llama_perf_context_print:        eval time =    8637.14 ms /    25 runs   (  345.49 ms per token,     2.89 tokens per second)
0.10.007.543 I llama_perf_context_print:       total time =    8707.09 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.414s
user	46m48.027s
sys	0m6.332s
