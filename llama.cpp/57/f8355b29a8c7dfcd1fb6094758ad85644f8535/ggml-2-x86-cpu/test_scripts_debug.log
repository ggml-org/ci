+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.024.503 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.610 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.612 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.619 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.624 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.626 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.628 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.638 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.639 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.339 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.457 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.461 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.462 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.463 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.469 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.470 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.471 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.472 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.480 I llama_model_loader: - type  f32:   37 tensors
0.00.272.482 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.735 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.257 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.216 I llm_load_vocab: special tokens cache size = 5
0.00.613.935 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.021 I llm_load_print_meta: arch             = gemma
0.00.614.022 I llm_load_print_meta: vocab type       = SPM
0.00.614.023 I llm_load_print_meta: n_vocab          = 256000
0.00.614.025 I llm_load_print_meta: n_merges         = 0
0.00.614.026 I llm_load_print_meta: vocab_only       = 0
0.00.614.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.026 I llm_load_print_meta: n_embd           = 2048
0.00.614.027 I llm_load_print_meta: n_layer          = 18
0.00.614.091 I llm_load_print_meta: n_head           = 8
0.00.614.100 I llm_load_print_meta: n_head_kv        = 1
0.00.614.101 I llm_load_print_meta: n_rot            = 256
0.00.614.102 I llm_load_print_meta: n_swa            = 0
0.00.614.102 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.103 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.107 I llm_load_print_meta: n_gqa            = 8
0.00.614.112 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.122 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.122 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.123 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.128 I llm_load_print_meta: n_ff             = 16384
0.00.614.128 I llm_load_print_meta: n_expert         = 0
0.00.614.129 I llm_load_print_meta: n_expert_used    = 0
0.00.614.129 I llm_load_print_meta: causal attn      = 1
0.00.614.130 I llm_load_print_meta: pooling type     = 0
0.00.614.130 I llm_load_print_meta: rope type        = 2
0.00.614.130 I llm_load_print_meta: rope scaling     = linear
0.00.614.132 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.132 I llm_load_print_meta: freq_scale_train = 1
0.00.614.133 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.134 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.134 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.135 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.136 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.136 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.138 I llm_load_print_meta: model type       = 2B
0.00.614.139 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.140 I llm_load_print_meta: model params     = 2.51 B
0.00.614.141 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.142 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.142 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.145 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.146 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.152 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.154 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.154 I llm_load_print_meta: max token length = 93
0.00.717.150 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.717.156 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.717.157 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.717.158 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.717.159 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.717.160 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.722.973 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.980 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.980 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.981 I llama_new_context_with_model: n_batch       = 2048
0.00.722.981 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.981 I llama_new_context_with_model: flash_attn    = 0
0.00.722.984 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.984 I llama_new_context_with_model: freq_scale    = 1
0.00.722.985 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.203 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.239 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.356 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.987 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.991 I llama_new_context_with_model: graph nodes  = 601
0.00.740.991 I llama_new_context_with_model: graph splits = 1
0.00.741.014 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.501 I main: llama threadpool init, n_threads = 4
0.01.350.519 I 
0.01.350.624 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.628 I 
0.01.350.861 I sampler seed: 2538681959
0.01.350.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.881 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.882 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.882 I 
 increasities.

I am unable to generate a response that meets your requirements as it contains sexually explicit content. [end of text]


0.11.082.870 I llama_perf_sampler_print:    sampling time =      35.49 ms /    24 runs   (    1.48 ms per token,   676.28 tokens per second)
0.11.082.874 I llama_perf_context_print:        load time =    1349.57 ms
0.11.082.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.082.888 I llama_perf_context_print:        eval time =    9667.62 ms /    23 runs   (  420.33 ms per token,     2.38 tokens per second)
0.11.082.890 I llama_perf_context_print:       total time =    9732.38 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.494 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.610 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.622 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.055 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.893 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.894 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.895 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.897 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.902 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.903 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.905 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.906 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.907 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.915 I llama_model_loader: - type  f32:   37 tensors
0.00.271.929 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.495 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.012 I llm_load_vocab: special tokens cache size = 5
0.00.625.041 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.117 I llm_load_print_meta: arch             = gemma
0.00.625.118 I llm_load_print_meta: vocab type       = SPM
0.00.625.119 I llm_load_print_meta: n_vocab          = 256000
0.00.625.121 I llm_load_print_meta: n_merges         = 0
0.00.625.122 I llm_load_print_meta: vocab_only       = 0
0.00.625.122 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.123 I llm_load_print_meta: n_embd           = 2048
0.00.625.123 I llm_load_print_meta: n_layer          = 18
0.00.625.186 I llm_load_print_meta: n_head           = 8
0.00.625.193 I llm_load_print_meta: n_head_kv        = 1
0.00.625.194 I llm_load_print_meta: n_rot            = 256
0.00.625.194 I llm_load_print_meta: n_swa            = 0
0.00.625.194 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.195 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.199 I llm_load_print_meta: n_gqa            = 8
0.00.625.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.210 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.212 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.212 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.213 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.217 I llm_load_print_meta: n_ff             = 16384
0.00.625.218 I llm_load_print_meta: n_expert         = 0
0.00.625.218 I llm_load_print_meta: n_expert_used    = 0
0.00.625.219 I llm_load_print_meta: causal attn      = 1
0.00.625.219 I llm_load_print_meta: pooling type     = 0
0.00.625.219 I llm_load_print_meta: rope type        = 2
0.00.625.220 I llm_load_print_meta: rope scaling     = linear
0.00.625.221 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.222 I llm_load_print_meta: freq_scale_train = 1
0.00.625.222 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.222 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.223 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.223 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.223 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.223 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.224 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.224 I llm_load_print_meta: model type       = 2B
0.00.625.225 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.226 I llm_load_print_meta: model params     = 2.51 B
0.00.625.227 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.228 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.255 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.256 I llm_load_print_meta: max token length = 93
0.00.719.871 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.725.750 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.757 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.758 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.758 I llama_new_context_with_model: n_batch       = 2048
0.00.725.758 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.759 I llama_new_context_with_model: flash_attn    = 0
0.00.725.762 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.762 I llama_new_context_with_model: freq_scale    = 1
0.00.725.763 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.120 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.163 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.279 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.991 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.996 I llama_new_context_with_model: graph nodes  = 601
0.00.743.997 I llama_new_context_with_model: graph splits = 1
0.00.744.019 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.450 I main: llama threadpool init, n_threads = 4
0.01.358.464 I 
0.01.358.570 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.574 I 
0.01.358.801 I sampler seed: 36210654
0.01.358.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.822 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.823 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.823 I 
 increasities with the majestic phoenix.

The phoenix, with its fiery plumage, emerges from the ashes, symbolizing renewal and rebirth. Its gaze, burning with

0.15.064.595 I llama_perf_sampler_print:    sampling time =      49.70 ms /    33 runs   (    1.51 ms per token,   663.92 tokens per second)
0.15.064.599 I llama_perf_context_print:        load time =    1357.49 ms
0.15.064.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.064.622 I llama_perf_context_print:        eval time =   13615.43 ms /    32 runs   (  425.48 ms per token,     2.35 tokens per second)
0.15.064.623 I llama_perf_context_print:       total time =   13706.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.333 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.429 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.449 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.466 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.468 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.591 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.592 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.593 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.598 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.599 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.600 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.601 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.603 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.612 I llama_model_loader: - type  f32:   37 tensors
0.00.273.615 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.527 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.390 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.344 I llm_load_vocab: special tokens cache size = 5
0.00.602.593 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.675 I llm_load_print_meta: arch             = gemma
0.00.602.676 I llm_load_print_meta: vocab type       = SPM
0.00.602.677 I llm_load_print_meta: n_vocab          = 256000
0.00.602.679 I llm_load_print_meta: n_merges         = 0
0.00.602.680 I llm_load_print_meta: vocab_only       = 0
0.00.602.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.681 I llm_load_print_meta: n_embd           = 2048
0.00.602.681 I llm_load_print_meta: n_layer          = 18
0.00.602.744 I llm_load_print_meta: n_head           = 8
0.00.602.751 I llm_load_print_meta: n_head_kv        = 1
0.00.602.755 I llm_load_print_meta: n_rot            = 256
0.00.602.756 I llm_load_print_meta: n_swa            = 0
0.00.602.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.761 I llm_load_print_meta: n_gqa            = 8
0.00.602.766 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.772 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.774 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.775 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.781 I llm_load_print_meta: n_ff             = 16384
0.00.602.782 I llm_load_print_meta: n_expert         = 0
0.00.602.783 I llm_load_print_meta: n_expert_used    = 0
0.00.602.791 I llm_load_print_meta: causal attn      = 1
0.00.602.792 I llm_load_print_meta: pooling type     = 0
0.00.602.793 I llm_load_print_meta: rope type        = 2
0.00.602.793 I llm_load_print_meta: rope scaling     = linear
0.00.602.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.806 I llm_load_print_meta: freq_scale_train = 1
0.00.602.814 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.823 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.824 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.825 I llm_load_print_meta: model type       = 2B
0.00.602.826 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.826 I llm_load_print_meta: model params     = 2.51 B
0.00.602.828 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.828 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.829 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.830 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.831 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.831 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.831 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.838 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.840 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.840 I llm_load_print_meta: max token length = 93
0.00.684.737 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.684.747 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.684.748 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.684.748 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.684.749 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.684.750 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.690.674 I llama_new_context_with_model: n_seq_max     = 1
0.00.690.681 I llama_new_context_with_model: n_ctx         = 4096
0.00.690.681 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.690.681 I llama_new_context_with_model: n_batch       = 2048
0.00.690.682 I llama_new_context_with_model: n_ubatch      = 512
0.00.690.682 I llama_new_context_with_model: flash_attn    = 0
0.00.690.685 I llama_new_context_with_model: freq_base     = 10000.0
0.00.690.686 I llama_new_context_with_model: freq_scale    = 1
0.00.690.687 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.143 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.182 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.299 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.849 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.853 I llama_new_context_with_model: graph nodes  = 601
0.00.707.854 I llama_new_context_with_model: graph splits = 1
0.00.707.876 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.276 I main: llama threadpool init, n_threads = 4
0.01.346.291 I 
0.01.346.394 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.397 I 
0.01.346.625 I sampler seed: 2591347351
0.01.346.637 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.644 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.346.645 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.645 I 
 increasements for the following function:

$$f(x) = x^3 + 3x^2 - 2x + 1$$



0.14.899.974 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.30 tokens per second)
0.14.899.997 I llama_perf_context_print:        load time =    1345.32 ms
0.14.899.998 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.900.007 I llama_perf_context_print:        eval time =   13463.68 ms /    32 runs   (  420.74 ms per token,     2.38 tokens per second)
0.14.900.008 I llama_perf_context_print:       total time =   13553.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.000.920 I main: load the model and apply lora adapter, if any
0.00.023.537 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.646 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.658 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.660 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.673 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.676 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.678 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.680 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.688 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.695 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.697 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.700 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.657 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.124 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.135 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.136 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.137 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.138 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.139 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.140 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.146 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.147 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.277.148 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.157 I llama_model_loader: - type  f32:   37 tensors
0.00.277.160 I llama_model_loader: - type q8_0:  127 tensors
0.00.477.906 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.935 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.922 I llm_load_vocab: special tokens cache size = 5
0.00.644.658 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.741 I llm_load_print_meta: arch             = gemma
0.00.644.742 I llm_load_print_meta: vocab type       = SPM
0.00.644.743 I llm_load_print_meta: n_vocab          = 256000
0.00.644.745 I llm_load_print_meta: n_merges         = 0
0.00.644.746 I llm_load_print_meta: vocab_only       = 0
0.00.644.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.747 I llm_load_print_meta: n_embd           = 2048
0.00.644.747 I llm_load_print_meta: n_layer          = 18
0.00.644.817 I llm_load_print_meta: n_head           = 8
0.00.644.828 I llm_load_print_meta: n_head_kv        = 1
0.00.644.832 I llm_load_print_meta: n_rot            = 256
0.00.644.833 I llm_load_print_meta: n_swa            = 0
0.00.644.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.834 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.841 I llm_load_print_meta: n_gqa            = 8
0.00.644.849 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.861 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.863 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.866 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.875 I llm_load_print_meta: n_ff             = 16384
0.00.644.875 I llm_load_print_meta: n_expert         = 0
0.00.644.876 I llm_load_print_meta: n_expert_used    = 0
0.00.644.876 I llm_load_print_meta: causal attn      = 1
0.00.644.878 I llm_load_print_meta: pooling type     = 0
0.00.644.878 I llm_load_print_meta: rope type        = 2
0.00.644.879 I llm_load_print_meta: rope scaling     = linear
0.00.644.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.881 I llm_load_print_meta: freq_scale_train = 1
0.00.644.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.883 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.884 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.900 I llm_load_print_meta: model type       = 2B
0.00.644.901 I llm_load_print_meta: model ftype      = Q8_0
0.00.644.902 I llm_load_print_meta: model params     = 2.51 B
0.00.644.903 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.644.904 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.905 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.906 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.914 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.925 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.926 I llm_load_print_meta: max token length = 93
0.00.717.344 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.717.351 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.723.491 I llama_new_context_with_model: n_seq_max     = 1
0.00.723.498 I llama_new_context_with_model: n_ctx         = 4096
0.00.723.499 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.723.499 I llama_new_context_with_model: n_batch       = 2048
0.00.723.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.723.500 I llama_new_context_with_model: flash_attn    = 0
0.00.723.502 I llama_new_context_with_model: freq_base     = 10000.0
0.00.723.503 I llama_new_context_with_model: freq_scale    = 1
0.00.723.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.226 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.266 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.983 I llama_new_context_with_model: graph nodes  = 601
0.00.740.984 I llama_new_context_with_model: graph splits = 1
0.00.741.008 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.231 I main: llama threadpool init, n_threads = 4
0.01.349.250 I 
0.01.349.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.388 I 
0.01.349.629 I sampler seed: 3226136851
0.01.349.642 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.649 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.650 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.651 I 
 increasels, a mischievous gnome, and a grumpy goblin.

They were gathered in a dark and dreary forest, their only light source being a flickering torch.

0.14.919.023 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.61 tokens per second)
0.14.919.038 I llama_perf_context_print:        load time =    1348.20 ms
0.14.919.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.919.042 I llama_perf_context_print:        eval time =   13480.28 ms /    32 runs   (  421.26 ms per token,     2.37 tokens per second)
0.14.919.043 I llama_perf_context_print:       total time =   13569.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.881s
user	3m35.022s
sys	0m9.476s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4086 (57f8355b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186494.71 ms
main:    total time = 186494.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.000.823 I main: load the model and apply lora adapter, if any
0.00.023.249 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.381 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.382 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.390 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.391 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.392 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.229 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.514 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.522 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.523 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.528 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.532 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.533 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.534 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.552 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.560 I llama_model_loader: - type  f32:   37 tensors
0.00.270.563 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.925 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.155 I llm_load_vocab: special tokens cache size = 5
0.00.609.820 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.902 I llm_load_print_meta: arch             = gemma
0.00.609.902 I llm_load_print_meta: vocab type       = SPM
0.00.609.904 I llm_load_print_meta: n_vocab          = 256000
0.00.609.906 I llm_load_print_meta: n_merges         = 0
0.00.609.907 I llm_load_print_meta: vocab_only       = 0
0.00.609.907 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.907 I llm_load_print_meta: n_embd           = 2048
0.00.609.908 I llm_load_print_meta: n_layer          = 18
0.00.609.996 I llm_load_print_meta: n_head           = 8
0.00.610.004 I llm_load_print_meta: n_head_kv        = 1
0.00.610.005 I llm_load_print_meta: n_rot            = 256
0.00.610.014 I llm_load_print_meta: n_swa            = 0
0.00.610.015 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.015 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.020 I llm_load_print_meta: n_gqa            = 8
0.00.610.025 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.030 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.033 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.034 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.035 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.035 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.046 I llm_load_print_meta: n_ff             = 16384
0.00.610.054 I llm_load_print_meta: n_expert         = 0
0.00.610.054 I llm_load_print_meta: n_expert_used    = 0
0.00.610.062 I llm_load_print_meta: causal attn      = 1
0.00.610.062 I llm_load_print_meta: pooling type     = 0
0.00.610.063 I llm_load_print_meta: rope type        = 2
0.00.610.064 I llm_load_print_meta: rope scaling     = linear
0.00.610.066 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.067 I llm_load_print_meta: freq_scale_train = 1
0.00.610.067 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.068 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.079 I llm_load_print_meta: model type       = 2B
0.00.610.080 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.610.080 I llm_load_print_meta: model params     = 2.51 B
0.00.610.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.610.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.083 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.084 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.084 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.093 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.093 I llm_load_print_meta: max token length = 93
0.00.672.340 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.672.352 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.672.352 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.672.353 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.672.354 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.672.354 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.678.081 I llama_new_context_with_model: n_seq_max     = 1
0.00.678.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.678.089 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.678.089 I llama_new_context_with_model: n_batch       = 2048
0.00.678.090 I llama_new_context_with_model: n_ubatch      = 512
0.00.678.090 I llama_new_context_with_model: flash_attn    = 0
0.00.678.092 I llama_new_context_with_model: freq_base     = 10000.0
0.00.678.093 I llama_new_context_with_model: freq_scale    = 1
0.00.678.093 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.749 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.789 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.692.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.594 I llama_new_context_with_model: graph nodes  = 601
0.00.695.595 I llama_new_context_with_model: graph splits = 1
0.00.695.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.706 I main: llama threadpool init, n_threads = 4
0.01.285.723 I 
0.01.285.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.832 I 
0.01.286.061 I sampler seed: 1049206934
0.01.286.073 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.080 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.286.083 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.084 I 
 increamically!

I am so sorry, but I am unable to generate responses that contain inappropriate or sexually suggestive content. My purpose is to assist with tasks and

0.12.451.306 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.53 tokens per second)
0.12.451.310 I llama_perf_context_print:        load time =    1284.79 ms
0.12.451.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.451.314 I llama_perf_context_print:        eval time =   11075.71 ms /    32 runs   (  346.12 ms per token,     2.89 tokens per second)
0.12.451.316 I llama_perf_context_print:       total time =   11165.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4086 (57f8355b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185991.14 ms
main:    total time = 185991.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4086 (57f8355b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.023.100 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.225 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.231 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.247 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.264 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.908 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.260 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.269 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.270 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.274 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.281 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.287 I llama_model_loader: - type  f32:   37 tensors
0.00.270.290 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.290 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.657 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.710 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.711 I llm_load_vocab: special tokens cache size = 5
0.00.632.559 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.645 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.646 I llm_load_print_meta: arch             = gemma
0.00.632.646 I llm_load_print_meta: vocab type       = SPM
0.00.632.648 I llm_load_print_meta: n_vocab          = 256000
0.00.632.650 I llm_load_print_meta: n_merges         = 0
0.00.632.650 I llm_load_print_meta: vocab_only       = 0
0.00.632.651 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.651 I llm_load_print_meta: n_embd           = 2048
0.00.632.652 I llm_load_print_meta: n_layer          = 18
0.00.632.717 I llm_load_print_meta: n_head           = 8
0.00.632.742 I llm_load_print_meta: n_head_kv        = 1
0.00.632.744 I llm_load_print_meta: n_rot            = 256
0.00.632.745 I llm_load_print_meta: n_swa            = 0
0.00.632.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.755 I llm_load_print_meta: n_gqa            = 8
0.00.632.761 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.775 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.776 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.777 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.778 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.786 I llm_load_print_meta: n_ff             = 16384
0.00.632.787 I llm_load_print_meta: n_expert         = 0
0.00.632.788 I llm_load_print_meta: n_expert_used    = 0
0.00.632.789 I llm_load_print_meta: causal attn      = 1
0.00.632.789 I llm_load_print_meta: pooling type     = 0
0.00.632.791 I llm_load_print_meta: rope type        = 2
0.00.632.792 I llm_load_print_meta: rope scaling     = linear
0.00.632.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.795 I llm_load_print_meta: freq_scale_train = 1
0.00.632.796 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.796 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.797 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.798 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.802 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.804 I llm_load_print_meta: model type       = 2B
0.00.632.805 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.632.806 I llm_load_print_meta: model params     = 2.51 B
0.00.632.808 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.632.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.820 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.823 I llm_load_print_meta: max token length = 93
0.00.693.343 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.699.360 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.367 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.368 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.368 I llama_new_context_with_model: n_batch       = 2048
0.00.699.369 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.369 I llama_new_context_with_model: flash_attn    = 0
0.00.699.372 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.373 I llama_new_context_with_model: freq_scale    = 1
0.00.699.373 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.714.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.714.292 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.714.403 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.929 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.716.933 I llama_new_context_with_model: graph nodes  = 601
0.00.716.933 I llama_new_context_with_model: graph splits = 1
0.00.716.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.304 I main: llama threadpool init, n_threads = 4
0.01.305.319 I 
0.01.305.444 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.448 I 
0.01.305.680 I sampler seed: 402730237
0.01.305.693 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.703 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.708 I 
 encompates a wide range of topics, including:

**Politics and Government:**
- Public policy debates
- Political systems and ideologies
- Election campaigns and

0.12.498.800 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.12.498.806 I llama_perf_context_print:        load time =    1304.33 ms
0.12.498.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.498.809 I llama_perf_context_print:        eval time =   11104.11 ms /    32 runs   (  347.00 ms per token,     2.88 tokens per second)
0.12.498.811 I llama_perf_context_print:       total time =   11193.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.299s
user	46m42.248s
sys	0m6.323s
