+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.651 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.024.959 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.163 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.268 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.273 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.275 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.276 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.277 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.278 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.279 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.286 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.287 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.298 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.299 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.094 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.103 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.104 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.105 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.106 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.107 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.110 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.111 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.112 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.112 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.113 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.123 I llama_model_loader: - type  f32:   37 tensors
0.00.198.127 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.879 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.899 I llm_load_vocab: special tokens cache size = 5
0.00.534.334 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.534.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.534.395 I llm_load_print_meta: arch             = gemma
0.00.534.396 I llm_load_print_meta: vocab type       = SPM
0.00.534.397 I llm_load_print_meta: n_vocab          = 256000
0.00.534.399 I llm_load_print_meta: n_merges         = 0
0.00.534.400 I llm_load_print_meta: vocab_only       = 0
0.00.534.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.534.400 I llm_load_print_meta: n_embd           = 2048
0.00.534.401 I llm_load_print_meta: n_layer          = 18
0.00.534.434 I llm_load_print_meta: n_head           = 8
0.00.534.442 I llm_load_print_meta: n_head_kv        = 1
0.00.534.443 I llm_load_print_meta: n_rot            = 256
0.00.534.443 I llm_load_print_meta: n_swa            = 0
0.00.534.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.534.444 I llm_load_print_meta: n_embd_head_v    = 256
0.00.534.448 I llm_load_print_meta: n_gqa            = 8
0.00.534.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.534.458 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.534.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.534.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.534.461 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.534.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.534.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.534.467 I llm_load_print_meta: n_ff             = 16384
0.00.534.467 I llm_load_print_meta: n_expert         = 0
0.00.534.467 I llm_load_print_meta: n_expert_used    = 0
0.00.534.468 I llm_load_print_meta: causal attn      = 1
0.00.534.468 I llm_load_print_meta: pooling type     = 0
0.00.534.468 I llm_load_print_meta: rope type        = 2
0.00.534.469 I llm_load_print_meta: rope scaling     = linear
0.00.534.470 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.534.471 I llm_load_print_meta: freq_scale_train = 1
0.00.534.471 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.534.471 I llm_load_print_meta: rope_finetuned   = unknown
0.00.534.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.534.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.534.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.534.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.534.473 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.534.474 I llm_load_print_meta: model type       = 2B
0.00.534.475 I llm_load_print_meta: model ftype      = Q8_0
0.00.534.476 I llm_load_print_meta: model params     = 2.51 B
0.00.534.476 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.534.477 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.534.478 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.534.478 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.534.479 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.534.479 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.534.480 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.534.480 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.534.481 I llm_load_print_meta: max token length = 93
0.00.534.654 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.552 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.632.563 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.632.564 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.632.565 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.632.566 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.632.566 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.638.312 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.320 I llama_new_context_with_model: n_batch    = 2048
0.00.638.320 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.321 I llama_new_context_with_model: flash_attn = 0
0.00.638.323 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.324 I llama_new_context_with_model: freq_scale = 1
0.00.669.038 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.078 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.669.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.670.584 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.670.590 I llama_new_context_with_model: graph nodes  = 601
0.00.670.590 I llama_new_context_with_model: graph splits = 1
0.00.670.607 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.780 I main: llama threadpool init, n_threads = 4
0.01.283.792 I 
0.01.283.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.894 I 
0.01.284.066 I sampler seed: 773917531
0.01.284.078 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.084 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.085 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to provide a comprehensive picture of the research landscape in this field.

**Research Landscape in Criminal Justice Data Analytics**

**1. Data Availability and

0.14.723.910 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.14.723.913 I llama_perf_context_print:        load time =    1280.89 ms
0.14.723.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.723.930 I llama_perf_context_print:        eval time =   13358.31 ms /    32 runs   (  417.45 ms per token,     2.40 tokens per second)
0.14.723.931 I llama_perf_context_print:       total time =   13440.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.705 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.025.262 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.377 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.388 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.391 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.392 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.393 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.403 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.404 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.871 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.727 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.758 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.767 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.767 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.768 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.769 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.770 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.771 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.775 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.775 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.776 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.777 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.778 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.786 I llama_model_loader: - type  f32:   37 tensors
0.00.196.790 I llama_model_loader: - type q8_0:  127 tensors
0.00.493.205 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.275 I llm_load_vocab: special tokens cache size = 5
0.00.551.248 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.312 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.313 I llm_load_print_meta: arch             = gemma
0.00.551.314 I llm_load_print_meta: vocab type       = SPM
0.00.551.315 I llm_load_print_meta: n_vocab          = 256000
0.00.551.317 I llm_load_print_meta: n_merges         = 0
0.00.551.318 I llm_load_print_meta: vocab_only       = 0
0.00.551.318 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.319 I llm_load_print_meta: n_embd           = 2048
0.00.551.319 I llm_load_print_meta: n_layer          = 18
0.00.551.354 I llm_load_print_meta: n_head           = 8
0.00.551.360 I llm_load_print_meta: n_head_kv        = 1
0.00.551.361 I llm_load_print_meta: n_rot            = 256
0.00.551.361 I llm_load_print_meta: n_swa            = 0
0.00.551.362 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.362 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.367 I llm_load_print_meta: n_gqa            = 8
0.00.551.371 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.401 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.403 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.404 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.404 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.410 I llm_load_print_meta: n_ff             = 16384
0.00.551.411 I llm_load_print_meta: n_expert         = 0
0.00.551.411 I llm_load_print_meta: n_expert_used    = 0
0.00.551.411 I llm_load_print_meta: causal attn      = 1
0.00.551.412 I llm_load_print_meta: pooling type     = 0
0.00.551.412 I llm_load_print_meta: rope type        = 2
0.00.551.420 I llm_load_print_meta: rope scaling     = linear
0.00.551.422 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.422 I llm_load_print_meta: freq_scale_train = 1
0.00.551.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.423 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.431 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.433 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.435 I llm_load_print_meta: model type       = 2B
0.00.551.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.436 I llm_load_print_meta: model params     = 2.51 B
0.00.551.437 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.446 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.455 I llm_load_print_meta: max token length = 93
0.00.551.623 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.239 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.651.080 I llama_new_context_with_model: n_ctx      = 8192
0.00.651.088 I llama_new_context_with_model: n_batch    = 2048
0.00.651.088 I llama_new_context_with_model: n_ubatch   = 512
0.00.651.089 I llama_new_context_with_model: flash_attn = 0
0.00.651.093 I llama_new_context_with_model: freq_base  = 10000.0
0.00.651.094 I llama_new_context_with_model: freq_scale = 1
0.00.682.479 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.523 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.684.020 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.684.026 I llama_new_context_with_model: graph nodes  = 601
0.00.684.026 I llama_new_context_with_model: graph splits = 1
0.00.684.044 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.177 I main: llama threadpool init, n_threads = 4
0.01.302.189 I 
0.01.302.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.288 I 
0.01.302.449 I sampler seed: 2665467551
0.01.302.460 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.464 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.302.465 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and their potential causes.

**Introduction**

The field of forensic science deals with the analysis of evidence related to criminal investigations. One crucial area

0.14.943.284 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.23 tokens per second)
0.14.943.287 I llama_perf_context_print:        load time =    1299.25 ms
0.14.943.288 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.943.290 I llama_perf_context_print:        eval time =   13556.78 ms /    32 runs   (  423.65 ms per token,     2.36 tokens per second)
0.14.943.291 I llama_perf_context_print:       total time =   13641.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.630 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.041.552 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.041.795 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.041.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.041.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.041.927 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.041.933 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.041.935 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.041.936 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.041.937 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.041.938 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.041.939 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.041.947 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.041.948 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.041.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.041.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.041.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.112.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.201.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.492 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.213.510 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.213.511 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.213.520 I llama_model_loader: - type  f32:   37 tensors
0.00.213.525 I llama_model_loader: - type q8_0:  127 tensors
0.00.500.734 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.776 I llm_load_vocab: special tokens cache size = 5
0.00.558.876 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.558.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.558.941 I llm_load_print_meta: arch             = gemma
0.00.558.942 I llm_load_print_meta: vocab type       = SPM
0.00.558.942 I llm_load_print_meta: n_vocab          = 256000
0.00.558.945 I llm_load_print_meta: n_merges         = 0
0.00.558.946 I llm_load_print_meta: vocab_only       = 0
0.00.558.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.558.946 I llm_load_print_meta: n_embd           = 2048
0.00.558.947 I llm_load_print_meta: n_layer          = 18
0.00.558.982 I llm_load_print_meta: n_head           = 8
0.00.558.991 I llm_load_print_meta: n_head_kv        = 1
0.00.558.991 I llm_load_print_meta: n_rot            = 256
0.00.558.991 I llm_load_print_meta: n_swa            = 0
0.00.558.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.558.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.558.996 I llm_load_print_meta: n_gqa            = 8
0.00.559.001 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.007 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.014 I llm_load_print_meta: n_ff             = 16384
0.00.559.015 I llm_load_print_meta: n_expert         = 0
0.00.559.015 I llm_load_print_meta: n_expert_used    = 0
0.00.559.016 I llm_load_print_meta: causal attn      = 1
0.00.559.016 I llm_load_print_meta: pooling type     = 0
0.00.559.016 I llm_load_print_meta: rope type        = 2
0.00.559.017 I llm_load_print_meta: rope scaling     = linear
0.00.559.018 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.019 I llm_load_print_meta: freq_scale_train = 1
0.00.559.019 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.019 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.019 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.020 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.020 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.020 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.021 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.021 I llm_load_print_meta: model type       = 2B
0.00.559.022 I llm_load_print_meta: model ftype      = Q8_0
0.00.559.023 I llm_load_print_meta: model params     = 2.51 B
0.00.559.024 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.559.025 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.026 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.026 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.026 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.027 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.027 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.028 I llm_load_print_meta: max token length = 93
0.00.559.205 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.634.739 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.634.752 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.634.753 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.634.753 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.634.754 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.634.755 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.640.735 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.744 I llama_new_context_with_model: n_batch    = 2048
0.00.640.744 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.745 I llama_new_context_with_model: flash_attn = 0
0.00.640.749 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.750 I llama_new_context_with_model: freq_scale = 1
0.00.670.549 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.670.593 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.706 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.672.117 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.672.124 I llama_new_context_with_model: graph nodes  = 601
0.00.672.124 I llama_new_context_with_model: graph splits = 1
0.00.672.140 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.575 I main: llama threadpool init, n_threads = 4
0.01.291.590 I 
0.01.291.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.689 I 
0.01.291.866 I sampler seed: 364360473
0.01.291.876 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.882 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.291.883 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the story of an ordinary man who discovers a hidden world of magic.

The narrative unfolds as follows:

**Part 1: The Awakening

0.14.781.082 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.14.781.085 I llama_perf_context_print:        load time =    1288.67 ms
0.14.781.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.781.100 I llama_perf_context_print:        eval time =   13407.03 ms /    32 runs   (  418.97 ms per token,     2.39 tokens per second)
0.14.781.101 I llama_perf_context_print:       total time =   13489.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.690 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.002.898 I main: load the model and apply lora adapter, if any
0.00.024.929 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.261 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.262 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.279 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.436 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.613 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.622 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.623 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.624 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.624 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.625 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.632 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.633 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.642 I llama_model_loader: - type  f32:   37 tensors
0.00.196.646 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.507 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.550 I llm_load_vocab: special tokens cache size = 5
0.00.530.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.530.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.530.567 I llm_load_print_meta: arch             = gemma
0.00.530.568 I llm_load_print_meta: vocab type       = SPM
0.00.530.569 I llm_load_print_meta: n_vocab          = 256000
0.00.530.571 I llm_load_print_meta: n_merges         = 0
0.00.530.571 I llm_load_print_meta: vocab_only       = 0
0.00.530.571 I llm_load_print_meta: n_ctx_train      = 8192
0.00.530.572 I llm_load_print_meta: n_embd           = 2048
0.00.530.572 I llm_load_print_meta: n_layer          = 18
0.00.530.605 I llm_load_print_meta: n_head           = 8
0.00.530.612 I llm_load_print_meta: n_head_kv        = 1
0.00.530.612 I llm_load_print_meta: n_rot            = 256
0.00.530.612 I llm_load_print_meta: n_swa            = 0
0.00.530.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.613 I llm_load_print_meta: n_embd_head_v    = 256
0.00.530.618 I llm_load_print_meta: n_gqa            = 8
0.00.530.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.530.626 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.530.655 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.530.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.530.657 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.530.658 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.530.658 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.530.664 I llm_load_print_meta: n_ff             = 16384
0.00.530.665 I llm_load_print_meta: n_expert         = 0
0.00.530.665 I llm_load_print_meta: n_expert_used    = 0
0.00.530.666 I llm_load_print_meta: causal attn      = 1
0.00.530.666 I llm_load_print_meta: pooling type     = 0
0.00.530.667 I llm_load_print_meta: rope type        = 2
0.00.530.667 I llm_load_print_meta: rope scaling     = linear
0.00.530.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.530.669 I llm_load_print_meta: freq_scale_train = 1
0.00.530.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.530.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.530.670 I llm_load_print_meta: ssm_d_conv       = 0
0.00.530.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.530.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.530.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.530.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.530.672 I llm_load_print_meta: model type       = 2B
0.00.530.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.530.674 I llm_load_print_meta: model params     = 2.51 B
0.00.530.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.530.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.530.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.530.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.530.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.530.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.530.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.530.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.530.687 I llm_load_print_meta: max token length = 93
0.00.530.880 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.602.025 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.602.037 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.607.799 I llama_new_context_with_model: n_ctx      = 8192
0.00.607.806 I llama_new_context_with_model: n_batch    = 2048
0.00.607.807 I llama_new_context_with_model: n_ubatch   = 512
0.00.607.807 I llama_new_context_with_model: flash_attn = 0
0.00.607.810 I llama_new_context_with_model: freq_base  = 10000.0
0.00.607.811 I llama_new_context_with_model: freq_scale = 1
0.00.638.767 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.638.813 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.638.932 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.640.368 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.640.375 I llama_new_context_with_model: graph nodes  = 601
0.00.640.376 I llama_new_context_with_model: graph splits = 1
0.00.640.394 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.008 I main: llama threadpool init, n_threads = 4
0.01.251.021 I 
0.01.251.118 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.123 I 
0.01.251.292 I sampler seed: 4086538757
0.01.251.303 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.308 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.319 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably in the atmosphere, a symphony of swirling clouds. The sun, a luminous orb, paints the sky in hues of crimson and gold.

A gentle

0.14.698.903 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.30 tokens per second)
0.14.698.907 I llama_perf_context_print:        load time =    1248.02 ms
0.14.698.909 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.698.912 I llama_perf_context_print:        eval time =   13363.23 ms /    32 runs   (  417.60 ms per token,     2.39 tokens per second)
0.14.698.913 I llama_perf_context_print:       total time =   13447.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.962s
user	3m48.536s
sys	0m9.575s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3772 (57064fba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198940.07 ms
main:    total time = 198940.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.672 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.024.849 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.142 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.165 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.166 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.166 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.167 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.168 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.175 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.176 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.177 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.178 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.179 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.942 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.986 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.003 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.004 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.005 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.005 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.007 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.016 I llama_model_loader: - type  f32:   37 tensors
0.00.196.021 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.021 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.836 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.837 I llm_load_vocab: special tokens cache size = 5
0.00.531.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.057 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.059 I llm_load_print_meta: arch             = gemma
0.00.532.059 I llm_load_print_meta: vocab type       = SPM
0.00.532.060 I llm_load_print_meta: n_vocab          = 256000
0.00.532.063 I llm_load_print_meta: n_merges         = 0
0.00.532.063 I llm_load_print_meta: vocab_only       = 0
0.00.532.064 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.064 I llm_load_print_meta: n_embd           = 2048
0.00.532.065 I llm_load_print_meta: n_layer          = 18
0.00.532.098 I llm_load_print_meta: n_head           = 8
0.00.532.104 I llm_load_print_meta: n_head_kv        = 1
0.00.532.104 I llm_load_print_meta: n_rot            = 256
0.00.532.105 I llm_load_print_meta: n_swa            = 0
0.00.532.105 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.105 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.110 I llm_load_print_meta: n_gqa            = 8
0.00.532.114 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.119 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.121 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.122 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.122 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.123 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.127 I llm_load_print_meta: n_ff             = 16384
0.00.532.128 I llm_load_print_meta: n_expert         = 0
0.00.532.128 I llm_load_print_meta: n_expert_used    = 0
0.00.532.128 I llm_load_print_meta: causal attn      = 1
0.00.532.129 I llm_load_print_meta: pooling type     = 0
0.00.532.129 I llm_load_print_meta: rope type        = 2
0.00.532.130 I llm_load_print_meta: rope scaling     = linear
0.00.532.131 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.132 I llm_load_print_meta: freq_scale_train = 1
0.00.532.132 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.133 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.133 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.134 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.134 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.135 I llm_load_print_meta: model type       = 2B
0.00.532.136 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.532.137 I llm_load_print_meta: model params     = 2.51 B
0.00.532.137 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.532.138 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.138 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.139 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.139 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.140 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.140 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.141 I llm_load_print_meta: max token length = 93
0.00.532.314 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.184 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.592.195 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.592.196 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.592.196 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.592.197 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.592.198 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.597.812 I llama_new_context_with_model: n_ctx      = 8192
0.00.597.818 I llama_new_context_with_model: n_batch    = 2048
0.00.597.819 I llama_new_context_with_model: n_ubatch   = 512
0.00.597.819 I llama_new_context_with_model: flash_attn = 0
0.00.597.822 I llama_new_context_with_model: freq_base  = 10000.0
0.00.597.822 I llama_new_context_with_model: freq_scale = 1
0.00.627.337 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.380 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.628.882 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.628.889 I llama_new_context_with_model: graph nodes  = 601
0.00.628.889 I llama_new_context_with_model: graph splits = 1
0.00.628.904 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.205.039 I main: llama threadpool init, n_threads = 4
0.01.205.051 I 
0.01.205.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.205.149 I 
0.01.205.314 I sampler seed: 1411554316
0.01.205.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.205.329 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.205.330 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompassing an impressive range of topics:

**History:**
- Ancient civilizations and their achievements
- Rise of Christianity and its impact on society
- The

0.12.170.988 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.47 tokens per second)
0.12.170.992 I llama_perf_context_print:        load time =    1202.13 ms
0.12.170.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.170.997 I llama_perf_context_print:        eval time =   10884.26 ms /    32 runs   (  340.13 ms per token,     2.94 tokens per second)
0.12.170.998 I llama_perf_context_print:       total time =   10965.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3772 (57064fba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198944.38 ms
main:    total time = 198944.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.648 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.024.751 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.850 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.866 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.870 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.874 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.875 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.877 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.886 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.888 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.035 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.114 I llama_model_loader: - type  f32:   37 tensors
0.00.196.118 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.119 I llama_model_loader: - type q6_K:   19 tensors
0.00.496.442 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.496 I llm_load_vocab: special tokens cache size = 5
0.00.554.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.647 I llm_load_print_meta: arch             = gemma
0.00.554.647 I llm_load_print_meta: vocab type       = SPM
0.00.554.648 I llm_load_print_meta: n_vocab          = 256000
0.00.554.651 I llm_load_print_meta: n_merges         = 0
0.00.554.651 I llm_load_print_meta: vocab_only       = 0
0.00.554.652 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.652 I llm_load_print_meta: n_embd           = 2048
0.00.554.652 I llm_load_print_meta: n_layer          = 18
0.00.554.687 I llm_load_print_meta: n_head           = 8
0.00.554.694 I llm_load_print_meta: n_head_kv        = 1
0.00.554.694 I llm_load_print_meta: n_rot            = 256
0.00.554.695 I llm_load_print_meta: n_swa            = 0
0.00.554.695 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.695 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.700 I llm_load_print_meta: n_gqa            = 8
0.00.554.704 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.709 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.711 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.711 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.712 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.712 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.717 I llm_load_print_meta: n_ff             = 16384
0.00.554.717 I llm_load_print_meta: n_expert         = 0
0.00.554.717 I llm_load_print_meta: n_expert_used    = 0
0.00.554.717 I llm_load_print_meta: causal attn      = 1
0.00.554.718 I llm_load_print_meta: pooling type     = 0
0.00.554.719 I llm_load_print_meta: rope type        = 2
0.00.554.720 I llm_load_print_meta: rope scaling     = linear
0.00.554.737 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.738 I llm_load_print_meta: freq_scale_train = 1
0.00.554.739 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.741 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.741 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.741 I llm_load_print_meta: model type       = 2B
0.00.554.743 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.554.744 I llm_load_print_meta: model params     = 2.51 B
0.00.554.745 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.554.745 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.745 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.746 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.746 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.746 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.747 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.747 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.748 I llm_load_print_meta: max token length = 93
0.00.554.929 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.610.931 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.616.467 I llama_new_context_with_model: n_ctx      = 8192
0.00.616.475 I llama_new_context_with_model: n_batch    = 2048
0.00.616.476 I llama_new_context_with_model: n_ubatch   = 512
0.00.616.476 I llama_new_context_with_model: flash_attn = 0
0.00.616.479 I llama_new_context_with_model: freq_base  = 10000.0
0.00.616.480 I llama_new_context_with_model: freq_scale = 1
0.00.646.339 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.646.383 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.646.501 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.869 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.876 I llama_new_context_with_model: graph nodes  = 601
0.00.647.877 I llama_new_context_with_model: graph splits = 1
0.00.647.893 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.226.608 I main: llama threadpool init, n_threads = 4
0.01.226.621 I 
0.01.226.715 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.226.719 I 
0.01.226.887 I sampler seed: 1172756915
0.01.226.897 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.226.903 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.226.903 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 encompases its vast collection of books, journals, and other primary sources spanning various historical periods, cultures, and disciplines.

**Discuss how the use of primary

0.12.097.485 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.95 tokens per second)
0.12.097.488 I llama_perf_context_print:        load time =    1223.68 ms
0.12.097.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.097.491 I llama_perf_context_print:        eval time =   10788.77 ms /    32 runs   (  337.15 ms per token,     2.97 tokens per second)
0.12.097.492 I llama_perf_context_print:       total time =   10870.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.093s
user	50m8.660s
sys	0m6.457s
