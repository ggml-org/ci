+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.835 I main: load the model and apply lora adapter, if any
0.00.021.898 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.943 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.950 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.959 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.961 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.961 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.962 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.967 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.967 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.968 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.968 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.157 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.895 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.732 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.737 I llama_model_loader: - type  f32:   37 tensors
0.00.131.741 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.488 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.265 I llm_load_vocab: special tokens cache size = 5
0.00.220.224 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.238 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.239 I llm_load_print_meta: arch             = gemma
0.00.220.240 I llm_load_print_meta: vocab type       = SPM
0.00.220.240 I llm_load_print_meta: n_vocab          = 256000
0.00.220.240 I llm_load_print_meta: n_merges         = 0
0.00.220.241 I llm_load_print_meta: vocab_only       = 0
0.00.220.241 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.241 I llm_load_print_meta: n_embd           = 2048
0.00.220.242 I llm_load_print_meta: n_layer          = 18
0.00.220.254 I llm_load_print_meta: n_head           = 8
0.00.220.255 I llm_load_print_meta: n_head_kv        = 1
0.00.220.255 I llm_load_print_meta: n_rot            = 256
0.00.220.255 I llm_load_print_meta: n_swa            = 0
0.00.220.255 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.256 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.257 I llm_load_print_meta: n_gqa            = 8
0.00.220.258 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.259 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.259 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.261 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.261 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.261 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.262 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.263 I llm_load_print_meta: n_ff             = 16384
0.00.220.263 I llm_load_print_meta: n_expert         = 0
0.00.220.263 I llm_load_print_meta: n_expert_used    = 0
0.00.220.264 I llm_load_print_meta: causal attn      = 1
0.00.220.264 I llm_load_print_meta: pooling type     = 0
0.00.220.264 I llm_load_print_meta: rope type        = 2
0.00.220.265 I llm_load_print_meta: rope scaling     = linear
0.00.220.266 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.267 I llm_load_print_meta: freq_scale_train = 1
0.00.220.267 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.268 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.268 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.268 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.269 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.269 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.269 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.270 I llm_load_print_meta: model type       = 2B
0.00.220.270 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.271 I llm_load_print_meta: model params     = 2.51 B
0.00.220.272 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.273 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.273 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.273 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.274 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.274 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.275 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.275 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.275 I llm_load_print_meta: max token length = 93
0.00.220.302 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.318.336 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.318.345 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.318.346 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.318.347 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.318.348 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.318.348 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.323.418 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.424 I llama_new_context_with_model: n_batch    = 2048
0.00.323.424 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.425 I llama_new_context_with_model: flash_attn = 0
0.00.323.428 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.429 I llama_new_context_with_model: freq_scale = 1
0.00.352.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.956 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.353.048 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.906 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.914 I llama_new_context_with_model: graph nodes  = 601
0.00.353.914 I llama_new_context_with_model: graph splits = 1
0.00.353.916 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.736 I main: llama threadpool init, n_threads = 4
0.00.447.749 I 
0.00.447.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.447.826 I 
0.00.447.855 I sampler seed: 1730704604
0.00.447.865 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.869 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.447.870 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities that can occur with the use of certain medications.

**Answer:**

**Medications can cause a variety of adverse reactions, including pharmacological interactions and

0.02.734.152 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6785.93 tokens per second)
0.02.734.155 I llama_perf_context_print:        load time =     445.88 ms
0.02.734.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.734.157 I llama_perf_context_print:        eval time =    2267.23 ms /    32 runs   (   70.85 ms per token,    14.11 tokens per second)
0.02.734.158 I llama_perf_context_print:       total time =    2286.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.578 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.022.065 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.078 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.094 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.094 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.096 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.607 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.514 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.521 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.522 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.523 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.524 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.525 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.530 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.531 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.532 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.536 I llama_model_loader: - type  f32:   37 tensors
0.00.132.539 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.885 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.553 I llm_load_vocab: special tokens cache size = 5
0.00.216.028 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.042 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.043 I llm_load_print_meta: arch             = gemma
0.00.216.043 I llm_load_print_meta: vocab type       = SPM
0.00.216.044 I llm_load_print_meta: n_vocab          = 256000
0.00.216.044 I llm_load_print_meta: n_merges         = 0
0.00.216.045 I llm_load_print_meta: vocab_only       = 0
0.00.216.045 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.045 I llm_load_print_meta: n_embd           = 2048
0.00.216.046 I llm_load_print_meta: n_layer          = 18
0.00.216.058 I llm_load_print_meta: n_head           = 8
0.00.216.060 I llm_load_print_meta: n_head_kv        = 1
0.00.216.060 I llm_load_print_meta: n_rot            = 256
0.00.216.060 I llm_load_print_meta: n_swa            = 0
0.00.216.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.061 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.062 I llm_load_print_meta: n_gqa            = 8
0.00.216.063 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.064 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.067 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.067 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.068 I llm_load_print_meta: n_ff             = 16384
0.00.216.069 I llm_load_print_meta: n_expert         = 0
0.00.216.069 I llm_load_print_meta: n_expert_used    = 0
0.00.216.069 I llm_load_print_meta: causal attn      = 1
0.00.216.069 I llm_load_print_meta: pooling type     = 0
0.00.216.070 I llm_load_print_meta: rope type        = 2
0.00.216.070 I llm_load_print_meta: rope scaling     = linear
0.00.216.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.073 I llm_load_print_meta: freq_scale_train = 1
0.00.216.073 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.074 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.074 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.075 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.075 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.076 I llm_load_print_meta: model type       = 2B
0.00.216.076 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.077 I llm_load_print_meta: model params     = 2.51 B
0.00.216.078 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.078 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.079 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.080 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.081 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.081 I llm_load_print_meta: max token length = 93
0.00.216.105 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.871 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.971 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.978 I llama_new_context_with_model: n_batch    = 2048
0.00.313.979 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.980 I llama_new_context_with_model: flash_attn = 0
0.00.313.983 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.983 I llama_new_context_with_model: freq_scale = 1
0.00.343.767 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.782 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.739 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.746 I llama_new_context_with_model: graph nodes  = 601
0.00.344.746 I llama_new_context_with_model: graph splits = 1
0.00.344.748 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.178 I main: llama threadpool init, n_threads = 4
0.00.433.190 I 
0.00.433.265 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.268 I 
0.00.433.297 I sampler seed: 4169581921
0.00.433.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.312 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.433.313 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly high-quality, personalized training for individuals seeking to optimize their physical performance and overall health.

**Our Approach:**

* **Comprehensive Assessment:**


0.02.622.869 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6916.79 tokens per second)
0.02.622.872 I llama_perf_context_print:        load time =     431.30 ms
0.02.622.874 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.622.876 I llama_perf_context_print:        eval time =    2170.97 ms /    32 runs   (   67.84 ms per token,    14.74 tokens per second)
0.02.622.878 I llama_perf_context_print:       total time =    2189.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.475 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.676 I main: llama backend init
0.00.001.771 I main: load the model and apply lora adapter, if any
0.00.022.075 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.138 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.142 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.144 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.150 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.151 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.151 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.610 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.125 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.034 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.035 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.036 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.037 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.044 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.045 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.046 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.050 I llama_model_loader: - type  f32:   37 tensors
0.00.133.053 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.367 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.107 I llm_load_vocab: special tokens cache size = 5
0.00.218.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.733 I llm_load_print_meta: arch             = gemma
0.00.218.733 I llm_load_print_meta: vocab type       = SPM
0.00.218.734 I llm_load_print_meta: n_vocab          = 256000
0.00.218.735 I llm_load_print_meta: n_merges         = 0
0.00.218.735 I llm_load_print_meta: vocab_only       = 0
0.00.218.736 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.736 I llm_load_print_meta: n_embd           = 2048
0.00.218.736 I llm_load_print_meta: n_layer          = 18
0.00.218.748 I llm_load_print_meta: n_head           = 8
0.00.218.749 I llm_load_print_meta: n_head_kv        = 1
0.00.218.749 I llm_load_print_meta: n_rot            = 256
0.00.218.750 I llm_load_print_meta: n_swa            = 0
0.00.218.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.751 I llm_load_print_meta: n_gqa            = 8
0.00.218.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.756 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.756 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.757 I llm_load_print_meta: n_ff             = 16384
0.00.218.758 I llm_load_print_meta: n_expert         = 0
0.00.218.758 I llm_load_print_meta: n_expert_used    = 0
0.00.218.758 I llm_load_print_meta: causal attn      = 1
0.00.218.758 I llm_load_print_meta: pooling type     = 0
0.00.218.759 I llm_load_print_meta: rope type        = 2
0.00.218.759 I llm_load_print_meta: rope scaling     = linear
0.00.218.760 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.761 I llm_load_print_meta: freq_scale_train = 1
0.00.218.761 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.762 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.762 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.762 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.763 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.763 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.763 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.763 I llm_load_print_meta: model type       = 2B
0.00.218.764 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.765 I llm_load_print_meta: model params     = 2.51 B
0.00.218.766 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.767 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.767 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.768 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.769 I llm_load_print_meta: max token length = 93
0.00.218.785 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.293.782 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.293.788 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.789 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.293.790 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.293.790 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.293.791 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.298.834 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.841 I llama_new_context_with_model: n_batch    = 2048
0.00.298.841 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.842 I llama_new_context_with_model: flash_attn = 0
0.00.298.844 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.845 I llama_new_context_with_model: freq_scale = 1
0.00.328.034 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.328.048 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.328.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.996 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.329.004 I llama_new_context_with_model: graph nodes  = 601
0.00.329.004 I llama_new_context_with_model: graph splits = 1
0.00.329.006 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.547 I main: llama threadpool init, n_threads = 4
0.00.422.560 I 
0.00.422.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.636 I 
0.00.422.664 I sampler seed: 1497109435
0.00.422.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.675 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.422.676 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I'm not sure how to proceed with this request. Could you please provide some guidance?

**Guidance:**

* Understand the specific

0.02.747.154 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7013.82 tokens per second)
0.02.747.156 I llama_perf_context_print:        load time =     420.76 ms
0.02.747.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.160 I llama_perf_context_print:        eval time =    2306.70 ms /    32 runs   (   72.08 ms per token,    13.87 tokens per second)
0.02.747.161 I llama_perf_context_print:       total time =    2324.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.561 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.022.206 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.260 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.267 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.268 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.272 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.275 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.276 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.276 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.283 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.284 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.284 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.940 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.945 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.951 I llama_model_loader: - type  f32:   37 tensors
0.00.132.953 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.877 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.700 I llm_load_vocab: special tokens cache size = 5
0.00.221.432 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.445 I llm_load_print_meta: arch             = gemma
0.00.221.446 I llm_load_print_meta: vocab type       = SPM
0.00.221.447 I llm_load_print_meta: n_vocab          = 256000
0.00.221.447 I llm_load_print_meta: n_merges         = 0
0.00.221.448 I llm_load_print_meta: vocab_only       = 0
0.00.221.448 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.449 I llm_load_print_meta: n_embd           = 2048
0.00.221.449 I llm_load_print_meta: n_layer          = 18
0.00.221.460 I llm_load_print_meta: n_head           = 8
0.00.221.461 I llm_load_print_meta: n_head_kv        = 1
0.00.221.462 I llm_load_print_meta: n_rot            = 256
0.00.221.462 I llm_load_print_meta: n_swa            = 0
0.00.221.462 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.463 I llm_load_print_meta: n_gqa            = 8
0.00.221.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.469 I llm_load_print_meta: n_ff             = 16384
0.00.221.470 I llm_load_print_meta: n_expert         = 0
0.00.221.470 I llm_load_print_meta: n_expert_used    = 0
0.00.221.470 I llm_load_print_meta: causal attn      = 1
0.00.221.471 I llm_load_print_meta: pooling type     = 0
0.00.221.471 I llm_load_print_meta: rope type        = 2
0.00.221.471 I llm_load_print_meta: rope scaling     = linear
0.00.221.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.473 I llm_load_print_meta: freq_scale_train = 1
0.00.221.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.476 I llm_load_print_meta: model type       = 2B
0.00.221.476 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.477 I llm_load_print_meta: model params     = 2.51 B
0.00.221.478 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.479 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.480 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.480 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.481 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.481 I llm_load_print_meta: max token length = 93
0.00.221.500 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.291.728 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.291.736 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.296.695 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.703 I llama_new_context_with_model: n_batch    = 2048
0.00.296.703 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.704 I llama_new_context_with_model: flash_attn = 0
0.00.296.706 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.707 I llama_new_context_with_model: freq_scale = 1
0.00.326.353 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.368 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.316 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.323 I llama_new_context_with_model: graph nodes  = 601
0.00.327.324 I llama_new_context_with_model: graph splits = 1
0.00.327.325 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.836 I main: llama threadpool init, n_threads = 4
0.00.421.847 I 
0.00.421.918 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.924 I 
0.00.421.952 I sampler seed: 1655722960
0.00.421.959 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.961 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.962 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, a mischievous little gnome with an insatiable curiosity for the world. [end of text]


0.01.644.935 I llama_perf_sampler_print:    sampling time =       2.56 ms /    17 runs   (    0.15 ms per token,  6651.02 tokens per second)
0.01.644.937 I llama_perf_context_print:        load time =     419.97 ms
0.01.644.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.644.939 I llama_perf_context_print:        eval time =    1213.15 ms /    16 runs   (   75.82 ms per token,    13.19 tokens per second)
0.01.644.940 I llama_perf_context_print:       total time =    1223.11 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.891s
user	0m34.871s
sys	0m9.503s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3772 (57064fba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32236.50 ms
main:    total time = 32236.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.319 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.368 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.376 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.389 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.390 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.391 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.392 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.393 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.400 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.182 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.071 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.074 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.077 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.078 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.079 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.079 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.080 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.084 I llama_model_loader: - type  f32:   37 tensors
0.00.133.088 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.088 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.794 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.534 I llm_load_vocab: special tokens cache size = 5
0.00.221.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.226 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.227 I llm_load_print_meta: arch             = gemma
0.00.221.228 I llm_load_print_meta: vocab type       = SPM
0.00.221.228 I llm_load_print_meta: n_vocab          = 256000
0.00.221.229 I llm_load_print_meta: n_merges         = 0
0.00.221.229 I llm_load_print_meta: vocab_only       = 0
0.00.221.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.230 I llm_load_print_meta: n_embd           = 2048
0.00.221.230 I llm_load_print_meta: n_layer          = 18
0.00.221.242 I llm_load_print_meta: n_head           = 8
0.00.221.243 I llm_load_print_meta: n_head_kv        = 1
0.00.221.244 I llm_load_print_meta: n_rot            = 256
0.00.221.244 I llm_load_print_meta: n_swa            = 0
0.00.221.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.245 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.246 I llm_load_print_meta: n_gqa            = 8
0.00.221.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.249 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.250 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.251 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.252 I llm_load_print_meta: n_ff             = 16384
0.00.221.252 I llm_load_print_meta: n_expert         = 0
0.00.221.252 I llm_load_print_meta: n_expert_used    = 0
0.00.221.253 I llm_load_print_meta: causal attn      = 1
0.00.221.253 I llm_load_print_meta: pooling type     = 0
0.00.221.253 I llm_load_print_meta: rope type        = 2
0.00.221.254 I llm_load_print_meta: rope scaling     = linear
0.00.221.255 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.256 I llm_load_print_meta: freq_scale_train = 1
0.00.221.256 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.257 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.257 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.257 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.258 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.258 I llm_load_print_meta: model type       = 2B
0.00.221.259 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.221.259 I llm_load_print_meta: model params     = 2.51 B
0.00.221.260 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.221.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.262 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.262 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.263 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.263 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.263 I llm_load_print_meta: max token length = 93
0.00.221.287 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.278.620 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.278.627 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.278.627 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.278.628 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.278.629 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.278.629 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.283.681 I llama_new_context_with_model: n_ctx      = 8192
0.00.283.688 I llama_new_context_with_model: n_batch    = 2048
0.00.283.688 I llama_new_context_with_model: n_ubatch   = 512
0.00.283.689 I llama_new_context_with_model: flash_attn = 0
0.00.283.692 I llama_new_context_with_model: freq_base  = 10000.0
0.00.283.693 I llama_new_context_with_model: freq_scale = 1
0.00.312.928 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.312.942 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.313.040 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.313.939 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.313.948 I llama_new_context_with_model: graph nodes  = 601
0.00.313.949 I llama_new_context_with_model: graph splits = 1
0.00.313.951 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.396.670 I main: llama threadpool init, n_threads = 4
0.00.396.683 I 
0.00.396.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.396.764 I 
0.00.396.791 I sampler seed: 1562701699
0.00.396.801 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.396.814 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.396.815 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

The question is about a sentence.

**Sentence:**

"I'm sorry I'm not able to help you with that.

0.02.051.634 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6823.82 tokens per second)
0.02.051.637 I llama_perf_context_print:        load time =     394.79 ms
0.02.051.638 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.051.640 I llama_perf_context_print:        eval time =    1636.75 ms /    32 runs   (   51.15 ms per token,    19.55 tokens per second)
0.02.051.640 I llama_perf_context_print:       total time =    1654.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3772 (57064fba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32064.88 ms
main:    total time = 32064.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 3772 (57064fba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.001.888 I main: load the model and apply lora adapter, if any
0.00.022.160 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.174 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.191 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.197 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.198 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.199 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.199 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.663 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.895 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.819 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.826 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.827 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.828 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.833 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.834 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.837 I llama_model_loader: - type  f32:   37 tensors
0.00.132.840 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.841 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.533 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.272 I llm_load_vocab: special tokens cache size = 5
0.00.220.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.002 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.002 I llm_load_print_meta: arch             = gemma
0.00.221.003 I llm_load_print_meta: vocab type       = SPM
0.00.221.004 I llm_load_print_meta: n_vocab          = 256000
0.00.221.004 I llm_load_print_meta: n_merges         = 0
0.00.221.005 I llm_load_print_meta: vocab_only       = 0
0.00.221.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.005 I llm_load_print_meta: n_embd           = 2048
0.00.221.006 I llm_load_print_meta: n_layer          = 18
0.00.221.019 I llm_load_print_meta: n_head           = 8
0.00.221.020 I llm_load_print_meta: n_head_kv        = 1
0.00.221.020 I llm_load_print_meta: n_rot            = 256
0.00.221.021 I llm_load_print_meta: n_swa            = 0
0.00.221.021 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.023 I llm_load_print_meta: n_gqa            = 8
0.00.221.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.028 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.031 I llm_load_print_meta: n_ff             = 16384
0.00.221.031 I llm_load_print_meta: n_expert         = 0
0.00.221.032 I llm_load_print_meta: n_expert_used    = 0
0.00.221.032 I llm_load_print_meta: causal attn      = 1
0.00.221.032 I llm_load_print_meta: pooling type     = 0
0.00.221.033 I llm_load_print_meta: rope type        = 2
0.00.221.033 I llm_load_print_meta: rope scaling     = linear
0.00.221.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.036 I llm_load_print_meta: freq_scale_train = 1
0.00.221.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.038 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.039 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.039 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.039 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.040 I llm_load_print_meta: model type       = 2B
0.00.221.040 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.221.041 I llm_load_print_meta: model params     = 2.51 B
0.00.221.042 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.221.042 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.043 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.043 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.046 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.046 I llm_load_print_meta: max token length = 93
0.00.221.074 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.276.287 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.281.402 I llama_new_context_with_model: n_ctx      = 8192
0.00.281.409 I llama_new_context_with_model: n_batch    = 2048
0.00.281.409 I llama_new_context_with_model: n_ubatch   = 512
0.00.281.410 I llama_new_context_with_model: flash_attn = 0
0.00.281.413 I llama_new_context_with_model: freq_base  = 10000.0
0.00.281.414 I llama_new_context_with_model: freq_scale = 1
0.00.311.492 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.311.508 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.311.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.460 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.312.466 I llama_new_context_with_model: graph nodes  = 601
0.00.312.466 I llama_new_context_with_model: graph splits = 1
0.00.312.468 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.528 I main: llama threadpool init, n_threads = 4
0.00.393.541 I 
0.00.393.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.618 I 
0.00.393.646 I sampler seed: 2797654120
0.00.393.656 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.659 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.660 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

**Assistant**

I am unable to provide assistance with tasks that involve sexually suggestive or inappropriate content. [end of text]


0.01.681.835 I llama_perf_sampler_print:    sampling time =       4.29 ms /    26 runs   (    0.16 ms per token,  6063.43 tokens per second)
0.01.681.838 I llama_perf_context_print:        load time =     391.62 ms
0.01.681.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.681.840 I llama_perf_context_print:        eval time =    1272.82 ms /    25 runs   (   50.91 ms per token,    19.64 tokens per second)
0.01.681.841 I llama_perf_context_print:       total time =    1288.31 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.355s
user	8m13.591s
sys	0m7.133s
