+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.936 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.949 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.047 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.080 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.090 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.092 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.093 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.094 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.096 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.939 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.839 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.851 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.852 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.854 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.865 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.866 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.868 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.877 I llama_model_loader: - type  f32:   37 tensors
0.00.353.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.587.090 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.669 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.719 I llm_load_vocab: special tokens cache size = 5
0.00.845.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.046 I llm_load_print_meta: arch             = gemma
0.00.846.047 I llm_load_print_meta: vocab type       = SPM
0.00.846.048 I llm_load_print_meta: n_vocab          = 256000
0.00.846.050 I llm_load_print_meta: n_merges         = 0
0.00.846.051 I llm_load_print_meta: vocab_only       = 0
0.00.846.051 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.052 I llm_load_print_meta: n_embd           = 2048
0.00.846.052 I llm_load_print_meta: n_layer          = 18
0.00.846.118 I llm_load_print_meta: n_head           = 8
0.00.846.125 I llm_load_print_meta: n_head_kv        = 1
0.00.846.126 I llm_load_print_meta: n_rot            = 256
0.00.846.126 I llm_load_print_meta: n_swa            = 0
0.00.846.126 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.127 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.131 I llm_load_print_meta: n_gqa            = 8
0.00.846.136 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.141 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.144 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.145 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.149 I llm_load_print_meta: n_ff             = 16384
0.00.846.150 I llm_load_print_meta: n_expert         = 0
0.00.846.150 I llm_load_print_meta: n_expert_used    = 0
0.00.846.151 I llm_load_print_meta: causal attn      = 1
0.00.846.151 I llm_load_print_meta: pooling type     = 0
0.00.846.152 I llm_load_print_meta: rope type        = 2
0.00.846.152 I llm_load_print_meta: rope scaling     = linear
0.00.846.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.154 I llm_load_print_meta: freq_scale_train = 1
0.00.846.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.157 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.158 I llm_load_print_meta: model type       = 2B
0.00.846.159 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.160 I llm_load_print_meta: model params     = 2.51 B
0.00.846.186 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.187 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.188 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.188 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.189 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.190 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.208 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.209 I llm_load_print_meta: max token length = 93
0.00.948.656 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.948.665 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.948.666 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.948.667 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.948.667 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.948.668 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.954.808 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.827 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.827 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.828 I llama_new_context_with_model: n_batch       = 2048
0.00.954.828 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.829 I llama_new_context_with_model: flash_attn    = 0
0.00.954.834 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.834 I llama_new_context_with_model: freq_scale    = 1
0.00.954.835 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.931 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.970.245 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.286 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.059 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.063 I llama_new_context_with_model: graph nodes  = 601
0.00.973.063 I llama_new_context_with_model: graph splits = 1
0.00.973.087 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.973.090 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.582.624 I main: llama threadpool init, n_threads = 4
0.01.582.642 I 
0.01.582.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.582.772 I 
0.01.583.039 I sampler seed: 2177063657
0.01.583.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.583.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.583.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.583.079 I 
 increamically with the number of elements in the set.

$$1,2,3,4,5$$

Therefore, the answer is 5.

0.15.036.743 I llama_perf_sampler_print:    sampling time =      49.56 ms /    33 runs   (    1.50 ms per token,   665.86 tokens per second)
0.15.036.747 I llama_perf_context_print:        load time =    1581.60 ms
0.15.036.759 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.036.761 I llama_perf_context_print:        eval time =   13364.37 ms /    32 runs   (  417.64 ms per token,     2.39 tokens per second)
0.15.036.762 I llama_perf_context_print:       total time =   13454.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.023.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.803 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.819 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.821 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.829 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.836 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.837 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.839 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.841 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.848 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.849 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.850 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.852 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.853 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.756 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.565 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.577 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.578 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.579 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.581 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.583 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.584 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.588 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.589 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.591 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.592 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.594 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.604 I llama_model_loader: - type  f32:   37 tensors
0.00.355.606 I llama_model_loader: - type q8_0:  127 tensors
0.00.595.792 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.666.785 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.667.825 I llm_load_vocab: special tokens cache size = 5
0.00.862.376 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.450 I llm_load_print_meta: arch             = gemma
0.00.862.451 I llm_load_print_meta: vocab type       = SPM
0.00.862.452 I llm_load_print_meta: n_vocab          = 256000
0.00.862.454 I llm_load_print_meta: n_merges         = 0
0.00.862.455 I llm_load_print_meta: vocab_only       = 0
0.00.862.455 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.455 I llm_load_print_meta: n_embd           = 2048
0.00.862.456 I llm_load_print_meta: n_layer          = 18
0.00.862.521 I llm_load_print_meta: n_head           = 8
0.00.862.531 I llm_load_print_meta: n_head_kv        = 1
0.00.862.531 I llm_load_print_meta: n_rot            = 256
0.00.862.533 I llm_load_print_meta: n_swa            = 0
0.00.862.533 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.545 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.551 I llm_load_print_meta: n_gqa            = 8
0.00.862.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.562 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.563 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.565 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.565 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.566 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.586 I llm_load_print_meta: n_ff             = 16384
0.00.862.586 I llm_load_print_meta: n_expert         = 0
0.00.862.587 I llm_load_print_meta: n_expert_used    = 0
0.00.862.587 I llm_load_print_meta: causal attn      = 1
0.00.862.587 I llm_load_print_meta: pooling type     = 0
0.00.862.588 I llm_load_print_meta: rope type        = 2
0.00.862.588 I llm_load_print_meta: rope scaling     = linear
0.00.862.590 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.591 I llm_load_print_meta: freq_scale_train = 1
0.00.862.591 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.592 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.592 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.593 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.594 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.594 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.594 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.596 I llm_load_print_meta: model type       = 2B
0.00.862.597 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.597 I llm_load_print_meta: model params     = 2.51 B
0.00.862.598 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.602 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.608 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.610 I llm_load_print_meta: max token length = 93
0.00.959.115 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.965.428 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.437 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.438 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.438 I llama_new_context_with_model: n_batch       = 2048
0.00.965.439 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.439 I llama_new_context_with_model: flash_attn    = 0
0.00.965.444 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.444 I llama_new_context_with_model: freq_scale    = 1
0.00.965.446 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.543 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.982.096 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.982.140 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.982.265 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.935 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.939 I llama_new_context_with_model: graph nodes  = 601
0.00.984.940 I llama_new_context_with_model: graph splits = 1
0.00.984.963 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.984.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.599.785 I main: llama threadpool init, n_threads = 4
0.01.599.802 I 
0.01.599.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.599.931 I 
0.01.600.165 I sampler seed: 1858371644
0.01.600.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.600.189 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.600.192 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.600.193 I 
 increably.

I'm just wondering if there's a way to disable the automatic updates for a specific application.

I know that there are ways

0.15.242.425 I llama_perf_sampler_print:    sampling time =      50.22 ms /    33 runs   (    1.52 ms per token,   657.17 tokens per second)
0.15.242.429 I llama_perf_context_print:        load time =    1598.77 ms
0.15.242.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.242.432 I llama_perf_context_print:        eval time =   13551.95 ms /    32 runs   (  423.50 ms per token,     2.36 tokens per second)
0.15.242.434 I llama_perf_context_print:       total time =   13642.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.026.082 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.095 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.203 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.214 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.218 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.219 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.226 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.870 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.148 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.129 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.146 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.147 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.359.156 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.359.159 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.359.169 I llama_model_loader: - type  f32:   37 tensors
0.00.359.171 I llama_model_loader: - type q8_0:  127 tensors
0.00.607.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.678.534 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.679.556 I llm_load_vocab: special tokens cache size = 5
0.00.866.010 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.866.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.866.090 I llm_load_print_meta: arch             = gemma
0.00.866.091 I llm_load_print_meta: vocab type       = SPM
0.00.866.092 I llm_load_print_meta: n_vocab          = 256000
0.00.866.095 I llm_load_print_meta: n_merges         = 0
0.00.866.095 I llm_load_print_meta: vocab_only       = 0
0.00.866.096 I llm_load_print_meta: n_ctx_train      = 8192
0.00.866.096 I llm_load_print_meta: n_embd           = 2048
0.00.866.096 I llm_load_print_meta: n_layer          = 18
0.00.866.160 I llm_load_print_meta: n_head           = 8
0.00.866.168 I llm_load_print_meta: n_head_kv        = 1
0.00.866.169 I llm_load_print_meta: n_rot            = 256
0.00.866.170 I llm_load_print_meta: n_swa            = 0
0.00.866.170 I llm_load_print_meta: n_embd_head_k    = 256
0.00.866.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.866.176 I llm_load_print_meta: n_gqa            = 8
0.00.866.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.866.188 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.866.189 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.866.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.866.191 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.866.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.866.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.866.198 I llm_load_print_meta: n_ff             = 16384
0.00.866.199 I llm_load_print_meta: n_expert         = 0
0.00.866.204 I llm_load_print_meta: n_expert_used    = 0
0.00.866.204 I llm_load_print_meta: causal attn      = 1
0.00.866.204 I llm_load_print_meta: pooling type     = 0
0.00.866.205 I llm_load_print_meta: rope type        = 2
0.00.866.205 I llm_load_print_meta: rope scaling     = linear
0.00.866.206 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.866.207 I llm_load_print_meta: freq_scale_train = 1
0.00.866.207 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.866.208 I llm_load_print_meta: rope_finetuned   = unknown
0.00.866.209 I llm_load_print_meta: ssm_d_conv       = 0
0.00.866.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.866.210 I llm_load_print_meta: ssm_d_state      = 0
0.00.866.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.866.211 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.866.212 I llm_load_print_meta: model type       = 2B
0.00.866.213 I llm_load_print_meta: model ftype      = Q8_0
0.00.866.213 I llm_load_print_meta: model params     = 2.51 B
0.00.866.214 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.866.215 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.866.215 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.866.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.866.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.866.217 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.866.218 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.866.218 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.866.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.866.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.866.241 I llm_load_print_meta: max token length = 93
0.00.944.889 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.944.900 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.944.901 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.944.902 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.944.902 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.944.903 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.950.838 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.848 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.848 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.849 I llama_new_context_with_model: n_batch       = 2048
0.00.950.849 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.850 I llama_new_context_with_model: flash_attn    = 0
0.00.950.854 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.854 I llama_new_context_with_model: freq_scale    = 1
0.00.950.855 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.951 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.966.648 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.693 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.554 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.558 I llama_new_context_with_model: graph nodes  = 601
0.00.969.559 I llama_new_context_with_model: graph splits = 1
0.00.969.584 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.587 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.427 I main: llama threadpool init, n_threads = 4
0.01.583.443 I 
0.01.583.563 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.583.568 I 
0.01.583.806 I sampler seed: 2668746332
0.01.583.821 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.583.831 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.583.835 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.583.835 I 
 increasively. 

I am sorry, but I am unable to provide an answer that perpetuates potentially harmful or inappropriate content. [end of text]


0.13.007.434 I llama_perf_sampler_print:    sampling time =      41.98 ms /    28 runs   (    1.50 ms per token,   666.98 tokens per second)
0.13.007.450 I llama_perf_context_print:        load time =    1582.49 ms
0.13.007.452 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.007.454 I llama_perf_context_print:        eval time =   11348.40 ms /    27 runs   (  420.31 ms per token,     2.38 tokens per second)
0.13.007.454 I llama_perf_context_print:       total time =   11424.01 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.705 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.000.915 I main: load the model and apply lora adapter, if any
0.00.023.504 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.612 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.642 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.647 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.654 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.657 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.658 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.659 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.945 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.753 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.755 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.759 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.767 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.353.769 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.778 I llama_model_loader: - type  f32:   37 tensors
0.00.353.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.105 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.123 I llm_load_vocab: special tokens cache size = 5
0.00.829.645 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.723 I llm_load_print_meta: arch             = gemma
0.00.829.724 I llm_load_print_meta: vocab type       = SPM
0.00.829.725 I llm_load_print_meta: n_vocab          = 256000
0.00.829.728 I llm_load_print_meta: n_merges         = 0
0.00.829.729 I llm_load_print_meta: vocab_only       = 0
0.00.829.729 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.729 I llm_load_print_meta: n_embd           = 2048
0.00.829.730 I llm_load_print_meta: n_layer          = 18
0.00.829.792 I llm_load_print_meta: n_head           = 8
0.00.829.799 I llm_load_print_meta: n_head_kv        = 1
0.00.829.799 I llm_load_print_meta: n_rot            = 256
0.00.829.800 I llm_load_print_meta: n_swa            = 0
0.00.829.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.801 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.805 I llm_load_print_meta: n_gqa            = 8
0.00.829.810 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.816 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.818 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.820 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.820 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.821 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.821 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.827 I llm_load_print_meta: n_ff             = 16384
0.00.829.827 I llm_load_print_meta: n_expert         = 0
0.00.829.828 I llm_load_print_meta: n_expert_used    = 0
0.00.829.829 I llm_load_print_meta: causal attn      = 1
0.00.829.830 I llm_load_print_meta: pooling type     = 0
0.00.829.830 I llm_load_print_meta: rope type        = 2
0.00.829.831 I llm_load_print_meta: rope scaling     = linear
0.00.829.833 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.834 I llm_load_print_meta: freq_scale_train = 1
0.00.829.834 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.842 I llm_load_print_meta: model type       = 2B
0.00.829.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.843 I llm_load_print_meta: model params     = 2.51 B
0.00.829.844 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.845 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.846 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.847 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.848 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.855 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.857 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.858 I llm_load_print_meta: max token length = 93
0.00.902.624 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.902.635 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.908.491 I llama_new_context_with_model: n_seq_max     = 1
0.00.908.497 I llama_new_context_with_model: n_ctx         = 4096
0.00.908.497 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.908.498 I llama_new_context_with_model: n_batch       = 2048
0.00.908.498 I llama_new_context_with_model: n_ubatch      = 512
0.00.908.499 I llama_new_context_with_model: flash_attn    = 0
0.00.908.501 I llama_new_context_with_model: freq_base     = 10000.0
0.00.908.502 I llama_new_context_with_model: freq_scale    = 1
0.00.908.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.908.590 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.923.313 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.923.353 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.923.474 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.926.096 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.926.100 I llama_new_context_with_model: graph nodes  = 601
0.00.926.100 I llama_new_context_with_model: graph splits = 1
0.00.926.124 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.926.128 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.378 I main: llama threadpool init, n_threads = 4
0.01.538.396 I 
0.01.538.523 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.538.527 I 
0.01.538.764 I sampler seed: 3367195530
0.01.538.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.787 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.791 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.791 I 
 increadibly!

I am unable to understand the provided text. Please provide more context or clarification so I can better assist you. [end of text]


0.12.915.647 I llama_perf_sampler_print:    sampling time =      42.16 ms /    28 runs   (    1.51 ms per token,   664.06 tokens per second)
0.12.915.650 I llama_perf_context_print:        load time =    1537.36 ms
0.12.915.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.915.653 I llama_perf_context_print:        eval time =   11299.80 ms /    27 runs   (  418.51 ms per token,     2.39 tokens per second)
0.12.915.654 I llama_perf_context_print:       total time =   11377.28 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.091s
user	3m33.370s
sys	0m9.569s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4364 (57bb2c40)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185776.84 ms
main:    total time = 185776.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.901 I main: llama backend init
0.00.000.909 I main: load the model and apply lora adapter, if any
0.00.023.431 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.446 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.546 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.575 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.579 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.581 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.585 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.586 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.595 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.596 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.598 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.600 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.602 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.765 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.659 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.674 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.678 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.685 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.686 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.698 I llama_model_loader: - type  f32:   37 tensors
0.00.353.700 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.700 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.053 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.626 I llm_load_vocab: special tokens cache size = 5
0.00.831.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.190 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.191 I llm_load_print_meta: arch             = gemma
0.00.831.192 I llm_load_print_meta: vocab type       = SPM
0.00.831.193 I llm_load_print_meta: n_vocab          = 256000
0.00.831.196 I llm_load_print_meta: n_merges         = 0
0.00.831.197 I llm_load_print_meta: vocab_only       = 0
0.00.831.197 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.198 I llm_load_print_meta: n_embd           = 2048
0.00.831.198 I llm_load_print_meta: n_layer          = 18
0.00.831.262 I llm_load_print_meta: n_head           = 8
0.00.831.269 I llm_load_print_meta: n_head_kv        = 1
0.00.831.270 I llm_load_print_meta: n_rot            = 256
0.00.831.270 I llm_load_print_meta: n_swa            = 0
0.00.831.271 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.275 I llm_load_print_meta: n_gqa            = 8
0.00.831.282 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.287 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.288 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.290 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.291 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.291 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.296 I llm_load_print_meta: n_ff             = 16384
0.00.831.297 I llm_load_print_meta: n_expert         = 0
0.00.831.297 I llm_load_print_meta: n_expert_used    = 0
0.00.831.298 I llm_load_print_meta: causal attn      = 1
0.00.831.298 I llm_load_print_meta: pooling type     = 0
0.00.831.298 I llm_load_print_meta: rope type        = 2
0.00.831.299 I llm_load_print_meta: rope scaling     = linear
0.00.831.300 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.301 I llm_load_print_meta: freq_scale_train = 1
0.00.831.301 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.301 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.302 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.302 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.303 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.304 I llm_load_print_meta: model type       = 2B
0.00.831.306 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.307 I llm_load_print_meta: model params     = 2.51 B
0.00.831.308 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.326 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.326 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.332 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.333 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.338 I llm_load_print_meta: max token length = 93
0.00.892.886 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.892.896 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.892.897 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.892.898 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.892.898 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.892.899 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.898.651 I llama_new_context_with_model: n_seq_max     = 1
0.00.898.658 I llama_new_context_with_model: n_ctx         = 4096
0.00.898.658 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.898.659 I llama_new_context_with_model: n_batch       = 2048
0.00.898.659 I llama_new_context_with_model: n_ubatch      = 512
0.00.898.660 I llama_new_context_with_model: flash_attn    = 0
0.00.898.662 I llama_new_context_with_model: freq_base     = 10000.0
0.00.898.663 I llama_new_context_with_model: freq_scale    = 1
0.00.898.663 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.898.750 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.913.865 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.908 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.914.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.916.762 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.916.767 I llama_new_context_with_model: graph nodes  = 601
0.00.916.767 I llama_new_context_with_model: graph splits = 1
0.00.916.792 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.916.795 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.836 I main: llama threadpool init, n_threads = 4
0.01.496.855 I 
0.01.496.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.496.982 I 
0.01.497.220 I sampler seed: 3114528359
0.01.497.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.497.242 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.497.246 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.497.246 I 
 maneuvously. I cannot generate text that is sexually suggestive or inappropriate. [end of text]


0.07.066.005 I llama_perf_sampler_print:    sampling time =      24.99 ms /    17 runs   (    1.47 ms per token,   680.30 tokens per second)
0.07.066.008 I llama_perf_context_print:        load time =    1495.82 ms
0.07.066.010 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.066.012 I llama_perf_context_print:        eval time =    5523.02 ms /    16 runs   (  345.19 ms per token,     2.90 tokens per second)
0.07.066.014 I llama_perf_context_print:       total time =    5569.18 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4364 (57bb2c40)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185719.95 ms
main:    total time = 185719.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4364 (57bb2c40) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.318 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.422 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.438 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.440 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.448 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.456 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.465 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.645 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.427 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.359.340 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.359.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.359.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.359.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.359.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.359.357 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.359.359 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.359.363 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.359.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.359.372 I llama_model_loader: - type  f32:   37 tensors
0.00.359.375 I llama_model_loader: - type q4_K:  108 tensors
0.00.359.376 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.203 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.053 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.064 I llm_load_vocab: special tokens cache size = 5
0.00.865.132 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.214 I llm_load_print_meta: arch             = gemma
0.00.865.215 I llm_load_print_meta: vocab type       = SPM
0.00.865.216 I llm_load_print_meta: n_vocab          = 256000
0.00.865.218 I llm_load_print_meta: n_merges         = 0
0.00.865.219 I llm_load_print_meta: vocab_only       = 0
0.00.865.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.220 I llm_load_print_meta: n_embd           = 2048
0.00.865.220 I llm_load_print_meta: n_layer          = 18
0.00.865.284 I llm_load_print_meta: n_head           = 8
0.00.865.294 I llm_load_print_meta: n_head_kv        = 1
0.00.865.295 I llm_load_print_meta: n_rot            = 256
0.00.865.295 I llm_load_print_meta: n_swa            = 0
0.00.865.295 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.300 I llm_load_print_meta: n_gqa            = 8
0.00.865.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.320 I llm_load_print_meta: n_ff             = 16384
0.00.865.321 I llm_load_print_meta: n_expert         = 0
0.00.865.322 I llm_load_print_meta: n_expert_used    = 0
0.00.865.323 I llm_load_print_meta: causal attn      = 1
0.00.865.323 I llm_load_print_meta: pooling type     = 0
0.00.865.324 I llm_load_print_meta: rope type        = 2
0.00.865.324 I llm_load_print_meta: rope scaling     = linear
0.00.865.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.326 I llm_load_print_meta: freq_scale_train = 1
0.00.865.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.328 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.332 I llm_load_print_meta: model type       = 2B
0.00.865.333 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.865.334 I llm_load_print_meta: model params     = 2.51 B
0.00.865.335 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.865.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.343 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.345 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.345 I llm_load_print_meta: max token length = 93
0.00.924.807 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.930.660 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.667 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.667 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.668 I llama_new_context_with_model: n_batch       = 2048
0.00.930.668 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.669 I llama_new_context_with_model: flash_attn    = 0
0.00.930.672 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.673 I llama_new_context_with_model: freq_scale    = 1
0.00.930.674 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.765 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.945.681 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.724 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.849 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.508 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.512 I llama_new_context_with_model: graph nodes  = 601
0.00.948.512 I llama_new_context_with_model: graph splits = 1
0.00.948.535 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.948.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.339 I main: llama threadpool init, n_threads = 4
0.01.527.354 I 
0.01.527.483 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.527.487 I 
0.01.527.732 I sampler seed: 1671607466
0.01.527.748 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.761 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.762 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.762 I 
 increamically.

I have a problem. I need to write a program that calculates the sum of all even numbers between 1 and 100.

0.12.658.447 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.55 tokens per second)
0.12.658.449 I llama_perf_context_print:        load time =    1526.35 ms
0.12.658.471 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.658.473 I llama_perf_context_print:        eval time =   11041.21 ms /    32 runs   (  345.04 ms per token,     2.90 tokens per second)
0.12.658.475 I llama_perf_context_print:       total time =   11131.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m34.169s
user	46m20.678s
sys	0m6.514s
