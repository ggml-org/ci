+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.698 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.086.965 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.981 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.078 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.100 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.106 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.114 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.115 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.117 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.119 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.127 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.129 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.131 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.132 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.134 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.283 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.349 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.345 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.347 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.350 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.352 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.359 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.361 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.363 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.365 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.367 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.413.375 I llama_model_loader: - type  f32:   37 tensors
0.00.413.377 I llama_model_loader: - type q8_0:  127 tensors
0.00.413.395 I print_info: file format = GGUF V3 (latest)
0.00.413.395 I print_info: file type   = Q8_0
0.00.413.398 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.727.157 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.858.659 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.859.873 I load: special tokens cache size = 5
0.01.093.543 I load: token to piece cache size = 1.6014 MB
0.01.093.624 I print_info: arch             = gemma
0.01.093.628 I print_info: vocab_only       = 0
0.01.093.629 I print_info: n_ctx_train      = 8192
0.01.093.629 I print_info: n_embd           = 2048
0.01.093.629 I print_info: n_layer          = 18
0.01.093.698 I print_info: n_head           = 8
0.01.093.708 I print_info: n_head_kv        = 1
0.01.093.709 I print_info: n_rot            = 256
0.01.093.710 I print_info: n_swa            = 0
0.01.093.710 I print_info: n_embd_head_k    = 256
0.01.093.711 I print_info: n_embd_head_v    = 256
0.01.093.716 I print_info: n_gqa            = 8
0.01.093.721 I print_info: n_embd_k_gqa     = 256
0.01.093.725 I print_info: n_embd_v_gqa     = 256
0.01.093.729 I print_info: f_norm_eps       = 0.0e+00
0.01.093.731 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.093.731 I print_info: f_clamp_kqv      = 0.0e+00
0.01.093.732 I print_info: f_max_alibi_bias = 0.0e+00
0.01.093.732 I print_info: f_logit_scale    = 0.0e+00
0.01.093.737 I print_info: n_ff             = 16384
0.01.093.737 I print_info: n_expert         = 0
0.01.093.738 I print_info: n_expert_used    = 0
0.01.093.739 I print_info: causal attn      = 1
0.01.093.740 I print_info: pooling type     = 0
0.01.093.741 I print_info: rope type        = 2
0.01.093.741 I print_info: rope scaling     = linear
0.01.093.743 I print_info: freq_base_train  = 10000.0
0.01.093.743 I print_info: freq_scale_train = 1
0.01.093.744 I print_info: n_ctx_orig_yarn  = 8192
0.01.093.745 I print_info: rope_finetuned   = unknown
0.01.093.745 I print_info: ssm_d_conv       = 0
0.01.093.747 I print_info: ssm_d_inner      = 0
0.01.093.748 I print_info: ssm_d_state      = 0
0.01.093.748 I print_info: ssm_dt_rank      = 0
0.01.093.749 I print_info: ssm_dt_b_c_rms   = 0
0.01.093.751 I print_info: model type       = 2B
0.01.093.752 I print_info: model params     = 2.51 B
0.01.093.753 I print_info: general.name     = gemma-1.1-2b-it
0.01.093.757 I print_info: vocab type       = SPM
0.01.093.759 I print_info: n_vocab          = 256000
0.01.093.761 I print_info: n_merges         = 0
0.01.093.762 I print_info: BOS token        = 2 '<bos>'
0.01.093.762 I print_info: EOS token        = 1 '<eos>'
0.01.093.763 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.093.763 I print_info: UNK token        = 3 '<unk>'
0.01.093.764 I print_info: PAD token        = 0 '<pad>'
0.01.093.765 I print_info: LF token         = 227 '<0x0A>'
0.01.093.771 I print_info: EOG token        = 1 '<eos>'
0.01.093.773 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.093.773 I print_info: max token length = 93
0.01.093.775 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.196.125 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.196.138 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.196.139 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.196.140 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.196.141 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.196.142 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.203.238 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.203.247 I llama_context_base: n_seq_max     = 1
0.01.203.247 I llama_context_base: n_ctx         = 4096
0.01.203.247 I llama_context_base: n_ctx_per_seq = 4096
0.01.203.248 I llama_context_base: n_batch       = 2048
0.01.203.248 I llama_context_base: n_ubatch      = 512
0.01.203.249 I llama_context_base: causal_attn   = 1
0.01.203.249 I llama_context_base: flash_attn    = 0
0.01.203.252 I llama_context_base: freq_base     = 10000.0
0.01.203.253 I llama_context_base: freq_scale    = 1
0.01.203.254 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.203.476 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.203.489 I llama_context_kv_self: constructing llama_context_kv_self
0.01.203.529 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.219.846 I init:        CPU KV buffer size =    72.00 MiB
0.01.219.888 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.223.233 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.223.237 I reserve: graph nodes  = 619
0.01.223.237 I reserve: graph splits = 1
0.01.223.248 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.223.249 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.893.588 I main: llama threadpool init, n_threads = 4
0.01.893.604 I 
0.01.893.698 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.893.702 I 
0.01.893.942 I sampler seed: 1330286349
0.01.893.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.893.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.893.969 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.893.969 I 
 increamentalism. [end of text]


0.04.015.686 I llama_perf_sampler_print:    sampling time =       7.69 ms /     6 runs   (    1.28 ms per token,   779.93 tokens per second)
0.04.015.691 I llama_perf_context_print:        load time =    1865.67 ms
0.04.015.693 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.015.695 I llama_perf_context_print:        eval time =    2107.22 ms /     5 runs   (  421.44 ms per token,     2.37 tokens per second)
0.04.015.696 I llama_perf_context_print:       total time =    2148.98 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.736 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.959 I main: llama backend init
0.00.000.968 I main: load the model and apply lora adapter, if any
0.00.086.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.975 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.018 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.314.965 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.414.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.437.872 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.437.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.437.888 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.437.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.437.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.437.894 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.437.896 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.437.901 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.437.903 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.437.905 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.437.907 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.437.908 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.437.917 I llama_model_loader: - type  f32:   37 tensors
0.00.437.919 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.935 I print_info: file format = GGUF V3 (latest)
0.00.437.936 I print_info: file type   = Q8_0
0.00.437.940 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.743.861 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.874.274 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.875.354 I load: special tokens cache size = 5
0.01.117.173 I load: token to piece cache size = 1.6014 MB
0.01.117.262 I print_info: arch             = gemma
0.01.117.267 I print_info: vocab_only       = 0
0.01.117.267 I print_info: n_ctx_train      = 8192
0.01.117.268 I print_info: n_embd           = 2048
0.01.117.269 I print_info: n_layer          = 18
0.01.117.341 I print_info: n_head           = 8
0.01.117.352 I print_info: n_head_kv        = 1
0.01.117.354 I print_info: n_rot            = 256
0.01.117.354 I print_info: n_swa            = 0
0.01.117.354 I print_info: n_embd_head_k    = 256
0.01.117.355 I print_info: n_embd_head_v    = 256
0.01.117.359 I print_info: n_gqa            = 8
0.01.117.364 I print_info: n_embd_k_gqa     = 256
0.01.117.369 I print_info: n_embd_v_gqa     = 256
0.01.117.371 I print_info: f_norm_eps       = 0.0e+00
0.01.117.372 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.117.373 I print_info: f_clamp_kqv      = 0.0e+00
0.01.117.373 I print_info: f_max_alibi_bias = 0.0e+00
0.01.117.373 I print_info: f_logit_scale    = 0.0e+00
0.01.117.380 I print_info: n_ff             = 16384
0.01.117.389 I print_info: n_expert         = 0
0.01.117.390 I print_info: n_expert_used    = 0
0.01.117.406 I print_info: causal attn      = 1
0.01.117.410 I print_info: pooling type     = 0
0.01.117.410 I print_info: rope type        = 2
0.01.117.411 I print_info: rope scaling     = linear
0.01.117.412 I print_info: freq_base_train  = 10000.0
0.01.117.413 I print_info: freq_scale_train = 1
0.01.117.413 I print_info: n_ctx_orig_yarn  = 8192
0.01.117.414 I print_info: rope_finetuned   = unknown
0.01.117.414 I print_info: ssm_d_conv       = 0
0.01.117.414 I print_info: ssm_d_inner      = 0
0.01.117.415 I print_info: ssm_d_state      = 0
0.01.117.415 I print_info: ssm_dt_rank      = 0
0.01.117.415 I print_info: ssm_dt_b_c_rms   = 0
0.01.117.417 I print_info: model type       = 2B
0.01.117.418 I print_info: model params     = 2.51 B
0.01.117.418 I print_info: general.name     = gemma-1.1-2b-it
0.01.117.423 I print_info: vocab type       = SPM
0.01.117.424 I print_info: n_vocab          = 256000
0.01.117.427 I print_info: n_merges         = 0
0.01.117.428 I print_info: BOS token        = 2 '<bos>'
0.01.117.429 I print_info: EOS token        = 1 '<eos>'
0.01.117.430 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.117.431 I print_info: UNK token        = 3 '<unk>'
0.01.117.432 I print_info: PAD token        = 0 '<pad>'
0.01.117.432 I print_info: LF token         = 227 '<0x0A>'
0.01.117.439 I print_info: EOG token        = 1 '<eos>'
0.01.117.441 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.117.442 I print_info: max token length = 93
0.01.117.444 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.194.092 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.201.172 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.201.181 I llama_context_base: n_seq_max     = 1
0.01.201.182 I llama_context_base: n_ctx         = 4096
0.01.201.182 I llama_context_base: n_ctx_per_seq = 4096
0.01.201.182 I llama_context_base: n_batch       = 2048
0.01.201.183 I llama_context_base: n_ubatch      = 512
0.01.201.183 I llama_context_base: causal_attn   = 1
0.01.201.184 I llama_context_base: flash_attn    = 0
0.01.201.187 I llama_context_base: freq_base     = 10000.0
0.01.201.188 I llama_context_base: freq_scale    = 1
0.01.201.188 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.201.401 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.201.411 I llama_context_kv_self: constructing llama_context_kv_self
0.01.201.451 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.217.709 I init:        CPU KV buffer size =    72.00 MiB
0.01.217.754 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.221.057 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.221.061 I reserve: graph nodes  = 619
0.01.221.062 I reserve: graph splits = 1
0.01.221.072 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.221.072 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.887.052 I main: llama threadpool init, n_threads = 4
0.01.887.069 I 
0.01.887.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.887.194 I 
0.01.887.424 I sampler seed: 765362624
0.01.887.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.887.449 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.887.450 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.887.450 I 
 secon.

I am unable to generate a response as requested because the provided context does not contain any information regarding the specific rules or guidelines for generating responses. Therefore

0.15.472.211 I llama_perf_sampler_print:    sampling time =      48.37 ms /    33 runs   (    1.47 ms per token,   682.31 tokens per second)
0.15.472.217 I llama_perf_context_print:        load time =    1859.23 ms
0.15.472.218 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.472.220 I llama_perf_context_print:        eval time =   13500.63 ms /    32 runs   (  421.89 ms per token,     2.37 tokens per second)
0.15.472.221 I llama_perf_context_print:       total time =   13611.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.791 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.000 I main: llama backend init
0.00.001.009 I main: load the model and apply lora adapter, if any
0.00.087.002 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.087.019 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.087.122 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.146 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.154 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.159 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.161 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.175 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.316.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.416.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.439.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.439.903 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.439.905 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.439.907 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.439.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.439.911 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.439.913 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.439.918 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.439.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.439.922 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.439.924 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.439.926 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.439.934 I llama_model_loader: - type  f32:   37 tensors
0.00.439.936 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.955 I print_info: file format = GGUF V3 (latest)
0.00.439.956 I print_info: file type   = Q8_0
0.00.439.959 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.752.902 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.884.453 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.885.570 I load: special tokens cache size = 5
0.01.130.521 I load: token to piece cache size = 1.6014 MB
0.01.130.613 I print_info: arch             = gemma
0.01.130.614 I print_info: vocab_only       = 0
0.01.130.615 I print_info: n_ctx_train      = 8192
0.01.130.615 I print_info: n_embd           = 2048
0.01.130.616 I print_info: n_layer          = 18
0.01.130.682 I print_info: n_head           = 8
0.01.130.691 I print_info: n_head_kv        = 1
0.01.130.691 I print_info: n_rot            = 256
0.01.130.692 I print_info: n_swa            = 0
0.01.130.692 I print_info: n_embd_head_k    = 256
0.01.130.693 I print_info: n_embd_head_v    = 256
0.01.130.697 I print_info: n_gqa            = 8
0.01.130.702 I print_info: n_embd_k_gqa     = 256
0.01.130.707 I print_info: n_embd_v_gqa     = 256
0.01.130.708 I print_info: f_norm_eps       = 0.0e+00
0.01.130.710 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.130.710 I print_info: f_clamp_kqv      = 0.0e+00
0.01.130.710 I print_info: f_max_alibi_bias = 0.0e+00
0.01.130.711 I print_info: f_logit_scale    = 0.0e+00
0.01.130.715 I print_info: n_ff             = 16384
0.01.130.716 I print_info: n_expert         = 0
0.01.130.716 I print_info: n_expert_used    = 0
0.01.130.716 I print_info: causal attn      = 1
0.01.130.717 I print_info: pooling type     = 0
0.01.130.717 I print_info: rope type        = 2
0.01.130.718 I print_info: rope scaling     = linear
0.01.130.719 I print_info: freq_base_train  = 10000.0
0.01.130.720 I print_info: freq_scale_train = 1
0.01.130.721 I print_info: n_ctx_orig_yarn  = 8192
0.01.130.721 I print_info: rope_finetuned   = unknown
0.01.130.721 I print_info: ssm_d_conv       = 0
0.01.130.722 I print_info: ssm_d_inner      = 0
0.01.130.722 I print_info: ssm_d_state      = 0
0.01.130.723 I print_info: ssm_dt_rank      = 0
0.01.130.724 I print_info: ssm_dt_b_c_rms   = 0
0.01.130.725 I print_info: model type       = 2B
0.01.130.726 I print_info: model params     = 2.51 B
0.01.130.726 I print_info: general.name     = gemma-1.1-2b-it
0.01.130.731 I print_info: vocab type       = SPM
0.01.130.733 I print_info: n_vocab          = 256000
0.01.130.735 I print_info: n_merges         = 0
0.01.130.735 I print_info: BOS token        = 2 '<bos>'
0.01.130.736 I print_info: EOS token        = 1 '<eos>'
0.01.130.736 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.130.737 I print_info: UNK token        = 3 '<unk>'
0.01.130.737 I print_info: PAD token        = 0 '<pad>'
0.01.130.738 I print_info: LF token         = 227 '<0x0A>'
0.01.130.744 I print_info: EOG token        = 1 '<eos>'
0.01.130.745 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.130.745 I print_info: max token length = 93
0.01.130.747 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.205.416 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.205.425 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.205.426 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.205.427 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.205.427 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.205.428 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.212.389 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.212.398 I llama_context_base: n_seq_max     = 1
0.01.212.398 I llama_context_base: n_ctx         = 4096
0.01.212.398 I llama_context_base: n_ctx_per_seq = 4096
0.01.212.399 I llama_context_base: n_batch       = 2048
0.01.212.399 I llama_context_base: n_ubatch      = 512
0.01.212.400 I llama_context_base: causal_attn   = 1
0.01.212.400 I llama_context_base: flash_attn    = 0
0.01.212.404 I llama_context_base: freq_base     = 10000.0
0.01.212.404 I llama_context_base: freq_scale    = 1
0.01.212.405 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.212.634 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.212.646 I llama_context_kv_self: constructing llama_context_kv_self
0.01.212.689 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.229.480 I init:        CPU KV buffer size =    72.00 MiB
0.01.229.522 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.233.171 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.233.175 I reserve: graph nodes  = 619
0.01.233.176 I reserve: graph splits = 1
0.01.233.185 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.233.200 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.868.337 I main: llama threadpool init, n_threads = 4
0.01.868.355 I 
0.01.868.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.868.460 I 
0.01.868.698 I sampler seed: 2678888878
0.01.868.712 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.868.722 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.868.740 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.868.743 I 
 increably.

I am unable to generate an answer because the provided context does not contain any information regarding the requested task. [end of text]


0.12.960.541 I llama_perf_sampler_print:    sampling time =      39.61 ms /    27 runs   (    1.47 ms per token,   681.65 tokens per second)
0.12.960.548 I llama_perf_context_print:        load time =    1840.48 ms
0.12.960.550 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.960.551 I llama_perf_context_print:        eval time =   11022.82 ms /    26 runs   (  423.95 ms per token,     2.36 tokens per second)
0.12.960.552 I llama_perf_context_print:       total time =   11118.91 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.685 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.000.918 I main: load the model and apply lora adapter, if any
0.00.086.042 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.058 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.086.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.179 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.190 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.193 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.195 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.196 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.204 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.317.496 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.417.703 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.440.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.440.846 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.440.848 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.440.850 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.440.852 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.440.854 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.440.856 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.440.861 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.440.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.440.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.440.866 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.440.868 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.440.876 I llama_model_loader: - type  f32:   37 tensors
0.00.440.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.895 I print_info: file format = GGUF V3 (latest)
0.00.440.896 I print_info: file type   = Q8_0
0.00.440.899 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.751.866 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.883.701 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.884.763 I load: special tokens cache size = 5
0.01.128.770 I load: token to piece cache size = 1.6014 MB
0.01.128.854 I print_info: arch             = gemma
0.01.128.855 I print_info: vocab_only       = 0
0.01.128.856 I print_info: n_ctx_train      = 8192
0.01.128.857 I print_info: n_embd           = 2048
0.01.128.857 I print_info: n_layer          = 18
0.01.128.925 I print_info: n_head           = 8
0.01.128.932 I print_info: n_head_kv        = 1
0.01.128.932 I print_info: n_rot            = 256
0.01.128.933 I print_info: n_swa            = 0
0.01.128.933 I print_info: n_embd_head_k    = 256
0.01.128.958 I print_info: n_embd_head_v    = 256
0.01.128.964 I print_info: n_gqa            = 8
0.01.128.969 I print_info: n_embd_k_gqa     = 256
0.01.128.975 I print_info: n_embd_v_gqa     = 256
0.01.128.976 I print_info: f_norm_eps       = 0.0e+00
0.01.128.978 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.128.979 I print_info: f_clamp_kqv      = 0.0e+00
0.01.128.979 I print_info: f_max_alibi_bias = 0.0e+00
0.01.128.980 I print_info: f_logit_scale    = 0.0e+00
0.01.128.985 I print_info: n_ff             = 16384
0.01.128.986 I print_info: n_expert         = 0
0.01.128.987 I print_info: n_expert_used    = 0
0.01.128.987 I print_info: causal attn      = 1
0.01.128.987 I print_info: pooling type     = 0
0.01.128.988 I print_info: rope type        = 2
0.01.128.989 I print_info: rope scaling     = linear
0.01.128.991 I print_info: freq_base_train  = 10000.0
0.01.128.992 I print_info: freq_scale_train = 1
0.01.128.993 I print_info: n_ctx_orig_yarn  = 8192
0.01.128.993 I print_info: rope_finetuned   = unknown
0.01.128.994 I print_info: ssm_d_conv       = 0
0.01.128.994 I print_info: ssm_d_inner      = 0
0.01.128.995 I print_info: ssm_d_state      = 0
0.01.128.995 I print_info: ssm_dt_rank      = 0
0.01.128.995 I print_info: ssm_dt_b_c_rms   = 0
0.01.128.997 I print_info: model type       = 2B
0.01.128.998 I print_info: model params     = 2.51 B
0.01.129.003 I print_info: general.name     = gemma-1.1-2b-it
0.01.129.008 I print_info: vocab type       = SPM
0.01.129.010 I print_info: n_vocab          = 256000
0.01.129.012 I print_info: n_merges         = 0
0.01.129.013 I print_info: BOS token        = 2 '<bos>'
0.01.129.013 I print_info: EOS token        = 1 '<eos>'
0.01.129.014 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.129.014 I print_info: UNK token        = 3 '<unk>'
0.01.129.018 I print_info: PAD token        = 0 '<pad>'
0.01.129.018 I print_info: LF token         = 227 '<0x0A>'
0.01.129.025 I print_info: EOG token        = 1 '<eos>'
0.01.129.027 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.129.028 I print_info: max token length = 93
0.01.129.029 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.203.172 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.203.180 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.210.102 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.210.110 I llama_context_base: n_seq_max     = 1
0.01.210.110 I llama_context_base: n_ctx         = 4096
0.01.210.111 I llama_context_base: n_ctx_per_seq = 4096
0.01.210.111 I llama_context_base: n_batch       = 2048
0.01.210.112 I llama_context_base: n_ubatch      = 512
0.01.210.112 I llama_context_base: causal_attn   = 1
0.01.210.112 I llama_context_base: flash_attn    = 0
0.01.210.116 I llama_context_base: freq_base     = 10000.0
0.01.210.116 I llama_context_base: freq_scale    = 1
0.01.210.117 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.210.340 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.210.350 I llama_context_kv_self: constructing llama_context_kv_self
0.01.210.391 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.225.787 I init:        CPU KV buffer size =    72.00 MiB
0.01.225.833 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.229.266 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.229.270 I reserve: graph nodes  = 619
0.01.229.270 I reserve: graph splits = 1
0.01.229.280 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.229.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.866.033 I main: llama threadpool init, n_threads = 4
0.01.866.052 I 
0.01.866.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.866.155 I 
0.01.866.391 I sampler seed: 912108842
0.01.866.404 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.866.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.866.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.866.418 I 
 seconary, and tertiary lymphoid organs are all a part of what larger structure?

a) Respiratory system
b) Digestive system
c) Lymphoid system

0.15.474.102 I llama_perf_sampler_print:    sampling time =      48.18 ms /    33 runs   (    1.46 ms per token,   684.92 tokens per second)
0.15.474.105 I llama_perf_context_print:        load time =    1838.37 ms
0.15.474.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.474.108 I llama_perf_context_print:        eval time =   13523.29 ms /    32 runs   (  422.60 ms per token,     2.37 tokens per second)
0.15.474.109 I llama_perf_context_print:       total time =   13634.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.418s
user	2m58.302s
sys	0m9.564s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4874 (57646a79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186538.05 ms
main:    total time = 186538.05 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.764 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.983 I main: llama backend init
0.00.000.994 I main: load the model and apply lora adapter, if any
0.00.087.090 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.087.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.215 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.237 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.245 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.247 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.249 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.251 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.252 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.273 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.278 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.282 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.989 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.322 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.409 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.427 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.429 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.431 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.433 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.435 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.443 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.445 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.447 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.449 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.450 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.414.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.414.460 I llama_model_loader: - type  f32:   37 tensors
0.00.414.462 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.463 I llama_model_loader: - type q6_K:   19 tensors
0.00.414.481 I print_info: file format = GGUF V3 (latest)
0.00.414.482 I print_info: file type   = Q4_K - Medium
0.00.414.484 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.730.067 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.861.987 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.863.141 I load: special tokens cache size = 5
0.01.101.262 I load: token to piece cache size = 1.6014 MB
0.01.101.345 I print_info: arch             = gemma
0.01.101.347 I print_info: vocab_only       = 0
0.01.101.347 I print_info: n_ctx_train      = 8192
0.01.101.347 I print_info: n_embd           = 2048
0.01.101.348 I print_info: n_layer          = 18
0.01.101.416 I print_info: n_head           = 8
0.01.101.423 I print_info: n_head_kv        = 1
0.01.101.424 I print_info: n_rot            = 256
0.01.101.424 I print_info: n_swa            = 0
0.01.101.425 I print_info: n_embd_head_k    = 256
0.01.101.425 I print_info: n_embd_head_v    = 256
0.01.101.430 I print_info: n_gqa            = 8
0.01.101.435 I print_info: n_embd_k_gqa     = 256
0.01.101.440 I print_info: n_embd_v_gqa     = 256
0.01.101.441 I print_info: f_norm_eps       = 0.0e+00
0.01.101.443 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.101.443 I print_info: f_clamp_kqv      = 0.0e+00
0.01.101.444 I print_info: f_max_alibi_bias = 0.0e+00
0.01.101.444 I print_info: f_logit_scale    = 0.0e+00
0.01.101.449 I print_info: n_ff             = 16384
0.01.101.449 I print_info: n_expert         = 0
0.01.101.450 I print_info: n_expert_used    = 0
0.01.101.451 I print_info: causal attn      = 1
0.01.101.451 I print_info: pooling type     = 0
0.01.101.452 I print_info: rope type        = 2
0.01.101.452 I print_info: rope scaling     = linear
0.01.101.454 I print_info: freq_base_train  = 10000.0
0.01.101.455 I print_info: freq_scale_train = 1
0.01.101.456 I print_info: n_ctx_orig_yarn  = 8192
0.01.101.456 I print_info: rope_finetuned   = unknown
0.01.101.457 I print_info: ssm_d_conv       = 0
0.01.101.458 I print_info: ssm_d_inner      = 0
0.01.101.458 I print_info: ssm_d_state      = 0
0.01.101.458 I print_info: ssm_dt_rank      = 0
0.01.101.459 I print_info: ssm_dt_b_c_rms   = 0
0.01.101.461 I print_info: model type       = 2B
0.01.101.461 I print_info: model params     = 2.51 B
0.01.101.462 I print_info: general.name     = gemma-1.1-2b-it
0.01.101.466 I print_info: vocab type       = SPM
0.01.101.468 I print_info: n_vocab          = 256000
0.01.101.470 I print_info: n_merges         = 0
0.01.101.471 I print_info: BOS token        = 2 '<bos>'
0.01.101.471 I print_info: EOS token        = 1 '<eos>'
0.01.101.472 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.101.473 I print_info: UNK token        = 3 '<unk>'
0.01.101.473 I print_info: PAD token        = 0 '<pad>'
0.01.101.474 I print_info: LF token         = 227 '<0x0A>'
0.01.101.481 I print_info: EOG token        = 1 '<eos>'
0.01.101.482 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.101.483 I print_info: max token length = 93
0.01.101.484 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.153.433 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.153.445 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.153.446 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.153.446 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.153.447 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.153.448 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.160.578 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.160.589 I llama_context_base: n_seq_max     = 1
0.01.160.589 I llama_context_base: n_ctx         = 4096
0.01.160.590 I llama_context_base: n_ctx_per_seq = 4096
0.01.160.590 I llama_context_base: n_batch       = 2048
0.01.160.590 I llama_context_base: n_ubatch      = 512
0.01.160.591 I llama_context_base: causal_attn   = 1
0.01.160.591 I llama_context_base: flash_attn    = 0
0.01.160.594 I llama_context_base: freq_base     = 10000.0
0.01.160.595 I llama_context_base: freq_scale    = 1
0.01.160.596 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.160.814 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.160.826 I llama_context_kv_self: constructing llama_context_kv_self
0.01.160.867 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.177.623 I init:        CPU KV buffer size =    72.00 MiB
0.01.177.666 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.181.351 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.181.355 I reserve: graph nodes  = 619
0.01.181.355 I reserve: graph splits = 1
0.01.181.365 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.181.366 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.794.410 I main: llama threadpool init, n_threads = 4
0.01.794.429 I 
0.01.794.530 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.794.534 I 
0.01.794.768 I sampler seed: 4086269749
0.01.794.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.794.793 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.794.794 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.794.794 I 
 increasities in the human body.

**Answer:**

**The human body exhibits various complex physiological processes known as increasities that contribute to the intricate functioning and

0.12.980.880 I llama_perf_sampler_print:    sampling time =      48.43 ms /    33 runs   (    1.47 ms per token,   681.42 tokens per second)
0.12.980.885 I llama_perf_context_print:        load time =    1766.71 ms
0.12.980.887 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.980.888 I llama_perf_context_print:        eval time =   11101.74 ms /    32 runs   (  346.93 ms per token,     2.88 tokens per second)
0.12.980.889 I llama_perf_context_print:       total time =   11213.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4874 (57646a79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186451.65 ms
main:    total time = 186451.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.690 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.000.936 I main: load the model and apply lora adapter, if any
0.00.087.055 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.087.185 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.211 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.219 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.224 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.227 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.238 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.240 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.296.627 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.200 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.217 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.219 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.220 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.222 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.224 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.231 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.232 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.419.234 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.419.242 I llama_model_loader: - type  f32:   37 tensors
0.00.419.244 I llama_model_loader: - type q4_K:  108 tensors
0.00.419.245 I llama_model_loader: - type q6_K:   19 tensors
0.00.419.263 I print_info: file format = GGUF V3 (latest)
0.00.419.264 I print_info: file type   = Q4_K - Medium
0.00.419.267 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.725.668 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.856.057 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.857.235 I load: special tokens cache size = 5
0.01.091.658 I load: token to piece cache size = 1.6014 MB
0.01.091.738 I print_info: arch             = gemma
0.01.091.742 I print_info: vocab_only       = 0
0.01.091.742 I print_info: n_ctx_train      = 8192
0.01.091.743 I print_info: n_embd           = 2048
0.01.091.743 I print_info: n_layer          = 18
0.01.091.809 I print_info: n_head           = 8
0.01.091.819 I print_info: n_head_kv        = 1
0.01.091.820 I print_info: n_rot            = 256
0.01.091.820 I print_info: n_swa            = 0
0.01.091.821 I print_info: n_embd_head_k    = 256
0.01.091.821 I print_info: n_embd_head_v    = 256
0.01.091.826 I print_info: n_gqa            = 8
0.01.091.832 I print_info: n_embd_k_gqa     = 256
0.01.091.839 I print_info: n_embd_v_gqa     = 256
0.01.091.840 I print_info: f_norm_eps       = 0.0e+00
0.01.091.842 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.091.843 I print_info: f_clamp_kqv      = 0.0e+00
0.01.091.844 I print_info: f_max_alibi_bias = 0.0e+00
0.01.091.844 I print_info: f_logit_scale    = 0.0e+00
0.01.091.849 I print_info: n_ff             = 16384
0.01.091.850 I print_info: n_expert         = 0
0.01.091.851 I print_info: n_expert_used    = 0
0.01.091.851 I print_info: causal attn      = 1
0.01.091.851 I print_info: pooling type     = 0
0.01.091.854 I print_info: rope type        = 2
0.01.091.854 I print_info: rope scaling     = linear
0.01.091.856 I print_info: freq_base_train  = 10000.0
0.01.091.856 I print_info: freq_scale_train = 1
0.01.091.857 I print_info: n_ctx_orig_yarn  = 8192
0.01.091.858 I print_info: rope_finetuned   = unknown
0.01.091.858 I print_info: ssm_d_conv       = 0
0.01.091.858 I print_info: ssm_d_inner      = 0
0.01.091.859 I print_info: ssm_d_state      = 0
0.01.091.859 I print_info: ssm_dt_rank      = 0
0.01.091.859 I print_info: ssm_dt_b_c_rms   = 0
0.01.091.861 I print_info: model type       = 2B
0.01.091.861 I print_info: model params     = 2.51 B
0.01.091.862 I print_info: general.name     = gemma-1.1-2b-it
0.01.091.866 I print_info: vocab type       = SPM
0.01.091.868 I print_info: n_vocab          = 256000
0.01.091.870 I print_info: n_merges         = 0
0.01.091.871 I print_info: BOS token        = 2 '<bos>'
0.01.091.872 I print_info: EOS token        = 1 '<eos>'
0.01.091.872 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.091.872 I print_info: UNK token        = 3 '<unk>'
0.01.091.873 I print_info: PAD token        = 0 '<pad>'
0.01.091.874 I print_info: LF token         = 227 '<0x0A>'
0.01.091.881 I print_info: EOG token        = 1 '<eos>'
0.01.091.882 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.091.883 I print_info: max token length = 93
0.01.091.885 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.138.696 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.145.686 I llama_context_base: constructing llama_context_base, gtype = 0
0.01.145.696 I llama_context_base: n_seq_max     = 1
0.01.145.696 I llama_context_base: n_ctx         = 4096
0.01.145.696 I llama_context_base: n_ctx_per_seq = 4096
0.01.145.697 I llama_context_base: n_batch       = 2048
0.01.145.697 I llama_context_base: n_ubatch      = 512
0.01.145.698 I llama_context_base: causal_attn   = 1
0.01.145.698 I llama_context_base: flash_attn    = 0
0.01.145.701 I llama_context_base: freq_base     = 10000.0
0.01.145.702 I llama_context_base: freq_scale    = 1
0.01.145.702 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.145.931 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.01.145.944 I llama_context_kv_self: constructing llama_context_kv_self
0.01.145.985 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.164.195 I init:        CPU KV buffer size =    72.00 MiB
0.01.164.244 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.167.959 I reserve:        CPU compute buffer size =   509.01 MiB
0.01.167.963 I reserve: graph nodes  = 619
0.01.167.963 I reserve: graph splits = 1
0.01.167.975 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.167.975 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.783.767 I main: llama threadpool init, n_threads = 4
0.01.783.785 I 
0.01.783.878 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.783.878 I 
0.01.784.107 I sampler seed: 2566988931
0.01.784.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.784.132 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.784.133 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.784.133 I 
 maneupherably! [end of text]


0.03.512.507 I llama_perf_sampler_print:    sampling time =       7.77 ms /     6 runs   (    1.30 ms per token,   772.10 tokens per second)
0.03.512.511 I llama_perf_context_print:        load time =    1756.20 ms
0.03.512.523 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.512.525 I llama_perf_context_print:        eval time =    1713.31 ms /     5 runs   (  342.66 ms per token,     2.92 tokens per second)
0.03.512.526 I llama_perf_context_print:       total time =    1755.23 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m32.880s
user	46m11.945s
sys	0m6.501s
