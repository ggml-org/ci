+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.031.368 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.380 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.390 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.397 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.398 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.401 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.402 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.403 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.404 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.410 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.411 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.411 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.412 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.412 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.764 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.778 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.782 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.783 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.783 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.140.787 I llama_model_loader: - type  f32:   37 tensors
0.00.140.788 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.791 I print_info: file format = GGUF V3 (latest)
0.00.140.791 I print_info: file type   = Q8_0
0.00.140.794 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.240.936 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.297.493 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.298.251 I load: special tokens cache size = 5
0.00.320.919 I load: token to piece cache size = 1.6014 MB
0.00.320.945 I print_info: arch             = gemma
0.00.320.946 I print_info: vocab_only       = 0
0.00.320.947 I print_info: n_ctx_train      = 8192
0.00.320.947 I print_info: n_embd           = 2048
0.00.320.947 I print_info: n_layer          = 18
0.00.320.959 I print_info: n_head           = 8
0.00.320.961 I print_info: n_head_kv        = 1
0.00.320.962 I print_info: n_rot            = 256
0.00.320.962 I print_info: n_swa            = 0
0.00.320.962 I print_info: n_embd_head_k    = 256
0.00.320.963 I print_info: n_embd_head_v    = 256
0.00.320.965 I print_info: n_gqa            = 8
0.00.320.966 I print_info: n_embd_k_gqa     = 256
0.00.320.968 I print_info: n_embd_v_gqa     = 256
0.00.320.969 I print_info: f_norm_eps       = 0.0e+00
0.00.320.972 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.320.972 I print_info: f_clamp_kqv      = 0.0e+00
0.00.320.973 I print_info: f_max_alibi_bias = 0.0e+00
0.00.320.973 I print_info: f_logit_scale    = 0.0e+00
0.00.320.975 I print_info: n_ff             = 16384
0.00.320.975 I print_info: n_expert         = 0
0.00.320.976 I print_info: n_expert_used    = 0
0.00.320.976 I print_info: causal attn      = 1
0.00.320.976 I print_info: pooling type     = 0
0.00.320.977 I print_info: rope type        = 2
0.00.320.977 I print_info: rope scaling     = linear
0.00.320.979 I print_info: freq_base_train  = 10000.0
0.00.320.979 I print_info: freq_scale_train = 1
0.00.320.979 I print_info: n_ctx_orig_yarn  = 8192
0.00.320.980 I print_info: rope_finetuned   = unknown
0.00.320.980 I print_info: ssm_d_conv       = 0
0.00.320.980 I print_info: ssm_d_inner      = 0
0.00.320.981 I print_info: ssm_d_state      = 0
0.00.320.981 I print_info: ssm_dt_rank      = 0
0.00.320.981 I print_info: ssm_dt_b_c_rms   = 0
0.00.320.982 I print_info: model type       = 2B
0.00.320.982 I print_info: model params     = 2.51 B
0.00.320.983 I print_info: general.name     = gemma-1.1-2b-it
0.00.320.986 I print_info: vocab type       = SPM
0.00.320.988 I print_info: n_vocab          = 256000
0.00.320.988 I print_info: n_merges         = 0
0.00.320.989 I print_info: BOS token        = 2 '<bos>'
0.00.320.989 I print_info: EOS token        = 1 '<eos>'
0.00.320.990 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.320.990 I print_info: UNK token        = 3 '<unk>'
0.00.320.990 I print_info: PAD token        = 0 '<pad>'
0.00.320.990 I print_info: LF token         = 227 '<0x0A>'
0.00.320.991 I print_info: EOG token        = 1 '<eos>'
0.00.320.992 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.320.992 I print_info: max token length = 93
0.00.320.994 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.419.898 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.419.908 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.419.909 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.419.909 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.419.910 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.419.910 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.421.328 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.421.333 I llama_context_base: n_seq_max     = 1
0.00.421.333 I llama_context_base: n_ctx         = 4096
0.00.421.334 I llama_context_base: n_ctx_per_seq = 4096
0.00.421.334 I llama_context_base: n_batch       = 2048
0.00.421.334 I llama_context_base: n_ubatch      = 512
0.00.421.335 I llama_context_base: causal_attn   = 1
0.00.421.335 I llama_context_base: flash_attn    = 0
0.00.421.337 I llama_context_base: freq_base     = 10000.0
0.00.421.338 I llama_context_base: freq_scale    = 1
0.00.421.339 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.421.454 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.421.458 I llama_context_kv_self: constructing llama_context_kv_self
0.00.421.464 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.437.414 I init:        CPU KV buffer size =    72.00 MiB
0.00.437.431 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.439.751 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.439.756 I reserve: graph nodes  = 619
0.00.439.756 I reserve: graph splits = 1
0.00.439.760 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.439.760 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.535.169 I main: llama threadpool init, n_threads = 4
0.00.535.184 I 
0.00.535.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.535.248 I 
0.00.535.284 I sampler seed: 2854851848
0.00.535.295 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.535.298 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.535.299 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.535.299 I 
 increamental and subtractive processes to calculate the value of an expression.

**Example:**

$$5 + 3 = 8$$

**Solution:**

0.02.917.927 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6309.75 tokens per second)
0.02.917.930 I llama_perf_context_print:        load time =     531.72 ms
0.02.917.931 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.917.933 I llama_perf_context_print:        eval time =    2362.71 ms /    32 runs   (   73.83 ms per token,    13.54 tokens per second)
0.02.917.934 I llama_perf_context_print:       total time =    2385.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.602 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.810 I main: llama backend init
0.00.000.817 I main: load the model and apply lora adapter, if any
0.00.031.198 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.031.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.223 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.226 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.227 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.228 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.229 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.230 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.721 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.117 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.127 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.136 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.137 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.140.141 I llama_model_loader: - type  f32:   37 tensors
0.00.140.141 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.144 I print_info: file format = GGUF V3 (latest)
0.00.140.145 I print_info: file type   = Q8_0
0.00.140.147 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.235.127 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.289.789 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.290.624 I load: special tokens cache size = 5
0.00.313.232 I load: token to piece cache size = 1.6014 MB
0.00.313.266 I print_info: arch             = gemma
0.00.313.267 I print_info: vocab_only       = 0
0.00.313.267 I print_info: n_ctx_train      = 8192
0.00.313.268 I print_info: n_embd           = 2048
0.00.313.268 I print_info: n_layer          = 18
0.00.313.280 I print_info: n_head           = 8
0.00.313.282 I print_info: n_head_kv        = 1
0.00.313.283 I print_info: n_rot            = 256
0.00.313.283 I print_info: n_swa            = 0
0.00.313.284 I print_info: n_embd_head_k    = 256
0.00.313.284 I print_info: n_embd_head_v    = 256
0.00.313.286 I print_info: n_gqa            = 8
0.00.313.288 I print_info: n_embd_k_gqa     = 256
0.00.313.289 I print_info: n_embd_v_gqa     = 256
0.00.313.290 I print_info: f_norm_eps       = 0.0e+00
0.00.313.291 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.313.292 I print_info: f_clamp_kqv      = 0.0e+00
0.00.313.292 I print_info: f_max_alibi_bias = 0.0e+00
0.00.313.292 I print_info: f_logit_scale    = 0.0e+00
0.00.313.294 I print_info: n_ff             = 16384
0.00.313.294 I print_info: n_expert         = 0
0.00.313.295 I print_info: n_expert_used    = 0
0.00.313.295 I print_info: causal attn      = 1
0.00.313.295 I print_info: pooling type     = 0
0.00.313.295 I print_info: rope type        = 2
0.00.313.296 I print_info: rope scaling     = linear
0.00.313.297 I print_info: freq_base_train  = 10000.0
0.00.313.298 I print_info: freq_scale_train = 1
0.00.313.298 I print_info: n_ctx_orig_yarn  = 8192
0.00.313.298 I print_info: rope_finetuned   = unknown
0.00.313.299 I print_info: ssm_d_conv       = 0
0.00.313.299 I print_info: ssm_d_inner      = 0
0.00.313.299 I print_info: ssm_d_state      = 0
0.00.313.299 I print_info: ssm_dt_rank      = 0
0.00.313.300 I print_info: ssm_dt_b_c_rms   = 0
0.00.313.300 I print_info: model type       = 2B
0.00.313.301 I print_info: model params     = 2.51 B
0.00.313.301 I print_info: general.name     = gemma-1.1-2b-it
0.00.313.304 I print_info: vocab type       = SPM
0.00.313.306 I print_info: n_vocab          = 256000
0.00.313.306 I print_info: n_merges         = 0
0.00.313.307 I print_info: BOS token        = 2 '<bos>'
0.00.313.307 I print_info: EOS token        = 1 '<eos>'
0.00.313.308 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.313.308 I print_info: UNK token        = 3 '<unk>'
0.00.313.308 I print_info: PAD token        = 0 '<pad>'
0.00.313.309 I print_info: LF token         = 227 '<0x0A>'
0.00.313.309 I print_info: EOG token        = 1 '<eos>'
0.00.313.310 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.313.310 I print_info: max token length = 93
0.00.313.311 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.389.200 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.390.497 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.390.501 I llama_context_base: n_seq_max     = 1
0.00.390.502 I llama_context_base: n_ctx         = 4096
0.00.390.502 I llama_context_base: n_ctx_per_seq = 4096
0.00.390.503 I llama_context_base: n_batch       = 2048
0.00.390.503 I llama_context_base: n_ubatch      = 512
0.00.390.503 I llama_context_base: causal_attn   = 1
0.00.390.504 I llama_context_base: flash_attn    = 0
0.00.390.506 I llama_context_base: freq_base     = 10000.0
0.00.390.507 I llama_context_base: freq_scale    = 1
0.00.390.508 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.636 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.390.639 I llama_context_kv_self: constructing llama_context_kv_self
0.00.390.646 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.406.861 I init:        CPU KV buffer size =    72.00 MiB
0.00.406.876 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.409.118 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.409.122 I reserve: graph nodes  = 619
0.00.409.122 I reserve: graph splits = 1
0.00.409.126 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.409.127 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.908 I main: llama threadpool init, n_threads = 4
0.00.501.924 I 
0.00.501.988 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.501.992 I 
0.00.502.028 I sampler seed: 3645901028
0.00.502.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.041 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.041 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.042 I 
 increasities, but it is important to note that the vast majority of women experience a decline in libido during menopause.

**What is the best way to address

0.02.885.667 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6758.14 tokens per second)
0.02.885.670 I llama_perf_context_print:        load time =     498.39 ms
0.02.885.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.885.673 I llama_perf_context_print:        eval time =    2363.81 ms /    32 runs   (   73.87 ms per token,    13.54 tokens per second)
0.02.885.673 I llama_perf_context_print:       total time =    2386.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.600 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.830 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.031.479 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.031.492 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.031.500 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.507 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.508 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.511 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.514 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.514 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.521 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.521 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.522 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.523 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.953 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.423 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.433 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.433 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.435 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.435 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.437 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.440 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.441 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.442 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.443 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.443 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.140.447 I llama_model_loader: - type  f32:   37 tensors
0.00.140.448 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.450 I print_info: file format = GGUF V3 (latest)
0.00.140.450 I print_info: file type   = Q8_0
0.00.140.454 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.236.284 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.293.121 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.293.955 I load: special tokens cache size = 5
0.00.317.035 I load: token to piece cache size = 1.6014 MB
0.00.317.058 I print_info: arch             = gemma
0.00.317.060 I print_info: vocab_only       = 0
0.00.317.060 I print_info: n_ctx_train      = 8192
0.00.317.060 I print_info: n_embd           = 2048
0.00.317.061 I print_info: n_layer          = 18
0.00.317.074 I print_info: n_head           = 8
0.00.317.076 I print_info: n_head_kv        = 1
0.00.317.077 I print_info: n_rot            = 256
0.00.317.077 I print_info: n_swa            = 0
0.00.317.077 I print_info: n_embd_head_k    = 256
0.00.317.078 I print_info: n_embd_head_v    = 256
0.00.317.079 I print_info: n_gqa            = 8
0.00.317.081 I print_info: n_embd_k_gqa     = 256
0.00.317.083 I print_info: n_embd_v_gqa     = 256
0.00.317.084 I print_info: f_norm_eps       = 0.0e+00
0.00.317.085 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.317.086 I print_info: f_clamp_kqv      = 0.0e+00
0.00.317.086 I print_info: f_max_alibi_bias = 0.0e+00
0.00.317.086 I print_info: f_logit_scale    = 0.0e+00
0.00.317.088 I print_info: n_ff             = 16384
0.00.317.088 I print_info: n_expert         = 0
0.00.317.089 I print_info: n_expert_used    = 0
0.00.317.089 I print_info: causal attn      = 1
0.00.317.089 I print_info: pooling type     = 0
0.00.317.089 I print_info: rope type        = 2
0.00.317.090 I print_info: rope scaling     = linear
0.00.317.091 I print_info: freq_base_train  = 10000.0
0.00.317.092 I print_info: freq_scale_train = 1
0.00.317.092 I print_info: n_ctx_orig_yarn  = 8192
0.00.317.093 I print_info: rope_finetuned   = unknown
0.00.317.093 I print_info: ssm_d_conv       = 0
0.00.317.093 I print_info: ssm_d_inner      = 0
0.00.317.093 I print_info: ssm_d_state      = 0
0.00.317.094 I print_info: ssm_dt_rank      = 0
0.00.317.094 I print_info: ssm_dt_b_c_rms   = 0
0.00.317.095 I print_info: model type       = 2B
0.00.317.095 I print_info: model params     = 2.51 B
0.00.317.096 I print_info: general.name     = gemma-1.1-2b-it
0.00.317.099 I print_info: vocab type       = SPM
0.00.317.100 I print_info: n_vocab          = 256000
0.00.317.100 I print_info: n_merges         = 0
0.00.317.101 I print_info: BOS token        = 2 '<bos>'
0.00.317.101 I print_info: EOS token        = 1 '<eos>'
0.00.317.102 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.317.102 I print_info: UNK token        = 3 '<unk>'
0.00.317.102 I print_info: PAD token        = 0 '<pad>'
0.00.317.103 I print_info: LF token         = 227 '<0x0A>'
0.00.317.103 I print_info: EOG token        = 1 '<eos>'
0.00.317.104 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.317.104 I print_info: max token length = 93
0.00.317.106 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.389.311 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.389.321 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.389.322 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.389.322 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.389.323 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.389.324 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.666 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.390.671 I llama_context_base: n_seq_max     = 1
0.00.390.672 I llama_context_base: n_ctx         = 4096
0.00.390.672 I llama_context_base: n_ctx_per_seq = 4096
0.00.390.672 I llama_context_base: n_batch       = 2048
0.00.390.673 I llama_context_base: n_ubatch      = 512
0.00.390.673 I llama_context_base: causal_attn   = 1
0.00.390.674 I llama_context_base: flash_attn    = 0
0.00.390.676 I llama_context_base: freq_base     = 10000.0
0.00.390.677 I llama_context_base: freq_scale    = 1
0.00.390.678 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.797 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.390.801 I llama_context_kv_self: constructing llama_context_kv_self
0.00.390.809 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.406.124 I init:        CPU KV buffer size =    72.00 MiB
0.00.406.141 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.408.111 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.408.115 I reserve: graph nodes  = 619
0.00.408.115 I reserve: graph splits = 1
0.00.408.119 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.408.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.700 I main: llama threadpool init, n_threads = 4
0.00.506.718 I 
0.00.506.779 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.506.783 I 
0.00.506.830 I sampler seed: 1353756740
0.00.506.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.844 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.845 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.845 I 
 increasities and societal change. [end of text]


0.01.086.637 I llama_perf_sampler_print:    sampling time =       1.08 ms /     8 runs   (    0.14 ms per token,  7393.72 tokens per second)
0.01.086.640 I llama_perf_context_print:        load time =     503.20 ms
0.01.086.642 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.086.644 I llama_perf_context_print:        eval time =     574.61 ms /     7 runs   (   82.09 ms per token,    12.18 tokens per second)
0.01.086.644 I llama_perf_context_print:       total time =     582.59 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.651 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.032.231 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.032.244 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.032.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.032.263 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.032.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.032.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.032.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.032.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.032.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.032.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.032.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.032.292 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.032.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.032.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.032.295 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.032.296 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.068.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.147.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.154.239 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.154.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.154.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.154.251 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.154.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.154.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.154.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.154.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.154.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.154.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.154.259 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.154.260 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.154.264 I llama_model_loader: - type  f32:   37 tensors
0.00.154.265 I llama_model_loader: - type q8_0:  127 tensors
0.00.154.268 I print_info: file format = GGUF V3 (latest)
0.00.154.269 I print_info: file type   = Q8_0
0.00.154.271 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.258.574 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.319.010 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.319.826 I load: special tokens cache size = 5
0.00.344.708 I load: token to piece cache size = 1.6014 MB
0.00.344.737 I print_info: arch             = gemma
0.00.344.738 I print_info: vocab_only       = 0
0.00.344.739 I print_info: n_ctx_train      = 8192
0.00.344.739 I print_info: n_embd           = 2048
0.00.344.739 I print_info: n_layer          = 18
0.00.344.753 I print_info: n_head           = 8
0.00.344.755 I print_info: n_head_kv        = 1
0.00.344.756 I print_info: n_rot            = 256
0.00.344.756 I print_info: n_swa            = 0
0.00.344.756 I print_info: n_embd_head_k    = 256
0.00.344.757 I print_info: n_embd_head_v    = 256
0.00.344.758 I print_info: n_gqa            = 8
0.00.344.760 I print_info: n_embd_k_gqa     = 256
0.00.344.762 I print_info: n_embd_v_gqa     = 256
0.00.344.763 I print_info: f_norm_eps       = 0.0e+00
0.00.344.764 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.344.764 I print_info: f_clamp_kqv      = 0.0e+00
0.00.344.765 I print_info: f_max_alibi_bias = 0.0e+00
0.00.344.765 I print_info: f_logit_scale    = 0.0e+00
0.00.344.767 I print_info: n_ff             = 16384
0.00.344.767 I print_info: n_expert         = 0
0.00.344.768 I print_info: n_expert_used    = 0
0.00.344.768 I print_info: causal attn      = 1
0.00.344.768 I print_info: pooling type     = 0
0.00.344.769 I print_info: rope type        = 2
0.00.344.769 I print_info: rope scaling     = linear
0.00.344.770 I print_info: freq_base_train  = 10000.0
0.00.344.771 I print_info: freq_scale_train = 1
0.00.344.771 I print_info: n_ctx_orig_yarn  = 8192
0.00.344.772 I print_info: rope_finetuned   = unknown
0.00.344.772 I print_info: ssm_d_conv       = 0
0.00.344.772 I print_info: ssm_d_inner      = 0
0.00.344.772 I print_info: ssm_d_state      = 0
0.00.344.773 I print_info: ssm_dt_rank      = 0
0.00.344.773 I print_info: ssm_dt_b_c_rms   = 0
0.00.344.774 I print_info: model type       = 2B
0.00.344.775 I print_info: model params     = 2.51 B
0.00.344.775 I print_info: general.name     = gemma-1.1-2b-it
0.00.344.778 I print_info: vocab type       = SPM
0.00.344.779 I print_info: n_vocab          = 256000
0.00.344.779 I print_info: n_merges         = 0
0.00.344.780 I print_info: BOS token        = 2 '<bos>'
0.00.344.780 I print_info: EOS token        = 1 '<eos>'
0.00.344.781 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.344.782 I print_info: UNK token        = 3 '<unk>'
0.00.344.782 I print_info: PAD token        = 0 '<pad>'
0.00.344.782 I print_info: LF token         = 227 '<0x0A>'
0.00.344.783 I print_info: EOG token        = 1 '<eos>'
0.00.344.783 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.344.784 I print_info: max token length = 93
0.00.344.785 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.416.374 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.416.381 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.417.717 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.417.722 I llama_context_base: n_seq_max     = 1
0.00.417.722 I llama_context_base: n_ctx         = 4096
0.00.417.723 I llama_context_base: n_ctx_per_seq = 4096
0.00.417.723 I llama_context_base: n_batch       = 2048
0.00.417.724 I llama_context_base: n_ubatch      = 512
0.00.417.724 I llama_context_base: causal_attn   = 1
0.00.417.724 I llama_context_base: flash_attn    = 0
0.00.417.727 I llama_context_base: freq_base     = 10000.0
0.00.417.728 I llama_context_base: freq_scale    = 1
0.00.417.729 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.417.853 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.417.857 I llama_context_kv_self: constructing llama_context_kv_self
0.00.417.865 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.435.251 I init:        CPU KV buffer size =    72.00 MiB
0.00.435.268 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.437.295 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.437.299 I reserve: graph nodes  = 619
0.00.437.300 I reserve: graph splits = 1
0.00.437.303 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.437.304 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.537.267 I main: llama threadpool init, n_threads = 4
0.00.537.281 I 
0.00.537.341 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.537.344 I 
0.00.537.381 I sampler seed: 848851348
0.00.537.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.537.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.537.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.537.394 I 
 increasels and other enchanted beings.

I am unable to access the internet to retrieve the requested information.

I apologize for any inconvenience caused. [end of text]


0.02.961.048 I llama_perf_sampler_print:    sampling time =       4.71 ms /    31 runs   (    0.15 ms per token,  6588.74 tokens per second)
0.02.961.051 I llama_perf_context_print:        load time =     533.71 ms
0.02.961.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.961.053 I llama_perf_context_print:        eval time =    2404.85 ms /    30 runs   (   80.16 ms per token,    12.47 tokens per second)
0.02.961.054 I llama_perf_context_print:       total time =    2426.46 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.859s
user	0m34.523s
sys	0m9.691s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4874 (57646a79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40394.92 ms
main:    total time = 40394.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.699 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.932 I main: llama backend init
0.00.000.939 I main: load the model and apply lora adapter, if any
0.00.031.686 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.699 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.708 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.715 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.718 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.719 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.728 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.058.617 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.416 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.785 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.795 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.796 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.797 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.798 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.799 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.803 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.803 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.140.804 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.140.805 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.805 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.140.806 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.140.811 I llama_model_loader: - type  f32:   37 tensors
0.00.140.812 I llama_model_loader: - type q4_K:  108 tensors
0.00.140.812 I llama_model_loader: - type q6_K:   19 tensors
0.00.140.815 I print_info: file format = GGUF V3 (latest)
0.00.140.816 I print_info: file type   = Q4_K - Medium
0.00.140.819 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.227.986 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.284.112 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.284.926 I load: special tokens cache size = 5
0.00.307.416 I load: token to piece cache size = 1.6014 MB
0.00.307.440 I print_info: arch             = gemma
0.00.307.441 I print_info: vocab_only       = 0
0.00.307.441 I print_info: n_ctx_train      = 8192
0.00.307.441 I print_info: n_embd           = 2048
0.00.307.442 I print_info: n_layer          = 18
0.00.307.454 I print_info: n_head           = 8
0.00.307.456 I print_info: n_head_kv        = 1
0.00.307.457 I print_info: n_rot            = 256
0.00.307.457 I print_info: n_swa            = 0
0.00.307.458 I print_info: n_embd_head_k    = 256
0.00.307.458 I print_info: n_embd_head_v    = 256
0.00.307.460 I print_info: n_gqa            = 8
0.00.307.461 I print_info: n_embd_k_gqa     = 256
0.00.307.463 I print_info: n_embd_v_gqa     = 256
0.00.307.464 I print_info: f_norm_eps       = 0.0e+00
0.00.307.465 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.307.466 I print_info: f_clamp_kqv      = 0.0e+00
0.00.307.466 I print_info: f_max_alibi_bias = 0.0e+00
0.00.307.466 I print_info: f_logit_scale    = 0.0e+00
0.00.307.468 I print_info: n_ff             = 16384
0.00.307.468 I print_info: n_expert         = 0
0.00.307.469 I print_info: n_expert_used    = 0
0.00.307.469 I print_info: causal attn      = 1
0.00.307.469 I print_info: pooling type     = 0
0.00.307.469 I print_info: rope type        = 2
0.00.307.470 I print_info: rope scaling     = linear
0.00.307.472 I print_info: freq_base_train  = 10000.0
0.00.307.473 I print_info: freq_scale_train = 1
0.00.307.473 I print_info: n_ctx_orig_yarn  = 8192
0.00.307.474 I print_info: rope_finetuned   = unknown
0.00.307.474 I print_info: ssm_d_conv       = 0
0.00.307.474 I print_info: ssm_d_inner      = 0
0.00.307.475 I print_info: ssm_d_state      = 0
0.00.307.475 I print_info: ssm_dt_rank      = 0
0.00.307.475 I print_info: ssm_dt_b_c_rms   = 0
0.00.307.476 I print_info: model type       = 2B
0.00.307.476 I print_info: model params     = 2.51 B
0.00.307.477 I print_info: general.name     = gemma-1.1-2b-it
0.00.307.480 I print_info: vocab type       = SPM
0.00.307.481 I print_info: n_vocab          = 256000
0.00.307.481 I print_info: n_merges         = 0
0.00.307.482 I print_info: BOS token        = 2 '<bos>'
0.00.307.482 I print_info: EOS token        = 1 '<eos>'
0.00.307.483 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.307.483 I print_info: UNK token        = 3 '<unk>'
0.00.307.483 I print_info: PAD token        = 0 '<pad>'
0.00.307.484 I print_info: LF token         = 227 '<0x0A>'
0.00.307.485 I print_info: EOG token        = 1 '<eos>'
0.00.307.485 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.307.486 I print_info: max token length = 93
0.00.307.488 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.356.856 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.356.866 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.356.866 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.356.867 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.356.867 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.356.868 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.358.240 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.358.244 I llama_context_base: n_seq_max     = 1
0.00.358.245 I llama_context_base: n_ctx         = 4096
0.00.358.246 I llama_context_base: n_ctx_per_seq = 4096
0.00.358.246 I llama_context_base: n_batch       = 2048
0.00.358.246 I llama_context_base: n_ubatch      = 512
0.00.358.247 I llama_context_base: causal_attn   = 1
0.00.358.247 I llama_context_base: flash_attn    = 0
0.00.358.249 I llama_context_base: freq_base     = 10000.0
0.00.358.250 I llama_context_base: freq_scale    = 1
0.00.358.250 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.362 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.358.366 I llama_context_kv_self: constructing llama_context_kv_self
0.00.358.373 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.374.263 I init:        CPU KV buffer size =    72.00 MiB
0.00.374.281 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.689 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.376.693 I reserve: graph nodes  = 619
0.00.376.693 I reserve: graph splits = 1
0.00.376.697 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.697 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.407 I main: llama threadpool init, n_threads = 4
0.00.460.422 I 
0.00.460.482 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.485 I 
0.00.460.521 I sampler seed: 3168400683
0.00.460.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.535 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.536 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.536 I 
 increasities and the societal consequences of these behaviors. [end of text]


0.01.059.928 I llama_perf_sampler_print:    sampling time =       1.92 ms /    12 runs   (    0.16 ms per token,  6250.00 tokens per second)
0.01.059.931 I llama_perf_context_print:        load time =     456.80 ms
0.01.059.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.059.934 I llama_perf_context_print:        eval time =     591.62 ms /    11 runs   (   53.78 ms per token,    18.59 tokens per second)
0.01.059.935 I llama_perf_context_print:       total time =     602.18 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4874 (57646a79)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40392.48 ms
main:    total time = 40392.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.654 I build: 4874 (57646a79) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.881 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.031.503 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.031.524 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.533 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.539 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.540 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.540 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.541 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.541 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.553 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.554 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.554 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.058.909 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.021 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.141.031 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.141.032 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.141.033 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.141.034 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.141.035 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.141.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.141.038 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.141.039 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.141.040 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.141.044 I llama_model_loader: - type  f32:   37 tensors
0.00.141.045 I llama_model_loader: - type q4_K:  108 tensors
0.00.141.045 I llama_model_loader: - type q6_K:   19 tensors
0.00.141.048 I print_info: file format = GGUF V3 (latest)
0.00.141.048 I print_info: file type   = Q4_K - Medium
0.00.141.051 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.234.625 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.291.006 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.291.731 I load: special tokens cache size = 5
0.00.314.148 I load: token to piece cache size = 1.6014 MB
0.00.314.181 I print_info: arch             = gemma
0.00.314.182 I print_info: vocab_only       = 0
0.00.314.182 I print_info: n_ctx_train      = 8192
0.00.314.182 I print_info: n_embd           = 2048
0.00.314.183 I print_info: n_layer          = 18
0.00.314.195 I print_info: n_head           = 8
0.00.314.197 I print_info: n_head_kv        = 1
0.00.314.197 I print_info: n_rot            = 256
0.00.314.198 I print_info: n_swa            = 0
0.00.314.198 I print_info: n_embd_head_k    = 256
0.00.314.198 I print_info: n_embd_head_v    = 256
0.00.314.200 I print_info: n_gqa            = 8
0.00.314.202 I print_info: n_embd_k_gqa     = 256
0.00.314.204 I print_info: n_embd_v_gqa     = 256
0.00.314.204 I print_info: f_norm_eps       = 0.0e+00
0.00.314.205 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.314.206 I print_info: f_clamp_kqv      = 0.0e+00
0.00.314.206 I print_info: f_max_alibi_bias = 0.0e+00
0.00.314.207 I print_info: f_logit_scale    = 0.0e+00
0.00.314.208 I print_info: n_ff             = 16384
0.00.314.209 I print_info: n_expert         = 0
0.00.314.209 I print_info: n_expert_used    = 0
0.00.314.209 I print_info: causal attn      = 1
0.00.314.209 I print_info: pooling type     = 0
0.00.314.210 I print_info: rope type        = 2
0.00.314.210 I print_info: rope scaling     = linear
0.00.314.211 I print_info: freq_base_train  = 10000.0
0.00.314.212 I print_info: freq_scale_train = 1
0.00.314.212 I print_info: n_ctx_orig_yarn  = 8192
0.00.314.213 I print_info: rope_finetuned   = unknown
0.00.314.213 I print_info: ssm_d_conv       = 0
0.00.314.213 I print_info: ssm_d_inner      = 0
0.00.314.213 I print_info: ssm_d_state      = 0
0.00.314.214 I print_info: ssm_dt_rank      = 0
0.00.314.214 I print_info: ssm_dt_b_c_rms   = 0
0.00.314.215 I print_info: model type       = 2B
0.00.314.216 I print_info: model params     = 2.51 B
0.00.314.216 I print_info: general.name     = gemma-1.1-2b-it
0.00.314.219 I print_info: vocab type       = SPM
0.00.314.220 I print_info: n_vocab          = 256000
0.00.314.220 I print_info: n_merges         = 0
0.00.314.221 I print_info: BOS token        = 2 '<bos>'
0.00.314.222 I print_info: EOS token        = 1 '<eos>'
0.00.314.222 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.314.222 I print_info: UNK token        = 3 '<unk>'
0.00.314.223 I print_info: PAD token        = 0 '<pad>'
0.00.314.223 I print_info: LF token         = 227 '<0x0A>'
0.00.314.224 I print_info: EOG token        = 1 '<eos>'
0.00.314.224 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.314.224 I print_info: max token length = 93
0.00.314.226 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.358.421 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.359.694 I llama_context_base: constructing llama_context_base, gtype = 0
0.00.359.700 I llama_context_base: n_seq_max     = 1
0.00.359.700 I llama_context_base: n_ctx         = 4096
0.00.359.701 I llama_context_base: n_ctx_per_seq = 4096
0.00.359.701 I llama_context_base: n_batch       = 2048
0.00.359.702 I llama_context_base: n_ubatch      = 512
0.00.359.702 I llama_context_base: causal_attn   = 1
0.00.359.702 I llama_context_base: flash_attn    = 0
0.00.359.705 I llama_context_base: freq_base     = 10000.0
0.00.359.705 I llama_context_base: freq_scale    = 1
0.00.359.706 W llama_context_base: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.822 I llama_context_base:        CPU  output buffer size =     0.98 MiB
0.00.359.826 I llama_context_kv_self: constructing llama_context_kv_self
0.00.359.833 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.375.630 I init:        CPU KV buffer size =    72.00 MiB
0.00.375.648 I llama_context_kv_self: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.912 I reserve:        CPU compute buffer size =   509.01 MiB
0.00.377.916 I reserve: graph nodes  = 619
0.00.377.916 I reserve: graph splits = 1
0.00.377.920 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.377.921 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.455 I main: llama threadpool init, n_threads = 4
0.00.462.468 I 
0.00.462.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.536 I 
0.00.462.578 I sampler seed: 704301253
0.00.462.588 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.592 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.593 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.593 I 
 increasities in the news and popular culture, including the recent resurgence of the "sex tape phenomenon."

While there are legitimate arguments to be made about the potential

0.02.186.722 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6567.16 tokens per second)
0.02.186.725 I llama_perf_context_print:        load time =     458.87 ms
0.02.186.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.186.727 I llama_perf_context_print:        eval time =    1704.35 ms /    32 runs   (   53.26 ms per token,    18.78 tokens per second)
0.02.186.728 I llama_perf_context_print:       total time =    1726.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.999s
user	10m22.773s
sys	0m7.226s
