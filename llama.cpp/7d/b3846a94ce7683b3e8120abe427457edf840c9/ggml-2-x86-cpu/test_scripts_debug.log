+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.024.892 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.904 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.019 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.024 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.941 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.040 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.044 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.050 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.055 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.063 I llama_model_loader: - type  f32:   37 tensors
0.00.352.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.225 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.267 I llm_load_vocab: special tokens cache size = 5
0.00.847.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.319 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.320 I llm_load_print_meta: arch             = gemma
0.00.847.321 I llm_load_print_meta: vocab type       = SPM
0.00.847.322 I llm_load_print_meta: n_vocab          = 256000
0.00.847.324 I llm_load_print_meta: n_merges         = 0
0.00.847.324 I llm_load_print_meta: vocab_only       = 0
0.00.847.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.325 I llm_load_print_meta: n_embd           = 2048
0.00.847.326 I llm_load_print_meta: n_layer          = 18
0.00.847.407 I llm_load_print_meta: n_head           = 8
0.00.847.417 I llm_load_print_meta: n_head_kv        = 1
0.00.847.418 I llm_load_print_meta: n_rot            = 256
0.00.847.419 I llm_load_print_meta: n_swa            = 0
0.00.847.419 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.425 I llm_load_print_meta: n_gqa            = 8
0.00.847.436 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.454 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.455 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.462 I llm_load_print_meta: n_ff             = 16384
0.00.847.467 I llm_load_print_meta: n_expert         = 0
0.00.847.467 I llm_load_print_meta: n_expert_used    = 0
0.00.847.468 I llm_load_print_meta: causal attn      = 1
0.00.847.469 I llm_load_print_meta: pooling type     = 0
0.00.847.469 I llm_load_print_meta: rope type        = 2
0.00.847.471 I llm_load_print_meta: rope scaling     = linear
0.00.847.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.474 I llm_load_print_meta: freq_scale_train = 1
0.00.847.475 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.482 I llm_load_print_meta: model type       = 2B
0.00.847.483 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.485 I llm_load_print_meta: model params     = 2.51 B
0.00.847.496 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.510 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.511 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.521 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.532 I llm_load_print_meta: max token length = 93
0.00.951.346 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.951.355 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.951.356 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.951.357 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.951.357 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.951.358 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.958.796 I llama_new_context_with_model: n_seq_max     = 1
0.00.958.804 I llama_new_context_with_model: n_ctx         = 4096
0.00.958.805 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.958.805 I llama_new_context_with_model: n_batch       = 2048
0.00.958.806 I llama_new_context_with_model: n_ubatch      = 512
0.00.958.806 I llama_new_context_with_model: flash_attn    = 0
0.00.958.810 I llama_new_context_with_model: freq_base     = 10000.0
0.00.958.811 I llama_new_context_with_model: freq_scale    = 1
0.00.958.812 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.751 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.793 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.919 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.468 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.472 I llama_new_context_with_model: graph nodes  = 601
0.00.976.473 I llama_new_context_with_model: graph splits = 1
0.00.976.496 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.367 I main: llama threadpool init, n_threads = 4
0.01.587.383 I 
0.01.587.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.587.517 I 
0.01.587.759 I sampler seed: 2110048916
0.01.587.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.787 I 
 maneuvously.

I cannot answer this question because it is asking me to generate inappropriate or sexually suggestive content. [end of text]


0.11.783.511 I llama_perf_sampler_print:    sampling time =      36.82 ms /    25 runs   (    1.47 ms per token,   678.98 tokens per second)
0.11.783.514 I llama_perf_context_print:        load time =    1586.39 ms
0.11.783.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.783.517 I llama_perf_context_print:        eval time =   10128.69 ms /    24 runs   (  422.03 ms per token,     2.37 tokens per second)
0.11.783.518 I llama_perf_context_print:       total time =   10196.15 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.717 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.922 I main: llama backend init
0.00.000.931 I main: load the model and apply lora adapter, if any
0.00.023.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.804 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.812 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.820 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.821 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.830 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.832 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.834 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.835 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.837 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.724 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.188 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.262 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.264 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.265 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.266 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.268 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.270 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.293 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.300 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.301 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.303 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.312 I llama_model_loader: - type  f32:   37 tensors
0.00.352.314 I llama_model_loader: - type q8_0:  127 tensors
0.00.594.492 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.663.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.664.906 I llm_load_vocab: special tokens cache size = 5
0.00.868.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.452 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.453 I llm_load_print_meta: arch             = gemma
0.00.868.454 I llm_load_print_meta: vocab type       = SPM
0.00.868.455 I llm_load_print_meta: n_vocab          = 256000
0.00.868.457 I llm_load_print_meta: n_merges         = 0
0.00.868.458 I llm_load_print_meta: vocab_only       = 0
0.00.868.458 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.458 I llm_load_print_meta: n_embd           = 2048
0.00.868.459 I llm_load_print_meta: n_layer          = 18
0.00.868.522 I llm_load_print_meta: n_head           = 8
0.00.868.529 I llm_load_print_meta: n_head_kv        = 1
0.00.868.529 I llm_load_print_meta: n_rot            = 256
0.00.868.530 I llm_load_print_meta: n_swa            = 0
0.00.868.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.530 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.535 I llm_load_print_meta: n_gqa            = 8
0.00.868.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.560 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.561 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.569 I llm_load_print_meta: n_ff             = 16384
0.00.868.570 I llm_load_print_meta: n_expert         = 0
0.00.868.570 I llm_load_print_meta: n_expert_used    = 0
0.00.868.571 I llm_load_print_meta: causal attn      = 1
0.00.868.572 I llm_load_print_meta: pooling type     = 0
0.00.868.572 I llm_load_print_meta: rope type        = 2
0.00.868.572 I llm_load_print_meta: rope scaling     = linear
0.00.868.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.574 I llm_load_print_meta: freq_scale_train = 1
0.00.868.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.576 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.576 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.577 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.577 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.578 I llm_load_print_meta: model type       = 2B
0.00.868.579 I llm_load_print_meta: model ftype      = Q8_0
0.00.868.581 I llm_load_print_meta: model params     = 2.51 B
0.00.868.591 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.868.591 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.592 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.601 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.602 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.603 I llm_load_print_meta: max token length = 93
0.00.963.656 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.969.645 I llama_new_context_with_model: n_seq_max     = 1
0.00.969.652 I llama_new_context_with_model: n_ctx         = 4096
0.00.969.652 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.969.653 I llama_new_context_with_model: n_batch       = 2048
0.00.969.653 I llama_new_context_with_model: n_ubatch      = 512
0.00.969.654 I llama_new_context_with_model: flash_attn    = 0
0.00.969.657 I llama_new_context_with_model: freq_base     = 10000.0
0.00.969.658 I llama_new_context_with_model: freq_scale    = 1
0.00.969.658 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.984.982 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.985.025 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.985.147 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.987.708 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.987.712 I llama_new_context_with_model: graph nodes  = 601
0.00.987.713 I llama_new_context_with_model: graph splits = 1
0.00.987.735 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.416 I main: llama threadpool init, n_threads = 4
0.01.598.432 I 
0.01.598.546 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.598.550 I 
0.01.598.784 I sampler seed: 4093255996
0.01.598.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.598.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.598.811 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.598.811 I 
 increasities, which were prevalent in the late 19th and early 20th centuries, were a common form of child discipline.

**True

0.15.306.724 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.60 tokens per second)
0.15.306.726 I llama_perf_context_print:        load time =    1597.38 ms
0.15.306.727 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.306.729 I llama_perf_context_print:        eval time =   13617.87 ms /    32 runs   (  425.56 ms per token,     2.35 tokens per second)
0.15.306.730 I llama_perf_context_print:       total time =   13708.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.094 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.104 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.196 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.209 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.212 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.219 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.223 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.227 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.242 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.744 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.924 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.780 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.796 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.806 I llama_model_loader: - type  f32:   37 tensors
0.00.349.808 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.238 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.576 I llm_load_vocab: special tokens cache size = 5
0.00.842.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.592 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.593 I llm_load_print_meta: arch             = gemma
0.00.842.594 I llm_load_print_meta: vocab type       = SPM
0.00.842.595 I llm_load_print_meta: n_vocab          = 256000
0.00.842.597 I llm_load_print_meta: n_merges         = 0
0.00.842.597 I llm_load_print_meta: vocab_only       = 0
0.00.842.598 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.598 I llm_load_print_meta: n_embd           = 2048
0.00.842.598 I llm_load_print_meta: n_layer          = 18
0.00.842.663 I llm_load_print_meta: n_head           = 8
0.00.842.670 I llm_load_print_meta: n_head_kv        = 1
0.00.842.671 I llm_load_print_meta: n_rot            = 256
0.00.842.671 I llm_load_print_meta: n_swa            = 0
0.00.842.672 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.676 I llm_load_print_meta: n_gqa            = 8
0.00.842.682 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.688 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.699 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.700 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.700 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.705 I llm_load_print_meta: n_ff             = 16384
0.00.842.706 I llm_load_print_meta: n_expert         = 0
0.00.842.706 I llm_load_print_meta: n_expert_used    = 0
0.00.842.707 I llm_load_print_meta: causal attn      = 1
0.00.842.724 I llm_load_print_meta: pooling type     = 0
0.00.842.726 I llm_load_print_meta: rope type        = 2
0.00.842.727 I llm_load_print_meta: rope scaling     = linear
0.00.842.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.729 I llm_load_print_meta: freq_scale_train = 1
0.00.842.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.734 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.743 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.744 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.745 I llm_load_print_meta: model type       = 2B
0.00.842.746 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.747 I llm_load_print_meta: model params     = 2.51 B
0.00.842.757 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.758 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.759 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.759 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.760 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.768 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.769 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.776 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.777 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.777 I llm_load_print_meta: max token length = 93
0.00.920.365 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.920.376 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.920.377 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.920.378 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.920.379 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.920.380 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.926.410 I llama_new_context_with_model: n_seq_max     = 1
0.00.926.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.926.419 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.926.420 I llama_new_context_with_model: n_batch       = 2048
0.00.926.420 I llama_new_context_with_model: n_ubatch      = 512
0.00.926.421 I llama_new_context_with_model: flash_attn    = 0
0.00.926.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.926.424 I llama_new_context_with_model: freq_scale    = 1
0.00.926.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.513 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.556 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.686 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.212 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.216 I llama_new_context_with_model: graph nodes  = 601
0.00.945.216 I llama_new_context_with_model: graph splits = 1
0.00.945.240 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.680 I main: llama threadpool init, n_threads = 4
0.01.558.695 I 
0.01.558.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.558.810 I 
0.01.559.045 I sampler seed: 1344283058
0.01.559.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.071 I 
 increasels with a small, sharp beak and a venomous sting. [end of text]


0.07.568.721 I llama_perf_sampler_print:    sampling time =      21.58 ms /    15 runs   (    1.44 ms per token,   694.99 tokens per second)
0.07.568.734 I llama_perf_context_print:        load time =    1557.75 ms
0.07.568.736 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.568.738 I llama_perf_context_print:        eval time =    5969.11 ms /    14 runs   (  426.37 ms per token,     2.35 tokens per second)
0.07.568.739 I llama_perf_context_print:       total time =    6010.05 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.508 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.609 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.622 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.623 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.630 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.634 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.636 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.637 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.638 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.639 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.650 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.651 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.654 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.241 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.367.454 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.367.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.367.467 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.367.468 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.367.469 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.367.471 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.367.472 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.367.479 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.367.480 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.367.481 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.367.483 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.367.485 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.367.495 I llama_model_loader: - type  f32:   37 tensors
0.00.367.497 I llama_model_loader: - type q8_0:  127 tensors
0.00.611.806 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.677.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.678.841 I llm_load_vocab: special tokens cache size = 5
0.00.879.837 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.879.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.879.916 I llm_load_print_meta: arch             = gemma
0.00.879.917 I llm_load_print_meta: vocab type       = SPM
0.00.879.918 I llm_load_print_meta: n_vocab          = 256000
0.00.879.921 I llm_load_print_meta: n_merges         = 0
0.00.879.921 I llm_load_print_meta: vocab_only       = 0
0.00.879.922 I llm_load_print_meta: n_ctx_train      = 8192
0.00.879.922 I llm_load_print_meta: n_embd           = 2048
0.00.879.922 I llm_load_print_meta: n_layer          = 18
0.00.879.987 I llm_load_print_meta: n_head           = 8
0.00.879.995 I llm_load_print_meta: n_head_kv        = 1
0.00.879.995 I llm_load_print_meta: n_rot            = 256
0.00.879.996 I llm_load_print_meta: n_swa            = 0
0.00.879.996 I llm_load_print_meta: n_embd_head_k    = 256
0.00.879.996 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.001 I llm_load_print_meta: n_gqa            = 8
0.00.880.005 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.034 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.035 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.035 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.035 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.041 I llm_load_print_meta: n_ff             = 16384
0.00.880.042 I llm_load_print_meta: n_expert         = 0
0.00.880.042 I llm_load_print_meta: n_expert_used    = 0
0.00.880.043 I llm_load_print_meta: causal attn      = 1
0.00.880.043 I llm_load_print_meta: pooling type     = 0
0.00.880.053 I llm_load_print_meta: rope type        = 2
0.00.880.054 I llm_load_print_meta: rope scaling     = linear
0.00.880.056 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.057 I llm_load_print_meta: freq_scale_train = 1
0.00.880.057 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.058 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.058 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.066 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.073 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.081 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.082 I llm_load_print_meta: model type       = 2B
0.00.880.083 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.091 I llm_load_print_meta: model params     = 2.51 B
0.00.880.100 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.101 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.102 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.102 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.108 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.115 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.117 I llm_load_print_meta: max token length = 93
0.00.953.807 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.953.820 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.959.775 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.782 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.783 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.783 I llama_new_context_with_model: n_batch       = 2048
0.00.959.784 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.785 I llama_new_context_with_model: flash_attn    = 0
0.00.959.788 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.789 I llama_new_context_with_model: freq_scale    = 1
0.00.959.789 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.975.497 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.536 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.658 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.978.266 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.978.271 I llama_new_context_with_model: graph nodes  = 601
0.00.978.271 I llama_new_context_with_model: graph splits = 1
0.00.978.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.589.183 I main: llama threadpool init, n_threads = 4
0.01.589.200 I 
0.01.589.318 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.589.322 I 
0.01.589.556 I sampler seed: 3422005703
0.01.589.570 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.589.579 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.589.583 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.589.583 I 
 increasities.

I do not understand this sentence. Could you please explain it to me?

I apologize, but I am unable to provide assistance with interpreting

0.15.209.069 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.76 tokens per second)
0.15.209.073 I llama_perf_context_print:        load time =    1588.21 ms
0.15.209.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.209.075 I llama_perf_context_print:        eval time =   13529.15 ms /    32 runs   (  422.79 ms per token,     2.37 tokens per second)
0.15.209.076 I llama_perf_context_print:       total time =   13619.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.879s
user	3m7.836s
sys	0m9.577s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4181 (7db3846a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186489.89 ms
main:    total time = 186489.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.154 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.164 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.263 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.273 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.275 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.287 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.291 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.294 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.295 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.877 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.027 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.222 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.233 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.235 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.236 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.237 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.249 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.250 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.260 I llama_model_loader: - type  f32:   37 tensors
0.00.352.262 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.263 I llama_model_loader: - type q6_K:   19 tensors
0.00.581.862 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.013 I llm_load_vocab: special tokens cache size = 5
0.00.854.396 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.472 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.473 I llm_load_print_meta: arch             = gemma
0.00.854.474 I llm_load_print_meta: vocab type       = SPM
0.00.854.474 I llm_load_print_meta: n_vocab          = 256000
0.00.854.477 I llm_load_print_meta: n_merges         = 0
0.00.854.477 I llm_load_print_meta: vocab_only       = 0
0.00.854.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.478 I llm_load_print_meta: n_embd           = 2048
0.00.854.478 I llm_load_print_meta: n_layer          = 18
0.00.854.544 I llm_load_print_meta: n_head           = 8
0.00.854.551 I llm_load_print_meta: n_head_kv        = 1
0.00.854.552 I llm_load_print_meta: n_rot            = 256
0.00.854.552 I llm_load_print_meta: n_swa            = 0
0.00.854.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.559 I llm_load_print_meta: n_gqa            = 8
0.00.854.564 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.569 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.572 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.584 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.584 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.590 I llm_load_print_meta: n_ff             = 16384
0.00.854.590 I llm_load_print_meta: n_expert         = 0
0.00.854.591 I llm_load_print_meta: n_expert_used    = 0
0.00.854.592 I llm_load_print_meta: causal attn      = 1
0.00.854.592 I llm_load_print_meta: pooling type     = 0
0.00.854.592 I llm_load_print_meta: rope type        = 2
0.00.854.594 I llm_load_print_meta: rope scaling     = linear
0.00.854.595 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.596 I llm_load_print_meta: freq_scale_train = 1
0.00.854.597 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.597 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.598 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.599 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.599 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.600 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.600 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.601 I llm_load_print_meta: model type       = 2B
0.00.854.603 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.604 I llm_load_print_meta: model params     = 2.51 B
0.00.854.628 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.633 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.634 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.634 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.635 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.643 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.645 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.667 I llm_load_print_meta: max token length = 93
0.00.916.138 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.916.150 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.916.151 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.916.152 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.916.153 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.916.153 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.922.204 I llama_new_context_with_model: n_seq_max     = 1
0.00.922.210 I llama_new_context_with_model: n_ctx         = 4096
0.00.922.211 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.922.211 I llama_new_context_with_model: n_batch       = 2048
0.00.922.212 I llama_new_context_with_model: n_ubatch      = 512
0.00.922.212 I llama_new_context_with_model: flash_attn    = 0
0.00.922.216 I llama_new_context_with_model: freq_base     = 10000.0
0.00.922.216 I llama_new_context_with_model: freq_scale    = 1
0.00.922.217 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.937.851 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.937.894 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.025 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.940.570 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.940.574 I llama_new_context_with_model: graph nodes  = 601
0.00.940.575 I llama_new_context_with_model: graph splits = 1
0.00.940.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.524.367 I main: llama threadpool init, n_threads = 4
0.01.524.384 I 
0.01.524.496 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.524.500 I 
0.01.524.732 I sampler seed: 1139544315
0.01.524.759 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.524.791 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.524.796 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.524.797 I 
 seconally!

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.07.801.476 I llama_perf_sampler_print:    sampling time =      27.64 ms /    19 runs   (    1.45 ms per token,   687.31 tokens per second)
0.07.801.479 I llama_perf_context_print:        load time =    1523.43 ms
0.07.801.481 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.801.483 I llama_perf_context_print:        eval time =    6225.37 ms /    18 runs   (  345.85 ms per token,     2.89 tokens per second)
0.07.801.495 I llama_perf_context_print:       total time =    6277.12 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4181 (7db3846a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186687.23 ms
main:    total time = 186687.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4181 (7db3846a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.404 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.531 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.535 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.542 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.547 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.558 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.559 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.561 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.562 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.943 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.170 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.099 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.112 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.113 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.114 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.116 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.117 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.121 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.123 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.132 I llama_model_loader: - type  f32:   37 tensors
0.00.349.134 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.135 I llama_model_loader: - type q6_K:   19 tensors
0.00.595.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.249 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.220 I llm_load_vocab: special tokens cache size = 5
0.00.854.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.371 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.372 I llm_load_print_meta: arch             = gemma
0.00.854.373 I llm_load_print_meta: vocab type       = SPM
0.00.854.374 I llm_load_print_meta: n_vocab          = 256000
0.00.854.376 I llm_load_print_meta: n_merges         = 0
0.00.854.377 I llm_load_print_meta: vocab_only       = 0
0.00.854.377 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.377 I llm_load_print_meta: n_embd           = 2048
0.00.854.378 I llm_load_print_meta: n_layer          = 18
0.00.854.443 I llm_load_print_meta: n_head           = 8
0.00.854.450 I llm_load_print_meta: n_head_kv        = 1
0.00.854.450 I llm_load_print_meta: n_rot            = 256
0.00.854.451 I llm_load_print_meta: n_swa            = 0
0.00.854.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.451 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.456 I llm_load_print_meta: n_gqa            = 8
0.00.854.461 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.467 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.469 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.469 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.494 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.494 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.501 I llm_load_print_meta: n_ff             = 16384
0.00.854.501 I llm_load_print_meta: n_expert         = 0
0.00.854.502 I llm_load_print_meta: n_expert_used    = 0
0.00.854.507 I llm_load_print_meta: causal attn      = 1
0.00.854.515 I llm_load_print_meta: pooling type     = 0
0.00.854.520 I llm_load_print_meta: rope type        = 2
0.00.854.521 I llm_load_print_meta: rope scaling     = linear
0.00.854.522 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.523 I llm_load_print_meta: freq_scale_train = 1
0.00.854.524 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.535 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.536 I llm_load_print_meta: model type       = 2B
0.00.854.537 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.854.541 I llm_load_print_meta: model params     = 2.51 B
0.00.854.551 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.854.551 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.552 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.561 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.562 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.562 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.563 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.563 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.569 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.571 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.571 I llm_load_print_meta: max token length = 93
0.00.911.590 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.917.798 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.806 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.807 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.807 I llama_new_context_with_model: n_batch       = 2048
0.00.917.808 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.808 I llama_new_context_with_model: flash_attn    = 0
0.00.917.812 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.813 I llama_new_context_with_model: freq_scale    = 1
0.00.917.814 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.560 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.604 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.739 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.399 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.403 I llama_new_context_with_model: graph nodes  = 601
0.00.936.403 I llama_new_context_with_model: graph splits = 1
0.00.936.428 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.522.345 I main: llama threadpool init, n_threads = 4
0.01.522.362 I 
0.01.522.477 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.522.481 I 
0.01.522.721 I sampler seed: 2587770
0.01.522.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.522.744 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.522.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.522.748 I 
 seconally.

I'm not sure how to structure this, but I want to organize the information in a way that is easy to follow and understand.

0.12.659.544 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.91 tokens per second)
0.12.659.547 I llama_perf_context_print:        load time =    1521.39 ms
0.12.659.559 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.659.561 I llama_perf_context_print:        eval time =   11046.92 ms /    32 runs   (  345.22 ms per token,     2.90 tokens per second)
0.12.659.563 I llama_perf_context_print:       total time =   11137.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.578s
user	46m26.856s
sys	0m6.395s
