+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.798 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.017 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.114 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.126 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.127 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.132 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.135 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.136 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.137 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.140 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.155 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.157 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.158 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.160 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.515 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.857 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.868 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.870 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.871 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.872 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.873 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.874 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.878 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.879 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.880 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.881 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.882 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.892 I llama_model_loader: - type  f32:   37 tensors
0.00.275.896 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.850 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.918 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.888 I llm_load_vocab: special tokens cache size = 5
0.00.614.720 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.791 I llm_load_print_meta: arch             = gemma
0.00.614.792 I llm_load_print_meta: vocab type       = SPM
0.00.614.793 I llm_load_print_meta: n_vocab          = 256000
0.00.614.795 I llm_load_print_meta: n_merges         = 0
0.00.614.796 I llm_load_print_meta: vocab_only       = 0
0.00.614.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.797 I llm_load_print_meta: n_embd           = 2048
0.00.614.797 I llm_load_print_meta: n_layer          = 18
0.00.614.864 I llm_load_print_meta: n_head           = 8
0.00.614.871 I llm_load_print_meta: n_head_kv        = 1
0.00.614.872 I llm_load_print_meta: n_rot            = 256
0.00.614.872 I llm_load_print_meta: n_swa            = 0
0.00.614.873 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.873 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.878 I llm_load_print_meta: n_gqa            = 8
0.00.614.882 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.887 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.888 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.889 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.890 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.890 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.891 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.896 I llm_load_print_meta: n_ff             = 16384
0.00.614.896 I llm_load_print_meta: n_expert         = 0
0.00.614.897 I llm_load_print_meta: n_expert_used    = 0
0.00.614.897 I llm_load_print_meta: causal attn      = 1
0.00.614.898 I llm_load_print_meta: pooling type     = 0
0.00.614.898 I llm_load_print_meta: rope type        = 2
0.00.614.898 I llm_load_print_meta: rope scaling     = linear
0.00.614.900 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.900 I llm_load_print_meta: freq_scale_train = 1
0.00.614.901 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.902 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.919 I llm_load_print_meta: model type       = 2B
0.00.614.920 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.921 I llm_load_print_meta: model params     = 2.51 B
0.00.614.922 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.923 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.924 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.925 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.925 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.931 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.947 I llm_load_print_meta: max token length = 93
0.00.615.137 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.765 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.775 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.776 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.777 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.777 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.778 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.561 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.568 I llama_new_context_with_model: n_batch    = 2048
0.00.721.568 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.569 I llama_new_context_with_model: flash_attn = 0
0.00.721.572 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.573 I llama_new_context_with_model: freq_scale = 1
0.00.750.305 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.349 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.883 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.888 I llama_new_context_with_model: graph nodes  = 601
0.00.751.889 I llama_new_context_with_model: graph splits = 1
0.00.751.905 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.240 I main: llama threadpool init, n_threads = 4
0.01.364.252 I 
0.01.364.367 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.372 I 
0.01.364.577 I sampler seed: 1572246878
0.01.364.588 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.596 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.596 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.597 I 
 increasities with the audacity of a champion, defying the odds with a relentless passion.

This excerpt captures the essence of a fighter's spirit, their courage

0.14.797.213 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.85 tokens per second)
0.14.797.238 I llama_perf_context_print:        load time =    1361.34 ms
0.14.797.240 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.797.241 I llama_perf_context_print:        eval time =   13337.50 ms /    32 runs   (  416.80 ms per token,     2.40 tokens per second)
0.14.797.242 I llama_perf_context_print:       total time =   13432.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.025.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.532 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.540 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.542 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.543 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.544 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.555 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.101 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.960 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.961 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.962 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.966 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.969 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.972 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.974 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.982 I llama_model_loader: - type  f32:   37 tensors
0.00.276.988 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.251 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.075 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.054 I llm_load_vocab: special tokens cache size = 5
0.00.619.084 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.152 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.152 I llm_load_print_meta: arch             = gemma
0.00.619.153 I llm_load_print_meta: vocab type       = SPM
0.00.619.154 I llm_load_print_meta: n_vocab          = 256000
0.00.619.156 I llm_load_print_meta: n_merges         = 0
0.00.619.157 I llm_load_print_meta: vocab_only       = 0
0.00.619.157 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.158 I llm_load_print_meta: n_embd           = 2048
0.00.619.158 I llm_load_print_meta: n_layer          = 18
0.00.619.223 I llm_load_print_meta: n_head           = 8
0.00.619.229 I llm_load_print_meta: n_head_kv        = 1
0.00.619.230 I llm_load_print_meta: n_rot            = 256
0.00.619.230 I llm_load_print_meta: n_swa            = 0
0.00.619.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.235 I llm_load_print_meta: n_gqa            = 8
0.00.619.240 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.269 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.271 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.273 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.274 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.274 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.274 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.289 I llm_load_print_meta: n_ff             = 16384
0.00.619.296 I llm_load_print_meta: n_expert         = 0
0.00.619.299 I llm_load_print_meta: n_expert_used    = 0
0.00.619.300 I llm_load_print_meta: causal attn      = 1
0.00.619.306 I llm_load_print_meta: pooling type     = 0
0.00.619.313 I llm_load_print_meta: rope type        = 2
0.00.619.321 I llm_load_print_meta: rope scaling     = linear
0.00.619.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.323 I llm_load_print_meta: freq_scale_train = 1
0.00.619.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.331 I llm_load_print_meta: model type       = 2B
0.00.619.338 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.339 I llm_load_print_meta: model params     = 2.51 B
0.00.619.340 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.341 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.348 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.355 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.355 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.356 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.356 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.357 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.367 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.369 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.370 I llm_load_print_meta: max token length = 93
0.00.619.540 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.756 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.721.565 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.574 I llama_new_context_with_model: n_batch    = 2048
0.00.721.575 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.575 I llama_new_context_with_model: flash_attn = 0
0.00.721.579 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.580 I llama_new_context_with_model: freq_scale = 1
0.00.751.998 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.752.045 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.752.158 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.561 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.753.566 I llama_new_context_with_model: graph nodes  = 601
0.00.753.566 I llama_new_context_with_model: graph splits = 1
0.00.753.583 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.231 I main: llama threadpool init, n_threads = 4
0.01.366.244 I 
0.01.366.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.353 I 
0.01.366.526 I sampler seed: 638251775
0.01.366.537 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.545 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.546 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.559 I 
 increably.

I am unable to generate a response because the provided context does not contain information regarding the specific task or requirements. Please provide the necessary information,

0.14.902.024 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.48 tokens per second)
0.14.902.027 I llama_perf_context_print:        load time =    1363.32 ms
0.14.902.029 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.902.052 I llama_perf_context_print:        eval time =   13441.02 ms /    32 runs   (  420.03 ms per token,     2.38 tokens per second)
0.14.902.056 I llama_perf_context_print:       total time =   13535.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.950 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.158 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.267 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.277 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.278 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.280 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.280 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.288 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.292 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.293 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.294 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.999 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.453 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.976 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.989 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.990 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.996 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.997 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.998 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.999 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.000 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.009 I llama_model_loader: - type  f32:   37 tensors
0.00.276.013 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.167 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.675 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.659 I llm_load_vocab: special tokens cache size = 5
0.00.639.477 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.551 I llm_load_print_meta: arch             = gemma
0.00.639.552 I llm_load_print_meta: vocab type       = SPM
0.00.639.553 I llm_load_print_meta: n_vocab          = 256000
0.00.639.555 I llm_load_print_meta: n_merges         = 0
0.00.639.555 I llm_load_print_meta: vocab_only       = 0
0.00.639.556 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.556 I llm_load_print_meta: n_embd           = 2048
0.00.639.556 I llm_load_print_meta: n_layer          = 18
0.00.639.621 I llm_load_print_meta: n_head           = 8
0.00.639.629 I llm_load_print_meta: n_head_kv        = 1
0.00.639.629 I llm_load_print_meta: n_rot            = 256
0.00.639.630 I llm_load_print_meta: n_swa            = 0
0.00.639.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.631 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.637 I llm_load_print_meta: n_gqa            = 8
0.00.639.641 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.646 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.648 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.649 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.662 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.663 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.669 I llm_load_print_meta: n_ff             = 16384
0.00.639.673 I llm_load_print_meta: n_expert         = 0
0.00.639.673 I llm_load_print_meta: n_expert_used    = 0
0.00.639.673 I llm_load_print_meta: causal attn      = 1
0.00.639.674 I llm_load_print_meta: pooling type     = 0
0.00.639.674 I llm_load_print_meta: rope type        = 2
0.00.639.675 I llm_load_print_meta: rope scaling     = linear
0.00.639.677 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.678 I llm_load_print_meta: freq_scale_train = 1
0.00.639.678 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.678 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.678 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.679 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.680 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.680 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.692 I llm_load_print_meta: model type       = 2B
0.00.639.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.639.695 I llm_load_print_meta: model params     = 2.51 B
0.00.639.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.639.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.699 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.708 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.716 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.717 I llm_load_print_meta: max token length = 93
0.00.639.885 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.716.690 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.716.701 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.716.702 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.716.703 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.716.704 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.716.704 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.722.386 I llama_new_context_with_model: n_ctx      = 8192
0.00.722.393 I llama_new_context_with_model: n_batch    = 2048
0.00.722.393 I llama_new_context_with_model: n_ubatch   = 512
0.00.722.394 I llama_new_context_with_model: flash_attn = 0
0.00.722.397 I llama_new_context_with_model: freq_base  = 10000.0
0.00.722.398 I llama_new_context_with_model: freq_scale = 1
0.00.751.208 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.251 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.372 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.785 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.789 I llama_new_context_with_model: graph nodes  = 601
0.00.752.790 I llama_new_context_with_model: graph splits = 1
0.00.752.805 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.706 I main: llama threadpool init, n_threads = 4
0.01.364.720 I 
0.01.364.832 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.835 I 
0.01.365.012 I sampler seed: 1078883835
0.01.365.023 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.029 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.030 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.031 I 
 increasities, a beautiful woman who was rumored to be a sorceress, and a tyrannical sorcerer named Maldred.

**What is the significance of this event

0.14.773.995 I llama_perf_sampler_print:    sampling time =      53.07 ms /    33 runs   (    1.61 ms per token,   621.81 tokens per second)
0.14.773.998 I llama_perf_context_print:        load time =    1361.81 ms
0.14.774.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.774.001 I llama_perf_context_print:        eval time =   13309.40 ms /    32 runs   (  415.92 ms per token,     2.40 tokens per second)
0.14.774.024 I llama_perf_context_print:       total time =   13409.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.106 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.433 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.458 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.460 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.465 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.480 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.482 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.484 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.021 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.436 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.861 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.870 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.871 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.873 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.873 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.875 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.876 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.880 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.881 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.882 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.883 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.884 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.893 I llama_model_loader: - type  f32:   37 tensors
0.00.275.897 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.359 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.060 I llm_load_vocab: special tokens cache size = 5
0.00.626.487 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.565 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.565 I llm_load_print_meta: arch             = gemma
0.00.626.566 I llm_load_print_meta: vocab type       = SPM
0.00.626.567 I llm_load_print_meta: n_vocab          = 256000
0.00.626.569 I llm_load_print_meta: n_merges         = 0
0.00.626.570 I llm_load_print_meta: vocab_only       = 0
0.00.626.570 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.571 I llm_load_print_meta: n_embd           = 2048
0.00.626.571 I llm_load_print_meta: n_layer          = 18
0.00.626.635 I llm_load_print_meta: n_head           = 8
0.00.626.642 I llm_load_print_meta: n_head_kv        = 1
0.00.626.643 I llm_load_print_meta: n_rot            = 256
0.00.626.643 I llm_load_print_meta: n_swa            = 0
0.00.626.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.649 I llm_load_print_meta: n_gqa            = 8
0.00.626.656 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.665 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.669 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.670 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.670 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.671 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.678 I llm_load_print_meta: n_ff             = 16384
0.00.626.679 I llm_load_print_meta: n_expert         = 0
0.00.626.681 I llm_load_print_meta: n_expert_used    = 0
0.00.626.682 I llm_load_print_meta: causal attn      = 1
0.00.626.682 I llm_load_print_meta: pooling type     = 0
0.00.626.687 I llm_load_print_meta: rope type        = 2
0.00.626.688 I llm_load_print_meta: rope scaling     = linear
0.00.626.690 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.691 I llm_load_print_meta: freq_scale_train = 1
0.00.626.692 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.696 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.696 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.697 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.698 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.699 I llm_load_print_meta: model type       = 2B
0.00.626.700 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.701 I llm_load_print_meta: model params     = 2.51 B
0.00.626.703 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.704 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.706 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.707 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.708 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.711 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.712 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.718 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.720 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.721 I llm_load_print_meta: max token length = 93
0.00.626.917 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.698.605 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.698.616 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.704.422 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.429 I llama_new_context_with_model: n_batch    = 2048
0.00.704.430 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.430 I llama_new_context_with_model: flash_attn = 0
0.00.704.433 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.434 I llama_new_context_with_model: freq_scale = 1
0.00.735.024 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.735.067 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.735.188 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.578 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.583 I llama_new_context_with_model: graph nodes  = 601
0.00.736.583 I llama_new_context_with_model: graph splits = 1
0.00.736.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.660 I main: llama threadpool init, n_threads = 4
0.01.347.673 I 
0.01.347.800 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.804 I 
0.01.347.991 I sampler seed: 3417016416
0.01.348.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.009 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.010 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.011 I 
 increasities as a way of expressing affection, holding, and intimacy between partners. [end of text]


0.08.473.253 I llama_perf_sampler_print:    sampling time =      26.15 ms /    18 runs   (    1.45 ms per token,   688.23 tokens per second)
0.08.473.256 I llama_perf_context_print:        load time =    1344.72 ms
0.08.473.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.473.259 I llama_perf_context_print:        eval time =    7073.27 ms /    17 runs   (  416.07 ms per token,     2.40 tokens per second)
0.08.473.260 I llama_perf_context_print:       total time =    7125.60 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.827s
user	3m22.804s
sys	0m9.530s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3954 (e01c67af)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199833.63 ms
main:    total time = 199833.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.025.127 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.342 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.456 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.461 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.462 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.463 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.465 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.472 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.474 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.477 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.781 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.296 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.306 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.307 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.308 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.309 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.310 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.311 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.314 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.335 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.340 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.341 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.350 I llama_model_loader: - type  f32:   37 tensors
0.00.275.355 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.356 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.320 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.319 I llm_load_vocab: special tokens cache size = 5
0.00.622.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.130 I llm_load_print_meta: arch             = gemma
0.00.622.131 I llm_load_print_meta: vocab type       = SPM
0.00.622.131 I llm_load_print_meta: n_vocab          = 256000
0.00.622.133 I llm_load_print_meta: n_merges         = 0
0.00.622.134 I llm_load_print_meta: vocab_only       = 0
0.00.622.135 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.135 I llm_load_print_meta: n_embd           = 2048
0.00.622.136 I llm_load_print_meta: n_layer          = 18
0.00.622.200 I llm_load_print_meta: n_head           = 8
0.00.622.207 I llm_load_print_meta: n_head_kv        = 1
0.00.622.207 I llm_load_print_meta: n_rot            = 256
0.00.622.208 I llm_load_print_meta: n_swa            = 0
0.00.622.208 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.213 I llm_load_print_meta: n_gqa            = 8
0.00.622.217 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.222 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.223 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.224 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.225 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.225 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.226 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.230 I llm_load_print_meta: n_ff             = 16384
0.00.622.231 I llm_load_print_meta: n_expert         = 0
0.00.622.231 I llm_load_print_meta: n_expert_used    = 0
0.00.622.232 I llm_load_print_meta: causal attn      = 1
0.00.622.232 I llm_load_print_meta: pooling type     = 0
0.00.622.232 I llm_load_print_meta: rope type        = 2
0.00.622.233 I llm_load_print_meta: rope scaling     = linear
0.00.622.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.259 I llm_load_print_meta: freq_scale_train = 1
0.00.622.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.261 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.262 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.262 I llm_load_print_meta: model type       = 2B
0.00.622.263 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.622.264 I llm_load_print_meta: model params     = 2.51 B
0.00.622.265 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.622.265 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.267 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.267 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.276 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.280 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.281 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.288 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.289 I llm_load_print_meta: max token length = 93
0.00.622.464 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.872 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.682.882 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.682.882 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.682.883 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.682.884 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.682.884 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.688.578 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.584 I llama_new_context_with_model: n_batch    = 2048
0.00.688.585 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.585 I llama_new_context_with_model: flash_attn = 0
0.00.688.588 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.588 I llama_new_context_with_model: freq_scale = 1
0.00.718.685 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.729 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.249 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.254 I llama_new_context_with_model: graph nodes  = 601
0.00.720.254 I llama_new_context_with_model: graph splits = 1
0.00.720.269 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.300.373 I main: llama threadpool init, n_threads = 4
0.01.300.385 I 
0.01.300.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.300.507 I 
0.01.300.682 I sampler seed: 2483454397
0.01.300.694 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.701 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.300.702 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.702 I 
 squaRE, the first robot to be created by a human being.

**Summary:**

Square is an ambitious AI program designed to revolutionize human intelligence

0.12.236.521 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.80 tokens per second)
0.12.236.524 I llama_perf_context_print:        load time =    1297.48 ms
0.12.236.525 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.236.527 I llama_perf_context_print:        eval time =   10840.49 ms /    32 runs   (  338.77 ms per token,     2.95 tokens per second)
0.12.236.527 I llama_perf_context_print:       total time =   10936.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3954 (e01c67af)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199724.09 ms
main:    total time = 199724.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3954 (e01c67af) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.032.056 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.032.160 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.032.177 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.032.182 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.032.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.032.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.032.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.032.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.032.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.032.193 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.032.200 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.032.204 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.032.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.032.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.032.208 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.164.726 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.496 I llama_model_loader: - type  f32:   37 tensors
0.00.284.499 I llama_model_loader: - type q4_K:  108 tensors
0.00.284.500 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.284 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.989 I llm_load_vocab: special tokens cache size = 5
0.00.628.861 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.931 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.932 I llm_load_print_meta: arch             = gemma
0.00.628.933 I llm_load_print_meta: vocab type       = SPM
0.00.628.933 I llm_load_print_meta: n_vocab          = 256000
0.00.628.936 I llm_load_print_meta: n_merges         = 0
0.00.628.937 I llm_load_print_meta: vocab_only       = 0
0.00.628.937 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.937 I llm_load_print_meta: n_embd           = 2048
0.00.628.938 I llm_load_print_meta: n_layer          = 18
0.00.629.002 I llm_load_print_meta: n_head           = 8
0.00.629.034 I llm_load_print_meta: n_head_kv        = 1
0.00.629.036 I llm_load_print_meta: n_rot            = 256
0.00.629.036 I llm_load_print_meta: n_swa            = 0
0.00.629.037 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.037 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.043 I llm_load_print_meta: n_gqa            = 8
0.00.629.048 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.053 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.057 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.057 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.058 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.058 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.067 I llm_load_print_meta: n_ff             = 16384
0.00.629.068 I llm_load_print_meta: n_expert         = 0
0.00.629.068 I llm_load_print_meta: n_expert_used    = 0
0.00.629.069 I llm_load_print_meta: causal attn      = 1
0.00.629.070 I llm_load_print_meta: pooling type     = 0
0.00.629.070 I llm_load_print_meta: rope type        = 2
0.00.629.071 I llm_load_print_meta: rope scaling     = linear
0.00.629.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.073 I llm_load_print_meta: freq_scale_train = 1
0.00.629.074 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.075 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.078 I llm_load_print_meta: model type       = 2B
0.00.629.079 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.629.080 I llm_load_print_meta: model params     = 2.51 B
0.00.629.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.629.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.083 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.092 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.093 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.093 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.093 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.100 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.101 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.102 I llm_load_print_meta: max token length = 93
0.00.629.282 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.387 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.693.022 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.029 I llama_new_context_with_model: n_batch    = 2048
0.00.693.029 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.030 I llama_new_context_with_model: flash_attn = 0
0.00.693.032 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.033 I llama_new_context_with_model: freq_scale = 1
0.00.722.549 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.596 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.718 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.086 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.091 I llama_new_context_with_model: graph nodes  = 601
0.00.724.091 I llama_new_context_with_model: graph splits = 1
0.00.724.107 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.672 I main: llama threadpool init, n_threads = 4
0.01.308.685 I 
0.01.308.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.799 I 
0.01.308.979 I sampler seed: 2502879908
0.01.308.990 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.997 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.308.998 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.998 I 
 seconally.

I'm having some trouble with my [insert topic]. I'm not sure what the best way to approach this is.

**

0.12.233.518 I llama_perf_sampler_print:    sampling time =      49.93 ms /    33 runs   (    1.51 ms per token,   660.90 tokens per second)
0.12.233.524 I llama_perf_context_print:        load time =    1305.78 ms
0.12.233.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.233.528 I llama_perf_context_print:        eval time =   10829.62 ms /    32 runs   (  338.43 ms per token,     2.95 tokens per second)
0.12.233.529 I llama_perf_context_print:       total time =   10924.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.966s
user	50m15.723s
sys	0m6.447s
