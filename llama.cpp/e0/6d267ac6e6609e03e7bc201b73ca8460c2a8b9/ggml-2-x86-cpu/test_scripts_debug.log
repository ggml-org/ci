+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.686 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.785 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.798 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.800 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.804 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.808 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.809 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.810 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.811 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.813 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.818 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.819 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.820 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.822 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.823 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.345.205 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.369.188 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.369.199 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.369.200 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.369.201 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.369.203 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.369.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.369.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.369.209 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.369.210 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.369.212 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.369.213 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.369.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.369.224 I llama_model_loader: - type  f32:   37 tensors
0.00.369.226 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.716 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.911 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.855 I llm_load_vocab: special tokens cache size = 5
0.00.879.147 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.879.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.879.227 I llm_load_print_meta: arch             = gemma
0.00.879.228 I llm_load_print_meta: vocab type       = SPM
0.00.879.229 I llm_load_print_meta: n_vocab          = 256000
0.00.879.231 I llm_load_print_meta: n_merges         = 0
0.00.879.232 I llm_load_print_meta: vocab_only       = 0
0.00.879.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.879.233 I llm_load_print_meta: n_embd           = 2048
0.00.879.233 I llm_load_print_meta: n_layer          = 18
0.00.879.307 I llm_load_print_meta: n_head           = 8
0.00.879.318 I llm_load_print_meta: n_head_kv        = 1
0.00.879.318 I llm_load_print_meta: n_rot            = 256
0.00.879.319 I llm_load_print_meta: n_swa            = 0
0.00.879.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.879.320 I llm_load_print_meta: n_embd_head_v    = 256
0.00.879.325 I llm_load_print_meta: n_gqa            = 8
0.00.879.330 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.879.335 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.879.337 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.879.338 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.879.338 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.879.339 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.879.339 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.879.344 I llm_load_print_meta: n_ff             = 16384
0.00.879.345 I llm_load_print_meta: n_expert         = 0
0.00.879.346 I llm_load_print_meta: n_expert_used    = 0
0.00.879.347 I llm_load_print_meta: causal attn      = 1
0.00.879.348 I llm_load_print_meta: pooling type     = 0
0.00.879.348 I llm_load_print_meta: rope type        = 2
0.00.879.349 I llm_load_print_meta: rope scaling     = linear
0.00.879.351 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.879.352 I llm_load_print_meta: freq_scale_train = 1
0.00.879.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.879.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.879.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.879.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.879.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.879.355 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.879.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.879.359 I llm_load_print_meta: model type       = 2B
0.00.879.361 I llm_load_print_meta: model ftype      = Q8_0
0.00.879.362 I llm_load_print_meta: model params     = 2.51 B
0.00.879.363 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.879.364 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.879.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.879.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.879.366 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.879.366 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.879.366 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.879.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.879.383 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.879.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.879.385 I llm_load_print_meta: max token length = 93
0.00.982.166 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.982.177 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.982.178 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.982.178 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.982.179 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.982.180 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.988.593 I llama_new_context_with_model: n_seq_max     = 1
0.00.988.601 I llama_new_context_with_model: n_ctx         = 4096
0.00.988.601 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.988.601 I llama_new_context_with_model: n_batch       = 2048
0.00.988.602 I llama_new_context_with_model: n_ubatch      = 512
0.00.988.602 I llama_new_context_with_model: flash_attn    = 0
0.00.988.605 I llama_new_context_with_model: freq_base     = 10000.0
0.00.988.606 I llama_new_context_with_model: freq_scale    = 1
0.00.988.606 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.988.697 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.003.262 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.003.299 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.003.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.006.118 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.006.122 I llama_new_context_with_model: graph nodes  = 601
0.01.006.122 I llama_new_context_with_model: graph splits = 1
0.01.006.148 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.006.152 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.616.874 I main: llama threadpool init, n_threads = 4
0.01.616.891 I 
0.01.617.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.617.014 I 
0.01.617.252 I sampler seed: 1430341420
0.01.617.266 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.617.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.617.278 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.617.278 I 
 increasities are a common theme in history, with many examples from different eras.

**What are the causes and consequences of these conflicts?**

**Causes

0.15.133.234 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.81 tokens per second)
0.15.133.248 I llama_perf_context_print:        load time =    1615.90 ms
0.15.133.250 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.133.251 I llama_perf_context_print:        eval time =   13431.28 ms /    32 runs   (  419.73 ms per token,     2.38 tokens per second)
0.15.133.252 I llama_perf_context_print:       total time =   13516.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.299 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.322 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.332 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.335 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.342 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.350 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.358 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.360 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.788 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.777 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.786 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.788 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.789 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.790 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.791 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.793 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.797 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.798 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.799 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.801 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.802 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.811 I llama_model_loader: - type  f32:   37 tensors
0.00.349.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.146 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.054 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.963 I llm_load_vocab: special tokens cache size = 5
0.00.855.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.818 I llm_load_print_meta: arch             = gemma
0.00.855.819 I llm_load_print_meta: vocab type       = SPM
0.00.855.820 I llm_load_print_meta: n_vocab          = 256000
0.00.855.822 I llm_load_print_meta: n_merges         = 0
0.00.855.823 I llm_load_print_meta: vocab_only       = 0
0.00.855.823 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.823 I llm_load_print_meta: n_embd           = 2048
0.00.855.824 I llm_load_print_meta: n_layer          = 18
0.00.855.907 I llm_load_print_meta: n_head           = 8
0.00.855.921 I llm_load_print_meta: n_head_kv        = 1
0.00.855.922 I llm_load_print_meta: n_rot            = 256
0.00.855.925 I llm_load_print_meta: n_swa            = 0
0.00.855.926 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.926 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.933 I llm_load_print_meta: n_gqa            = 8
0.00.855.940 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.953 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.955 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.956 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.973 I llm_load_print_meta: n_ff             = 16384
0.00.855.978 I llm_load_print_meta: n_expert         = 0
0.00.855.978 I llm_load_print_meta: n_expert_used    = 0
0.00.855.979 I llm_load_print_meta: causal attn      = 1
0.00.855.979 I llm_load_print_meta: pooling type     = 0
0.00.855.980 I llm_load_print_meta: rope type        = 2
0.00.855.980 I llm_load_print_meta: rope scaling     = linear
0.00.855.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.983 I llm_load_print_meta: freq_scale_train = 1
0.00.855.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.989 I llm_load_print_meta: model type       = 2B
0.00.855.991 I llm_load_print_meta: model ftype      = Q8_0
0.00.855.992 I llm_load_print_meta: model params     = 2.51 B
0.00.855.993 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.855.994 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.995 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.996 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.997 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.998 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.010 I llm_load_print_meta: max token length = 93
0.00.951.343 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.958.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.958.764 I llama_new_context_with_model: n_ctx         = 4096
0.00.958.765 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.958.765 I llama_new_context_with_model: n_batch       = 2048
0.00.958.766 I llama_new_context_with_model: n_ubatch      = 512
0.00.958.767 I llama_new_context_with_model: flash_attn    = 0
0.00.958.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.958.771 I llama_new_context_with_model: freq_scale    = 1
0.00.958.772 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.874 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.974.643 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.974.686 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.974.805 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.452 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.457 I llama_new_context_with_model: graph nodes  = 601
0.00.977.457 I llama_new_context_with_model: graph splits = 1
0.00.977.485 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.489 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.800 I main: llama threadpool init, n_threads = 4
0.01.585.817 I 
0.01.585.949 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.953 I 
0.01.586.196 I sampler seed: 2508747602
0.01.586.210 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.221 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.224 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.224 I 
 increasities and engage in creative dialogue to bring forth new perspectives and solutions. [end of text]


0.08.305.695 I llama_perf_sampler_print:    sampling time =      24.95 ms /    17 runs   (    1.47 ms per token,   681.36 tokens per second)
0.08.305.699 I llama_perf_context_print:        load time =    1584.83 ms
0.08.305.700 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.305.714 I llama_perf_context_print:        eval time =    6675.85 ms /    16 runs   (  417.24 ms per token,     2.40 tokens per second)
0.08.305.715 I llama_perf_context_print:       total time =    6719.91 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.606 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.618 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.737 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.741 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.745 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.747 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.749 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.752 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.758 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.760 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.761 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.764 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.765 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.652 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.750 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.763 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.765 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.768 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.778 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.780 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.789 I llama_model_loader: - type  f32:   37 tensors
0.00.352.792 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.518 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.892 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.906 I llm_load_vocab: special tokens cache size = 5
0.00.863.790 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.865 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.871 I llm_load_print_meta: arch             = gemma
0.00.863.871 I llm_load_print_meta: vocab type       = SPM
0.00.863.872 I llm_load_print_meta: n_vocab          = 256000
0.00.863.875 I llm_load_print_meta: n_merges         = 0
0.00.863.875 I llm_load_print_meta: vocab_only       = 0
0.00.863.876 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.876 I llm_load_print_meta: n_embd           = 2048
0.00.863.876 I llm_load_print_meta: n_layer          = 18
0.00.863.954 I llm_load_print_meta: n_head           = 8
0.00.863.961 I llm_load_print_meta: n_head_kv        = 1
0.00.863.966 I llm_load_print_meta: n_rot            = 256
0.00.863.967 I llm_load_print_meta: n_swa            = 0
0.00.863.967 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.968 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.974 I llm_load_print_meta: n_gqa            = 8
0.00.863.981 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.989 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.992 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.993 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.994 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.994 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.995 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.864.002 I llm_load_print_meta: n_ff             = 16384
0.00.864.003 I llm_load_print_meta: n_expert         = 0
0.00.864.004 I llm_load_print_meta: n_expert_used    = 0
0.00.864.005 I llm_load_print_meta: causal attn      = 1
0.00.864.006 I llm_load_print_meta: pooling type     = 0
0.00.864.007 I llm_load_print_meta: rope type        = 2
0.00.864.008 I llm_load_print_meta: rope scaling     = linear
0.00.864.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.864.011 I llm_load_print_meta: freq_scale_train = 1
0.00.864.012 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.864.013 I llm_load_print_meta: rope_finetuned   = unknown
0.00.864.013 I llm_load_print_meta: ssm_d_conv       = 0
0.00.864.015 I llm_load_print_meta: ssm_d_inner      = 0
0.00.864.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.864.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.864.018 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.864.022 I llm_load_print_meta: model type       = 2B
0.00.864.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.864.025 I llm_load_print_meta: model params     = 2.51 B
0.00.864.027 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.864.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.864.029 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.864.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.864.032 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.864.033 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.864.033 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.864.034 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.864.042 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.864.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.864.044 I llm_load_print_meta: max token length = 93
0.00.953.886 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.953.898 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.953.899 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.953.900 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.953.901 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.953.902 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.960.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.507 I llama_new_context_with_model: n_batch       = 2048
0.00.960.508 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.508 I llama_new_context_with_model: flash_attn    = 0
0.00.960.512 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.513 I llama_new_context_with_model: freq_scale    = 1
0.00.960.514 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.597 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.975.074 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.119 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.978.082 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.978.086 I llama_new_context_with_model: graph nodes  = 601
0.00.978.086 I llama_new_context_with_model: graph splits = 1
0.00.978.112 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.978.115 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.792 I main: llama threadpool init, n_threads = 4
0.01.587.809 I 
0.01.587.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.936 I 
0.01.588.180 I sampler seed: 3090315275
0.01.588.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.588.206 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.588.207 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.588.207 I 
 increasities:

The provided text does not contain any information about the "zipper disagresities", so I am unable to extract the requested data from the provided

0.15.148.978 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.12 tokens per second)
0.15.148.991 I llama_perf_context_print:        load time =    1586.82 ms
0.15.148.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.148.995 I llama_perf_context_print:        eval time =   13475.74 ms /    32 runs   (  421.12 ms per token,     2.37 tokens per second)
0.15.148.996 I llama_perf_context_print:       total time =   13561.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.189 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.300 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.313 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.323 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.331 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.333 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.337 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.350 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.352 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.061 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.344 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.355 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.356 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.357 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.359 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.366 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.368 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.369 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.370 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.373 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.381 I llama_model_loader: - type  f32:   37 tensors
0.00.349.383 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.020 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.649.531 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.650.466 I llm_load_vocab: special tokens cache size = 5
0.00.870.755 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.834 I llm_load_print_meta: arch             = gemma
0.00.870.834 I llm_load_print_meta: vocab type       = SPM
0.00.870.836 I llm_load_print_meta: n_vocab          = 256000
0.00.870.838 I llm_load_print_meta: n_merges         = 0
0.00.870.839 I llm_load_print_meta: vocab_only       = 0
0.00.870.839 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.839 I llm_load_print_meta: n_embd           = 2048
0.00.870.840 I llm_load_print_meta: n_layer          = 18
0.00.870.921 I llm_load_print_meta: n_head           = 8
0.00.870.934 I llm_load_print_meta: n_head_kv        = 1
0.00.870.934 I llm_load_print_meta: n_rot            = 256
0.00.870.935 I llm_load_print_meta: n_swa            = 0
0.00.870.936 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.937 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.944 I llm_load_print_meta: n_gqa            = 8
0.00.870.953 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.964 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.971 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.979 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.988 I llm_load_print_meta: n_ff             = 16384
0.00.870.989 I llm_load_print_meta: n_expert         = 0
0.00.870.990 I llm_load_print_meta: n_expert_used    = 0
0.00.870.991 I llm_load_print_meta: causal attn      = 1
0.00.870.993 I llm_load_print_meta: pooling type     = 0
0.00.870.994 I llm_load_print_meta: rope type        = 2
0.00.870.995 I llm_load_print_meta: rope scaling     = linear
0.00.870.997 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.998 I llm_load_print_meta: freq_scale_train = 1
0.00.871.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.871.002 I llm_load_print_meta: rope_finetuned   = unknown
0.00.871.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.871.003 I llm_load_print_meta: ssm_d_inner      = 0
0.00.871.003 I llm_load_print_meta: ssm_d_state      = 0
0.00.871.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.871.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.871.009 I llm_load_print_meta: model type       = 2B
0.00.871.011 I llm_load_print_meta: model ftype      = Q8_0
0.00.871.012 I llm_load_print_meta: model params     = 2.51 B
0.00.871.013 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.871.014 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.871.017 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.871.018 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.871.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.871.019 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.871.020 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.871.021 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.871.029 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.871.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.871.034 I llm_load_print_meta: max token length = 93
0.00.944.511 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.944.519 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.950.733 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.741 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.742 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.742 I llama_new_context_with_model: n_batch       = 2048
0.00.950.743 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.743 I llama_new_context_with_model: flash_attn    = 0
0.00.950.746 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.746 I llama_new_context_with_model: freq_scale    = 1
0.00.950.747 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.841 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.965.921 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.965.961 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.088 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.683 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.687 I llama_new_context_with_model: graph nodes  = 601
0.00.968.687 I llama_new_context_with_model: graph splits = 1
0.00.968.714 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.968.718 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.577.556 I main: llama threadpool init, n_threads = 4
0.01.577.573 I 
0.01.577.703 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.577.707 I 
0.01.577.951 I sampler seed: 473457483
0.01.577.964 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.976 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.997 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.578.001 I 
 increamically.

I am unable to provide a response due to the lack of sufficient information. Please provide more context or specific questions for me to assist you.

0.15.063.067 I llama_perf_sampler_print:    sampling time =      49.49 ms /    33 runs   (    1.50 ms per token,   666.76 tokens per second)
0.15.063.071 I llama_perf_context_print:        load time =    1576.60 ms
0.15.063.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.063.075 I llama_perf_context_print:        eval time =   13400.33 ms /    32 runs   (  418.76 ms per token,     2.39 tokens per second)
0.15.063.077 I llama_perf_context_print:       total time =   13485.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.248s
user	3m22.838s
sys	0m9.419s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4429 (e06d267a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185607.92 ms
main:    total time = 185607.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.023.654 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.666 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.753 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.765 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.767 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.774 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.775 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.777 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.792 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.796 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.802 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.805 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.806 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.808 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.209 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.230 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.232 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.233 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.243 I llama_model_loader: - type  f32:   37 tensors
0.00.350.245 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.246 I llama_model_loader: - type q6_K:   19 tensors
0.00.560.495 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.616.322 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.617.231 I llm_load_vocab: special tokens cache size = 5
0.00.833.105 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.179 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.184 I llm_load_print_meta: arch             = gemma
0.00.833.185 I llm_load_print_meta: vocab type       = SPM
0.00.833.186 I llm_load_print_meta: n_vocab          = 256000
0.00.833.188 I llm_load_print_meta: n_merges         = 0
0.00.833.188 I llm_load_print_meta: vocab_only       = 0
0.00.833.189 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.189 I llm_load_print_meta: n_embd           = 2048
0.00.833.190 I llm_load_print_meta: n_layer          = 18
0.00.833.266 I llm_load_print_meta: n_head           = 8
0.00.833.278 I llm_load_print_meta: n_head_kv        = 1
0.00.833.279 I llm_load_print_meta: n_rot            = 256
0.00.833.279 I llm_load_print_meta: n_swa            = 0
0.00.833.280 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.280 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.285 I llm_load_print_meta: n_gqa            = 8
0.00.833.291 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.296 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.300 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.301 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.302 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.308 I llm_load_print_meta: n_ff             = 16384
0.00.833.309 I llm_load_print_meta: n_expert         = 0
0.00.833.309 I llm_load_print_meta: n_expert_used    = 0
0.00.833.310 I llm_load_print_meta: causal attn      = 1
0.00.833.311 I llm_load_print_meta: pooling type     = 0
0.00.833.311 I llm_load_print_meta: rope type        = 2
0.00.833.312 I llm_load_print_meta: rope scaling     = linear
0.00.833.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.313 I llm_load_print_meta: freq_scale_train = 1
0.00.833.314 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.314 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.315 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.317 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.328 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.332 I llm_load_print_meta: model type       = 2B
0.00.833.334 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.833.335 I llm_load_print_meta: model params     = 2.51 B
0.00.833.336 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.833.337 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.338 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.339 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.340 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.340 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.349 I llm_load_print_meta: max token length = 93
0.00.896.234 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.896.242 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.896.243 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.896.244 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.896.245 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.896.245 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.902.339 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.347 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.348 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.348 I llama_new_context_with_model: n_batch       = 2048
0.00.902.349 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.349 I llama_new_context_with_model: flash_attn    = 0
0.00.902.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.353 I llama_new_context_with_model: freq_scale    = 1
0.00.902.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.447 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.917.924 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.917.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.920.717 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.920.722 I llama_new_context_with_model: graph nodes  = 601
0.00.920.722 I llama_new_context_with_model: graph splits = 1
0.00.920.747 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.920.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.499.281 I main: llama threadpool init, n_threads = 4
0.01.499.298 I 
0.01.499.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.499.421 I 
0.01.499.658 I sampler seed: 4066685280
0.01.499.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.499.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.499.684 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.499.685 I 
 seconary law is a proposition that:

a) The law is universally applicable to all situations.
b) The law is only applicable to specific situations.

0.12.632.885 I llama_perf_sampler_print:    sampling time =      49.42 ms /    33 runs   (    1.50 ms per token,   667.80 tokens per second)
0.12.632.899 I llama_perf_context_print:        load time =    1498.28 ms
0.12.632.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.632.902 I llama_perf_context_print:        eval time =   11048.75 ms /    32 runs   (  345.27 ms per token,     2.90 tokens per second)
0.12.632.903 I llama_perf_context_print:       total time =   11133.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4429 (e06d267a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185530.89 ms
main:    total time = 185530.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.330 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.443 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.445 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.458 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.465 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.467 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.469 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.470 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.251.990 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.382.942 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.382.951 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.382.952 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.382.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.382.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.382.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.382.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.382.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.382.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.382.970 I llama_model_loader: - type  f32:   37 tensors
0.00.382.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.382.973 I llama_model_loader: - type q6_K:   19 tensors
0.00.601.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.727 I llm_load_vocab: special tokens cache size = 5
0.00.872.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.865 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.870 I llm_load_print_meta: arch             = gemma
0.00.872.871 I llm_load_print_meta: vocab type       = SPM
0.00.872.871 I llm_load_print_meta: n_vocab          = 256000
0.00.872.873 I llm_load_print_meta: n_merges         = 0
0.00.872.874 I llm_load_print_meta: vocab_only       = 0
0.00.872.874 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.874 I llm_load_print_meta: n_embd           = 2048
0.00.872.875 I llm_load_print_meta: n_layer          = 18
0.00.872.949 I llm_load_print_meta: n_head           = 8
0.00.872.956 I llm_load_print_meta: n_head_kv        = 1
0.00.872.956 I llm_load_print_meta: n_rot            = 256
0.00.872.957 I llm_load_print_meta: n_swa            = 0
0.00.872.957 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.957 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.962 I llm_load_print_meta: n_gqa            = 8
0.00.872.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.976 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.986 I llm_load_print_meta: n_ff             = 16384
0.00.872.987 I llm_load_print_meta: n_expert         = 0
0.00.872.988 I llm_load_print_meta: n_expert_used    = 0
0.00.872.988 I llm_load_print_meta: causal attn      = 1
0.00.872.988 I llm_load_print_meta: pooling type     = 0
0.00.872.989 I llm_load_print_meta: rope type        = 2
0.00.872.990 I llm_load_print_meta: rope scaling     = linear
0.00.872.993 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.994 I llm_load_print_meta: freq_scale_train = 1
0.00.872.995 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.995 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.995 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.996 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.996 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.997 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.997 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.000 I llm_load_print_meta: model type       = 2B
0.00.873.002 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.873.003 I llm_load_print_meta: model params     = 2.51 B
0.00.873.004 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.873.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.006 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.017 I llm_load_print_meta: max token length = 93
0.00.932.298 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.938.291 I llama_new_context_with_model: n_seq_max     = 1
0.00.938.300 I llama_new_context_with_model: n_ctx         = 4096
0.00.938.300 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.938.301 I llama_new_context_with_model: n_batch       = 2048
0.00.938.301 I llama_new_context_with_model: n_ubatch      = 512
0.00.938.302 I llama_new_context_with_model: flash_attn    = 0
0.00.938.305 I llama_new_context_with_model: freq_base     = 10000.0
0.00.938.306 I llama_new_context_with_model: freq_scale    = 1
0.00.938.307 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.400 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.953.987 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.030 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.154 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.753 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.756 I llama_new_context_with_model: graph nodes  = 601
0.00.956.757 I llama_new_context_with_model: graph splits = 1
0.00.956.781 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.956.784 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.534.964 I main: llama threadpool init, n_threads = 4
0.01.534.980 I 
0.01.535.100 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.535.104 I 
0.01.535.342 I sampler seed: 3373406417
0.01.535.356 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.535.366 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.535.368 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.535.368 I 
 seconded arms,
a creature of the night with eyes burning bright.
It stalked the moonlit paths, a silent hunter,
its claws digging deep

0.12.655.806 I llama_perf_sampler_print:    sampling time =      49.72 ms /    33 runs   (    1.51 ms per token,   663.70 tokens per second)
0.12.655.810 I llama_perf_context_print:        load time =    1534.02 ms
0.12.655.812 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.655.824 I llama_perf_context_print:        eval time =   11035.15 ms /    32 runs   (  344.85 ms per token,     2.90 tokens per second)
0.12.655.826 I llama_perf_context_print:       total time =   11120.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.311s
user	46m41.706s
sys	0m6.266s
