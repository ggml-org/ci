+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.179 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.020.640 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.650 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.657 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.663 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.665 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.668 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.670 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.674 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.675 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.678 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.679 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.085 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.775 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.613 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.618 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.619 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.620 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.623 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.624 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.624 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.625 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.625 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.629 I llama_model_loader: - type  f32:   37 tensors
0.00.130.629 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.077 I llm_load_vocab: special tokens cache size = 5
0.00.265.193 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.211 I llm_load_print_meta: arch             = gemma
0.00.265.212 I llm_load_print_meta: vocab type       = SPM
0.00.265.212 I llm_load_print_meta: n_vocab          = 256000
0.00.265.213 I llm_load_print_meta: n_merges         = 0
0.00.265.213 I llm_load_print_meta: vocab_only       = 0
0.00.265.214 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.214 I llm_load_print_meta: n_embd           = 2048
0.00.265.214 I llm_load_print_meta: n_layer          = 18
0.00.265.224 I llm_load_print_meta: n_head           = 8
0.00.265.226 I llm_load_print_meta: n_head_kv        = 1
0.00.265.226 I llm_load_print_meta: n_rot            = 256
0.00.265.227 I llm_load_print_meta: n_swa            = 0
0.00.265.227 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.227 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.229 I llm_load_print_meta: n_gqa            = 8
0.00.265.231 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.235 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.237 I llm_load_print_meta: n_ff             = 16384
0.00.265.237 I llm_load_print_meta: n_expert         = 0
0.00.265.237 I llm_load_print_meta: n_expert_used    = 0
0.00.265.238 I llm_load_print_meta: causal attn      = 1
0.00.265.238 I llm_load_print_meta: pooling type     = 0
0.00.265.238 I llm_load_print_meta: rope type        = 2
0.00.265.239 I llm_load_print_meta: rope scaling     = linear
0.00.265.240 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.240 I llm_load_print_meta: freq_scale_train = 1
0.00.265.241 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.241 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.242 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.242 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.244 I llm_load_print_meta: model type       = 2B
0.00.265.245 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.246 I llm_load_print_meta: model params     = 2.51 B
0.00.265.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.247 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.247 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.248 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.248 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.248 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.249 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.250 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.250 I llm_load_print_meta: max token length = 93
0.00.364.881 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.888 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.889 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.890 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.890 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.891 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.019 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.025 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.025 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.025 I llama_new_context_with_model: n_batch       = 2048
0.00.370.026 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.026 I llama_new_context_with_model: flash_attn    = 0
0.00.370.029 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.030 I llama_new_context_with_model: freq_scale    = 1
0.00.370.030 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.050 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.384.305 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.317 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.698 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.705 I llama_new_context_with_model: graph nodes  = 601
0.00.385.706 I llama_new_context_with_model: graph splits = 1
0.00.385.709 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.709 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.921 I main: llama threadpool init, n_threads = 4
0.00.474.937 I 
0.00.475.012 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.015 I 
0.00.475.047 I sampler seed: 872346914
0.00.475.058 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.070 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.073 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.074 I 
 increably with a smile that could melt glaciers.

This is the description of Anya, the woman who captured my heart.

Anya's smile was

0.02.725.779 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6900.88 tokens per second)
0.02.725.782 I llama_perf_context_print:        load time =     474.52 ms
0.02.725.783 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.725.785 I llama_perf_context_print:        eval time =    2231.17 ms /    32 runs   (   69.72 ms per token,    14.34 tokens per second)
0.02.725.786 I llama_perf_context_print:       total time =    2250.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.172 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.376 I main: llama backend init
0.00.000.382 I main: load the model and apply lora adapter, if any
0.00.020.436 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.456 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.460 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.472 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.901 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.438 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.444 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.445 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.445 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.446 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.447 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.448 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.450 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.452 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.453 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.453 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.456 I llama_model_loader: - type  f32:   37 tensors
0.00.130.457 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.027 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.752 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.331 I llm_load_vocab: special tokens cache size = 5
0.00.271.121 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.139 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.140 I llm_load_print_meta: arch             = gemma
0.00.271.142 I llm_load_print_meta: vocab type       = SPM
0.00.271.142 I llm_load_print_meta: n_vocab          = 256000
0.00.271.143 I llm_load_print_meta: n_merges         = 0
0.00.271.143 I llm_load_print_meta: vocab_only       = 0
0.00.271.143 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.144 I llm_load_print_meta: n_embd           = 2048
0.00.271.145 I llm_load_print_meta: n_layer          = 18
0.00.271.156 I llm_load_print_meta: n_head           = 8
0.00.271.158 I llm_load_print_meta: n_head_kv        = 1
0.00.271.158 I llm_load_print_meta: n_rot            = 256
0.00.271.159 I llm_load_print_meta: n_swa            = 0
0.00.271.159 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.159 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.161 I llm_load_print_meta: n_gqa            = 8
0.00.271.163 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.166 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.168 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.168 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.169 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.169 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.171 I llm_load_print_meta: n_ff             = 16384
0.00.271.172 I llm_load_print_meta: n_expert         = 0
0.00.271.172 I llm_load_print_meta: n_expert_used    = 0
0.00.271.173 I llm_load_print_meta: causal attn      = 1
0.00.271.174 I llm_load_print_meta: pooling type     = 0
0.00.271.178 I llm_load_print_meta: rope type        = 2
0.00.271.179 I llm_load_print_meta: rope scaling     = linear
0.00.271.180 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.181 I llm_load_print_meta: freq_scale_train = 1
0.00.271.181 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.182 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.182 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.183 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.186 I llm_load_print_meta: model type       = 2B
0.00.271.188 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.188 I llm_load_print_meta: model params     = 2.51 B
0.00.271.189 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.190 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.191 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.192 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.192 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.192 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.193 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.193 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.194 I llm_load_print_meta: max token length = 93
0.00.367.147 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.232 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.236 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.237 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.237 I llama_new_context_with_model: n_batch       = 2048
0.00.372.237 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.238 I llama_new_context_with_model: flash_attn    = 0
0.00.372.241 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.241 I llama_new_context_with_model: freq_scale    = 1
0.00.372.243 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.263 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.480 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.493 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.868 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.872 I llama_new_context_with_model: graph nodes  = 601
0.00.388.873 I llama_new_context_with_model: graph splits = 1
0.00.388.876 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.388.876 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.134 I main: llama threadpool init, n_threads = 4
0.00.470.149 I 
0.00.470.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.223 I 
0.00.470.255 I sampler seed: 1572099404
0.00.470.266 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.278 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.282 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.282 I 
 increasements.

The underlined words are the focus of the sentence.

1. The **unpleasant** odor lingered in the air, making it difficult to

0.02.660.083 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6699.15 tokens per second)
0.02.660.085 I llama_perf_context_print:        load time =     469.73 ms
0.02.660.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.660.088 I llama_perf_context_print:        eval time =    2171.07 ms /    32 runs   (   67.85 ms per token,    14.74 tokens per second)
0.02.660.088 I llama_perf_context_print:       total time =    2189.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.571 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.805 I main: llama backend init
0.00.000.812 I main: load the model and apply lora adapter, if any
0.00.021.548 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.575 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.576 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.579 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.580 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.580 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.581 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.587 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.587 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.588 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.588 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.288 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.328 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.284 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.292 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.293 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.294 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.297 I llama_model_loader: - type  f32:   37 tensors
0.00.132.298 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.639 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.040 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.684 I llm_load_vocab: special tokens cache size = 5
0.00.269.474 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.494 I llm_load_print_meta: arch             = gemma
0.00.269.496 I llm_load_print_meta: vocab type       = SPM
0.00.269.497 I llm_load_print_meta: n_vocab          = 256000
0.00.269.498 I llm_load_print_meta: n_merges         = 0
0.00.269.498 I llm_load_print_meta: vocab_only       = 0
0.00.269.499 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.499 I llm_load_print_meta: n_embd           = 2048
0.00.269.499 I llm_load_print_meta: n_layer          = 18
0.00.269.512 I llm_load_print_meta: n_head           = 8
0.00.269.513 I llm_load_print_meta: n_head_kv        = 1
0.00.269.514 I llm_load_print_meta: n_rot            = 256
0.00.269.514 I llm_load_print_meta: n_swa            = 0
0.00.269.514 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.515 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.516 I llm_load_print_meta: n_gqa            = 8
0.00.269.518 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.522 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.523 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.525 I llm_load_print_meta: n_ff             = 16384
0.00.269.526 I llm_load_print_meta: n_expert         = 0
0.00.269.526 I llm_load_print_meta: n_expert_used    = 0
0.00.269.527 I llm_load_print_meta: causal attn      = 1
0.00.269.527 I llm_load_print_meta: pooling type     = 0
0.00.269.528 I llm_load_print_meta: rope type        = 2
0.00.269.528 I llm_load_print_meta: rope scaling     = linear
0.00.269.530 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.531 I llm_load_print_meta: freq_scale_train = 1
0.00.269.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.532 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.532 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.533 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.534 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.534 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.534 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.537 I llm_load_print_meta: model type       = 2B
0.00.269.538 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.543 I llm_load_print_meta: model params     = 2.51 B
0.00.269.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.545 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.546 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.546 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.546 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.547 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.547 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.551 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.552 I llm_load_print_meta: max token length = 93
0.00.347.428 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.434 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.435 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.436 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.436 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.437 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.842 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.849 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.849 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.850 I llama_new_context_with_model: n_batch       = 2048
0.00.352.850 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.850 I llama_new_context_with_model: flash_attn    = 0
0.00.352.853 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.854 I llama_new_context_with_model: freq_scale    = 1
0.00.352.855 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.875 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.367.045 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.057 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.160 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.378 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.385 I llama_new_context_with_model: graph nodes  = 601
0.00.368.385 I llama_new_context_with_model: graph splits = 1
0.00.368.388 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.388 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.999 I main: llama threadpool init, n_threads = 4
0.00.455.014 I 
0.00.455.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.100 I 
0.00.455.138 I sampler seed: 2599841437
0.00.455.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.154 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.154 I 
 increasively:

a meager existence
b meager existence
c meager existence
d meager existence

The correct answer is c. meager existence.

"Mea

0.02.704.676 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7016.80 tokens per second)
0.02.704.679 I llama_perf_context_print:        load time =     454.17 ms
0.02.704.681 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.704.683 I llama_perf_context_print:        eval time =    2230.46 ms /    32 runs   (   69.70 ms per token,    14.35 tokens per second)
0.02.704.684 I llama_perf_context_print:       total time =    2249.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.182 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.396 I main: llama backend init
0.00.000.402 I main: load the model and apply lora adapter, if any
0.00.020.613 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.624 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.631 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.638 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.639 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.645 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.645 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.646 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.650 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.651 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.652 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.653 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.635 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.772 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.778 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.780 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.786 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.787 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.791 I llama_model_loader: - type  f32:   37 tensors
0.00.131.792 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.025 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.542 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.285 I llm_load_vocab: special tokens cache size = 5
0.00.282.528 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.553 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.554 I llm_load_print_meta: arch             = gemma
0.00.282.555 I llm_load_print_meta: vocab type       = SPM
0.00.282.556 I llm_load_print_meta: n_vocab          = 256000
0.00.282.556 I llm_load_print_meta: n_merges         = 0
0.00.282.557 I llm_load_print_meta: vocab_only       = 0
0.00.282.557 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.557 I llm_load_print_meta: n_embd           = 2048
0.00.282.558 I llm_load_print_meta: n_layer          = 18
0.00.282.570 I llm_load_print_meta: n_head           = 8
0.00.282.572 I llm_load_print_meta: n_head_kv        = 1
0.00.282.573 I llm_load_print_meta: n_rot            = 256
0.00.282.573 I llm_load_print_meta: n_swa            = 0
0.00.282.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.575 I llm_load_print_meta: n_gqa            = 8
0.00.282.577 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.578 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.579 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.581 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.581 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.581 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.583 I llm_load_print_meta: n_ff             = 16384
0.00.282.583 I llm_load_print_meta: n_expert         = 0
0.00.282.584 I llm_load_print_meta: n_expert_used    = 0
0.00.282.584 I llm_load_print_meta: causal attn      = 1
0.00.282.584 I llm_load_print_meta: pooling type     = 0
0.00.282.585 I llm_load_print_meta: rope type        = 2
0.00.282.585 I llm_load_print_meta: rope scaling     = linear
0.00.282.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.587 I llm_load_print_meta: freq_scale_train = 1
0.00.282.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.588 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.589 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.589 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.591 I llm_load_print_meta: model type       = 2B
0.00.282.592 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.593 I llm_load_print_meta: model params     = 2.51 B
0.00.282.594 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.594 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.595 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.596 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.596 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.597 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.597 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.598 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.598 I llm_load_print_meta: max token length = 93
0.00.354.139 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.148 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.244 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.251 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.252 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.253 I llama_new_context_with_model: n_batch       = 2048
0.00.359.253 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.254 I llama_new_context_with_model: flash_attn    = 0
0.00.359.257 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.258 I llama_new_context_with_model: freq_scale    = 1
0.00.359.259 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.281 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.374.094 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.200 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.465 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.472 I llama_new_context_with_model: graph nodes  = 601
0.00.375.472 I llama_new_context_with_model: graph splits = 1
0.00.375.476 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.278 I main: llama threadpool init, n_threads = 4
0.00.464.293 I 
0.00.464.365 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.368 I 
0.00.464.406 I sampler seed: 50718793
0.00.464.417 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.430 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.433 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.433 I 
 increasively to the year 2025.

**2023:**
* The global economy faces a challenging economic downturn, leading to significant

0.02.869.383 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6885.04 tokens per second)
0.02.869.386 I llama_perf_context_print:        load time =     463.85 ms
0.02.869.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.388 I llama_perf_context_print:        eval time =    2386.15 ms /    32 runs   (   74.57 ms per token,    13.41 tokens per second)
0.02.869.389 I llama_perf_context_print:       total time =    2405.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.495s
user	0m39.289s
sys	0m9.373s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4429 (e06d267a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40244.80 ms
main:    total time = 40244.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.114 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.123 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.132 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.144 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.151 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.151 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.152 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.842 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.848 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.849 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.850 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.851 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.852 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.853 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.856 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.857 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.858 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.858 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.859 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.863 I llama_model_loader: - type  f32:   37 tensors
0.00.130.865 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.866 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.228 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.860 I llm_load_vocab: special tokens cache size = 5
0.00.271.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.942 I llm_load_print_meta: arch             = gemma
0.00.271.942 I llm_load_print_meta: vocab type       = SPM
0.00.271.943 I llm_load_print_meta: n_vocab          = 256000
0.00.271.943 I llm_load_print_meta: n_merges         = 0
0.00.271.944 I llm_load_print_meta: vocab_only       = 0
0.00.271.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.945 I llm_load_print_meta: n_embd           = 2048
0.00.271.945 I llm_load_print_meta: n_layer          = 18
0.00.271.957 I llm_load_print_meta: n_head           = 8
0.00.271.959 I llm_load_print_meta: n_head_kv        = 1
0.00.271.959 I llm_load_print_meta: n_rot            = 256
0.00.271.959 I llm_load_print_meta: n_swa            = 0
0.00.271.960 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.960 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.962 I llm_load_print_meta: n_gqa            = 8
0.00.271.964 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.965 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.968 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.970 I llm_load_print_meta: n_ff             = 16384
0.00.271.970 I llm_load_print_meta: n_expert         = 0
0.00.271.970 I llm_load_print_meta: n_expert_used    = 0
0.00.271.971 I llm_load_print_meta: causal attn      = 1
0.00.271.971 I llm_load_print_meta: pooling type     = 0
0.00.271.971 I llm_load_print_meta: rope type        = 2
0.00.271.972 I llm_load_print_meta: rope scaling     = linear
0.00.271.973 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.974 I llm_load_print_meta: freq_scale_train = 1
0.00.271.974 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.974 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.975 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.975 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.975 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.975 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.976 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.978 I llm_load_print_meta: model type       = 2B
0.00.271.979 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.979 I llm_load_print_meta: model params     = 2.51 B
0.00.271.980 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.980 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.981 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.981 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.982 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.982 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.983 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.983 I llm_load_print_meta: max token length = 93
0.00.331.530 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.538 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.539 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.540 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.540 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.541 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.793 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.801 I llama_new_context_with_model: n_batch       = 2048
0.00.336.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.802 I llama_new_context_with_model: flash_attn    = 0
0.00.336.806 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.807 I llama_new_context_with_model: freq_scale    = 1
0.00.336.808 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.830 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.351.619 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.634 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.020 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.023 I llama_new_context_with_model: graph nodes  = 601
0.00.353.023 I llama_new_context_with_model: graph splits = 1
0.00.353.027 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.353.027 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.457 I main: llama threadpool init, n_threads = 4
0.00.428.473 I 
0.00.428.547 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.550 I 
0.00.428.583 I sampler seed: 3950238325
0.00.428.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.606 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.609 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.609 I 
 increamically, and with growing desperation.

This is the cry of a man on the brink. He has lost his grip on reality, his sanity flickering like

0.02.025.036 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6112.24 tokens per second)
0.02.025.038 I llama_perf_context_print:        load time =     427.68 ms
0.02.025.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.041 I llama_perf_context_print:        eval time =    1576.77 ms /    32 runs   (   49.27 ms per token,    20.29 tokens per second)
0.02.025.041 I llama_perf_context_print:       total time =    1596.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4429 (e06d267a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40218.20 ms
main:    total time = 40218.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 4429 (e06d267a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.106 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.130 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.137 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.138 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.139 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.143 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.643 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.373 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.379 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.380 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.380 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.381 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.382 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.383 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.385 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.388 I llama_model_loader: - type  f32:   37 tensors
0.00.131.389 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.389 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.639 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.349 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.053 I llm_load_vocab: special tokens cache size = 5
0.00.273.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.330 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.331 I llm_load_print_meta: arch             = gemma
0.00.273.332 I llm_load_print_meta: vocab type       = SPM
0.00.273.332 I llm_load_print_meta: n_vocab          = 256000
0.00.273.333 I llm_load_print_meta: n_merges         = 0
0.00.273.333 I llm_load_print_meta: vocab_only       = 0
0.00.273.334 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.334 I llm_load_print_meta: n_embd           = 2048
0.00.273.334 I llm_load_print_meta: n_layer          = 18
0.00.273.346 I llm_load_print_meta: n_head           = 8
0.00.273.348 I llm_load_print_meta: n_head_kv        = 1
0.00.273.348 I llm_load_print_meta: n_rot            = 256
0.00.273.348 I llm_load_print_meta: n_swa            = 0
0.00.273.349 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.349 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.351 I llm_load_print_meta: n_gqa            = 8
0.00.273.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.354 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.355 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.357 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.357 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.358 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.360 I llm_load_print_meta: n_ff             = 16384
0.00.273.360 I llm_load_print_meta: n_expert         = 0
0.00.273.360 I llm_load_print_meta: n_expert_used    = 0
0.00.273.360 I llm_load_print_meta: causal attn      = 1
0.00.273.361 I llm_load_print_meta: pooling type     = 0
0.00.273.361 I llm_load_print_meta: rope type        = 2
0.00.273.362 I llm_load_print_meta: rope scaling     = linear
0.00.273.363 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.364 I llm_load_print_meta: freq_scale_train = 1
0.00.273.364 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.364 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.365 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.366 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.366 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.366 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.366 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.368 I llm_load_print_meta: model type       = 2B
0.00.273.369 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.370 I llm_load_print_meta: model params     = 2.51 B
0.00.273.371 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.372 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.375 I llm_load_print_meta: max token length = 93
0.00.330.167 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.376 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.383 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.384 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.384 I llama_new_context_with_model: n_batch       = 2048
0.00.335.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.385 I llama_new_context_with_model: flash_attn    = 0
0.00.335.389 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.390 I llama_new_context_with_model: freq_scale    = 1
0.00.335.391 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.412 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.349.916 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.929 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.034 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.237 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.243 I llama_new_context_with_model: graph nodes  = 601
0.00.351.244 I llama_new_context_with_model: graph splits = 1
0.00.351.247 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.705 I main: llama threadpool init, n_threads = 4
0.00.425.722 I 
0.00.425.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.801 I 
0.00.425.834 I sampler seed: 3727488036
0.00.425.845 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.849 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.850 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.850 I 
 increasities by stating the following: "I regret to inform you that..." or "I regret to inform you that..."

**Example:**
"I regret

0.01.986.183 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6755.37 tokens per second)
0.01.986.186 I llama_perf_context_print:        load time =     424.96 ms
0.01.986.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.986.189 I llama_perf_context_print:        eval time =    1542.17 ms /    32 runs   (   48.19 ms per token,    20.75 tokens per second)
0.01.986.189 I llama_perf_context_print:       total time =    1560.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.257s
user	10m24.018s
sys	0m6.922s
