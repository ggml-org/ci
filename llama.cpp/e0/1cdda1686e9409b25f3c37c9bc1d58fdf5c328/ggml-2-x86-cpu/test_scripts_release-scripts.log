+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.832 I main: load the model and apply lora adapter, if any
0.00.022.002 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.050 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.056 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.073 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.939 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.037 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.042 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.044 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.049 I llama_model_loader: - type  f32:   37 tensors
0.00.133.052 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.883 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.479 I llm_load_vocab: special tokens cache size = 5
0.00.214.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.537 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.538 I llm_load_print_meta: arch             = gemma
0.00.214.538 I llm_load_print_meta: vocab type       = SPM
0.00.214.539 I llm_load_print_meta: n_vocab          = 256000
0.00.214.539 I llm_load_print_meta: n_merges         = 0
0.00.214.540 I llm_load_print_meta: vocab_only       = 0
0.00.214.540 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.540 I llm_load_print_meta: n_embd           = 2048
0.00.214.541 I llm_load_print_meta: n_layer          = 18
0.00.214.551 I llm_load_print_meta: n_head           = 8
0.00.214.552 I llm_load_print_meta: n_head_kv        = 1
0.00.214.552 I llm_load_print_meta: n_rot            = 256
0.00.214.553 I llm_load_print_meta: n_swa            = 0
0.00.214.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.554 I llm_load_print_meta: n_gqa            = 8
0.00.214.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.560 I llm_load_print_meta: n_ff             = 16384
0.00.214.560 I llm_load_print_meta: n_expert         = 0
0.00.214.561 I llm_load_print_meta: n_expert_used    = 0
0.00.214.561 I llm_load_print_meta: causal attn      = 1
0.00.214.561 I llm_load_print_meta: pooling type     = 0
0.00.214.561 I llm_load_print_meta: rope type        = 2
0.00.214.562 I llm_load_print_meta: rope scaling     = linear
0.00.214.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.564 I llm_load_print_meta: freq_scale_train = 1
0.00.214.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.564 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.565 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.566 I llm_load_print_meta: model type       = 2B
0.00.214.566 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.567 I llm_load_print_meta: model params     = 2.51 B
0.00.214.568 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.569 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.571 I llm_load_print_meta: max token length = 93
0.00.214.593 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.695 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.314.702 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.314.702 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.314.703 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.314.704 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.314.704 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.319.877 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.883 I llama_new_context_with_model: n_batch    = 2048
0.00.319.883 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.884 I llama_new_context_with_model: flash_attn = 0
0.00.319.886 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.886 I llama_new_context_with_model: freq_scale = 1
0.00.349.184 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.349.198 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.349.297 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.197 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.350.205 I llama_new_context_with_model: graph nodes  = 601
0.00.350.205 I llama_new_context_with_model: graph splits = 1
0.00.350.207 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.417 I main: llama threadpool init, n_threads = 4
0.00.440.429 I 
0.00.440.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.515 I 
0.00.440.548 I sampler seed: 1455762804
0.00.440.569 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.577 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.440.578 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively with the following list of tasks:

1. Review existing code
2. Update dependencies
3. Create new feature
4. Integrate with external

0.02.662.281 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6928.41 tokens per second)
0.02.662.284 I llama_perf_context_print:        load time =     438.57 ms
0.02.662.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.662.289 I llama_perf_context_print:        eval time =    2203.45 ms /    32 runs   (   68.86 ms per token,    14.52 tokens per second)
0.02.662.290 I llama_perf_context_print:       total time =    2221.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.001.825 I main: load the model and apply lora adapter, if any
0.00.021.766 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.780 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.786 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.787 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.790 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.791 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.792 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.792 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.793 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.793 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.798 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.799 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.799 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.002 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.935 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.936 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.937 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.939 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.953 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.954 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.955 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.958 I llama_model_loader: - type  f32:   37 tensors
0.00.131.961 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.897 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.520 I llm_load_vocab: special tokens cache size = 5
0.00.214.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.050 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.050 I llm_load_print_meta: arch             = gemma
0.00.214.051 I llm_load_print_meta: vocab type       = SPM
0.00.214.052 I llm_load_print_meta: n_vocab          = 256000
0.00.214.052 I llm_load_print_meta: n_merges         = 0
0.00.214.052 I llm_load_print_meta: vocab_only       = 0
0.00.214.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.053 I llm_load_print_meta: n_embd           = 2048
0.00.214.053 I llm_load_print_meta: n_layer          = 18
0.00.214.065 I llm_load_print_meta: n_head           = 8
0.00.214.066 I llm_load_print_meta: n_head_kv        = 1
0.00.214.067 I llm_load_print_meta: n_rot            = 256
0.00.214.067 I llm_load_print_meta: n_swa            = 0
0.00.214.067 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.067 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.068 I llm_load_print_meta: n_gqa            = 8
0.00.214.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.070 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.075 I llm_load_print_meta: n_ff             = 16384
0.00.214.075 I llm_load_print_meta: n_expert         = 0
0.00.214.076 I llm_load_print_meta: n_expert_used    = 0
0.00.214.076 I llm_load_print_meta: causal attn      = 1
0.00.214.076 I llm_load_print_meta: pooling type     = 0
0.00.214.076 I llm_load_print_meta: rope type        = 2
0.00.214.077 I llm_load_print_meta: rope scaling     = linear
0.00.214.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.079 I llm_load_print_meta: freq_scale_train = 1
0.00.214.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.080 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.080 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.080 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.081 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.081 I llm_load_print_meta: model type       = 2B
0.00.214.082 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.083 I llm_load_print_meta: model params     = 2.51 B
0.00.214.083 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.084 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.084 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.085 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.085 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.086 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.086 I llm_load_print_meta: max token length = 93
0.00.214.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.026 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.069 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.075 I llama_new_context_with_model: n_batch    = 2048
0.00.313.075 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.076 I llama_new_context_with_model: flash_attn = 0
0.00.313.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.079 I llama_new_context_with_model: freq_scale = 1
0.00.343.051 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.068 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.022 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.028 I llama_new_context_with_model: graph nodes  = 601
0.00.344.028 I llama_new_context_with_model: graph splits = 1
0.00.344.030 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.031 I main: llama threadpool init, n_threads = 4
0.00.431.044 I 
0.00.431.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.125 I 
0.00.431.163 I sampler seed: 2351779388
0.00.431.173 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.176 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.176 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a touch of melancholic longing. [end of text]


0.01.181.209 I llama_perf_sampler_print:    sampling time =       1.67 ms /    12 runs   (    0.14 ms per token,  7177.03 tokens per second)
0.01.181.211 I llama_perf_context_print:        load time =     429.19 ms
0.01.181.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.181.215 I llama_perf_context_print:        eval time =     743.48 ms /    11 runs   (   67.59 ms per token,    14.80 tokens per second)
0.01.181.216 I llama_perf_context_print:       total time =     750.19 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.523 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.001.799 I main: load the model and apply lora adapter, if any
0.00.022.001 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.049 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.056 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.073 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.075 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.635 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.134 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.136 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.137 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.141 I llama_model_loader: - type  f32:   37 tensors
0.00.133.144 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.798 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.487 I llm_load_vocab: special tokens cache size = 5
0.00.217.114 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.128 I llm_load_print_meta: arch             = gemma
0.00.217.129 I llm_load_print_meta: vocab type       = SPM
0.00.217.130 I llm_load_print_meta: n_vocab          = 256000
0.00.217.130 I llm_load_print_meta: n_merges         = 0
0.00.217.130 I llm_load_print_meta: vocab_only       = 0
0.00.217.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.131 I llm_load_print_meta: n_embd           = 2048
0.00.217.131 I llm_load_print_meta: n_layer          = 18
0.00.217.143 I llm_load_print_meta: n_head           = 8
0.00.217.144 I llm_load_print_meta: n_head_kv        = 1
0.00.217.144 I llm_load_print_meta: n_rot            = 256
0.00.217.144 I llm_load_print_meta: n_swa            = 0
0.00.217.145 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.145 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.146 I llm_load_print_meta: n_gqa            = 8
0.00.217.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.148 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.149 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.150 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.151 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.153 I llm_load_print_meta: n_ff             = 16384
0.00.217.153 I llm_load_print_meta: n_expert         = 0
0.00.217.153 I llm_load_print_meta: n_expert_used    = 0
0.00.217.153 I llm_load_print_meta: causal attn      = 1
0.00.217.154 I llm_load_print_meta: pooling type     = 0
0.00.217.154 I llm_load_print_meta: rope type        = 2
0.00.217.154 I llm_load_print_meta: rope scaling     = linear
0.00.217.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.156 I llm_load_print_meta: freq_scale_train = 1
0.00.217.156 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.157 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.158 I llm_load_print_meta: model type       = 2B
0.00.217.159 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.160 I llm_load_print_meta: model params     = 2.51 B
0.00.217.161 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.162 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.162 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.163 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.163 I llm_load_print_meta: max token length = 93
0.00.217.186 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.291.213 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.291.220 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.291.220 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.291.221 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.291.222 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.291.222 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.296.289 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.296 I llama_new_context_with_model: n_batch    = 2048
0.00.296.296 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.297 I llama_new_context_with_model: flash_attn = 0
0.00.296.299 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.300 I llama_new_context_with_model: freq_scale = 1
0.00.326.606 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.623 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.664 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.670 I llama_new_context_with_model: graph nodes  = 601
0.00.327.671 I llama_new_context_with_model: graph splits = 1
0.00.327.673 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.822 I main: llama threadpool init, n_threads = 4
0.00.418.834 I 
0.00.418.905 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.908 I 
0.00.418.935 I sampler seed: 3183282378
0.00.418.945 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.947 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.948 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

**Context:**

* The context of the request specifies that there are several "creeping" insults and remarks being made towards the recipient.


0.02.699.437 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6466.78 tokens per second)
0.02.699.439 I llama_perf_context_print:        load time =     417.01 ms
0.02.699.441 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.699.442 I llama_perf_context_print:        eval time =    2262.68 ms /    32 runs   (   70.71 ms per token,    14.14 tokens per second)
0.02.699.443 I llama_perf_context_print:       total time =    2280.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.684 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.887 I main: llama backend init
0.00.002.002 I main: load the model and apply lora adapter, if any
0.00.022.001 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.058 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.078 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.085 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.094 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.094 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.096 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.108 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.113 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.114 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.719 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.127 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.134 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.136 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.137 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.142 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.146 I llama_model_loader: - type  f32:   37 tensors
0.00.132.149 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.958 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.618 I llm_load_vocab: special tokens cache size = 5
0.00.213.793 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.806 I llm_load_print_meta: arch             = gemma
0.00.213.807 I llm_load_print_meta: vocab type       = SPM
0.00.213.808 I llm_load_print_meta: n_vocab          = 256000
0.00.213.808 I llm_load_print_meta: n_merges         = 0
0.00.213.809 I llm_load_print_meta: vocab_only       = 0
0.00.213.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.809 I llm_load_print_meta: n_embd           = 2048
0.00.213.810 I llm_load_print_meta: n_layer          = 18
0.00.213.822 I llm_load_print_meta: n_head           = 8
0.00.213.823 I llm_load_print_meta: n_head_kv        = 1
0.00.213.823 I llm_load_print_meta: n_rot            = 256
0.00.213.824 I llm_load_print_meta: n_swa            = 0
0.00.213.824 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.824 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.825 I llm_load_print_meta: n_gqa            = 8
0.00.213.826 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.827 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.828 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.829 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.830 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.830 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.831 I llm_load_print_meta: n_ff             = 16384
0.00.213.832 I llm_load_print_meta: n_expert         = 0
0.00.213.832 I llm_load_print_meta: n_expert_used    = 0
0.00.213.832 I llm_load_print_meta: causal attn      = 1
0.00.213.832 I llm_load_print_meta: pooling type     = 0
0.00.213.833 I llm_load_print_meta: rope type        = 2
0.00.213.833 I llm_load_print_meta: rope scaling     = linear
0.00.213.834 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.835 I llm_load_print_meta: freq_scale_train = 1
0.00.213.835 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.837 I llm_load_print_meta: model type       = 2B
0.00.213.838 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.838 I llm_load_print_meta: model params     = 2.51 B
0.00.213.839 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.841 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.841 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.841 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.842 I llm_load_print_meta: max token length = 93
0.00.213.857 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.283.725 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.283.733 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.288.810 I llama_new_context_with_model: n_ctx      = 8192
0.00.288.816 I llama_new_context_with_model: n_batch    = 2048
0.00.288.817 I llama_new_context_with_model: n_ubatch   = 512
0.00.288.817 I llama_new_context_with_model: flash_attn = 0
0.00.288.819 I llama_new_context_with_model: freq_base  = 10000.0
0.00.288.820 I llama_new_context_with_model: freq_scale = 1
0.00.319.370 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.319.387 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.319.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.320.360 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.320.366 I llama_new_context_with_model: graph nodes  = 601
0.00.320.367 I llama_new_context_with_model: graph splits = 1
0.00.320.369 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.605 I main: llama threadpool init, n_threads = 4
0.00.413.616 I 
0.00.413.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.413.712 I 
0.00.413.752 I sampler seed: 536954138
0.00.413.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.767 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.413.768 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

**Assistant**

I'm happy to help with that. Please provide me with the information you need, and I'll do my

0.02.838.922 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6629.17 tokens per second)
0.02.838.924 I llama_perf_context_print:        load time =     411.58 ms
0.02.838.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.838.927 I llama_perf_context_print:        eval time =    2406.00 ms /    32 runs   (   75.19 ms per token,    13.30 tokens per second)
0.02.838.928 I llama_perf_context_print:       total time =    2425.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.826s
user	0m33.374s
sys	0m9.307s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3783 (e01cdda1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31970.84 ms
main:    total time = 31970.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.887 I main: load the model and apply lora adapter, if any
0.00.022.122 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.169 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.186 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.189 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.191 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.192 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.192 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.195 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.197 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.198 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.198 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.558 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.333 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.339 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.340 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.341 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.342 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.345 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.346 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.347 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.348 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.351 I llama_model_loader: - type  f32:   37 tensors
0.00.132.353 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.354 I llama_model_loader: - type q6_K:   19 tensors
0.00.194.866 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.430 I llm_load_vocab: special tokens cache size = 5
0.00.213.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.958 I llm_load_print_meta: arch             = gemma
0.00.213.958 I llm_load_print_meta: vocab type       = SPM
0.00.213.959 I llm_load_print_meta: n_vocab          = 256000
0.00.213.960 I llm_load_print_meta: n_merges         = 0
0.00.213.961 I llm_load_print_meta: vocab_only       = 0
0.00.213.961 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.961 I llm_load_print_meta: n_embd           = 2048
0.00.213.962 I llm_load_print_meta: n_layer          = 18
0.00.213.973 I llm_load_print_meta: n_head           = 8
0.00.213.977 I llm_load_print_meta: n_head_kv        = 1
0.00.213.977 I llm_load_print_meta: n_rot            = 256
0.00.213.978 I llm_load_print_meta: n_swa            = 0
0.00.213.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.979 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.980 I llm_load_print_meta: n_gqa            = 8
0.00.213.981 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.982 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.982 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.984 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.984 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.985 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.987 I llm_load_print_meta: n_ff             = 16384
0.00.213.987 I llm_load_print_meta: n_expert         = 0
0.00.213.987 I llm_load_print_meta: n_expert_used    = 0
0.00.213.988 I llm_load_print_meta: causal attn      = 1
0.00.213.988 I llm_load_print_meta: pooling type     = 0
0.00.213.988 I llm_load_print_meta: rope type        = 2
0.00.213.989 I llm_load_print_meta: rope scaling     = linear
0.00.213.990 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.991 I llm_load_print_meta: freq_scale_train = 1
0.00.213.991 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.992 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.992 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.993 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.994 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.994 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.995 I llm_load_print_meta: model type       = 2B
0.00.213.996 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.213.997 I llm_load_print_meta: model params     = 2.51 B
0.00.213.999 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.213.999 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.000 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.000 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.001 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.001 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.001 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.002 I llm_load_print_meta: max token length = 93
0.00.214.019 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.271.661 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.271.668 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.271.669 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.271.670 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.271.671 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.271.671 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.276.803 I llama_new_context_with_model: n_ctx      = 8192
0.00.276.827 I llama_new_context_with_model: n_batch    = 2048
0.00.276.828 I llama_new_context_with_model: n_ubatch   = 512
0.00.276.828 I llama_new_context_with_model: flash_attn = 0
0.00.276.831 I llama_new_context_with_model: freq_base  = 10000.0
0.00.276.832 I llama_new_context_with_model: freq_scale = 1
0.00.305.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.305.937 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.306.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.897 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.904 I llama_new_context_with_model: graph nodes  = 601
0.00.306.905 I llama_new_context_with_model: graph splits = 1
0.00.306.906 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.388.849 I main: llama threadpool init, n_threads = 4
0.00.388.860 I 
0.00.388.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.388.936 I 
0.00.388.963 I sampler seed: 2380989843
0.00.388.973 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.388.976 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.388.977 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively and excitedly.

She shrieked with delight, her eyes sparkling with joy.

"I am free! I am free!" she exclaimed, her

0.01.996.240 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.01.996.242 I llama_perf_context_print:        load time =     386.94 ms
0.01.996.243 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.244 I llama_perf_context_print:        eval time =    1589.53 ms /    32 runs   (   49.67 ms per token,    20.13 tokens per second)
0.01.996.245 I llama_perf_context_print:       total time =    1607.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3783 (e01cdda1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32023.25 ms
main:    total time = 32023.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.546 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.022.138 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.155 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.156 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.160 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.161 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.162 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.163 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.166 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.168 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.494 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.500 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.501 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.501 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.502 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.503 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.509 I llama_model_loader: - type  f32:   37 tensors
0.00.132.511 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.512 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.495 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.095 I llm_load_vocab: special tokens cache size = 5
0.00.215.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.501 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.502 I llm_load_print_meta: arch             = gemma
0.00.215.503 I llm_load_print_meta: vocab type       = SPM
0.00.215.503 I llm_load_print_meta: n_vocab          = 256000
0.00.215.505 I llm_load_print_meta: n_merges         = 0
0.00.215.506 I llm_load_print_meta: vocab_only       = 0
0.00.215.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.506 I llm_load_print_meta: n_embd           = 2048
0.00.215.507 I llm_load_print_meta: n_layer          = 18
0.00.215.518 I llm_load_print_meta: n_head           = 8
0.00.215.519 I llm_load_print_meta: n_head_kv        = 1
0.00.215.519 I llm_load_print_meta: n_rot            = 256
0.00.215.520 I llm_load_print_meta: n_swa            = 0
0.00.215.520 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.520 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.521 I llm_load_print_meta: n_gqa            = 8
0.00.215.522 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.523 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.524 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.525 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.526 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.527 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.527 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.528 I llm_load_print_meta: n_ff             = 16384
0.00.215.528 I llm_load_print_meta: n_expert         = 0
0.00.215.528 I llm_load_print_meta: n_expert_used    = 0
0.00.215.529 I llm_load_print_meta: causal attn      = 1
0.00.215.529 I llm_load_print_meta: pooling type     = 0
0.00.215.538 I llm_load_print_meta: rope type        = 2
0.00.215.539 I llm_load_print_meta: rope scaling     = linear
0.00.215.540 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.541 I llm_load_print_meta: freq_scale_train = 1
0.00.215.542 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.542 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.542 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.543 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.543 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.543 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.545 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.545 I llm_load_print_meta: model type       = 2B
0.00.215.546 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.547 I llm_load_print_meta: model params     = 2.51 B
0.00.215.548 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.548 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.549 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.549 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.550 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.550 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.551 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.551 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.552 I llm_load_print_meta: max token length = 93
0.00.215.579 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.01.175.688 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.01.180.742 I llama_new_context_with_model: n_ctx      = 8192
0.01.180.749 I llama_new_context_with_model: n_batch    = 2048
0.01.180.749 I llama_new_context_with_model: n_ubatch   = 512
0.01.180.749 I llama_new_context_with_model: flash_attn = 0
0.01.180.752 I llama_new_context_with_model: freq_base  = 10000.0
0.01.180.753 I llama_new_context_with_model: freq_scale = 1
0.01.210.927 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.01.210.944 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.01.211.033 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.211.934 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.01.211.941 I llama_new_context_with_model: graph nodes  = 601
0.01.211.942 I llama_new_context_with_model: graph splits = 1
0.01.211.944 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.293.988 I main: llama threadpool init, n_threads = 4
0.01.294.000 I 
0.01.294.078 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.082 I 
0.01.294.112 I sampler seed: 1173867658
0.01.294.121 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.133 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I need to rewrite the sentence using proper punctuation and spacing.

"I need to rewrite the sentence using proper punctuation and spacing."

Please

0.02.893.419 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6493.51 tokens per second)
0.02.893.421 I llama_perf_context_print:        load time =    1292.10 ms
0.02.893.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.893.424 I llama_perf_context_print:        eval time =    1580.61 ms /    32 runs   (   49.39 ms per token,    20.25 tokens per second)
0.02.893.425 I llama_perf_context_print:       total time =    1599.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.614s
user	8m14.241s
sys	0m6.872s
