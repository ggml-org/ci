+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.645 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.025.476 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.680 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.774 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.786 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.788 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.800 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.800 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.801 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.802 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.812 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.812 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.813 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.824 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.225 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.342 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.350 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.351 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.352 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.354 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.359 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.360 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.360 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.361 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.370 I llama_model_loader: - type  f32:   37 tensors
0.00.196.373 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.611 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.458.645 I llm_load_vocab: special tokens cache size = 5
0.00.516.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.516.749 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.516.753 I llm_load_print_meta: arch             = gemma
0.00.516.754 I llm_load_print_meta: vocab type       = SPM
0.00.516.755 I llm_load_print_meta: n_vocab          = 256000
0.00.516.757 I llm_load_print_meta: n_merges         = 0
0.00.516.758 I llm_load_print_meta: vocab_only       = 0
0.00.516.758 I llm_load_print_meta: n_ctx_train      = 8192
0.00.516.759 I llm_load_print_meta: n_embd           = 2048
0.00.516.759 I llm_load_print_meta: n_layer          = 18
0.00.516.794 I llm_load_print_meta: n_head           = 8
0.00.516.804 I llm_load_print_meta: n_head_kv        = 1
0.00.516.804 I llm_load_print_meta: n_rot            = 256
0.00.516.805 I llm_load_print_meta: n_swa            = 0
0.00.516.806 I llm_load_print_meta: n_embd_head_k    = 256
0.00.516.806 I llm_load_print_meta: n_embd_head_v    = 256
0.00.516.811 I llm_load_print_meta: n_gqa            = 8
0.00.516.815 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.516.820 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.516.823 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.516.825 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.516.825 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.516.826 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.516.826 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.516.831 I llm_load_print_meta: n_ff             = 16384
0.00.516.832 I llm_load_print_meta: n_expert         = 0
0.00.516.832 I llm_load_print_meta: n_expert_used    = 0
0.00.516.832 I llm_load_print_meta: causal attn      = 1
0.00.516.833 I llm_load_print_meta: pooling type     = 0
0.00.516.833 I llm_load_print_meta: rope type        = 2
0.00.516.833 I llm_load_print_meta: rope scaling     = linear
0.00.516.835 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.516.835 I llm_load_print_meta: freq_scale_train = 1
0.00.516.836 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.516.837 I llm_load_print_meta: rope_finetuned   = unknown
0.00.516.837 I llm_load_print_meta: ssm_d_conv       = 0
0.00.516.838 I llm_load_print_meta: ssm_d_inner      = 0
0.00.516.838 I llm_load_print_meta: ssm_d_state      = 0
0.00.516.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.516.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.516.843 I llm_load_print_meta: model type       = 2B
0.00.516.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.516.844 I llm_load_print_meta: model params     = 2.51 B
0.00.516.845 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.516.845 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.516.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.516.846 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.516.847 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.516.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.516.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.516.859 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.516.860 I llm_load_print_meta: max token length = 93
0.00.517.036 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.641 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.616.650 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.616.651 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.616.651 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.616.652 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.616.653 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.622.278 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.286 I llama_new_context_with_model: n_batch    = 2048
0.00.622.287 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.287 I llama_new_context_with_model: flash_attn = 0
0.00.622.290 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.291 I llama_new_context_with_model: freq_scale = 1
0.00.650.917 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.650.958 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.481 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.488 I llama_new_context_with_model: graph nodes  = 601
0.00.652.489 I llama_new_context_with_model: graph splits = 1
0.00.652.506 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.263.922 I main: llama threadpool init, n_threads = 4
0.01.263.934 I 
0.01.264.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.032 I 
0.01.264.206 I sampler seed: 4140178453
0.01.264.217 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.223 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.264.224 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary.

A company wants to implement a new project management methodology. To assess the feasibility of the implementation, the company needs to determine the estimated cost of

0.14.832.676 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.77 tokens per second)
0.14.832.679 I llama_perf_context_print:        load time =    1261.04 ms
0.14.832.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.832.705 I llama_perf_context_print:        eval time =   13487.97 ms /    32 runs   (  421.50 ms per token,     2.37 tokens per second)
0.14.832.706 I llama_perf_context_print:       total time =   13568.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.668 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.025.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.436 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.452 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.455 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.458 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.459 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.460 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.467 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.470 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.926 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.086 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.109 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.110 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.111 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.112 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.118 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.119 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.120 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.128 I llama_model_loader: - type  f32:   37 tensors
0.00.196.132 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.430 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.445 I llm_load_vocab: special tokens cache size = 5
0.00.523.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.686 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.687 I llm_load_print_meta: arch             = gemma
0.00.523.687 I llm_load_print_meta: vocab type       = SPM
0.00.523.688 I llm_load_print_meta: n_vocab          = 256000
0.00.523.691 I llm_load_print_meta: n_merges         = 0
0.00.523.692 I llm_load_print_meta: vocab_only       = 0
0.00.523.692 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.693 I llm_load_print_meta: n_embd           = 2048
0.00.523.693 I llm_load_print_meta: n_layer          = 18
0.00.523.728 I llm_load_print_meta: n_head           = 8
0.00.523.734 I llm_load_print_meta: n_head_kv        = 1
0.00.523.735 I llm_load_print_meta: n_rot            = 256
0.00.523.735 I llm_load_print_meta: n_swa            = 0
0.00.523.736 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.741 I llm_load_print_meta: n_gqa            = 8
0.00.523.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.773 I llm_load_print_meta: n_ff             = 16384
0.00.523.773 I llm_load_print_meta: n_expert         = 0
0.00.523.774 I llm_load_print_meta: n_expert_used    = 0
0.00.523.774 I llm_load_print_meta: causal attn      = 1
0.00.523.775 I llm_load_print_meta: pooling type     = 0
0.00.523.775 I llm_load_print_meta: rope type        = 2
0.00.523.776 I llm_load_print_meta: rope scaling     = linear
0.00.523.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.778 I llm_load_print_meta: freq_scale_train = 1
0.00.523.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.778 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.782 I llm_load_print_meta: model type       = 2B
0.00.523.783 I llm_load_print_meta: model ftype      = Q8_0
0.00.523.783 I llm_load_print_meta: model params     = 2.51 B
0.00.523.784 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.523.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.785 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.786 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.793 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.793 I llm_load_print_meta: max token length = 93
0.00.523.977 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.618.709 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.624.332 I llama_new_context_with_model: n_ctx      = 8192
0.00.624.339 I llama_new_context_with_model: n_batch    = 2048
0.00.624.340 I llama_new_context_with_model: n_ubatch   = 512
0.00.624.340 I llama_new_context_with_model: flash_attn = 0
0.00.624.343 I llama_new_context_with_model: freq_base  = 10000.0
0.00.624.344 I llama_new_context_with_model: freq_scale = 1
0.00.653.596 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.640 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.770 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.655.126 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.655.133 I llama_new_context_with_model: graph nodes  = 601
0.00.655.133 I llama_new_context_with_model: graph splits = 1
0.00.655.148 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.953 I main: llama threadpool init, n_threads = 4
0.01.266.965 I 
0.01.267.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.061 I 
0.01.267.222 I sampler seed: 270949183
0.01.267.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.239 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.240 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. [end of text]


0.03.407.135 I llama_perf_sampler_print:    sampling time =       7.61 ms /     6 runs   (    1.27 ms per token,   788.13 tokens per second)
0.03.407.139 I llama_perf_context_print:        load time =    1264.02 ms
0.03.407.140 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.407.142 I llama_perf_context_print:        eval time =    2125.86 ms /     5 runs   (  425.17 ms per token,     2.35 tokens per second)
0.03.407.142 I llama_perf_context_print:       total time =    2140.19 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.742 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.967 I main: llama backend init
0.00.002.920 I main: load the model and apply lora adapter, if any
0.00.024.840 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.124 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.153 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.155 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.156 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.157 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.158 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.168 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.397 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.223 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.224 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.225 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.230 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.231 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.232 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.240 I llama_model_loader: - type  f32:   37 tensors
0.00.195.244 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.156 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.174 I llm_load_vocab: special tokens cache size = 5
0.00.520.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.195 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.195 I llm_load_print_meta: arch             = gemma
0.00.520.196 I llm_load_print_meta: vocab type       = SPM
0.00.520.197 I llm_load_print_meta: n_vocab          = 256000
0.00.520.199 I llm_load_print_meta: n_merges         = 0
0.00.520.200 I llm_load_print_meta: vocab_only       = 0
0.00.520.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.201 I llm_load_print_meta: n_embd           = 2048
0.00.520.201 I llm_load_print_meta: n_layer          = 18
0.00.520.236 I llm_load_print_meta: n_head           = 8
0.00.520.242 I llm_load_print_meta: n_head_kv        = 1
0.00.520.243 I llm_load_print_meta: n_rot            = 256
0.00.520.243 I llm_load_print_meta: n_swa            = 0
0.00.520.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.248 I llm_load_print_meta: n_gqa            = 8
0.00.520.253 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.258 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.260 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.260 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.261 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.261 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.266 I llm_load_print_meta: n_ff             = 16384
0.00.520.267 I llm_load_print_meta: n_expert         = 0
0.00.520.267 I llm_load_print_meta: n_expert_used    = 0
0.00.520.267 I llm_load_print_meta: causal attn      = 1
0.00.520.268 I llm_load_print_meta: pooling type     = 0
0.00.520.268 I llm_load_print_meta: rope type        = 2
0.00.520.268 I llm_load_print_meta: rope scaling     = linear
0.00.520.270 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.270 I llm_load_print_meta: freq_scale_train = 1
0.00.520.271 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.271 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.272 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.272 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.272 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.273 I llm_load_print_meta: model type       = 2B
0.00.520.274 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.275 I llm_load_print_meta: model params     = 2.51 B
0.00.520.276 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.277 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.278 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.279 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.279 I llm_load_print_meta: max token length = 93
0.00.520.455 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.595.855 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.595.864 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.595.865 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.595.865 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.595.866 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.595.867 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.601.402 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.409 I llama_new_context_with_model: n_batch    = 2048
0.00.601.410 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.410 I llama_new_context_with_model: flash_attn = 0
0.00.601.413 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.413 I llama_new_context_with_model: freq_scale = 1
0.00.629.976 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.630.020 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.630.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.631.586 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.631.591 I llama_new_context_with_model: graph nodes  = 601
0.00.631.592 I llama_new_context_with_model: graph splits = 1
0.00.631.608 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.247.828 I main: llama threadpool init, n_threads = 4
0.01.247.840 I 
0.01.247.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.247.940 I 
0.01.248.103 I sampler seed: 3745622735
0.01.248.114 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.248.122 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.248.123 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the company is facing an increasing number of customer complaints and negative reviews.

**Required:**
- Analyze the situation and propose potential solutions to address

0.14.833.952 I llama_perf_sampler_print:    sampling time =      48.37 ms /    33 runs   (    1.47 ms per token,   682.23 tokens per second)
0.14.833.956 I llama_perf_context_print:        load time =    1244.82 ms
0.14.833.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.833.972 I llama_perf_context_print:        eval time =   13504.20 ms /    32 runs   (  422.01 ms per token,     2.37 tokens per second)
0.14.833.974 I llama_perf_context_print:       total time =   13586.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.611 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.745 I main: load the model and apply lora adapter, if any
0.00.024.424 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.605 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.689 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.701 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.703 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.707 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.708 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.709 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.710 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.711 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.713 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.720 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.076 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.083 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.084 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.085 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.086 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.087 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.091 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.092 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.093 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.094 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.094 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.102 I llama_model_loader: - type  f32:   37 tensors
0.00.197.107 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.804 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.475.860 I llm_load_vocab: special tokens cache size = 5
0.00.533.883 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.941 I llm_load_print_meta: arch             = gemma
0.00.533.942 I llm_load_print_meta: vocab type       = SPM
0.00.533.943 I llm_load_print_meta: n_vocab          = 256000
0.00.533.945 I llm_load_print_meta: n_merges         = 0
0.00.533.945 I llm_load_print_meta: vocab_only       = 0
0.00.533.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.946 I llm_load_print_meta: n_embd           = 2048
0.00.533.947 I llm_load_print_meta: n_layer          = 18
0.00.533.981 I llm_load_print_meta: n_head           = 8
0.00.533.987 I llm_load_print_meta: n_head_kv        = 1
0.00.533.988 I llm_load_print_meta: n_rot            = 256
0.00.533.988 I llm_load_print_meta: n_swa            = 0
0.00.533.988 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.989 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.993 I llm_load_print_meta: n_gqa            = 8
0.00.533.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.534.016 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.534.018 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.534.020 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.534.020 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.534.021 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.534.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.534.027 I llm_load_print_meta: n_ff             = 16384
0.00.534.028 I llm_load_print_meta: n_expert         = 0
0.00.534.028 I llm_load_print_meta: n_expert_used    = 0
0.00.534.028 I llm_load_print_meta: causal attn      = 1
0.00.534.029 I llm_load_print_meta: pooling type     = 0
0.00.534.029 I llm_load_print_meta: rope type        = 2
0.00.534.045 I llm_load_print_meta: rope scaling     = linear
0.00.534.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.534.048 I llm_load_print_meta: freq_scale_train = 1
0.00.534.049 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.534.049 I llm_load_print_meta: rope_finetuned   = unknown
0.00.534.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.534.058 I llm_load_print_meta: ssm_d_inner      = 0
0.00.534.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.534.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.534.067 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.534.068 I llm_load_print_meta: model type       = 2B
0.00.534.069 I llm_load_print_meta: model ftype      = Q8_0
0.00.534.070 I llm_load_print_meta: model params     = 2.51 B
0.00.534.071 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.534.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.534.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.534.074 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.534.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.534.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.534.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.534.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.534.083 I llm_load_print_meta: max token length = 93
0.00.534.256 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.606.097 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.606.109 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.611.587 I llama_new_context_with_model: n_ctx      = 8192
0.00.611.593 I llama_new_context_with_model: n_batch    = 2048
0.00.611.593 I llama_new_context_with_model: n_ubatch   = 512
0.00.611.594 I llama_new_context_with_model: flash_attn = 0
0.00.611.596 I llama_new_context_with_model: freq_base  = 10000.0
0.00.611.597 I llama_new_context_with_model: freq_scale = 1
0.00.640.926 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.640.969 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.641.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.642.432 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.642.438 I llama_new_context_with_model: graph nodes  = 601
0.00.642.439 I llama_new_context_with_model: graph splits = 1
0.00.642.454 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.254.431 I main: llama threadpool init, n_threads = 4
0.01.254.444 I 
0.01.254.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.254.544 I 
0.01.254.711 I sampler seed: 143522155
0.01.254.722 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.254.726 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.254.727 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

**Assistant**

I understand. I will assist you with the provided context. Please provide me with the specific information you would like me to

0.14.835.000 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.58 tokens per second)
0.14.835.004 I llama_perf_context_print:        load time =    1251.61 ms
0.14.835.005 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.835.007 I llama_perf_context_print:        eval time =   13498.75 ms /    32 runs   (  421.84 ms per token,     2.37 tokens per second)
0.14.835.007 I llama_perf_context_print:       total time =   13580.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.421s
user	3m3.851s
sys	0m9.311s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3783 (e01cdda1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198905.39 ms
main:    total time = 198905.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.650 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.907 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.088 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.183 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.230 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.232 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.234 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.244 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.250 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.252 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.254 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.147 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.738 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.748 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.748 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.749 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.755 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.758 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.759 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.767 I llama_model_loader: - type  f32:   37 tensors
0.00.197.771 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.772 I llama_model_loader: - type q6_K:   19 tensors
0.00.475.285 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.316 I llm_load_vocab: special tokens cache size = 5
0.00.534.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.534.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.534.206 I llm_load_print_meta: arch             = gemma
0.00.534.207 I llm_load_print_meta: vocab type       = SPM
0.00.534.207 I llm_load_print_meta: n_vocab          = 256000
0.00.534.210 I llm_load_print_meta: n_merges         = 0
0.00.534.211 I llm_load_print_meta: vocab_only       = 0
0.00.534.211 I llm_load_print_meta: n_ctx_train      = 8192
0.00.534.211 I llm_load_print_meta: n_embd           = 2048
0.00.534.212 I llm_load_print_meta: n_layer          = 18
0.00.534.242 I llm_load_print_meta: n_head           = 8
0.00.534.249 I llm_load_print_meta: n_head_kv        = 1
0.00.534.249 I llm_load_print_meta: n_rot            = 256
0.00.534.250 I llm_load_print_meta: n_swa            = 0
0.00.534.250 I llm_load_print_meta: n_embd_head_k    = 256
0.00.534.250 I llm_load_print_meta: n_embd_head_v    = 256
0.00.534.255 I llm_load_print_meta: n_gqa            = 8
0.00.534.259 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.534.263 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.534.265 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.534.267 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.534.267 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.534.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.534.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.534.278 I llm_load_print_meta: n_ff             = 16384
0.00.534.279 I llm_load_print_meta: n_expert         = 0
0.00.534.279 I llm_load_print_meta: n_expert_used    = 0
0.00.534.280 I llm_load_print_meta: causal attn      = 1
0.00.534.280 I llm_load_print_meta: pooling type     = 0
0.00.534.281 I llm_load_print_meta: rope type        = 2
0.00.534.281 I llm_load_print_meta: rope scaling     = linear
0.00.534.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.534.283 I llm_load_print_meta: freq_scale_train = 1
0.00.534.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.534.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.534.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.534.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.534.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.534.285 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.534.285 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.534.286 I llm_load_print_meta: model type       = 2B
0.00.534.287 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.534.288 I llm_load_print_meta: model params     = 2.51 B
0.00.534.288 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.534.289 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.534.289 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.534.290 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.534.290 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.534.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.534.291 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.534.291 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.534.292 I llm_load_print_meta: max token length = 93
0.00.534.464 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.245 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.594.254 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.594.255 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.594.255 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.594.256 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.594.257 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.599.773 I llama_new_context_with_model: n_ctx      = 8192
0.00.599.778 I llama_new_context_with_model: n_batch    = 2048
0.00.599.779 I llama_new_context_with_model: n_ubatch   = 512
0.00.599.779 I llama_new_context_with_model: flash_attn = 0
0.00.599.782 I llama_new_context_with_model: freq_base  = 10000.0
0.00.599.783 I llama_new_context_with_model: freq_scale = 1
0.00.628.294 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.628.335 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.628.447 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.790 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.797 I llama_new_context_with_model: graph nodes  = 601
0.00.629.797 I llama_new_context_with_model: graph splits = 1
0.00.629.812 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.207.455 I main: llama threadpool init, n_threads = 4
0.01.207.467 I 
0.01.207.564 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.207.568 I 
0.01.207.743 I sampler seed: 3502093731
0.01.207.754 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.207.759 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.207.760 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities are an example of a.
a) Symmetrical system
b) Non-symmetrical system
c) Periodic system
d) None of

0.12.166.048 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.71 tokens per second)
0.12.166.051 I llama_perf_context_print:        load time =    1204.56 ms
0.12.166.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.166.054 I llama_perf_context_print:        eval time =   10877.63 ms /    32 runs   (  339.93 ms per token,     2.94 tokens per second)
0.12.166.055 I llama_perf_context_print:       total time =   10958.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3783 (e01cdda1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198854.13 ms
main:    total time = 198854.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.649 I build: 3783 (e01cdda1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.820 I main: load the model and apply lora adapter, if any
0.00.024.714 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.820 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.836 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.841 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.871 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.495 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.226 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.211 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.214 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.216 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.219 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.227 I llama_model_loader: - type  f32:   37 tensors
0.00.195.231 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.232 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.025 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.059 I llm_load_vocab: special tokens cache size = 5
0.00.523.037 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.101 I llm_load_print_meta: arch             = gemma
0.00.523.102 I llm_load_print_meta: vocab type       = SPM
0.00.523.103 I llm_load_print_meta: n_vocab          = 256000
0.00.523.106 I llm_load_print_meta: n_merges         = 0
0.00.523.107 I llm_load_print_meta: vocab_only       = 0
0.00.523.107 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.107 I llm_load_print_meta: n_embd           = 2048
0.00.523.108 I llm_load_print_meta: n_layer          = 18
0.00.523.141 I llm_load_print_meta: n_head           = 8
0.00.523.147 I llm_load_print_meta: n_head_kv        = 1
0.00.523.148 I llm_load_print_meta: n_rot            = 256
0.00.523.148 I llm_load_print_meta: n_swa            = 0
0.00.523.149 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.149 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.154 I llm_load_print_meta: n_gqa            = 8
0.00.523.158 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.163 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.164 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.166 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.166 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.166 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.167 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.171 I llm_load_print_meta: n_ff             = 16384
0.00.523.172 I llm_load_print_meta: n_expert         = 0
0.00.523.172 I llm_load_print_meta: n_expert_used    = 0
0.00.523.172 I llm_load_print_meta: causal attn      = 1
0.00.523.173 I llm_load_print_meta: pooling type     = 0
0.00.523.173 I llm_load_print_meta: rope type        = 2
0.00.523.174 I llm_load_print_meta: rope scaling     = linear
0.00.523.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.176 I llm_load_print_meta: freq_scale_train = 1
0.00.523.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.176 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.177 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.177 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.178 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.178 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.179 I llm_load_print_meta: model type       = 2B
0.00.523.180 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.523.181 I llm_load_print_meta: model params     = 2.51 B
0.00.523.182 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.523.182 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.184 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.184 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.185 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.185 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.185 I llm_load_print_meta: max token length = 93
0.00.523.389 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.580.332 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.585.950 I llama_new_context_with_model: n_ctx      = 8192
0.00.585.957 I llama_new_context_with_model: n_batch    = 2048
0.00.585.957 I llama_new_context_with_model: n_ubatch   = 512
0.00.585.958 I llama_new_context_with_model: flash_attn = 0
0.00.585.960 I llama_new_context_with_model: freq_base  = 10000.0
0.00.585.961 I llama_new_context_with_model: freq_scale = 1
0.00.615.615 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.615.661 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.615.778 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.617.164 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.617.171 I llama_new_context_with_model: graph nodes  = 601
0.00.617.172 I llama_new_context_with_model: graph splits = 1
0.00.617.189 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.193.944 I main: llama threadpool init, n_threads = 4
0.01.193.955 I 
0.01.194.059 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.194.063 I 
0.01.194.228 I sampler seed: 1751548515
0.01.194.239 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.194.246 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.194.247 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 effeaning into the room, casting long shadows across the floor. Her eyes glowed with a mischievous gleam, and her smile spoke volumes of danger.

Who is

0.12.135.069 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.77 tokens per second)
0.12.135.072 I llama_perf_context_print:        load time =    1191.04 ms
0.12.135.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.135.075 I llama_perf_context_print:        eval time =   10860.83 ms /    32 runs   (  339.40 ms per token,     2.95 tokens per second)
0.12.135.076 I llama_perf_context_print:       total time =   10941.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.882s
user	50m12.498s
sys	0m6.258s
