+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-quantize-fns
 1/22 Test  #1: test-quantize-fns ...................   Passed   25.27 sec
      Start  2: test-quantize-perf
 2/22 Test  #2: test-quantize-perf ..................   Passed    9.14 sec
      Start  3: test-sampling
 3/22 Test  #3: test-sampling .......................   Passed    0.03 sec
      Start  4: test-chat-template
 4/22 Test  #4: test-chat-template ..................   Passed    0.00 sec
      Start  5: test-tokenizer-0-llama
 5/22 Test  #5: test-tokenizer-0-llama ..............   Passed    0.13 sec
      Start  6: test-tokenizer-0-falcon
 6/22 Test  #6: test-tokenizer-0-falcon .............   Passed    1.66 sec
      Start  7: test-tokenizer-1-llama
 7/22 Test  #7: test-tokenizer-1-llama ..............   Passed    3.38 sec
      Start  8: test-tokenizer-1-baichuan
 8/22 Test  #8: test-tokenizer-1-baichuan ...........   Passed    3.66 sec
      Start  9: test-tokenizer-1-falcon
 9/22 Test  #9: test-tokenizer-1-falcon .............   Passed    6.07 sec
      Start 10: test-tokenizer-1-aquila
10/22 Test #10: test-tokenizer-1-aquila .............   Passed    8.66 sec
      Start 11: test-tokenizer-1-mpt
11/22 Test #11: test-tokenizer-1-mpt ................   Passed    5.07 sec
      Start 12: test-tokenizer-1-stablelm-3b-4e1t
12/22 Test #12: test-tokenizer-1-stablelm-3b-4e1t ...   Passed    5.06 sec
      Start 13: test-tokenizer-1-gpt-neox
13/22 Test #13: test-tokenizer-1-gpt-neox ...........   Passed    5.07 sec
      Start 14: test-tokenizer-1-refact
14/22 Test #14: test-tokenizer-1-refact .............   Passed    4.84 sec
      Start 15: test-tokenizer-1-starcoder
15/22 Test #15: test-tokenizer-1-starcoder ..........   Passed    4.84 sec
      Start 16: test-tokenizer-1-gpt2
16/22 Test #16: test-tokenizer-1-gpt2 ...............   Passed    5.17 sec
      Start 17: test-grammar-parser
17/22 Test #17: test-grammar-parser .................   Passed    0.00 sec
      Start 18: test-llama-grammar
18/22 Test #18: test-llama-grammar ..................   Passed    0.00 sec
      Start 19: test-grad0
19/22 Test #19: test-grad0 ..........................   Passed    2.50 sec
      Start 20: test-backend-ops
20/22 Test #20: test-backend-ops ....................   Passed    0.00 sec
      Start 21: test-rope
21/22 Test #21: test-rope ...........................   Passed    0.06 sec
      Start 24: test-json-schema-to-grammar
22/22 Test #24: test-json-schema-to-grammar .........Subprocess aborted***Exception:   1.07 sec
#
# Testing JSON schema conversion (C++)
#
- unknown type (failure expected)
Error: JSON schema conversion failed:
Unrecognized schema: {"type":"kaboom"}
- invalid type type (failure expected)
Error: JSON schema conversion failed:
Unrecognized schema: {"type":123}
- empty schema (object)
- exotic formats
- string
- boolean
- integer
- string const
- non-string const (failure expected)
Error: JSON schema conversion failed:
Only std::string constants are supported, got 123
- non-string enum (failure expected)
Error: JSON schema conversion failed:
Only std::string constants are supported, got 123
- tuple1
- tuple2
- number
- minItems
- maxItems 1
- maxItems 2
- min + maxItems
- simple regexp
- regexp escapes
- regexp quote
- regexp
- required props
- 1 optional prop
- N optional props
- required + optional props
- additional props
- additional props (true)
- additional props (implicit)
- empty w/o additional props
- required + additional props
- optional + additional props
- required + optional + additional props
- top-level $ref
- anyOf
- mix of allOf, anyOf and $ref (similar to https://json.schemastore.org/tsconfig.json)
- conflicting names
#
# Testing JSON schema conversion (Python)
#
- unknown type (failure expected)
Traceback (most recent call last):
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 551, in <module>
    main()
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 546, in main
    converter.visit(schema, '')
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 414, in visit
    assert schema_type in PRIMITIVE_RULES, f'Unrecognized schema: {schema}'
AssertionError: Unrecognized schema: {'type': 'kaboom'}
- invalid type type (failure expected)
Traceback (most recent call last):
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 551, in <module>
    main()
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 546, in main
    converter.visit(schema, '')
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 414, in visit
    assert schema_type in PRIMITIVE_RULES, f'Unrecognized schema: {schema}'
AssertionError: Unrecognized schema: {'type': 123}
- empty schema (object)
- exotic formats
- string
- boolean
- integer
- string const
- non-string const (failure expected)
Traceback (most recent call last):
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 551, in <module>
    main()
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 546, in main
    converter.visit(schema, '')
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 329, in visit
    return self._add_rule(rule_name, self._generate_constant_rule(schema['const']))
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 311, in _generate_constant_rule
    assert isinstance(value, str), f'Only string constants are supported, got {value}'
AssertionError: Only string constants are supported, got 123
- non-string enum (failure expected)
Traceback (most recent call last):
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 551, in <module>
    main()
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 546, in main
    converter.visit(schema, '')
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 332, in visit
    rule = ' | '.join((self._generate_constant_rule(v) for v in schema['enum']))
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 332, in <genexpr>
    rule = ' | '.join((self._generate_constant_rule(v) for v in schema['enum']))
  File "/home/ggml/work/llama.cpp/./examples/json-schema-to-grammar.py", line 311, in _generate_constant_rule
    assert isinstance(value, str), f'Only string constants are supported, got {value}'
AssertionError: Only string constants are supported, got 123
- tuple1
- tuple2
- number
- minItems
- maxItems 1
- maxItems 2
- min + maxItems
- simple regexp
- regexp escapes
- regexp quote
- regexp
- required props
- 1 optional prop
- N optional props
- required + optional props
- additional props
- additional props (true)
- additional props (implicit)
- empty w/o additional props
- required + additional props
- optional + additional props
- required + optional + additional props
- top-level $ref
- anyOf
- mix of allOf, anyOf and $ref (similar to https://json.schemastore.org/tsconfig.json)
- conflicting names
#
# Testing JSON schema conversion (JavaScript)
#
- unknown type (failure expected)
sh: 1: node: not found
- invalid type type (failure expected)
sh: 1: node: not found
- empty schema (object)
sh: 1: node: not found
#
# Test 'empty schema (object)' failed.
#
{}
# EXPECTED STATUS: SUCCESS
# ACTUAL STATUS: FAILURE
test-json-schema-to-grammar: /home/ggml/work/llama.cpp/tests/test-json-schema-to-grammar.cpp:57: void TestCase::verify_status(TestCaseStatus) const: Assertion `false' failed.


95% tests passed, 1 tests failed out of 22

Label Time Summary:
main    =  91.71 sec*proc (22 tests)

Total Test time (real) =  91.72 sec

The following tests FAILED:
	 24 - test-json-schema-to-grammar (Subprocess aborted)
Errors while running CTest

real	1m31.741s
user	3m28.405s
sys	0m3.522s
