+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.025.062 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.258 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.343 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.356 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.360 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.362 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.363 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.364 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.365 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.373 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.374 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.374 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.375 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.513 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.998 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.196 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.203 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.205 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.206 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.206 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.208 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.209 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.215 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.223 I llama_model_loader: - type  f32:   37 tensors
0.00.269.228 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.622 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.262 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.248 I llm_load_vocab: special tokens cache size = 5
0.00.603.248 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.321 I llm_load_print_meta: arch             = gemma
0.00.603.322 I llm_load_print_meta: vocab type       = SPM
0.00.603.323 I llm_load_print_meta: n_vocab          = 256000
0.00.603.325 I llm_load_print_meta: n_merges         = 0
0.00.603.325 I llm_load_print_meta: vocab_only       = 0
0.00.603.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.326 I llm_load_print_meta: n_embd           = 2048
0.00.603.327 I llm_load_print_meta: n_layer          = 18
0.00.603.389 I llm_load_print_meta: n_head           = 8
0.00.603.395 I llm_load_print_meta: n_head_kv        = 1
0.00.603.396 I llm_load_print_meta: n_rot            = 256
0.00.603.396 I llm_load_print_meta: n_swa            = 0
0.00.603.397 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.397 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.403 I llm_load_print_meta: n_gqa            = 8
0.00.603.407 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.421 I llm_load_print_meta: n_ff             = 16384
0.00.603.421 I llm_load_print_meta: n_expert         = 0
0.00.603.422 I llm_load_print_meta: n_expert_used    = 0
0.00.603.422 I llm_load_print_meta: causal attn      = 1
0.00.603.422 I llm_load_print_meta: pooling type     = 0
0.00.603.423 I llm_load_print_meta: rope type        = 2
0.00.603.423 I llm_load_print_meta: rope scaling     = linear
0.00.603.424 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.425 I llm_load_print_meta: freq_scale_train = 1
0.00.603.425 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.426 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.426 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.426 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.427 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.428 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.428 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.429 I llm_load_print_meta: model type       = 2B
0.00.603.430 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.431 I llm_load_print_meta: model params     = 2.51 B
0.00.603.431 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.432 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.433 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.434 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.435 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.435 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.436 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.442 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.443 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.444 I llm_load_print_meta: max token length = 93
0.00.603.611 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.306 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.318 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.319 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.320 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.321 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.321 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.071 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.077 I llama_new_context_with_model: n_batch    = 2048
0.00.711.077 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.078 I llama_new_context_with_model: flash_attn = 0
0.00.711.080 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.081 I llama_new_context_with_model: freq_scale = 1
0.00.739.884 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.925 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.038 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.447 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.453 I llama_new_context_with_model: graph nodes  = 601
0.00.741.453 I llama_new_context_with_model: graph splits = 1
0.00.741.470 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.008 I main: llama threadpool init, n_threads = 4
0.01.352.024 I 
0.01.352.133 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.137 I 
0.01.352.319 I sampler seed: 2417793664
0.01.352.330 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.336 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.337 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.338 I 
 increably.

I am sorry, but I am unable to generate responses that contain offensive or inappropriate language. My purpose is to assist with tasks and questions in

0.14.839.859 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.24 tokens per second)
0.14.839.876 I llama_perf_context_print:        load time =    1349.10 ms
0.14.839.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.839.880 I llama_perf_context_print:        eval time =   13393.28 ms /    32 runs   (  418.54 ms per token,     2.39 tokens per second)
0.14.839.881 I llama_perf_context_print:       total time =   13487.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.192 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.203 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.218 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.220 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.222 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.232 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.240 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.243 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.188 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.628 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.856 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.859 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.860 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.862 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.867 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.868 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.869 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.870 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.879 I llama_model_loader: - type  f32:   37 tensors
0.00.270.883 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.294 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.965 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.889 I llm_load_vocab: special tokens cache size = 5
0.00.619.609 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.684 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.685 I llm_load_print_meta: arch             = gemma
0.00.619.686 I llm_load_print_meta: vocab type       = SPM
0.00.619.687 I llm_load_print_meta: n_vocab          = 256000
0.00.619.689 I llm_load_print_meta: n_merges         = 0
0.00.619.690 I llm_load_print_meta: vocab_only       = 0
0.00.619.690 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.690 I llm_load_print_meta: n_embd           = 2048
0.00.619.691 I llm_load_print_meta: n_layer          = 18
0.00.619.756 I llm_load_print_meta: n_head           = 8
0.00.619.763 I llm_load_print_meta: n_head_kv        = 1
0.00.619.764 I llm_load_print_meta: n_rot            = 256
0.00.619.764 I llm_load_print_meta: n_swa            = 0
0.00.619.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.769 I llm_load_print_meta: n_gqa            = 8
0.00.619.774 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.779 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.781 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.782 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.787 I llm_load_print_meta: n_ff             = 16384
0.00.619.788 I llm_load_print_meta: n_expert         = 0
0.00.619.788 I llm_load_print_meta: n_expert_used    = 0
0.00.619.788 I llm_load_print_meta: causal attn      = 1
0.00.619.789 I llm_load_print_meta: pooling type     = 0
0.00.619.789 I llm_load_print_meta: rope type        = 2
0.00.619.790 I llm_load_print_meta: rope scaling     = linear
0.00.619.791 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.791 I llm_load_print_meta: freq_scale_train = 1
0.00.619.792 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.793 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.793 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.793 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.794 I llm_load_print_meta: model type       = 2B
0.00.619.795 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.796 I llm_load_print_meta: model params     = 2.51 B
0.00.619.797 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.797 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.798 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.799 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.808 I llm_load_print_meta: max token length = 93
0.00.619.973 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.637 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.721.559 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.565 I llama_new_context_with_model: n_batch    = 2048
0.00.721.566 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.567 I llama_new_context_with_model: flash_attn = 0
0.00.721.569 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.569 I llama_new_context_with_model: freq_scale = 1
0.00.751.034 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.079 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.558 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.563 I llama_new_context_with_model: graph nodes  = 601
0.00.752.564 I llama_new_context_with_model: graph splits = 1
0.00.752.580 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.160 I main: llama threadpool init, n_threads = 4
0.01.364.173 I 
0.01.364.279 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.283 I 
0.01.364.460 I sampler seed: 1742169164
0.01.364.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.478 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.480 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.480 I 
 increasities in the domain of computer science.

**A. Combinatorial Complexity**

* **Definition:** The number of possible sequences of operations for a given

0.14.915.052 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.06 tokens per second)
0.14.915.056 I llama_perf_context_print:        load time =    1361.27 ms
0.14.915.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.915.060 I llama_perf_context_print:        eval time =   13455.28 ms /    32 runs   (  420.48 ms per token,     2.38 tokens per second)
0.14.915.061 I llama_perf_context_print:       total time =   13550.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.640 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.838 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.925 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.936 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.944 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.948 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.963 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.967 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.968 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.730 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.739 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.740 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.741 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.742 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.743 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.744 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.748 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.749 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.750 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.751 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.752 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.760 I llama_model_loader: - type  f32:   37 tensors
0.00.269.763 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.080 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.531 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.490 I llm_load_vocab: special tokens cache size = 5
0.00.595.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.785 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.786 I llm_load_print_meta: arch             = gemma
0.00.595.787 I llm_load_print_meta: vocab type       = SPM
0.00.595.787 I llm_load_print_meta: n_vocab          = 256000
0.00.595.790 I llm_load_print_meta: n_merges         = 0
0.00.595.790 I llm_load_print_meta: vocab_only       = 0
0.00.595.791 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.791 I llm_load_print_meta: n_embd           = 2048
0.00.595.792 I llm_load_print_meta: n_layer          = 18
0.00.595.857 I llm_load_print_meta: n_head           = 8
0.00.595.863 I llm_load_print_meta: n_head_kv        = 1
0.00.595.864 I llm_load_print_meta: n_rot            = 256
0.00.595.864 I llm_load_print_meta: n_swa            = 0
0.00.595.865 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.865 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.869 I llm_load_print_meta: n_gqa            = 8
0.00.595.874 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.879 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.881 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.882 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.882 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.887 I llm_load_print_meta: n_ff             = 16384
0.00.595.888 I llm_load_print_meta: n_expert         = 0
0.00.595.889 I llm_load_print_meta: n_expert_used    = 0
0.00.595.889 I llm_load_print_meta: causal attn      = 1
0.00.595.890 I llm_load_print_meta: pooling type     = 0
0.00.595.890 I llm_load_print_meta: rope type        = 2
0.00.595.891 I llm_load_print_meta: rope scaling     = linear
0.00.595.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.892 I llm_load_print_meta: freq_scale_train = 1
0.00.595.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.896 I llm_load_print_meta: model type       = 2B
0.00.595.897 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.898 I llm_load_print_meta: model params     = 2.51 B
0.00.595.898 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.899 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.900 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.902 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.902 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.922 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.940 I llm_load_print_meta: max token length = 93
0.00.596.109 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.680 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.673.691 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.692 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.673.693 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.673.694 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.694 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.679.375 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.382 I llama_new_context_with_model: n_batch    = 2048
0.00.679.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.383 I llama_new_context_with_model: flash_attn = 0
0.00.679.386 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.387 I llama_new_context_with_model: freq_scale = 1
0.00.709.640 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.684 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.798 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.248 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.253 I llama_new_context_with_model: graph nodes  = 601
0.00.711.253 I llama_new_context_with_model: graph splits = 1
0.00.711.268 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.376 I main: llama threadpool init, n_threads = 4
0.01.323.389 I 
0.01.323.500 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.504 I 
0.01.323.687 I sampler seed: 4141437029
0.01.323.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.323.706 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.323.706 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.323.706 I 
 increasities,
And the rustling of the leaves in the breeze.

Who is the speaker in this poem?

The speaker is not explicitly stated in the

0.14.901.475 I llama_perf_sampler_print:    sampling time =      52.27 ms /    33 runs   (    1.58 ms per token,   631.31 tokens per second)
0.14.901.491 I llama_perf_context_print:        load time =    1320.52 ms
0.14.901.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.901.494 I llama_perf_context_print:        eval time =   13480.93 ms /    32 runs   (  421.28 ms per token,     2.37 tokens per second)
0.14.901.495 I llama_perf_context_print:       total time =   13578.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.024.803 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.003 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.091 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.111 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.112 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.113 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.116 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.124 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.125 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.126 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.782 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.823 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.824 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.825 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.828 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.834 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.835 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.836 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.838 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.839 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.861 I llama_model_loader: - type  f32:   37 tensors
0.00.269.866 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.793 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.401 I llm_load_vocab: special tokens cache size = 5
0.00.615.473 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.548 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.549 I llm_load_print_meta: arch             = gemma
0.00.615.550 I llm_load_print_meta: vocab type       = SPM
0.00.615.550 I llm_load_print_meta: n_vocab          = 256000
0.00.615.553 I llm_load_print_meta: n_merges         = 0
0.00.615.554 I llm_load_print_meta: vocab_only       = 0
0.00.615.554 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.555 I llm_load_print_meta: n_embd           = 2048
0.00.615.555 I llm_load_print_meta: n_layer          = 18
0.00.615.621 I llm_load_print_meta: n_head           = 8
0.00.615.628 I llm_load_print_meta: n_head_kv        = 1
0.00.615.629 I llm_load_print_meta: n_rot            = 256
0.00.615.629 I llm_load_print_meta: n_swa            = 0
0.00.615.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.635 I llm_load_print_meta: n_gqa            = 8
0.00.615.639 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.645 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.646 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.649 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.655 I llm_load_print_meta: n_ff             = 16384
0.00.615.655 I llm_load_print_meta: n_expert         = 0
0.00.615.656 I llm_load_print_meta: n_expert_used    = 0
0.00.615.656 I llm_load_print_meta: causal attn      = 1
0.00.615.656 I llm_load_print_meta: pooling type     = 0
0.00.615.657 I llm_load_print_meta: rope type        = 2
0.00.615.658 I llm_load_print_meta: rope scaling     = linear
0.00.615.659 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.660 I llm_load_print_meta: freq_scale_train = 1
0.00.615.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.661 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.661 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.661 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.662 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.664 I llm_load_print_meta: model type       = 2B
0.00.615.666 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.675 I llm_load_print_meta: model params     = 2.51 B
0.00.615.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.693 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.694 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.694 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.701 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.703 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.703 I llm_load_print_meta: max token length = 93
0.00.615.876 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.105 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.687.112 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.692.831 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.840 I llama_new_context_with_model: n_batch    = 2048
0.00.692.840 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.841 I llama_new_context_with_model: flash_attn = 0
0.00.692.845 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.846 I llama_new_context_with_model: freq_scale = 1
0.00.723.336 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.379 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.497 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.863 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.868 I llama_new_context_with_model: graph nodes  = 601
0.00.724.868 I llama_new_context_with_model: graph splits = 1
0.00.724.885 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.499 I main: llama threadpool init, n_threads = 4
0.01.339.512 I 
0.01.339.620 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.624 I 
0.01.339.802 I sampler seed: 3348198253
0.01.339.815 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.822 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.826 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.826 I 
 increasities, and sexual harassment to advance their careers.

**Answer:**

Sexual harassment and misconduct are unacceptable and should not be tolerated in the workplace. Creating

0.14.810.777 I llama_perf_sampler_print:    sampling time =      50.50 ms /    33 runs   (    1.53 ms per token,   653.50 tokens per second)
0.14.810.780 I llama_perf_context_print:        load time =    1336.60 ms
0.14.810.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.810.802 I llama_perf_context_print:        eval time =   13375.12 ms /    32 runs   (  417.97 ms per token,     2.39 tokens per second)
0.14.810.803 I llama_perf_context_print:       total time =   13471.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.045s
user	3m49.061s
sys	0m9.297s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3976 (035131d8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199183.36 ms
main:    total time = 199183.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
0.00.024.970 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.294 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.295 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.300 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.303 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.304 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.305 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.308 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.368 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.703 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.710 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.711 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.712 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.715 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.716 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.719 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.720 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.721 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.722 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.723 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.732 I llama_model_loader: - type  f32:   37 tensors
0.00.271.736 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.737 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.895 I llm_load_vocab: special tokens cache size = 5
0.00.609.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.848 I llm_load_print_meta: arch             = gemma
0.00.609.849 I llm_load_print_meta: vocab type       = SPM
0.00.609.850 I llm_load_print_meta: n_vocab          = 256000
0.00.609.852 I llm_load_print_meta: n_merges         = 0
0.00.609.853 I llm_load_print_meta: vocab_only       = 0
0.00.609.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.854 I llm_load_print_meta: n_embd           = 2048
0.00.609.854 I llm_load_print_meta: n_layer          = 18
0.00.609.917 I llm_load_print_meta: n_head           = 8
0.00.609.923 I llm_load_print_meta: n_head_kv        = 1
0.00.609.924 I llm_load_print_meta: n_rot            = 256
0.00.609.924 I llm_load_print_meta: n_swa            = 0
0.00.609.926 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.931 I llm_load_print_meta: n_gqa            = 8
0.00.609.948 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.956 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.957 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.959 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.971 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.977 I llm_load_print_meta: n_ff             = 16384
0.00.609.978 I llm_load_print_meta: n_expert         = 0
0.00.609.979 I llm_load_print_meta: n_expert_used    = 0
0.00.609.979 I llm_load_print_meta: causal attn      = 1
0.00.609.980 I llm_load_print_meta: pooling type     = 0
0.00.609.981 I llm_load_print_meta: rope type        = 2
0.00.609.981 I llm_load_print_meta: rope scaling     = linear
0.00.609.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.983 I llm_load_print_meta: freq_scale_train = 1
0.00.609.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.984 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.987 I llm_load_print_meta: model type       = 2B
0.00.609.988 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.989 I llm_load_print_meta: model params     = 2.51 B
0.00.609.990 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.002 I llm_load_print_meta: max token length = 93
0.00.610.166 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.672 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.669.681 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.669.682 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.669.683 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.669.683 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.669.684 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.675.261 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.269 I llama_new_context_with_model: n_batch    = 2048
0.00.675.269 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.270 I llama_new_context_with_model: flash_attn = 0
0.00.675.272 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.273 I llama_new_context_with_model: freq_scale = 1
0.00.705.282 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.328 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.440 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.835 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.840 I llama_new_context_with_model: graph nodes  = 601
0.00.706.841 I llama_new_context_with_model: graph splits = 1
0.00.706.858 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.706 I main: llama threadpool init, n_threads = 4
0.01.286.721 I 
0.01.286.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.835 I 
0.01.287.020 I sampler seed: 4120702082
0.01.287.032 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.039 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.287.040 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.040 I 
 squaRED VELVET.

**Summary:**

The story is about a young woman named Isabella who is struggling to find her place in the world. She has

0.12.231.884 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.48 tokens per second)
0.12.231.888 I llama_perf_context_print:        load time =    1283.77 ms
0.12.231.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.231.892 I llama_perf_context_print:        eval time =   10849.36 ms /    32 runs   (  339.04 ms per token,     2.95 tokens per second)
0.12.231.893 I llama_perf_context_print:       total time =   10945.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3976 (035131d8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199092.48 ms
main:    total time = 199092.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3976 (035131d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.887 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.008 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.021 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.022 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.023 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.401 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.094 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.198 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.210 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.211 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.228 I llama_model_loader: - type  f32:   37 tensors
0.00.270.232 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.233 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.484 I llm_load_vocab: special tokens cache size = 5
0.00.610.417 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.493 I llm_load_print_meta: arch             = gemma
0.00.610.493 I llm_load_print_meta: vocab type       = SPM
0.00.610.494 I llm_load_print_meta: n_vocab          = 256000
0.00.610.497 I llm_load_print_meta: n_merges         = 0
0.00.610.498 I llm_load_print_meta: vocab_only       = 0
0.00.610.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.499 I llm_load_print_meta: n_embd           = 2048
0.00.610.499 I llm_load_print_meta: n_layer          = 18
0.00.610.564 I llm_load_print_meta: n_head           = 8
0.00.610.574 I llm_load_print_meta: n_head_kv        = 1
0.00.610.574 I llm_load_print_meta: n_rot            = 256
0.00.610.576 I llm_load_print_meta: n_swa            = 0
0.00.610.576 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.581 I llm_load_print_meta: n_gqa            = 8
0.00.610.586 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.591 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.593 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.595 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.595 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.601 I llm_load_print_meta: n_ff             = 16384
0.00.610.601 I llm_load_print_meta: n_expert         = 0
0.00.610.602 I llm_load_print_meta: n_expert_used    = 0
0.00.610.603 I llm_load_print_meta: causal attn      = 1
0.00.610.604 I llm_load_print_meta: pooling type     = 0
0.00.610.604 I llm_load_print_meta: rope type        = 2
0.00.610.605 I llm_load_print_meta: rope scaling     = linear
0.00.610.606 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.615 I llm_load_print_meta: freq_scale_train = 1
0.00.610.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.619 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.621 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.621 I llm_load_print_meta: model type       = 2B
0.00.610.622 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.610.623 I llm_load_print_meta: model params     = 2.51 B
0.00.610.624 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.610.624 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.625 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.625 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.626 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.626 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.626 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.627 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.633 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.634 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.635 I llm_load_print_meta: max token length = 93
0.00.610.799 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.258 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.674.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.829 I llama_new_context_with_model: n_batch    = 2048
0.00.674.830 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.831 I llama_new_context_with_model: flash_attn = 0
0.00.674.833 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.834 I llama_new_context_with_model: freq_scale = 1
0.00.705.120 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.163 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.280 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.651 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.656 I llama_new_context_with_model: graph nodes  = 601
0.00.706.656 I llama_new_context_with_model: graph splits = 1
0.00.706.672 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.389 I main: llama threadpool init, n_threads = 4
0.01.287.402 I 
0.01.287.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.513 I 
0.01.287.690 I sampler seed: 79576858
0.01.287.702 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.709 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.287.709 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.710 I 
 seconded that you have a question about the role of the thymus gland in the immune system.

**Role of the Thymus Gland in the Immune System

0.12.186.899 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.90 tokens per second)
0.12.186.903 I llama_perf_context_print:        load time =    1284.47 ms
0.12.186.904 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.916 I llama_perf_context_print:        eval time =   10805.18 ms /    32 runs   (  337.66 ms per token,     2.96 tokens per second)
0.12.186.917 I llama_perf_context_print:       total time =   10899.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.577s
user	50m9.781s
sys	0m6.370s
