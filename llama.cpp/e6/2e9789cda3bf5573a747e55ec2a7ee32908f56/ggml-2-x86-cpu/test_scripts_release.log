+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.592 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.001.900 I main: load the model and apply lora adapter, if any
0.00.021.946 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.994 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.019 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.023 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.024 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.024 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.034 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.926 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.846 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.854 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.855 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.861 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.862 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.864 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.864 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.868 I llama_model_loader: - type  f32:   37 tensors
0.00.132.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.457 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.201 I llm_load_vocab: special tokens cache size = 5
0.00.222.381 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.394 I llm_load_print_meta: arch             = gemma
0.00.222.395 I llm_load_print_meta: vocab type       = SPM
0.00.222.396 I llm_load_print_meta: n_vocab          = 256000
0.00.222.396 I llm_load_print_meta: n_merges         = 0
0.00.222.397 I llm_load_print_meta: vocab_only       = 0
0.00.222.397 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.397 I llm_load_print_meta: n_embd           = 2048
0.00.222.398 I llm_load_print_meta: n_layer          = 18
0.00.222.409 I llm_load_print_meta: n_head           = 8
0.00.222.410 I llm_load_print_meta: n_head_kv        = 1
0.00.222.411 I llm_load_print_meta: n_rot            = 256
0.00.222.411 I llm_load_print_meta: n_swa            = 0
0.00.222.411 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.411 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.412 I llm_load_print_meta: n_gqa            = 8
0.00.222.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.417 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.419 I llm_load_print_meta: n_ff             = 16384
0.00.222.419 I llm_load_print_meta: n_expert         = 0
0.00.222.419 I llm_load_print_meta: n_expert_used    = 0
0.00.222.420 I llm_load_print_meta: causal attn      = 1
0.00.222.420 I llm_load_print_meta: pooling type     = 0
0.00.222.420 I llm_load_print_meta: rope type        = 2
0.00.222.421 I llm_load_print_meta: rope scaling     = linear
0.00.222.422 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.423 I llm_load_print_meta: freq_scale_train = 1
0.00.222.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.423 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.424 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.424 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.424 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.425 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.425 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.425 I llm_load_print_meta: model type       = 2B
0.00.222.426 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.427 I llm_load_print_meta: model params     = 2.51 B
0.00.222.428 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.428 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.429 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.429 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.430 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.430 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.431 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.431 I llm_load_print_meta: max token length = 93
0.00.222.454 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.321.546 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.321.555 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.321.555 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.321.556 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.321.557 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.321.557 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.326.558 I llama_new_context_with_model: n_ctx      = 8192
0.00.326.565 I llama_new_context_with_model: n_batch    = 2048
0.00.326.565 I llama_new_context_with_model: n_ubatch   = 512
0.00.326.566 I llama_new_context_with_model: flash_attn = 0
0.00.326.569 I llama_new_context_with_model: freq_base  = 10000.0
0.00.326.570 I llama_new_context_with_model: freq_scale = 1
0.00.356.200 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.356.216 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.356.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.171 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.357.179 I llama_new_context_with_model: graph nodes  = 601
0.00.357.180 I llama_new_context_with_model: graph splits = 1
0.00.357.182 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.859 I main: llama threadpool init, n_threads = 4
0.00.448.872 I 
0.00.448.946 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.949 I 
0.00.448.977 I sampler seed: 1739376041
0.00.448.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.988 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.448.989 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and a lack of clarity in the interpretation of the results. [end of text]


0.01.503.382 I llama_perf_sampler_print:    sampling time =       2.33 ms /    16 runs   (    0.15 ms per token,  6855.18 tokens per second)
0.01.503.385 I llama_perf_context_print:        load time =     446.94 ms
0.01.503.386 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.503.388 I llama_perf_context_print:        eval time =    1044.74 ms /    15 runs   (   69.65 ms per token,    14.36 tokens per second)
0.01.503.389 I llama_perf_context_print:       total time =    1054.53 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.542 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.823 I main: load the model and apply lora adapter, if any
0.00.022.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.046 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.053 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.054 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.057 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.057 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.059 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.060 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.061 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.576 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.973 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.974 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.976 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.981 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.981 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.982 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.986 I llama_model_loader: - type  f32:   37 tensors
0.00.131.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.789 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.551 I llm_load_vocab: special tokens cache size = 5
0.00.216.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.775 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.775 I llm_load_print_meta: arch             = gemma
0.00.216.776 I llm_load_print_meta: vocab type       = SPM
0.00.216.777 I llm_load_print_meta: n_vocab          = 256000
0.00.216.777 I llm_load_print_meta: n_merges         = 0
0.00.216.778 I llm_load_print_meta: vocab_only       = 0
0.00.216.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.791 I llm_load_print_meta: n_embd           = 2048
0.00.216.791 I llm_load_print_meta: n_layer          = 18
0.00.216.803 I llm_load_print_meta: n_head           = 8
0.00.216.805 I llm_load_print_meta: n_head_kv        = 1
0.00.216.805 I llm_load_print_meta: n_rot            = 256
0.00.216.805 I llm_load_print_meta: n_swa            = 0
0.00.216.806 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.806 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.807 I llm_load_print_meta: n_gqa            = 8
0.00.216.809 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.810 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.811 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.813 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.814 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.815 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.816 I llm_load_print_meta: n_ff             = 16384
0.00.216.816 I llm_load_print_meta: n_expert         = 0
0.00.216.819 I llm_load_print_meta: n_expert_used    = 0
0.00.216.820 I llm_load_print_meta: causal attn      = 1
0.00.216.820 I llm_load_print_meta: pooling type     = 0
0.00.216.821 I llm_load_print_meta: rope type        = 2
0.00.216.821 I llm_load_print_meta: rope scaling     = linear
0.00.216.822 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.824 I llm_load_print_meta: freq_scale_train = 1
0.00.216.824 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.825 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.825 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.825 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.825 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.826 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.829 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.829 I llm_load_print_meta: model type       = 2B
0.00.216.830 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.831 I llm_load_print_meta: model params     = 2.51 B
0.00.216.831 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.832 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.832 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.833 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.833 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.833 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.834 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.834 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.834 I llm_load_print_meta: max token length = 93
0.00.216.852 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.883 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.315.006 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.025 I llama_new_context_with_model: n_batch    = 2048
0.00.315.028 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.028 I llama_new_context_with_model: flash_attn = 0
0.00.315.031 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.032 I llama_new_context_with_model: freq_scale = 1
0.00.345.312 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.345.329 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.345.425 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.286 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.346.295 I llama_new_context_with_model: graph nodes  = 601
0.00.346.295 I llama_new_context_with_model: graph splits = 1
0.00.346.297 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.392 I main: llama threadpool init, n_threads = 4
0.00.434.406 I 
0.00.434.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.483 I 
0.00.434.519 I sampler seed: 1473602591
0.00.434.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.531 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.532 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, but has been replaced by a new and improved method. [end of text]


0.01.453.627 I llama_perf_sampler_print:    sampling time =       2.40 ms /    16 runs   (    0.15 ms per token,  6677.80 tokens per second)
0.01.453.629 I llama_perf_context_print:        load time =     432.55 ms
0.01.453.630 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.453.632 I llama_perf_context_print:        eval time =    1010.03 ms /    15 runs   (   67.34 ms per token,    14.85 tokens per second)
0.01.453.632 I llama_perf_context_print:       total time =    1019.24 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.905 I main: load the model and apply lora adapter, if any
0.00.022.355 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.414 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.442 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.449 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.450 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.460 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.461 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.462 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.464 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.681 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.565 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.573 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.574 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.575 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.575 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.576 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.577 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.580 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.580 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.581 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.582 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.583 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.588 I llama_model_loader: - type  f32:   37 tensors
0.00.133.591 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.353 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.176 I llm_load_vocab: special tokens cache size = 5
0.00.222.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.754 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.754 I llm_load_print_meta: arch             = gemma
0.00.222.755 I llm_load_print_meta: vocab type       = SPM
0.00.222.755 I llm_load_print_meta: n_vocab          = 256000
0.00.222.756 I llm_load_print_meta: n_merges         = 0
0.00.222.756 I llm_load_print_meta: vocab_only       = 0
0.00.222.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.757 I llm_load_print_meta: n_embd           = 2048
0.00.222.757 I llm_load_print_meta: n_layer          = 18
0.00.222.769 I llm_load_print_meta: n_head           = 8
0.00.222.771 I llm_load_print_meta: n_head_kv        = 1
0.00.222.772 I llm_load_print_meta: n_rot            = 256
0.00.222.773 I llm_load_print_meta: n_swa            = 0
0.00.222.773 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.775 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.776 I llm_load_print_meta: n_gqa            = 8
0.00.222.778 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.785 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.789 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.791 I llm_load_print_meta: n_ff             = 16384
0.00.222.791 I llm_load_print_meta: n_expert         = 0
0.00.222.792 I llm_load_print_meta: n_expert_used    = 0
0.00.222.792 I llm_load_print_meta: causal attn      = 1
0.00.222.793 I llm_load_print_meta: pooling type     = 0
0.00.222.793 I llm_load_print_meta: rope type        = 2
0.00.222.794 I llm_load_print_meta: rope scaling     = linear
0.00.222.796 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.797 I llm_load_print_meta: freq_scale_train = 1
0.00.222.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.804 I llm_load_print_meta: model type       = 2B
0.00.222.805 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.806 I llm_load_print_meta: model params     = 2.51 B
0.00.222.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.811 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.812 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.813 I llm_load_print_meta: max token length = 93
0.00.222.834 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.298.383 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.298.393 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.298.394 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.298.394 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.298.395 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.298.396 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.303.598 I llama_new_context_with_model: n_ctx      = 8192
0.00.303.606 I llama_new_context_with_model: n_batch    = 2048
0.00.303.606 I llama_new_context_with_model: n_ubatch   = 512
0.00.303.607 I llama_new_context_with_model: flash_attn = 0
0.00.303.610 I llama_new_context_with_model: freq_base  = 10000.0
0.00.303.611 I llama_new_context_with_model: freq_scale = 1
0.00.334.673 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.334.691 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.334.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.756 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.335.764 I llama_new_context_with_model: graph nodes  = 601
0.00.335.764 I llama_new_context_with_model: graph splits = 1
0.00.335.766 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.167 I main: llama threadpool init, n_threads = 4
0.00.436.179 I 
0.00.436.252 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.259 I 
0.00.436.287 I sampler seed: 1455990257
0.00.436.296 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.319 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.436.323 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities can occur during meiosis.

Answer the following questions about meiosis and the occurrence of chromosomal rearrangements:

a) What is the main mechanism that leads

0.02.725.983 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6892.23 tokens per second)
0.02.725.985 I llama_perf_context_print:        load time =     434.24 ms
0.02.725.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.725.988 I llama_perf_context_print:        eval time =    2271.00 ms /    32 runs   (   70.97 ms per token,    14.09 tokens per second)
0.02.725.989 I llama_perf_context_print:       total time =    2289.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.938 I main: load the model and apply lora adapter, if any
0.00.028.239 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.296 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.308 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.309 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.310 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.311 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.316 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.317 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.318 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.407 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.138.909 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.145.729 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.145.735 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.145.736 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.145.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.145.737 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.145.738 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.145.739 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.145.741 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.145.742 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.145.743 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.145.743 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.145.744 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.145.747 I llama_model_loader: - type  f32:   37 tensors
0.00.145.750 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.150 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.211.007 I llm_load_vocab: special tokens cache size = 5
0.00.232.265 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.232.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.232.280 I llm_load_print_meta: arch             = gemma
0.00.232.280 I llm_load_print_meta: vocab type       = SPM
0.00.232.281 I llm_load_print_meta: n_vocab          = 256000
0.00.232.281 I llm_load_print_meta: n_merges         = 0
0.00.232.282 I llm_load_print_meta: vocab_only       = 0
0.00.232.282 I llm_load_print_meta: n_ctx_train      = 8192
0.00.232.282 I llm_load_print_meta: n_embd           = 2048
0.00.232.283 I llm_load_print_meta: n_layer          = 18
0.00.232.296 I llm_load_print_meta: n_head           = 8
0.00.232.297 I llm_load_print_meta: n_head_kv        = 1
0.00.232.297 I llm_load_print_meta: n_rot            = 256
0.00.232.297 I llm_load_print_meta: n_swa            = 0
0.00.232.298 I llm_load_print_meta: n_embd_head_k    = 256
0.00.232.298 I llm_load_print_meta: n_embd_head_v    = 256
0.00.232.299 I llm_load_print_meta: n_gqa            = 8
0.00.232.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.232.301 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.232.301 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.232.302 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.232.303 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.232.303 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.232.304 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.232.304 I llm_load_print_meta: n_ff             = 16384
0.00.232.305 I llm_load_print_meta: n_expert         = 0
0.00.232.305 I llm_load_print_meta: n_expert_used    = 0
0.00.232.305 I llm_load_print_meta: causal attn      = 1
0.00.232.306 I llm_load_print_meta: pooling type     = 0
0.00.232.306 I llm_load_print_meta: rope type        = 2
0.00.232.306 I llm_load_print_meta: rope scaling     = linear
0.00.232.308 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.232.308 I llm_load_print_meta: freq_scale_train = 1
0.00.232.309 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.232.309 I llm_load_print_meta: rope_finetuned   = unknown
0.00.232.309 I llm_load_print_meta: ssm_d_conv       = 0
0.00.232.309 I llm_load_print_meta: ssm_d_inner      = 0
0.00.232.309 I llm_load_print_meta: ssm_d_state      = 0
0.00.232.310 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.232.310 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.232.310 I llm_load_print_meta: model type       = 2B
0.00.232.311 I llm_load_print_meta: model ftype      = Q8_0
0.00.232.312 I llm_load_print_meta: model params     = 2.51 B
0.00.232.313 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.232.313 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.232.314 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.232.314 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.232.314 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.232.315 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.232.315 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.232.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.232.316 I llm_load_print_meta: max token length = 93
0.00.232.339 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.302.869 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.302.878 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.311.529 I llama_new_context_with_model: n_ctx      = 8192
0.00.311.538 I llama_new_context_with_model: n_batch    = 2048
0.00.311.538 I llama_new_context_with_model: n_ubatch   = 512
0.00.311.539 I llama_new_context_with_model: flash_attn = 0
0.00.311.543 I llama_new_context_with_model: freq_base  = 10000.0
0.00.311.544 I llama_new_context_with_model: freq_scale = 1
0.00.340.634 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.340.649 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.340.742 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.592 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.341.599 I llama_new_context_with_model: graph nodes  = 601
0.00.341.600 I llama_new_context_with_model: graph splits = 1
0.00.341.601 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.657 I main: llama threadpool init, n_threads = 4
0.00.434.670 I 
0.00.434.746 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.749 I 
0.00.434.776 I sampler seed: 1939317600
0.00.434.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.788 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.789 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I'm trying to understand why my code is not working as expected.

Here is the code:

```
function sum(a

0.02.869.692 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6823.82 tokens per second)
0.02.869.695 I llama_perf_context_print:        load time =     432.70 ms
0.02.869.697 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.700 I llama_perf_context_print:        eval time =    2415.92 ms /    32 runs   (   75.50 ms per token,    13.25 tokens per second)
0.02.869.701 I llama_perf_context_print:       total time =    2435.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.100s
user	0m29.948s
sys	0m9.496s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3805 (e62e9789)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31977.72 ms
main:    total time = 31977.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.022.040 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.089 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.096 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.106 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.107 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.108 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.109 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.112 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.113 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.113 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.114 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.115 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.337 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.338 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.339 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.339 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.341 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.344 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.345 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.346 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.347 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.347 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.350 I llama_model_loader: - type  f32:   37 tensors
0.00.133.353 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.354 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.394 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.203 I llm_load_vocab: special tokens cache size = 5
0.00.218.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.417 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.417 I llm_load_print_meta: arch             = gemma
0.00.218.417 I llm_load_print_meta: vocab type       = SPM
0.00.218.418 I llm_load_print_meta: n_vocab          = 256000
0.00.218.418 I llm_load_print_meta: n_merges         = 0
0.00.218.419 I llm_load_print_meta: vocab_only       = 0
0.00.218.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.419 I llm_load_print_meta: n_embd           = 2048
0.00.218.420 I llm_load_print_meta: n_layer          = 18
0.00.218.432 I llm_load_print_meta: n_head           = 8
0.00.218.433 I llm_load_print_meta: n_head_kv        = 1
0.00.218.434 I llm_load_print_meta: n_rot            = 256
0.00.218.434 I llm_load_print_meta: n_swa            = 0
0.00.218.434 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.435 I llm_load_print_meta: n_gqa            = 8
0.00.218.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.438 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.440 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.442 I llm_load_print_meta: n_ff             = 16384
0.00.218.443 I llm_load_print_meta: n_expert         = 0
0.00.218.443 I llm_load_print_meta: n_expert_used    = 0
0.00.218.443 I llm_load_print_meta: causal attn      = 1
0.00.218.444 I llm_load_print_meta: pooling type     = 0
0.00.218.444 I llm_load_print_meta: rope type        = 2
0.00.218.444 I llm_load_print_meta: rope scaling     = linear
0.00.218.446 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.446 I llm_load_print_meta: freq_scale_train = 1
0.00.218.447 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.447 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.448 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.448 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.448 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.448 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.449 I llm_load_print_meta: model type       = 2B
0.00.218.450 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.218.450 I llm_load_print_meta: model params     = 2.51 B
0.00.218.451 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.218.451 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.452 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.453 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.453 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.453 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.454 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.454 I llm_load_print_meta: max token length = 93
0.00.218.471 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.276.625 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.276.635 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.276.637 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.276.637 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.276.638 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.276.638 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.281.727 I llama_new_context_with_model: n_ctx      = 8192
0.00.281.734 I llama_new_context_with_model: n_batch    = 2048
0.00.281.734 I llama_new_context_with_model: n_ubatch   = 512
0.00.281.735 I llama_new_context_with_model: flash_attn = 0
0.00.281.737 I llama_new_context_with_model: freq_base  = 10000.0
0.00.281.738 I llama_new_context_with_model: freq_scale = 1
0.00.311.417 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.311.435 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.311.536 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.425 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.312.433 I llama_new_context_with_model: graph nodes  = 601
0.00.312.434 I llama_new_context_with_model: graph splits = 1
0.00.312.436 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.394.291 I main: llama threadpool init, n_threads = 4
0.00.394.304 I 
0.00.394.375 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.394.378 I 
0.00.394.404 I sampler seed: 2026994379
0.00.394.412 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.394.426 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.394.429 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 effeur.

**The question is:**

Explain why the statement "the future of work is collaborative" is a misconception.

**My answer:**



0.02.004.973 I llama_perf_sampler_print:    sampling time =       5.36 ms /    33 runs   (    0.16 ms per token,  6161.31 tokens per second)
0.02.004.976 I llama_perf_context_print:        load time =     392.40 ms
0.02.004.977 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.004.979 I llama_perf_context_print:        eval time =    1591.77 ms /    32 runs   (   49.74 ms per token,    20.10 tokens per second)
0.02.004.979 I llama_perf_context_print:       total time =    1610.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3805 (e62e9789)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32075.84 ms
main:    total time = 32075.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.560 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.862 I main: load the model and apply lora adapter, if any
0.00.021.917 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.943 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.947 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.948 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.949 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.649 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.331 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.217 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.222 I llama_model_loader: - type  f32:   37 tensors
0.00.132.225 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.225 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.260 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.002 I llm_load_vocab: special tokens cache size = 5
0.00.218.520 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.536 I llm_load_print_meta: arch             = gemma
0.00.218.537 I llm_load_print_meta: vocab type       = SPM
0.00.218.538 I llm_load_print_meta: n_vocab          = 256000
0.00.218.538 I llm_load_print_meta: n_merges         = 0
0.00.218.538 I llm_load_print_meta: vocab_only       = 0
0.00.218.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.539 I llm_load_print_meta: n_embd           = 2048
0.00.218.539 I llm_load_print_meta: n_layer          = 18
0.00.218.552 I llm_load_print_meta: n_head           = 8
0.00.218.553 I llm_load_print_meta: n_head_kv        = 1
0.00.218.553 I llm_load_print_meta: n_rot            = 256
0.00.218.553 I llm_load_print_meta: n_swa            = 0
0.00.218.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.555 I llm_load_print_meta: n_gqa            = 8
0.00.218.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.560 I llm_load_print_meta: n_ff             = 16384
0.00.218.561 I llm_load_print_meta: n_expert         = 0
0.00.218.561 I llm_load_print_meta: n_expert_used    = 0
0.00.218.561 I llm_load_print_meta: causal attn      = 1
0.00.218.562 I llm_load_print_meta: pooling type     = 0
0.00.218.562 I llm_load_print_meta: rope type        = 2
0.00.218.562 I llm_load_print_meta: rope scaling     = linear
0.00.218.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.564 I llm_load_print_meta: freq_scale_train = 1
0.00.218.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.565 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.567 I llm_load_print_meta: model type       = 2B
0.00.218.567 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.218.568 I llm_load_print_meta: model params     = 2.51 B
0.00.218.569 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.218.569 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.571 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.571 I llm_load_print_meta: max token length = 93
0.00.218.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.595 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.280.550 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.555 I llama_new_context_with_model: n_batch    = 2048
0.00.280.556 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.556 I llama_new_context_with_model: flash_attn = 0
0.00.280.559 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.560 I llama_new_context_with_model: freq_scale = 1
0.00.309.502 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.518 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.609 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.310.488 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.310.496 I llama_new_context_with_model: graph nodes  = 601
0.00.310.496 I llama_new_context_with_model: graph splits = 1
0.00.310.498 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.954 I main: llama threadpool init, n_threads = 4
0.00.391.966 I 
0.00.392.038 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.392.042 I 
0.00.392.070 I sampler seed: 1501719224
0.00.392.079 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.392.082 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.392.082 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 affors by combining the benefits of two or more of them.

**a) Explain the concept of affors.**
**b) Describe the types of

0.01.992.263 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6756.76 tokens per second)
0.01.992.265 I llama_perf_context_print:        load time =     390.07 ms
0.01.992.266 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.268 I llama_perf_context_print:        eval time =    1581.60 ms /    32 runs   (   49.42 ms per token,    20.23 tokens per second)
0.01.992.268 I llama_perf_context_print:       total time =    1600.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.006s
user	8m14.591s
sys	0m6.941s
