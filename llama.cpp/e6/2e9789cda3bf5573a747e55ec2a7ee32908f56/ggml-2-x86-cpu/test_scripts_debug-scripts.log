+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.644 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.759 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.949 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.035 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.064 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.800 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.473 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.483 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.484 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.485 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.488 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.489 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.490 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.491 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.493 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.499 I llama_model_loader: - type  f32:   37 tensors
0.00.196.503 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.586 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.695 I llm_load_vocab: special tokens cache size = 5
0.00.529.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.529.988 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.529.989 I llm_load_print_meta: arch             = gemma
0.00.529.990 I llm_load_print_meta: vocab type       = SPM
0.00.529.990 I llm_load_print_meta: n_vocab          = 256000
0.00.529.992 I llm_load_print_meta: n_merges         = 0
0.00.529.993 I llm_load_print_meta: vocab_only       = 0
0.00.529.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.529.994 I llm_load_print_meta: n_embd           = 2048
0.00.529.994 I llm_load_print_meta: n_layer          = 18
0.00.530.026 I llm_load_print_meta: n_head           = 8
0.00.530.033 I llm_load_print_meta: n_head_kv        = 1
0.00.530.034 I llm_load_print_meta: n_rot            = 256
0.00.530.034 I llm_load_print_meta: n_swa            = 0
0.00.530.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.530.040 I llm_load_print_meta: n_gqa            = 8
0.00.530.044 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.530.049 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.530.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.530.051 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.530.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.530.052 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.530.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.530.058 I llm_load_print_meta: n_ff             = 16384
0.00.530.059 I llm_load_print_meta: n_expert         = 0
0.00.530.059 I llm_load_print_meta: n_expert_used    = 0
0.00.530.060 I llm_load_print_meta: causal attn      = 1
0.00.530.060 I llm_load_print_meta: pooling type     = 0
0.00.530.060 I llm_load_print_meta: rope type        = 2
0.00.530.061 I llm_load_print_meta: rope scaling     = linear
0.00.530.063 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.530.063 I llm_load_print_meta: freq_scale_train = 1
0.00.530.063 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.530.064 I llm_load_print_meta: rope_finetuned   = unknown
0.00.530.064 I llm_load_print_meta: ssm_d_conv       = 0
0.00.530.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.530.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.530.065 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.530.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.530.067 I llm_load_print_meta: model type       = 2B
0.00.530.068 I llm_load_print_meta: model ftype      = Q8_0
0.00.530.068 I llm_load_print_meta: model params     = 2.51 B
0.00.530.070 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.530.070 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.530.071 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.530.071 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.530.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.530.072 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.530.072 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.530.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.530.073 I llm_load_print_meta: max token length = 93
0.00.530.240 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.729 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.629.737 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.629.738 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.629.739 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.629.739 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.629.740 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.635.397 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.404 I llama_new_context_with_model: n_batch    = 2048
0.00.635.404 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.405 I llama_new_context_with_model: flash_attn = 0
0.00.635.407 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.408 I llama_new_context_with_model: freq_scale = 1
0.00.664.353 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.395 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.512 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.912 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.918 I llama_new_context_with_model: graph nodes  = 601
0.00.665.919 I llama_new_context_with_model: graph splits = 1
0.00.665.935 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.977 I main: llama threadpool init, n_threads = 4
0.01.278.988 I 
0.01.279.081 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.085 I 
0.01.279.248 I sampler seed: 972779901
0.01.279.258 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.263 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.264 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the occasional troll. 

The server is running smoothly, but I am starting to feel overwhelmed by the constant influx of messages. 



0.14.789.783 I llama_perf_sampler_print:    sampling time =      48.22 ms /    33 runs   (    1.46 ms per token,   684.36 tokens per second)
0.14.789.811 I llama_perf_context_print:        load time =    1276.13 ms
0.14.789.813 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.789.814 I llama_perf_context_print:        eval time =   13429.88 ms /    32 runs   (  419.68 ms per token,     2.38 tokens per second)
0.14.789.815 I llama_perf_context_print:       total time =   13510.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.664 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.284 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.375 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.391 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.398 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.398 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.399 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.405 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.406 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.407 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.409 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.589 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.387 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.527 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.537 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.539 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.545 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.555 I llama_model_loader: - type  f32:   37 tensors
0.00.197.558 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.177 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.186 I llm_load_vocab: special tokens cache size = 5
0.00.531.694 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.752 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.753 I llm_load_print_meta: arch             = gemma
0.00.531.754 I llm_load_print_meta: vocab type       = SPM
0.00.531.755 I llm_load_print_meta: n_vocab          = 256000
0.00.531.757 I llm_load_print_meta: n_merges         = 0
0.00.531.758 I llm_load_print_meta: vocab_only       = 0
0.00.531.758 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.759 I llm_load_print_meta: n_embd           = 2048
0.00.531.759 I llm_load_print_meta: n_layer          = 18
0.00.531.792 I llm_load_print_meta: n_head           = 8
0.00.531.799 I llm_load_print_meta: n_head_kv        = 1
0.00.531.799 I llm_load_print_meta: n_rot            = 256
0.00.531.800 I llm_load_print_meta: n_swa            = 0
0.00.531.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.801 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.806 I llm_load_print_meta: n_gqa            = 8
0.00.531.811 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.816 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.817 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.819 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.820 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.820 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.821 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.826 I llm_load_print_meta: n_ff             = 16384
0.00.531.827 I llm_load_print_meta: n_expert         = 0
0.00.531.827 I llm_load_print_meta: n_expert_used    = 0
0.00.531.832 I llm_load_print_meta: causal attn      = 1
0.00.531.832 I llm_load_print_meta: pooling type     = 0
0.00.531.832 I llm_load_print_meta: rope type        = 2
0.00.531.833 I llm_load_print_meta: rope scaling     = linear
0.00.531.834 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.835 I llm_load_print_meta: freq_scale_train = 1
0.00.531.835 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.836 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.836 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.836 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.837 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.837 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.838 I llm_load_print_meta: model type       = 2B
0.00.531.839 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.839 I llm_load_print_meta: model params     = 2.51 B
0.00.531.840 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.841 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.843 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.844 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.846 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.846 I llm_load_print_meta: max token length = 93
0.00.532.020 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.627.676 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.633.483 I llama_new_context_with_model: n_ctx      = 8192
0.00.633.491 I llama_new_context_with_model: n_batch    = 2048
0.00.633.491 I llama_new_context_with_model: n_ubatch   = 512
0.00.633.492 I llama_new_context_with_model: flash_attn = 0
0.00.633.495 I llama_new_context_with_model: freq_base  = 10000.0
0.00.633.495 I llama_new_context_with_model: freq_scale = 1
0.00.664.075 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.120 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.583 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.589 I llama_new_context_with_model: graph nodes  = 601
0.00.665.589 I llama_new_context_with_model: graph splits = 1
0.00.665.605 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.750 I main: llama threadpool init, n_threads = 4
0.01.277.762 I 
0.01.277.851 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.852 I 
0.01.278.013 I sampler seed: 4058588135
0.01.278.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.030 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.278.030 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the air, but the only sound that truly resonated with her was the ticking of the clock.

The old woman's eyes held a

0.14.750.229 I llama_perf_sampler_print:    sampling time =      48.60 ms /    33 runs   (    1.47 ms per token,   678.96 tokens per second)
0.14.750.233 I llama_perf_context_print:        load time =    1274.85 ms
0.14.750.247 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.750.249 I llama_perf_context_print:        eval time =   13390.48 ms /    32 runs   (  418.45 ms per token,     2.39 tokens per second)
0.14.750.251 I llama_perf_context_print:       total time =   13472.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.610 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.547 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.743 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.829 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.849 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.855 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.856 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.858 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.872 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.878 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.881 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.086 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.087 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.091 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.094 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.095 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.097 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.100 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.108 I llama_model_loader: - type  f32:   37 tensors
0.00.197.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.696 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.703 I llm_load_vocab: special tokens cache size = 5
0.00.530.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.530.108 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.530.113 I llm_load_print_meta: arch             = gemma
0.00.530.114 I llm_load_print_meta: vocab type       = SPM
0.00.530.115 I llm_load_print_meta: n_vocab          = 256000
0.00.530.118 I llm_load_print_meta: n_merges         = 0
0.00.530.119 I llm_load_print_meta: vocab_only       = 0
0.00.530.120 I llm_load_print_meta: n_ctx_train      = 8192
0.00.530.121 I llm_load_print_meta: n_embd           = 2048
0.00.530.122 I llm_load_print_meta: n_layer          = 18
0.00.530.161 I llm_load_print_meta: n_head           = 8
0.00.530.171 I llm_load_print_meta: n_head_kv        = 1
0.00.530.171 I llm_load_print_meta: n_rot            = 256
0.00.530.172 I llm_load_print_meta: n_swa            = 0
0.00.530.173 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.173 I llm_load_print_meta: n_embd_head_v    = 256
0.00.530.179 I llm_load_print_meta: n_gqa            = 8
0.00.530.186 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.530.193 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.530.198 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.530.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.530.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.530.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.530.203 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.530.208 I llm_load_print_meta: n_ff             = 16384
0.00.530.209 I llm_load_print_meta: n_expert         = 0
0.00.530.210 I llm_load_print_meta: n_expert_used    = 0
0.00.530.211 I llm_load_print_meta: causal attn      = 1
0.00.530.212 I llm_load_print_meta: pooling type     = 0
0.00.530.215 I llm_load_print_meta: rope type        = 2
0.00.530.216 I llm_load_print_meta: rope scaling     = linear
0.00.530.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.530.219 I llm_load_print_meta: freq_scale_train = 1
0.00.530.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.530.220 I llm_load_print_meta: rope_finetuned   = unknown
0.00.530.220 I llm_load_print_meta: ssm_d_conv       = 0
0.00.530.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.530.222 I llm_load_print_meta: ssm_d_state      = 0
0.00.530.223 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.530.224 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.530.225 I llm_load_print_meta: model type       = 2B
0.00.530.229 I llm_load_print_meta: model ftype      = Q8_0
0.00.530.230 I llm_load_print_meta: model params     = 2.51 B
0.00.530.232 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.530.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.530.243 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.530.245 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.530.246 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.530.246 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.530.247 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.530.248 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.530.249 I llm_load_print_meta: max token length = 93
0.00.530.434 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.606.511 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.606.521 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.606.522 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.606.522 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.606.523 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.606.524 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.612.324 I llama_new_context_with_model: n_ctx      = 8192
0.00.612.332 I llama_new_context_with_model: n_batch    = 2048
0.00.612.332 I llama_new_context_with_model: n_ubatch   = 512
0.00.612.333 I llama_new_context_with_model: flash_attn = 0
0.00.612.336 I llama_new_context_with_model: freq_base  = 10000.0
0.00.612.336 I llama_new_context_with_model: freq_scale = 1
0.00.641.140 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.641.184 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.641.305 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.642.732 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.642.739 I llama_new_context_with_model: graph nodes  = 601
0.00.642.740 I llama_new_context_with_model: graph splits = 1
0.00.642.759 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.797 I main: llama threadpool init, n_threads = 4
0.01.290.809 I 
0.01.290.915 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.919 I 
0.01.291.088 I sampler seed: 480165892
0.01.291.099 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.105 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.291.106 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvled and distorted, a tapestry of sensory confusion. 

This is the effect of sensory overload, a common consequence of modern life, where stimulation from

0.14.812.667 I llama_perf_sampler_print:    sampling time =      48.51 ms /    33 runs   (    1.47 ms per token,   680.31 tokens per second)
0.14.812.671 I llama_perf_context_print:        load time =    1287.93 ms
0.14.812.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.812.688 I llama_perf_context_print:        eval time =   13440.90 ms /    32 runs   (  420.03 ms per token,     2.38 tokens per second)
0.14.812.689 I llama_perf_context_print:       total time =   13521.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.632 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.655 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.918 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.933 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.935 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.936 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.937 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.937 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.938 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.945 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.949 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.243 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.445 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.454 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.455 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.456 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.457 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.462 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.462 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.464 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.471 I llama_model_loader: - type  f32:   37 tensors
0.00.196.475 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.244 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.255 I llm_load_vocab: special tokens cache size = 5
0.00.532.660 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.532.711 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.532.713 I llm_load_print_meta: arch             = gemma
0.00.532.714 I llm_load_print_meta: vocab type       = SPM
0.00.532.714 I llm_load_print_meta: n_vocab          = 256000
0.00.532.716 I llm_load_print_meta: n_merges         = 0
0.00.532.717 I llm_load_print_meta: vocab_only       = 0
0.00.532.718 I llm_load_print_meta: n_ctx_train      = 8192
0.00.532.718 I llm_load_print_meta: n_embd           = 2048
0.00.532.718 I llm_load_print_meta: n_layer          = 18
0.00.532.749 I llm_load_print_meta: n_head           = 8
0.00.532.759 I llm_load_print_meta: n_head_kv        = 1
0.00.532.760 I llm_load_print_meta: n_rot            = 256
0.00.532.761 I llm_load_print_meta: n_swa            = 0
0.00.532.761 I llm_load_print_meta: n_embd_head_k    = 256
0.00.532.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.532.767 I llm_load_print_meta: n_gqa            = 8
0.00.532.772 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.532.778 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.532.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.532.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.532.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.532.782 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.532.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.532.788 I llm_load_print_meta: n_ff             = 16384
0.00.532.789 I llm_load_print_meta: n_expert         = 0
0.00.532.790 I llm_load_print_meta: n_expert_used    = 0
0.00.532.790 I llm_load_print_meta: causal attn      = 1
0.00.532.791 I llm_load_print_meta: pooling type     = 0
0.00.532.791 I llm_load_print_meta: rope type        = 2
0.00.532.792 I llm_load_print_meta: rope scaling     = linear
0.00.532.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.532.795 I llm_load_print_meta: freq_scale_train = 1
0.00.532.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.532.795 I llm_load_print_meta: rope_finetuned   = unknown
0.00.532.796 I llm_load_print_meta: ssm_d_conv       = 0
0.00.532.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.532.797 I llm_load_print_meta: ssm_d_state      = 0
0.00.532.797 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.532.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.532.799 I llm_load_print_meta: model type       = 2B
0.00.532.799 I llm_load_print_meta: model ftype      = Q8_0
0.00.532.800 I llm_load_print_meta: model params     = 2.51 B
0.00.532.801 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.532.802 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.532.802 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.532.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.532.803 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.532.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.532.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.532.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.532.805 I llm_load_print_meta: max token length = 93
0.00.532.974 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.604.278 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.604.287 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.609.878 I llama_new_context_with_model: n_ctx      = 8192
0.00.609.885 I llama_new_context_with_model: n_batch    = 2048
0.00.609.885 I llama_new_context_with_model: n_ubatch   = 512
0.00.609.885 I llama_new_context_with_model: flash_attn = 0
0.00.609.888 I llama_new_context_with_model: freq_base  = 10000.0
0.00.609.888 I llama_new_context_with_model: freq_scale = 1
0.00.638.435 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.638.477 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.638.603 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.639.962 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.639.968 I llama_new_context_with_model: graph nodes  = 601
0.00.639.968 I llama_new_context_with_model: graph splits = 1
0.00.639.985 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.253.224 I main: llama threadpool init, n_threads = 4
0.01.253.234 I 
0.01.253.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.253.327 I 
0.01.253.491 I sampler seed: 3590854981
0.01.253.503 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.253.508 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.253.508 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneurors in a dark forest, whispering secrets to the trees and the ground.

This sounds like a magical scene from a fantasy novel, but it's

0.14.831.758 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.57 tokens per second)
0.14.831.761 I llama_perf_context_print:        load time =    1250.38 ms
0.14.831.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.831.764 I llama_perf_context_print:        eval time =   13497.90 ms /    32 runs   (  421.81 ms per token,     2.37 tokens per second)
0.14.831.765 I llama_perf_context_print:       total time =   13578.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.705s
user	3m48.715s
sys	0m9.414s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3805 (e62e9789)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199660.81 ms
main:    total time = 199660.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.683 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.024.618 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.896 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.907 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.911 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.916 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.917 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.918 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.919 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.919 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.920 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.926 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.927 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.930 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.931 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.932 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.347 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.434 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.435 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.436 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.444 I llama_model_loader: - type  f32:   37 tensors
0.00.196.447 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.448 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.934 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.925 I llm_load_vocab: special tokens cache size = 5
0.00.524.172 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.223 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.224 I llm_load_print_meta: arch             = gemma
0.00.524.225 I llm_load_print_meta: vocab type       = SPM
0.00.524.226 I llm_load_print_meta: n_vocab          = 256000
0.00.524.228 I llm_load_print_meta: n_merges         = 0
0.00.524.229 I llm_load_print_meta: vocab_only       = 0
0.00.524.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.230 I llm_load_print_meta: n_embd           = 2048
0.00.524.230 I llm_load_print_meta: n_layer          = 18
0.00.524.263 I llm_load_print_meta: n_head           = 8
0.00.524.269 I llm_load_print_meta: n_head_kv        = 1
0.00.524.270 I llm_load_print_meta: n_rot            = 256
0.00.524.270 I llm_load_print_meta: n_swa            = 0
0.00.524.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.297 I llm_load_print_meta: n_gqa            = 8
0.00.524.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.312 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.312 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.319 I llm_load_print_meta: n_ff             = 16384
0.00.524.320 I llm_load_print_meta: n_expert         = 0
0.00.524.321 I llm_load_print_meta: n_expert_used    = 0
0.00.524.321 I llm_load_print_meta: causal attn      = 1
0.00.524.322 I llm_load_print_meta: pooling type     = 0
0.00.524.323 I llm_load_print_meta: rope type        = 2
0.00.524.323 I llm_load_print_meta: rope scaling     = linear
0.00.524.325 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.326 I llm_load_print_meta: freq_scale_train = 1
0.00.524.326 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.327 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.327 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.328 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.330 I llm_load_print_meta: model type       = 2B
0.00.524.331 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.524.332 I llm_load_print_meta: model params     = 2.51 B
0.00.524.332 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.524.333 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.339 I llm_load_print_meta: max token length = 93
0.00.524.523 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.583.737 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.583.745 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.583.746 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.583.747 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.583.747 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.583.748 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.589.199 I llama_new_context_with_model: n_ctx      = 8192
0.00.589.206 I llama_new_context_with_model: n_batch    = 2048
0.00.589.206 I llama_new_context_with_model: n_ubatch   = 512
0.00.589.207 I llama_new_context_with_model: flash_attn = 0
0.00.589.209 I llama_new_context_with_model: freq_base  = 10000.0
0.00.589.210 I llama_new_context_with_model: freq_scale = 1
0.00.617.733 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.617.774 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.617.887 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.619.219 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.619.225 I llama_new_context_with_model: graph nodes  = 601
0.00.619.226 I llama_new_context_with_model: graph splits = 1
0.00.619.242 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.206.999 I main: llama threadpool init, n_threads = 4
0.01.207.013 I 
0.01.207.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.207.113 I 
0.01.207.281 I sampler seed: 3611921200
0.01.207.291 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.207.296 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.207.297 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded with a jolt. His eyes snapped open, wide with confusion, as the world around him dissolved into a kaleidoscope of swirling colors and sounds.



0.12.230.076 I llama_perf_sampler_print:    sampling time =      48.13 ms /    33 runs   (    1.46 ms per token,   685.59 tokens per second)
0.12.230.080 I llama_perf_context_print:        load time =    1204.11 ms
0.12.230.081 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.230.097 I llama_perf_context_print:        eval time =   10942.06 ms /    32 runs   (  341.94 ms per token,     2.92 tokens per second)
0.12.230.099 I llama_perf_context_print:       total time =   11023.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3805 (e62e9789)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199934.40 ms
main:    total time = 199934.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.606 I build: 3805 (e62e9789) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.803 I main: llama backend init
0.00.002.734 I main: load the model and apply lora adapter, if any
0.00.024.998 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.104 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.105 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.110 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.111 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.113 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.114 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.120 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.757 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.764 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.765 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.769 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.773 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.781 I llama_model_loader: - type  f32:   37 tensors
0.00.196.785 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.785 I llama_model_loader: - type q6_K:   19 tensors
0.00.482.109 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.093 I llm_load_vocab: special tokens cache size = 5
0.00.541.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.988 I llm_load_print_meta: arch             = gemma
0.00.541.989 I llm_load_print_meta: vocab type       = SPM
0.00.541.990 I llm_load_print_meta: n_vocab          = 256000
0.00.541.993 I llm_load_print_meta: n_merges         = 0
0.00.541.993 I llm_load_print_meta: vocab_only       = 0
0.00.541.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.994 I llm_load_print_meta: n_embd           = 2048
0.00.541.994 I llm_load_print_meta: n_layer          = 18
0.00.542.028 I llm_load_print_meta: n_head           = 8
0.00.542.035 I llm_load_print_meta: n_head_kv        = 1
0.00.542.035 I llm_load_print_meta: n_rot            = 256
0.00.542.036 I llm_load_print_meta: n_swa            = 0
0.00.542.036 I llm_load_print_meta: n_embd_head_k    = 256
0.00.542.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.542.041 I llm_load_print_meta: n_gqa            = 8
0.00.542.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.542.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.542.073 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.542.074 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.542.075 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.542.075 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.542.076 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.542.081 I llm_load_print_meta: n_ff             = 16384
0.00.542.082 I llm_load_print_meta: n_expert         = 0
0.00.542.082 I llm_load_print_meta: n_expert_used    = 0
0.00.542.091 I llm_load_print_meta: causal attn      = 1
0.00.542.092 I llm_load_print_meta: pooling type     = 0
0.00.542.099 I llm_load_print_meta: rope type        = 2
0.00.542.107 I llm_load_print_meta: rope scaling     = linear
0.00.542.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.542.109 I llm_load_print_meta: freq_scale_train = 1
0.00.542.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.542.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.542.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.542.115 I llm_load_print_meta: ssm_d_inner      = 0
0.00.542.115 I llm_load_print_meta: ssm_d_state      = 0
0.00.542.115 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.542.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.542.123 I llm_load_print_meta: model type       = 2B
0.00.542.127 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.542.128 I llm_load_print_meta: model params     = 2.51 B
0.00.542.129 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.542.129 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.542.130 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.542.130 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.542.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.542.131 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.542.131 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.542.132 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.542.132 I llm_load_print_meta: max token length = 93
0.00.542.307 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.465 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.606.095 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.103 I llama_new_context_with_model: n_batch    = 2048
0.00.606.103 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.104 I llama_new_context_with_model: flash_attn = 0
0.00.606.108 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.109 I llama_new_context_with_model: freq_scale = 1
0.00.635.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.927 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.636.040 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.637.379 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.637.385 I llama_new_context_with_model: graph nodes  = 601
0.00.637.386 I llama_new_context_with_model: graph splits = 1
0.00.637.404 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.217.408 I main: llama threadpool init, n_threads = 4
0.01.217.419 I 
0.01.217.508 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.217.512 I 
0.01.217.678 I sampler seed: 3206430343
0.01.217.689 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.217.695 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.217.696 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally and incoherently. [end of text]


0.03.963.809 I llama_perf_sampler_print:    sampling time =      12.20 ms /     9 runs   (    1.36 ms per token,   737.52 tokens per second)
0.03.963.813 I llama_perf_context_print:        load time =    1214.60 ms
0.03.963.814 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.963.816 I llama_perf_context_print:        eval time =    2724.98 ms /     8 runs   (  340.62 ms per token,     2.94 tokens per second)
0.03.963.827 I llama_perf_context_print:       total time =    2746.41 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m58.653s
user	49m48.549s
sys	0m6.290s
