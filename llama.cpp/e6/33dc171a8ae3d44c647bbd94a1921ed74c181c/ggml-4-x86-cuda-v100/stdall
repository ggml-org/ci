Looking in indexes: https://pypi.org/simple, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu, https://download.pytorch.org/whl/cpu
Requirement already satisfied: numpy~=1.26.4 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 1)) (1.26.4)
Requirement already satisfied: sentencepiece~=0.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 2)) (0.2.0)
Requirement already satisfied: transformers<5.0.0,>=4.45.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.45.1)
Requirement already satisfied: gguf>=0.1.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 4)) (0.15.0)
Requirement already satisfied: protobuf<5.0.0,>=4.21.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 5)) (4.25.3)
Requirement already satisfied: torch~=2.2.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from -r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.2)
Requirement already satisfied: safetensors>=0.4.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.4.2)
Requirement already satisfied: requests in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.31.0)
Requirement already satisfied: filelock in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.13.1)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (6.0.1)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (4.66.2)
Requirement already satisfied: regex!=2019.12.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2023.12.25)
Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.25.1)
Requirement already satisfied: tokenizers<0.21,>=0.20 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (0.20.0)
Requirement already satisfied: packaging>=20.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (23.2)
Requirement already satisfied: fsspec in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2024.2.0)
Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.4.5.107)
Requirement already satisfied: triton==2.2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.2.0)
Requirement already satisfied: networkx in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.2.1)
Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (8.9.2.26)
Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.0.106)
Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (11.0.2.54)
Requirement already satisfied: typing-extensions>=4.8.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (4.9.0)
Requirement already satisfied: jinja2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (3.1.3)
Requirement already satisfied: sympy in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.12)
Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.3.1)
Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (10.3.2.106)
Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.19.3)
Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.1.105)
Requirement already satisfied: nvidia-nvjitlink-cu12 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from nvidia-cusolver-cu12==11.4.5.107->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (12.3.101)
Requirement already satisfied: MarkupSafe>=2.0 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from jinja2->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (2.1.5)
Requirement already satisfied: urllib3<3,>=1.21.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2.2.1)
Requirement already satisfied: certifi>=2017.4.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (2024.2.2)
Requirement already satisfied: idna<4,>=2.5 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.6)
Requirement already satisfied: charset-normalizer<4,>=2 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from requests->transformers<5.0.0,>=4.45.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_legacy_llama.txt (line 3)) (3.3.2)
Requirement already satisfied: mpmath>=0.19 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from sympy->torch~=2.2.1->-r /home/ggml/work/llama.cpp/./requirements/requirements-convert_hf_to_gguf.txt (line 3)) (1.3.0)
Obtaining file:///home/ggml/work/llama.cpp/gguf-py
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.17 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.15.0) (1.26.4)
Requirement already satisfied: sentencepiece<=0.2.0,>=0.1.98 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.15.0) (0.2.0)
Requirement already satisfied: pyyaml>=5.1 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.15.0) (6.0.1)
Requirement already satisfied: tqdm>=4.27 in /mnt/llama.cpp/venv/lib/python3.10/site-packages (from gguf==0.15.0) (4.66.2)
Building wheels for collected packages: gguf
  Building editable for gguf (pyproject.toml): started
  Building editable for gguf (pyproject.toml): finished with status 'done'
  Created wheel for gguf: filename=gguf-0.15.0-py3-none-any.whl size=3463 sha256=10c32970a6e7e43d1565f30e5877134e711a09a1c8a63176f923d7cc41855163
  Stored in directory: /tmp/pip-ephem-wheel-cache-fmsee0rp/wheels/a3/4c/52/c5934ad001d1a70ca5434f11ddc622cad9c0a484e9bf6feda3
Successfully built gguf
Installing collected packages: gguf
  Attempting uninstall: gguf
    Found existing installation: gguf 0.15.0
    Uninstalling gguf-0.15.0:
      Successfully uninstalled gguf-0.15.0
Successfully installed gguf-0.15.0
+ gg_run_ctest_debug
+ cd /home/ggml/work/llama.cpp
+ rm -rf build-ci-debug
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_debug.log
+ mkdir build-ci-debug
+ cd build-ci-debug
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_debug-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Debug -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- x86 detected
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-debug

real	0m9.341s
user	0m7.551s
sys	0m1.790s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_debug-make.log
++ nproc
+ make -j6
[  0%] Generating build details from Git
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
-- Found Git: /usr/bin/git (found version "2.34.1") 
[  3%] Built target sha1
[  3%] Built target xxhash
[  3%] Built target sha256
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/gguf.cpp.o
[  5%] Linking CXX shared library ../../bin/libggml-base.so
[  5%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  5%] Built target build_info
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Linking CXX shared library ../../bin/libggml-cpu.so
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-wmma-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/gla.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 21%] Built target ggml-cpu
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb16.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb32.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb64.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb8.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 34%] Linking CUDA shared library ../../../bin/libggml-cuda.so
[ 34%] Built target ggml-cuda
[ 35%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 35%] Linking CXX shared library ../../bin/libggml.so
[ 35%] Built target ggml
[ 35%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-adapter.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-arch.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-batch.cpp.o
[ 37%] Linking CXX executable ../../bin/llama-gguf
[ 37%] Linking CXX executable ../../bin/llama-gguf-hash
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-chat.cpp.o
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-context.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-graph.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-hparams.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-impl.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-kv-cache.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-mmap.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model-loader.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-quant.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Built target llama-gguf-hash
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 42%] Built target llama-gguf
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library ../bin/libllama.so
[ 43%] Built target llama
[ 44%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 45%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 45%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 45%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 45%] Linking C executable ../bin/test-c
[ 46%] Linking CXX executable ../../bin/llama-simple
[ 46%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 47%] Building CXX object common/CMakeFiles/common.dir/chat.cpp.o
[ 47%] Built target llava
[ 47%] Linking CXX static library libllava_static.a
[ 47%] Built target test-c
[ 47%] Linking CXX shared library ../../bin/libllava_shared.so
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 47%] Built target llava_static
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/llguidance.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Built target llama-simple-chat
[ 50%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 50%] Built target llama-simple
[ 50%] Linking CXX static library libcommon.a
[ 50%] Built target llava_shared
[ 50%] Built target common
[ 50%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-tokenizer-0
[ 54%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 54%] Linking CXX executable ../bin/test-sampling
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-grammar-integration
[ 55%] Built target test-llama-grammar
[ 55%] Built target test-sampling
[ 55%] Building CXX object tests/CMakeFiles/test-chat.dir/test-chat.cpp.o
[ 55%] Built target test-grammar-parser
[ 56%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 56%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 56%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 57%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Building CXX object tests/CMakeFiles/test-chat.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-chat
[ 58%] Built target test-tokenizer-0
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 59%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 59%] Built target test-grammar-integration
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 60%] Linking CXX executable ../bin/test-log
[ 60%] Built target test-tokenizer-1-bpe
[ 60%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 60%] Built target test-log
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 62%] Linking CXX executable ../bin/test-arg-parser
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-chat-template
[ 62%] Built target test-json-schema-to-grammar
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/test-gguf.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/get-model.cpp.o
[ 63%] Linking CXX executable ../bin/test-gguf
[ 63%] Built target test-gguf
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-backend-ops
[ 64%] Built target test-chat
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-model-load-cancel
[ 65%] Built target test-backend-ops
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-model-load-cancel
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 67%] Linking CXX executable ../bin/test-barrier
[ 67%] Built target test-autorelease
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 67%] Built target test-barrier
[ 68%] Linking CXX executable ../bin/test-quantize-fns
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 69%] Linking CXX executable ../bin/test-quantize-perf
[ 69%] Built target test-quantize-fns
[ 69%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 70%] Built target test-quantize-perf
[ 70%] Linking CXX executable ../bin/test-rope
[ 70%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-batched-bench
[ 71%] Built target test-tokenizer-1-spm
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-batched
[ 72%] Built target test-rope
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-embedding
[ 73%] Built target test-arg-parser
[ 74%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-eval-callback
[ 74%] Built target test-chat-template
[ 74%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 74%] Built target llama-gbnf-validator
[ 75%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-gguf-split
[ 75%] Linking CXX executable ../../bin/llama-quantize-stats
[ 75%] Built target llama-gguf-split
[ 76%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-gritlm
[ 76%] Built target llama-quantize-stats
[ 76%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-imatrix
[ 77%] Built target llama-batched-bench
[ 77%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 77%] Built target llama-batched
[ 77%] Linking CXX executable ../../bin/llama-infill
[ 77%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Built target llama-embedding
[ 77%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 77%] Built target llama-eval-callback
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-lookup
[ 78%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-lookup-create
[ 79%] Built target llama-bench
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 80%] Built target llama-imatrix
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookup-stats
[ 80%] Built target llama-infill
[ 81%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 81%] Built target llama-lookup-merge
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 82%] Built target llama-lookahead
[ 82%] Linking CXX executable ../../bin/llama-parallel
[ 82%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-passkey
[ 82%] Built target llama-lookup
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-perplexity
[ 83%] Built target llama-lookup-create
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-quantize
[ 84%] Built target llama-passkey
[ 84%] Built target llama-parallel
[ 84%] Built target llama-lookup-stats
[ 84%] Generating loading.html.hpp
[ 84%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 84%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 84%] Generating index.html.gz.hpp
[ 85%] Linking CXX executable ../../bin/llama-retrieval
[ 86%] Linking CXX executable ../../bin/llama-save-load-state
[ 86%] Built target llama-cli
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/linenoise.cpp/linenoise.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-run
[ 87%] Built target llama-perplexity
[ 87%] Built target llama-quantize
[ 88%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 88%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-speculative
[ 89%] Linking CXX executable ../../bin/llama-speculative-simple
[ 89%] Built target llama-retrieval
[ 89%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tokenize
[ 90%] Built target llama-save-load-state
[ 90%] Building CXX object examples/tts/CMakeFiles/llama-tts.dir/tts.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tts
[ 90%] Built target llama-run
[ 91%] Building CXX object examples/gen-docs/CMakeFiles/llama-gen-docs.dir/gen-docs.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-gen-docs
[ 91%] Built target llama-speculative-simple
[ 91%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 93%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[ 93%] Built target llama-speculative
[ 93%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-cvector-generator
[ 93%] Linking CXX executable ../../bin/llama-server
[ 93%] Built target llama-tokenize
[ 93%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-export-lora
[ 94%] Built target llama-gen-docs
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-llava-cli
[ 95%] Built target llama-tts
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 96%] Built target llama-convert-llama2c-to-ggml
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-qwen2vl-cli.dir/qwen2vl-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-qwen2vl-cli
[ 97%] Built target llama-cvector-generator
[ 97%] Building CXX object examples/llava/CMakeFiles/llama-llava-clip-quantize-cli.dir/clip-quantize-cli.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-llava-clip-quantize-cli
[ 98%] Built target llama-export-lora
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Built target llama-vdot
[100%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[100%] Linking CXX executable ../../bin/llama-q8dot
[100%] Built target llama-q8dot
[100%] Built target llama-llava-clip-quantize-cli
[100%] Built target llama-llava-cli
[100%] Built target llama-minicpmv-cli
[100%] Built target llama-server
[100%] Built target llama-qwen2vl-cli

real	0m17.471s
user	1m8.558s
sys	0m11.898s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_debug-ctest.log
+ ctest --output-on-failure -L main -E test-opt
Test project /home/ggml/work/llama.cpp/build-ci-debug
      Start  1: test-tokenizer-0-bert-bge
 1/29 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.72 sec
      Start  2: test-tokenizer-0-command-r
 2/29 Test  #2: test-tokenizer-0-command-r ........   Passed    3.58 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/29 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.91 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/29 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    1.69 sec
      Start  5: test-tokenizer-0-falcon
 5/29 Test  #5: test-tokenizer-0-falcon ...........   Passed    1.23 sec
      Start  6: test-tokenizer-0-gpt-2
 6/29 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    1.05 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/29 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    2.50 sec
      Start  8: test-tokenizer-0-llama-spm
 8/29 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.69 sec
      Start  9: test-tokenizer-0-mpt
 9/29 Test  #9: test-tokenizer-0-mpt ..............   Passed    1.07 sec
      Start 10: test-tokenizer-0-phi-3
10/29 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.70 sec
      Start 11: test-tokenizer-0-qwen2
11/29 Test #11: test-tokenizer-0-qwen2 ............   Passed    2.34 sec
      Start 12: test-tokenizer-0-refact
12/29 Test #12: test-tokenizer-0-refact ...........   Passed    1.07 sec
      Start 13: test-tokenizer-0-starcoder
13/29 Test #13: test-tokenizer-0-starcoder ........   Passed    1.11 sec
      Start 14: test-sampling
14/29 Test #14: test-sampling .....................   Passed    8.10 sec
      Start 15: test-grammar-parser
15/29 Test #15: test-grammar-parser ...............   Passed    0.04 sec
      Start 16: test-grammar-integration
16/29 Test #16: test-grammar-integration ..........   Passed    0.10 sec
      Start 17: test-llama-grammar
17/29 Test #17: test-llama-grammar ................   Passed    0.04 sec
      Start 18: test-chat
18/29 Test #18: test-chat .........................   Passed   10.15 sec
      Start 19: test-json-schema-to-grammar
19/29 Test #19: test-json-schema-to-grammar .......   Passed    2.75 sec
      Start 20: test-tokenizer-1-llama-spm
20/29 Test #20: test-tokenizer-1-llama-spm ........   Passed    2.59 sec
      Start 21: test-log
21/29 Test #21: test-log ..........................   Passed    0.03 sec
      Start 22: test-arg-parser
22/29 Test #22: test-arg-parser ...................   Passed    0.33 sec
      Start 23: test-chat-template
23/29 Test #23: test-chat-template ................   Passed    1.73 sec
      Start 24: test-gguf
24/29 Test #24: test-gguf .........................   Passed    1.27 sec
      Start 25: test-backend-ops
25/29 Test #25: test-backend-ops ..................   Passed  208.06 sec
      Start 28: test-barrier
26/29 Test #28: test-barrier ......................   Passed    2.60 sec
      Start 29: test-quantize-fns
27/29 Test #29: test-quantize-fns .................   Passed   35.48 sec
      Start 30: test-quantize-perf
28/29 Test #30: test-quantize-perf ................   Passed    0.35 sec
      Start 31: test-rope
29/29 Test #31: test-rope .........................   Passed    0.12 sec

100% tests passed, 0 tests failed out of 29

Label Time Summary:
main    = 292.41 sec*proc (29 tests)

Total Test time (real) = 292.89 sec

real	4m52.922s
user	11m53.170s
sys	0m15.983s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_release
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_release.log
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ gg_check_build_requirements
+ command -v cmake
+ command -v make
+ command -v ctest
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_release-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- x86 detected
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.334s
user	0m7.430s
sys	0m1.878s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_release-make.log
++ nproc
+ make -j6
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  1%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Built target sha256
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target sha1
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/gguf.cpp.o
[  5%] Linking CXX shared library ../../bin/libggml-base.so
[  5%] Built target build_info
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 10%] Linking CXX shared library ../../bin/libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-wmma-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/gla.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 20%] Built target ggml-cpu
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb32.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb16.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb64.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb8.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 34%] Linking CUDA shared library ../../../bin/libggml-cuda.so
[ 34%] Built target ggml-cuda
[ 35%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 35%] Linking CXX shared library ../../bin/libggml.so
[ 35%] Built target ggml
[ 35%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 35%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-adapter.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-arch.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-batch.cpp.o
[ 37%] Linking CXX executable ../../bin/llama-gguf
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-chat.cpp.o
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-context.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 39%] Linking CXX executable ../../bin/llama-gguf-hash
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-graph.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-hparams.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-impl.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-kv-cache.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-mmap.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model-loader.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-quant.cpp.o
[ 41%] Built target llama-gguf-hash
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 42%] Built target llama-gguf
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library ../bin/libllama.so
[ 43%] Built target llama
[ 44%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 45%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 45%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 45%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 45%] Linking C executable ../bin/test-c
[ 46%] Linking CXX executable ../../bin/llama-simple
[ 46%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 47%] Building CXX object common/CMakeFiles/common.dir/chat.cpp.o
[ 47%] Built target llava
[ 47%] Built target test-c
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 47%] Linking CXX static library libllava_static.a
[ 47%] Linking CXX shared library ../../bin/libllava_shared.so
[ 47%] Built target llava_static
[ 47%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/llguidance.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 49%] Built target llama-simple
[ 49%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 50%] Built target llama-simple-chat
[ 50%] Linking CXX static library libcommon.a
[ 50%] Built target llava_shared
[ 50%] Built target common
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-tokenizer-0
[ 53%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-grammar-parser
[ 54%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Linking CXX executable ../bin/test-grammar-integration
[ 55%] Linking CXX executable ../bin/test-sampling
[ 55%] Built target test-grammar-parser
[ 55%] Built target test-llama-grammar
[ 55%] Building CXX object tests/CMakeFiles/test-chat.dir/test-chat.cpp.o
[ 55%] Built target test-sampling
[ 56%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 56%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-chat.dir/get-model.cpp.o
[ 57%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 58%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 58%] Linking CXX executable ../bin/test-chat
[ 58%] Built target test-tokenizer-0
[ 59%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 59%] Built target test-grammar-integration
[ 59%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 60%] Linking CXX executable ../bin/test-log
[ 60%] Built target test-tokenizer-1-bpe
[ 60%] Built target test-log
[ 60%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 61%] Built target test-json-schema-to-grammar
[ 62%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/test-gguf.cpp.o
[ 63%] Linking CXX executable ../bin/test-arg-parser
[ 63%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 63%] Built target test-chat
[ 63%] Linking CXX executable ../bin/test-chat-template
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/get-model.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Linking CXX executable ../bin/test-gguf
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-backend-ops
[ 64%] Built target test-tokenizer-1-spm
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-model-load-cancel
[ 65%] Built target test-gguf
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-backend-ops
[ 66%] Built target test-model-load-cancel
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 67%] Linking CXX executable ../bin/test-barrier
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 68%] Linking CXX executable ../bin/test-quantize-fns
[ 68%] Built target test-arg-parser
[ 68%] Built target test-autorelease
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 68%] Built target test-chat-template
[ 68%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 68%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 70%] Linking CXX executable ../bin/test-quantize-perf
[ 71%] Linking CXX executable ../../bin/llama-batched-bench
[ 71%] Linking CXX executable ../bin/test-rope
[ 71%] Built target test-barrier
[ 71%] Built target test-quantize-fns
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-batched
[ 73%] Linking CXX executable ../../bin/llama-embedding
[ 73%] Built target test-quantize-perf
[ 74%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-eval-callback
[ 74%] Built target test-rope
[ 74%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 74%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 74%] Built target llama-batched-bench
[ 75%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-gguf-split
[ 75%] Built target llama-batched
[ 76%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 76%] Built target llama-gbnf-validator
[ 76%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 76%] Built target llama-embedding
[ 76%] Linking CXX executable ../../bin/llama-gritlm
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-imatrix
[ 77%] Linking CXX executable ../../bin/llama-infill
[ 77%] Built target llama-eval-callback
[ 77%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Built target llama-gguf-split
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 77%] Built target llama-gritlm
[ 77%] Built target llama-imatrix
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 79%] Built target llama-infill
[ 79%] Linking CXX executable ../../bin/llama-lookup
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-lookup-create
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 80%] Built target llama-bench
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Built target llama-lookahead
[ 80%] Linking CXX executable ../../bin/llama-lookup-stats
[ 81%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 81%] Built target llama-lookup-merge
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-parallel
[ 82%] Built target llama-lookup
[ 82%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-passkey
[ 82%] Built target llama-lookup-create
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Built target llama-lookup-stats
[ 83%] Linking CXX executable ../../bin/llama-perplexity
[ 83%] Built target llama-cli
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 83%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 85%] Linking CXX executable ../../bin/llama-retrieval
[ 85%] Linking CXX executable ../../bin/llama-quantize
[ 85%] Built target llama-parallel
[ 85%] Generating loading.html.hpp
[ 85%] Generating index.html.gz.hpp
[ 85%] Built target llama-passkey
[ 85%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-save-load-state
[ 86%] Built target llama-perplexity
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/linenoise.cpp/linenoise.cpp.o
[ 86%] Built target llama-quantize
[ 87%] Linking CXX executable ../../bin/llama-run
[ 88%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 88%] Built target llama-retrieval
[ 88%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-speculative
[ 89%] Linking CXX executable ../../bin/llama-speculative-simple
[ 89%] Built target llama-save-load-state
[ 89%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tokenize
[ 90%] Built target llama-run
[ 90%] Building CXX object examples/tts/CMakeFiles/llama-tts.dir/tts.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tts
[ 90%] Built target llama-speculative-simple
[ 91%] Building CXX object examples/gen-docs/CMakeFiles/llama-gen-docs.dir/gen-docs.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-gen-docs
[ 91%] Built target llama-speculative
[ 91%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 92%] Built target llama-tokenize
[ 92%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-cvector-generator
[ 92%] Built target llama-tts
[ 92%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-export-lora
[ 93%] Built target llama-gen-docs
[ 94%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-llava-cli
[ 94%] Built target llama-convert-llama2c-to-ggml
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 95%] Built target llama-cvector-generator
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-qwen2vl-cli.dir/qwen2vl-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-qwen2vl-cli
[ 96%] Built target llama-export-lora
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-llava-clip-quantize-cli.dir/clip-quantize-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-llava-clip-quantize-cli
[ 97%] Built target llama-llava-cli
[ 98%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Built target llama-minicpmv-cli
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-vdot
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-llava-clip-quantize-cli
[ 99%] Built target llama-qwen2vl-cli
[ 99%] Built target llama-vdot
[ 99%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server
[100%] Linking CXX executable ../../bin/llama-quantize-stats
[100%] Built target llama-quantize-stats

real	0m11.800s
user	0m26.735s
sys	0m4.655s
+ '[' -z ']'
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_release-ctest.log
+ ctest --output-on-failure -L main
Test project /home/ggml/work/llama.cpp/build-ci-release
      Start  1: test-tokenizer-0-bert-bge
 1/29 Test  #1: test-tokenizer-0-bert-bge .........   Passed    0.58 sec
      Start  2: test-tokenizer-0-command-r
 2/29 Test  #2: test-tokenizer-0-command-r ........   Passed    1.18 sec
      Start  3: test-tokenizer-0-deepseek-coder
 3/29 Test  #3: test-tokenizer-0-deepseek-coder ...   Passed    0.58 sec
      Start  4: test-tokenizer-0-deepseek-llm
 4/29 Test  #4: test-tokenizer-0-deepseek-llm .....   Passed    0.75 sec
      Start  5: test-tokenizer-0-falcon
 5/29 Test  #5: test-tokenizer-0-falcon ...........   Passed    0.64 sec
      Start  6: test-tokenizer-0-gpt-2
 6/29 Test  #6: test-tokenizer-0-gpt-2 ............   Passed    0.60 sec
      Start  7: test-tokenizer-0-llama-bpe
 7/29 Test  #7: test-tokenizer-0-llama-bpe ........   Passed    0.91 sec
      Start  8: test-tokenizer-0-llama-spm
 8/29 Test  #8: test-tokenizer-0-llama-spm ........   Passed    0.58 sec
      Start  9: test-tokenizer-0-mpt
 9/29 Test  #9: test-tokenizer-0-mpt ..............   Passed    0.62 sec
      Start 10: test-tokenizer-0-phi-3
10/29 Test #10: test-tokenizer-0-phi-3 ............   Passed    0.57 sec
      Start 11: test-tokenizer-0-qwen2
11/29 Test #11: test-tokenizer-0-qwen2 ............   Passed    0.87 sec
      Start 12: test-tokenizer-0-refact
12/29 Test #12: test-tokenizer-0-refact ...........   Passed    0.61 sec
      Start 13: test-tokenizer-0-starcoder
13/29 Test #13: test-tokenizer-0-starcoder ........   Passed    0.62 sec
      Start 14: test-sampling
14/29 Test #14: test-sampling .....................   Passed    1.44 sec
      Start 15: test-grammar-parser
15/29 Test #15: test-grammar-parser ...............   Passed    0.04 sec
      Start 16: test-grammar-integration
16/29 Test #16: test-grammar-integration ..........   Passed    0.05 sec
      Start 17: test-llama-grammar
17/29 Test #17: test-llama-grammar ................   Passed    0.04 sec
      Start 18: test-chat
18/29 Test #18: test-chat .........................   Passed    0.80 sec
      Start 19: test-json-schema-to-grammar
19/29 Test #19: test-json-schema-to-grammar .......   Passed    2.69 sec
      Start 20: test-tokenizer-1-llama-spm
20/29 Test #20: test-tokenizer-1-llama-spm ........   Passed    0.80 sec
      Start 21: test-log
21/29 Test #21: test-log ..........................   Passed    0.02 sec
      Start 22: test-arg-parser
22/29 Test #22: test-arg-parser ...................   Passed    0.24 sec
      Start 23: test-chat-template
23/29 Test #23: test-chat-template ................   Passed    0.18 sec
      Start 24: test-gguf
24/29 Test #24: test-gguf .........................   Passed    0.84 sec
      Start 25: test-backend-ops
25/29 Test #25: test-backend-ops ..................   Passed   45.45 sec
      Start 28: test-barrier
26/29 Test #28: test-barrier ......................   Passed    0.42 sec
      Start 29: test-quantize-fns
27/29 Test #29: test-quantize-fns .................   Passed   18.32 sec
      Start 30: test-quantize-perf
28/29 Test #30: test-quantize-perf ................   Passed    0.11 sec
      Start 31: test-rope
29/29 Test #31: test-rope .........................   Passed    0.09 sec

100% tests passed, 0 tests failed out of 29

Label Time Summary:
main    =  80.65 sec*proc (29 tests)

Total Test time (real) =  80.67 sec

real	1m20.703s
user	1m42.040s
sys	0m13.211s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_embd_bge_small
+ cd /home/ggml/work/llama.cpp
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/embd_bge_small.log
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:02 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:02 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer.json [711396/711396] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:03 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/tokenizer_config.json [366/366] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:03 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/special_tokens_map.json [125/125] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:04 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/sentence_bert_config.json [52/52] -> "sentence_bert_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:04 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/vocab.txt [231508/231508] -> "vocab.txt" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:04 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/modules.json [349/349] -> "modules.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/ https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
+ local out=models-mnt/bge-small/
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/
+ cd models-mnt/bge-small/
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:05 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/config.json [743/743] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/bge-small/1_Pooling https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
+ local out=models-mnt/bge-small/1_Pooling
+ local url=https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/bge-small/1_Pooling
+ cd models-mnt/bge-small/1_Pooling
+ wget -nv -N https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:05 URL:https://huggingface.co/BAAI/bge-small-en-v1.5/raw/main/1_Pooling/config.json [190/190] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/bge-small
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/embd_bge_small-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- x86 detected
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.0s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.285s
user	0m7.356s
sys	0m1.924s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/embd_bge_small-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  2%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Built target build_info
[  3%] Built target sha256
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Built target sha1
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/gguf.cpp.o
[  5%] Linking CXX shared library ../../bin/libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 10%] Linking CXX shared library ../../bin/libggml-cpu.so
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-wmma-f16.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/gla.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 19%] Built target ggml-cpu
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb32.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb16.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb64.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb8.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 34%] Linking CUDA shared library ../../../bin/libggml-cuda.so
[ 34%] Built target ggml-cuda
[ 35%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 35%] Linking CXX shared library ../../bin/libggml.so
[ 35%] Built target ggml
[ 35%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-adapter.cpp.o
[ 36%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-batch.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-arch.cpp.o
[ 37%] Building CXX object src/CMakeFiles/llama.dir/llama-chat.cpp.o
[ 37%] Building CXX object src/CMakeFiles/llama.dir/llama-context.cpp.o
[ 38%] Linking CXX executable ../../bin/llama-gguf
[ 38%] Linking CXX executable ../../bin/llama-gguf-hash
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-graph.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-hparams.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-impl.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-kv-cache.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-mmap.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model-loader.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-quant.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library ../bin/libllama.so
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama-gguf
[ 43%] Built target llama
[ 44%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 45%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 45%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 45%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 45%] Linking C executable ../bin/test-c
[ 46%] Linking CXX executable ../../bin/llama-simple
[ 47%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/chat.cpp.o
[ 47%] Built target llava
[ 47%] Linking CXX static library libllava_static.a
[ 47%] Built target test-c
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 47%] Linking CXX shared library ../../bin/libllava_shared.so
[ 47%] Built target llava_static
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/llguidance.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Built target llama-simple
[ 50%] Built target llama-simple-chat
[ 50%] Linking CXX static library libcommon.a
[ 50%] Built target llava_shared
[ 50%] Built target llama-quantize-stats
[ 50%] Built target common
[ 50%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat.dir/test-chat.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-tokenizer-0
[ 53%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Building CXX object tests/CMakeFiles/test-chat.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Linking CXX executable ../bin/test-grammar-integration
[ 56%] Linking CXX executable ../bin/test-chat
[ 56%] Built target test-llama-grammar
[ 56%] Built target test-grammar-parser
[ 56%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 57%] Built target test-sampling
[ 57%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 59%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 59%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 59%] Built target test-tokenizer-0
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 59%] Built target test-grammar-integration
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 60%] Linking CXX executable ../bin/test-log
[ 61%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 61%] Linking CXX executable ../bin/test-arg-parser
[ 61%] Built target test-chat
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 62%] Built target test-log
[ 62%] Linking CXX executable ../bin/test-chat-template
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/test-gguf.cpp.o
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/get-model.cpp.o
[ 63%] Built target test-tokenizer-1-bpe
[ 63%] Linking CXX executable ../bin/test-gguf
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Built target test-json-schema-to-grammar
[ 64%] Built target test-tokenizer-1-spm
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 65%] Linking CXX executable ../bin/test-backend-ops
[ 65%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-model-load-cancel
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-gguf
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 67%] Built target test-arg-parser
[ 67%] Linking CXX executable ../bin/test-barrier
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 67%] Built target test-model-load-cancel
[ 68%] Linking CXX executable ../bin/test-quantize-fns
[ 68%] Built target test-autorelease
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 68%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 68%] Built target test-backend-ops
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 70%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 70%] Linking CXX executable ../bin/test-quantize-perf
[ 70%] Linking CXX executable ../bin/test-rope
[ 71%] Linking CXX executable ../../bin/llama-batched-bench
[ 71%] Built target test-chat-template
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Built target test-barrier
[ 72%] Linking CXX executable ../../bin/llama-batched
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-embedding
[ 73%] Built target test-quantize-fns
[ 74%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 74%] Built target test-rope
[ 74%] Linking CXX executable ../../bin/llama-eval-callback
[ 74%] Built target test-quantize-perf
[ 74%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 75%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-gguf-split
[ 75%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 75%] Built target llama-gguf-split
[ 75%] Built target llama-batched-bench
[ 75%] Built target llama-gbnf-validator
[ 75%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 76%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Built target llama-batched
[ 76%] Linking CXX executable ../../bin/llama-gritlm
[ 77%] Linking CXX executable ../../bin/llama-imatrix
[ 77%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-infill
[ 77%] Built target llama-embedding
[ 77%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 77%] Built target llama-eval-callback
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-lookup
[ 78%] Built target llama-imatrix
[ 78%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Built target llama-infill
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 80%] Linking CXX executable ../../bin/llama-lookup-create
[ 80%] Built target llama-bench
[ 80%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Built target llama-lookahead
[ 81%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-lookup-stats
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 82%] Linking CXX executable ../../bin/llama-parallel
[ 82%] Built target llama-lookup
[ 82%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 82%] Built target llama-lookup-merge
[ 82%] Linking CXX executable ../../bin/llama-passkey
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-perplexity
[ 83%] Built target llama-lookup-create
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-quantize
[ 84%] Built target llama-parallel
[ 84%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 84%] Built target llama-lookup-stats
[ 84%] Generating loading.html.hpp
[ 84%] Built target llama-cli
[ 85%] Linking CXX executable ../../bin/llama-retrieval
[ 85%] Generating index.html.gz.hpp
[ 85%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-save-load-state
[ 86%] Built target llama-passkey
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 86%] Built target llama-perplexity
[ 87%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 87%] Building CXX object examples/run/CMakeFiles/llama-run.dir/linenoise.cpp/linenoise.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-speculative
[ 88%] Linking CXX executable ../../bin/llama-run
[ 88%] Built target llama-quantize
[ 88%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-speculative-simple
[ 89%] Built target llama-retrieval
[ 89%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 89%] Built target llama-save-load-state
[ 90%] Linking CXX executable ../../bin/llama-tokenize
[ 90%] Building CXX object examples/tts/CMakeFiles/llama-tts.dir/tts.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tts
[ 90%] Built target llama-speculative
[ 90%] Built target llama-run
[ 91%] Building CXX object examples/gen-docs/CMakeFiles/llama-gen-docs.dir/gen-docs.cpp.o
[ 91%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-gen-docs
[ 92%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 92%] Built target llama-speculative-simple
[ 92%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-cvector-generator
[ 92%] Built target llama-tokenize
[ 92%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-export-lora
[ 93%] Built target llama-tts
[ 94%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-llava-cli
[ 94%] Built target llama-gen-docs
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 95%] Built target llama-convert-llama2c-to-ggml
[ 95%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-qwen2vl-cli.dir/qwen2vl-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-qwen2vl-cli
[ 96%] Built target llama-cvector-generator
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-llava-clip-quantize-cli.dir/clip-quantize-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-llava-clip-quantize-cli
[ 97%] Built target llama-export-lora
[ 98%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 98%] Built target llama-llava-cli
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Built target llama-llava-clip-quantize-cli
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-vdot
[ 99%] Built target llama-minicpmv-cli
[ 99%] Built target llama-qwen2vl-cli
[ 99%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m5.455s
user	0m13.516s
sys	0m3.776s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/bge-small --outfile ../models-mnt/bge-small/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: bge-small
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,               torch.float32 --> F16, shape = {384, 30522}
INFO:hf-to-gguf:position_embd.weight,            torch.float32 --> F32, shape = {384, 512}
INFO:hf-to-gguf:token_types.weight,              torch.float32 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.4.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.4.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.4.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.4.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.4.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.5.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.5.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.5.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.5.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.5.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.6.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.6.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.6.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.6.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.6.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.7.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.7.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.7.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.7.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.7.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.8.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.8.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.8.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.8.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.8.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_q.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_q.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_k.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_k.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_v.weight,             torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_v.bias,               torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output.weight,        torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.9.attn_output.bias,          torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.weight,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.attn_output_norm.bias,     torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.ffn_up.weight,             torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.9.ffn_up.bias,               torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.9.ffn_down.weight,           torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.9.ffn_down.bias,             torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.9.layer_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.10.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.10.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.10.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.10.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.10.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_q.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_q.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_k.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_k.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_v.weight,            torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_v.bias,              torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output.weight,       torch.float32 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.11.attn_output.bias,         torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.weight,  torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.attn_output_norm.bias,    torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.ffn_up.weight,            torch.float32 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.11.ffn_up.bias,              torch.float32 --> F32, shape = {1536}
INFO:hf-to-gguf:blk.11.ffn_down.weight,          torch.float32 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.11.ffn_down.bias,            torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.weight, torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:blk.11.layer_output_norm.bias,   torch.float32 --> F32, shape = {384}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 512
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Setting special token type unk to 100
INFO:gguf.vocab:Setting special token type sep to 102
INFO:gguf.vocab:Setting special token type pad to 0
WARNING:gguf.vocab:No handler for special token type cls with id 101 - skipping
INFO:gguf.vocab:Setting special token type mask to 103
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/bge-small/ggml-model-f16.gguf: n_tensors = 197, total_size = 66.9M
Writing:   0%|          | 0.00/66.9M [00:00<?, ?byte/s]Writing:  49%|████▊     | 32.5M/66.9M [00:00<00:00, 323Mbyte/s]Writing:  98%|█████████▊| 65.8M/66.9M [00:00<00:00, 324Mbyte/s]Writing: 100%|██████████| 66.9M/66.9M [00:00<00:00, 320Mbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/bge-small/ggml-model-f16.gguf
+ model_f16=../models-mnt/bge-small/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/bge-small/ggml-model-q8_0.gguf
+ ./bin/llama-quantize ../models-mnt/bge-small/ggml-model-f16.gguf ../models-mnt/bge-small/ggml-model-q8_0.gguf q8_0
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/bge-small/ggml-model-f16.gguf' to '../models-mnt/bge-small/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 24 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = bert
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = Bge Small
llama_model_loader: - kv   3:                           general.basename str              = bge
llama_model_loader: - kv   4:                         general.size_label str              = small
llama_model_loader: - kv   5:                           bert.block_count u32              = 12
llama_model_loader: - kv   6:                        bert.context_length u32              = 512
llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
llama_model_loader: - kv  11:                          general.file_type u32              = 1
llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  22:               tokenizer.ggml.mask_token_id u32              = 103
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  124 tensors
llama_model_loader: - type  f16:   73 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 197]                 position_embd.weight - [  384,   512,     1,     1], type =    f32, size =    0.750 MB
[   2/ 197]                    token_embd.weight - [  384, 30522,     1,     1], type =    f16, converting to q8_0 .. size =    22.35 MiB ->    11.88 MiB
[   3/ 197]                 token_embd_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   4/ 197]               token_embd_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   5/ 197]                   token_types.weight - [  384,     2,     1,     1], type =    f32, size =    0.003 MB
[   6/ 197]                    blk.0.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   7/ 197]                  blk.0.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[   8/ 197]               blk.0.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[   9/ 197]             blk.0.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  10/ 197]          blk.0.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  11/ 197]        blk.0.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  12/ 197]                    blk.0.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  13/ 197]                  blk.0.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  14/ 197]                    blk.0.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  15/ 197]                  blk.0.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  16/ 197]                  blk.0.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  17/ 197]                blk.0.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  18/ 197]                    blk.0.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  19/ 197]                  blk.0.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  20/ 197]         blk.0.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  21/ 197]       blk.0.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  22/ 197]                    blk.1.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  23/ 197]                  blk.1.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  24/ 197]               blk.1.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  25/ 197]             blk.1.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  26/ 197]          blk.1.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  27/ 197]        blk.1.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  28/ 197]                    blk.1.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  29/ 197]                  blk.1.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  30/ 197]                    blk.1.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  31/ 197]                  blk.1.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  32/ 197]                  blk.1.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  33/ 197]                blk.1.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  34/ 197]                    blk.1.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  35/ 197]                  blk.1.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  36/ 197]         blk.1.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  37/ 197]       blk.1.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  38/ 197]                    blk.2.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  39/ 197]                  blk.2.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  40/ 197]               blk.2.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  41/ 197]             blk.2.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  42/ 197]          blk.2.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  43/ 197]        blk.2.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  44/ 197]                    blk.2.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  45/ 197]                  blk.2.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  46/ 197]                    blk.2.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  47/ 197]                  blk.2.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  48/ 197]                  blk.2.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  49/ 197]                blk.2.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  50/ 197]                    blk.2.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  51/ 197]                  blk.2.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  52/ 197]         blk.2.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  53/ 197]       blk.2.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  54/ 197]                    blk.3.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  55/ 197]                  blk.3.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  56/ 197]               blk.3.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  57/ 197]             blk.3.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  58/ 197]          blk.3.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  59/ 197]        blk.3.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  60/ 197]                    blk.3.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  61/ 197]                  blk.3.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  62/ 197]                    blk.3.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  63/ 197]                  blk.3.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  64/ 197]                  blk.3.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  65/ 197]                blk.3.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  66/ 197]                    blk.3.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  67/ 197]                  blk.3.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  68/ 197]         blk.3.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  69/ 197]       blk.3.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  70/ 197]                    blk.4.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  71/ 197]                  blk.4.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  72/ 197]               blk.4.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  73/ 197]             blk.4.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  74/ 197]          blk.4.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  75/ 197]        blk.4.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  76/ 197]                    blk.4.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  77/ 197]                  blk.4.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  78/ 197]                    blk.4.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  79/ 197]                  blk.4.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  80/ 197]                  blk.4.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  81/ 197]                blk.4.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  82/ 197]                    blk.4.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  83/ 197]                  blk.4.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  84/ 197]         blk.4.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  85/ 197]       blk.4.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  86/ 197]                    blk.5.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  87/ 197]                  blk.5.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  88/ 197]               blk.5.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  89/ 197]             blk.5.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  90/ 197]          blk.5.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  91/ 197]        blk.5.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  92/ 197]                    blk.5.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  93/ 197]                  blk.5.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  94/ 197]                    blk.5.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  95/ 197]                  blk.5.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[  96/ 197]                  blk.5.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[  97/ 197]                blk.5.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[  98/ 197]                    blk.5.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[  99/ 197]                  blk.5.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 100/ 197]         blk.5.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 101/ 197]       blk.5.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 102/ 197]                    blk.6.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 103/ 197]                  blk.6.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 104/ 197]               blk.6.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 105/ 197]             blk.6.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 106/ 197]          blk.6.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 107/ 197]        blk.6.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 108/ 197]                    blk.6.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 109/ 197]                  blk.6.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 110/ 197]                    blk.6.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 111/ 197]                  blk.6.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 112/ 197]                  blk.6.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 113/ 197]                blk.6.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 114/ 197]                    blk.6.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 115/ 197]                  blk.6.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 116/ 197]         blk.6.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 117/ 197]       blk.6.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 118/ 197]                    blk.7.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 119/ 197]                  blk.7.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 120/ 197]               blk.7.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 121/ 197]             blk.7.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 122/ 197]          blk.7.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 123/ 197]        blk.7.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 124/ 197]                    blk.7.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 125/ 197]                  blk.7.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 126/ 197]                    blk.7.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 127/ 197]                  blk.7.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 128/ 197]                  blk.7.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 129/ 197]                blk.7.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 130/ 197]                    blk.7.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 131/ 197]                  blk.7.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 132/ 197]         blk.7.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 133/ 197]       blk.7.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 134/ 197]                    blk.8.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 135/ 197]                  blk.8.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 136/ 197]               blk.8.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 137/ 197]             blk.8.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 138/ 197]          blk.8.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 139/ 197]        blk.8.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 140/ 197]                    blk.8.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 141/ 197]                  blk.8.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 142/ 197]                    blk.8.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 143/ 197]                  blk.8.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 144/ 197]                  blk.8.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 145/ 197]                blk.8.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 146/ 197]                    blk.8.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 147/ 197]                  blk.8.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 148/ 197]         blk.8.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 149/ 197]       blk.8.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 150/ 197]                    blk.9.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 151/ 197]                  blk.9.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 152/ 197]               blk.9.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 153/ 197]             blk.9.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 154/ 197]          blk.9.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 155/ 197]        blk.9.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 156/ 197]                    blk.9.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 157/ 197]                  blk.9.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 158/ 197]                    blk.9.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 159/ 197]                  blk.9.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 160/ 197]                  blk.9.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 161/ 197]                blk.9.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 162/ 197]                    blk.9.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 163/ 197]                  blk.9.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 164/ 197]         blk.9.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 165/ 197]       blk.9.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 166/ 197]                   blk.10.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 167/ 197]                 blk.10.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 168/ 197]              blk.10.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 169/ 197]            blk.10.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 170/ 197]         blk.10.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 171/ 197]       blk.10.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 172/ 197]                   blk.10.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 173/ 197]                 blk.10.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 174/ 197]                   blk.10.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 175/ 197]                 blk.10.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 176/ 197]                 blk.10.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 177/ 197]               blk.10.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 178/ 197]                   blk.10.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 179/ 197]                 blk.10.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 180/ 197]        blk.10.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 181/ 197]      blk.10.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 182/ 197]                   blk.11.attn_k.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 183/ 197]                 blk.11.attn_k.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 184/ 197]              blk.11.attn_output.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 185/ 197]            blk.11.attn_output.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 186/ 197]         blk.11.attn_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 187/ 197]       blk.11.attn_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 188/ 197]                   blk.11.attn_q.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 189/ 197]                 blk.11.attn_q.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 190/ 197]                   blk.11.attn_v.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 191/ 197]                 blk.11.attn_v.weight - [  384,   384,     1,     1], type =    f16, converting to q8_0 .. size =     0.28 MiB ->     0.15 MiB
[ 192/ 197]                 blk.11.ffn_down.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 193/ 197]               blk.11.ffn_down.weight - [ 1536,   384,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 194/ 197]                   blk.11.ffn_up.bias - [ 1536,     1,     1,     1], type =    f32, size =    0.006 MB
[ 195/ 197]                 blk.11.ffn_up.weight - [  384,  1536,     1,     1], type =    f16, converting to q8_0 .. size =     1.12 MiB ->     0.60 MiB
[ 196/ 197]        blk.11.layer_output_norm.bias - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
[ 197/ 197]      blk.11.layer_output_norm.weight - [  384,     1,     1,     1], type =    f32, size =    0.001 MB
llama_model_quantize_impl: model size  =    63.84 MB
llama_model_quantize_impl: quant size  =    34.38 MB

main: quantize time =   346.88 ms
main:    total time =   346.88 ms
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/embd_bge_small-tg-f16.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-f16.gguf -p 'I believe the meaning of life is' -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.336 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.286.900 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.292.545 I llama_model_loader: loaded meta data with 24 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.292.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.292.573 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.292.578 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.292.579 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.292.580 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.292.581 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.292.585 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.292.588 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.292.589 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.292.590 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.292.591 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.292.602 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.292.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 1
0.00.292.607 I llama_model_loader: - kv  12:                      bert.attention.causal bool             = false
0.00.292.609 I llama_model_loader: - kv  13:                          bert.pooling_type u32              = 2
0.00.292.609 I llama_model_loader: - kv  14:            tokenizer.ggml.token_type_count u32              = 2
0.00.292.610 I llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = bert
0.00.292.611 I llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.296.795 I llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.297.862 I llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.297.867 I llama_model_loader: - kv  19:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.297.868 I llama_model_loader: - kv  20:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.297.869 I llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 0
0.00.297.870 I llama_model_loader: - kv  22:               tokenizer.ggml.mask_token_id u32              = 103
0.00.297.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.297.873 I llama_model_loader: - type  f32:  124 tensors
0.00.297.873 I llama_model_loader: - type  f16:   73 tensors
0.00.297.876 I print_info: file format = GGUF V3 (latest)
0.00.297.876 I print_info: file type   = F16
0.00.297.880 I print_info: file size   = 63.84 MiB (16.12 BPW) 
0.00.315.625 I load: special tokens cache size = 5
0.00.319.722 I load: token to piece cache size = 0.2032 MB
0.00.319.742 I print_info: arch             = bert
0.00.319.742 I print_info: vocab_only       = 0
0.00.319.743 I print_info: n_ctx_train      = 512
0.00.319.744 I print_info: n_embd           = 384
0.00.319.744 I print_info: n_layer          = 12
0.00.319.755 I print_info: n_head           = 12
0.00.319.757 I print_info: n_head_kv        = 12
0.00.319.758 I print_info: n_rot            = 32
0.00.319.758 I print_info: n_swa            = 0
0.00.319.758 I print_info: n_embd_head_k    = 32
0.00.319.759 I print_info: n_embd_head_v    = 32
0.00.319.762 I print_info: n_gqa            = 1
0.00.319.764 I print_info: n_embd_k_gqa     = 384
0.00.319.765 I print_info: n_embd_v_gqa     = 384
0.00.319.767 I print_info: f_norm_eps       = 1.0e-12
0.00.319.767 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.319.768 I print_info: f_clamp_kqv      = 0.0e+00
0.00.319.768 I print_info: f_max_alibi_bias = 0.0e+00
0.00.319.771 I print_info: f_logit_scale    = 0.0e+00
0.00.319.773 I print_info: n_ff             = 1536
0.00.319.773 I print_info: n_expert         = 0
0.00.319.774 I print_info: n_expert_used    = 0
0.00.319.775 I print_info: causal attn      = 0
0.00.319.775 I print_info: pooling type     = 2
0.00.319.775 I print_info: rope type        = 2
0.00.319.776 I print_info: rope scaling     = linear
0.00.319.778 I print_info: freq_base_train  = 10000.0
0.00.319.779 I print_info: freq_scale_train = 1
0.00.319.779 I print_info: n_ctx_orig_yarn  = 512
0.00.319.780 I print_info: rope_finetuned   = unknown
0.00.319.780 I print_info: ssm_d_conv       = 0
0.00.319.781 I print_info: ssm_d_inner      = 0
0.00.319.781 I print_info: ssm_d_state      = 0
0.00.319.782 I print_info: ssm_dt_rank      = 0
0.00.319.782 I print_info: ssm_dt_b_c_rms   = 0
0.00.319.782 I print_info: model type       = 33M
0.00.319.784 I print_info: model params     = 33.21 M
0.00.319.785 I print_info: general.name     = Bge Small
0.00.319.788 I print_info: vocab type       = WPM
0.00.319.789 I print_info: n_vocab          = 30522
0.00.319.789 I print_info: n_merges         = 0
0.00.319.790 I print_info: BOS token        = 101 '[CLS]'
0.00.319.790 I print_info: UNK token        = 100 '[UNK]'
0.00.319.791 I print_info: SEP token        = 102 '[SEP]'
0.00.319.792 I print_info: PAD token        = 0 '[PAD]'
0.00.319.792 I print_info: MASK token       = 103 '[MASK]'
0.00.319.792 I print_info: LF token         = 0 '[PAD]'
0.00.319.793 I print_info: max token length = 21
0.00.319.802 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.325.343 I load_tensors: offloading 12 repeating layers to GPU
0.00.325.350 I load_tensors: offloading output layer to GPU
0.00.325.351 I load_tensors: offloaded 13/13 layers to GPU
0.00.325.355 I load_tensors:        CUDA0 model buffer size =    40.73 MiB
0.00.325.357 I load_tensors:   CPU_Mapped model buffer size =    23.11 MiB
................................................
0.00.338.855 I llama_context_unified: n_seq_max     = 1
0.00.338.860 I llama_context_unified: n_ctx         = 512
0.00.338.861 I llama_context_unified: n_ctx_per_seq = 512
0.00.338.861 I llama_context_unified: n_batch       = 2048
0.00.338.862 I llama_context_unified: n_ubatch      = 2048
0.00.338.863 I llama_context_unified: flash_attn    = 0
0.00.338.868 I llama_context_unified: freq_base     = 10000.0
0.00.338.869 I llama_context_unified: freq_scale    = 1
0.00.338.907 I init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 12, can_shift = 1
0.00.340.339 I init:      CUDA0 KV buffer size =     9.00 MiB
0.00.340.353 I llama_context_unified: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.340.362 I llama_context_unified:  CUDA_Host  output buffer size =     0.00 MiB
0.00.344.966 I llama_context_unified:      CUDA0 compute buffer size =    16.00 MiB
0.00.344.977 I llama_context_unified:  CUDA_Host compute buffer size =     2.51 MiB
0.00.344.978 I llama_context_unified: graph nodes  = 429
0.00.344.978 I llama_context_unified: graph splits = 4 (with bs=512), 2 (with bs=1)
0.00.344.987 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 512
0.00.344.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.380.537 I 
0.00.380.645 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.382.396 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.043791 -0.019930  0.007717 -0.000890  0.001525 -0.037058  0.109579  0.042494  0.092021 -0.015975  0.006739 -0.035715 -0.017795  0.014835  0.018141  0.015966 -0.011364  0.010407 -0.085244 -0.008340  0.091368 -0.017106 -0.060449 -0.024337  0.027424  0.076093  0.027938 -0.014490  0.017551 -0.033110 -0.037748 -0.019096  0.068648 -0.009900 -0.024991  0.072332 -0.046512  0.010987 -0.050209  0.047692  0.032319 -0.011984  0.021951  0.049652  0.010517  0.005671 -0.028764  0.008940 -0.018537 -0.051460 -0.046134  0.030468 -0.035532  0.054250 -0.069668  0.044215  0.029880  0.046287  0.073273 -0.042621  0.076190  0.038726 -0.181095  0.082581  0.042248 -0.064600 -0.060197 -0.017825  0.006434  0.005775  0.016948 -0.026739  0.064637  0.113003  0.035236 -0.067332  0.027016 -0.067262 -0.033564 -0.033238  0.033295  0.013677 -0.003299 -0.037554 -0.051900  0.055188 -0.001966 -0.038080  0.064398  0.028847 -0.043495 -0.029503 -0.039401  0.036140  0.008407 -0.015543 -0.036475  0.018080  0.028600  0.342776 -0.044613  0.056181  0.017577 -0.020918 -0.066821 -0.000089 -0.037911 -0.029941 -0.008519 -0.021725  0.000381 -0.003200  0.004140  0.018776 -0.008468  0.025729  0.049537 -0.000014  0.050968 -0.042583 -0.031848  0.023595  0.030550 -0.023192 -0.046272 -0.079327  0.115238  0.046842  0.027769 -0.040393  0.067762 -0.022793  0.010337 -0.033000 -0.018277  0.043895  0.024392  0.052516  0.007388  0.008954  0.011309 -0.074815 -0.065645 -0.026817 -0.041153 -0.023701  0.026549  0.007017  0.027591  0.053044 -0.036747  0.057678 -0.000199  0.031751 -0.019566 -0.022043  0.041119 -0.058935  0.019506  0.043137  0.043673  0.041546 -0.022416  0.027021 -0.021865  0.005446 -0.041427 -0.000910  0.024393  0.002115  0.044372 -0.022775  0.043626  0.064723  0.055233  0.037061 -0.000995  0.046106  0.045744 -0.008354  0.063197 -0.073229 -0.011945  0.032314  0.024090  0.014671 -0.033643  0.000941 -0.015870 -0.019042  0.048036  0.110991  0.028303  0.031415 -0.013235 -0.057531  0.006890  0.005154 -0.012310 -0.051287 -0.000946 -0.017642 -0.019557 -0.041017  0.009034 -0.057835  0.051028  0.052381 -0.009701 -0.040253 -0.014041 -0.024929 -0.017207  0.006093  0.006698 -0.026920  0.015473  0.030874  0.002549  0.023161 -0.022302 -0.098520 -0.051042 -0.278227 -0.014833 -0.061545 -0.027236  0.017608 -0.011072 -0.017122  0.034859  0.046990 -0.015356  0.014991 -0.025723  0.047952 -0.006111 -0.000661 -0.060866 -0.068867 -0.060453 -0.035871  0.043327 -0.054967  0.014977  0.000486 -0.057964 -0.010324  0.012502  0.151678  0.126992 -0.013697  0.041878 -0.025771  0.014120 -0.000979 -0.150371  0.045208  0.005243 -0.036192 -0.029689 -0.020199 -0.034929  0.010041  0.033497 -0.047980 -0.051988 -0.017442 -0.023511  0.047374  0.051944 -0.016602 -0.055518  0.025789 -0.005563  0.010749  0.038662  0.008198 -0.009703 -0.105695 -0.027354 -0.096299  0.024991 -0.011259  0.092497  0.056109  0.003670  0.027744  0.002135 -0.050908 -0.039955 -0.013443 -0.045024 -0.015412  0.002755 -0.043483 -0.077901  0.065135 -0.006766 -0.001662 -0.014782  0.071558  0.023641 -0.037098  0.009193  0.001534 -0.032231  0.015534  0.037782  0.000355 -0.053226  0.021342 -0.039873  0.000151  0.013585  0.019871 -0.057841  0.006530 -0.049311 -0.267777  0.038978 -0.068124  0.038444 -0.012433  0.041515 -0.016094  0.052446 -0.071138  0.011221  0.024880 -0.007267  0.081896  0.028446 -0.021517  0.040449 -0.004541 -0.074497 -0.014651  0.019930  0.002342  0.023146  0.197190 -0.043210 -0.025710 -0.004773 -0.019249  0.074100  0.001788 -0.032007 -0.036600 -0.044973  0.000552 -0.011536  0.018121 -0.029602 -0.008445  0.006431  0.050812 -0.014925  0.006066  0.026242 -0.030921  0.047921  0.114045 -0.040932 -0.011286  0.005520 -0.003716  0.024992 -0.059121  0.013742 -0.010384  0.038758  0.051543  0.035452  0.034884 -0.017123  0.026464 -0.014447 -0.050001  0.003142  0.054105  0.039791 -0.039385 

0.00.415.445 I llama_perf_context_print:        load time =      93.62 ms
0.00.415.450 I llama_perf_context_print: prompt eval time =      32.67 ms /     9 tokens (    3.63 ms per token,   275.50 tokens per second)
0.00.415.451 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.415.452 I llama_perf_context_print:       total time =      34.91 ms /    10 tokens

real	0m0.691s
user	0m0.163s
sys	0m0.527s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/embd_bge_small-tg-q8_0.log
+ ./bin/llama-embedding --model ../models-mnt/bge-small/ggml-model-q8_0.gguf -p 'I believe the meaning of life is' -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.324 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.265.805 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.271.527 I llama_model_loader: loaded meta data with 24 key-value pairs and 197 tensors from ../models-mnt/bge-small/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.271.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.271.557 I llama_model_loader: - kv   0:                       general.architecture str              = bert
0.00.271.558 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.271.559 I llama_model_loader: - kv   2:                               general.name str              = Bge Small
0.00.271.560 I llama_model_loader: - kv   3:                           general.basename str              = bge
0.00.271.561 I llama_model_loader: - kv   4:                         general.size_label str              = small
0.00.271.565 I llama_model_loader: - kv   5:                           bert.block_count u32              = 12
0.00.271.566 I llama_model_loader: - kv   6:                        bert.context_length u32              = 512
0.00.271.567 I llama_model_loader: - kv   7:                      bert.embedding_length u32              = 384
0.00.271.568 I llama_model_loader: - kv   8:                   bert.feed_forward_length u32              = 1536
0.00.271.569 I llama_model_loader: - kv   9:                  bert.attention.head_count u32              = 12
0.00.271.577 I llama_model_loader: - kv  10:          bert.attention.layer_norm_epsilon f32              = 0.000000
0.00.271.578 I llama_model_loader: - kv  11:                      bert.attention.causal bool             = false
0.00.271.579 I llama_model_loader: - kv  12:                          bert.pooling_type u32              = 2
0.00.271.580 I llama_model_loader: - kv  13:            tokenizer.ggml.token_type_count u32              = 2
0.00.271.582 I llama_model_loader: - kv  14:                       tokenizer.ggml.model str              = bert
0.00.271.583 I llama_model_loader: - kv  15:                         tokenizer.ggml.pre str              = jina-v2-en
0.00.275.866 I llama_model_loader: - kv  16:                      tokenizer.ggml.tokens arr[str,30522]   = ["[PAD]", "[unused0]", "[unused1]", "...
0.00.276.973 I llama_model_loader: - kv  17:                  tokenizer.ggml.token_type arr[i32,30522]   = [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 100
0.00.276.982 I llama_model_loader: - kv  19:          tokenizer.ggml.seperator_token_id u32              = 102
0.00.276.983 I llama_model_loader: - kv  20:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.984 I llama_model_loader: - kv  21:               tokenizer.ggml.mask_token_id u32              = 103
0.00.276.985 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.276.985 I llama_model_loader: - kv  23:                          general.file_type u32              = 7
0.00.276.988 I llama_model_loader: - type  f32:  124 tensors
0.00.276.988 I llama_model_loader: - type q8_0:   73 tensors
0.00.276.991 I print_info: file format = GGUF V3 (latest)
0.00.276.991 I print_info: file type   = Q8_0
0.00.276.995 I print_info: file size   = 34.38 MiB (8.68 BPW) 
0.00.298.083 I load: special tokens cache size = 5
0.00.303.082 I load: token to piece cache size = 0.2032 MB
0.00.303.102 I print_info: arch             = bert
0.00.303.102 I print_info: vocab_only       = 0
0.00.303.103 I print_info: n_ctx_train      = 512
0.00.303.105 I print_info: n_embd           = 384
0.00.303.106 I print_info: n_layer          = 12
0.00.303.116 I print_info: n_head           = 12
0.00.303.119 I print_info: n_head_kv        = 12
0.00.303.119 I print_info: n_rot            = 32
0.00.303.120 I print_info: n_swa            = 0
0.00.303.121 I print_info: n_embd_head_k    = 32
0.00.303.122 I print_info: n_embd_head_v    = 32
0.00.303.124 I print_info: n_gqa            = 1
0.00.303.126 I print_info: n_embd_k_gqa     = 384
0.00.303.127 I print_info: n_embd_v_gqa     = 384
0.00.303.129 I print_info: f_norm_eps       = 1.0e-12
0.00.303.130 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.303.130 I print_info: f_clamp_kqv      = 0.0e+00
0.00.303.131 I print_info: f_max_alibi_bias = 0.0e+00
0.00.303.132 I print_info: f_logit_scale    = 0.0e+00
0.00.303.133 I print_info: n_ff             = 1536
0.00.303.133 I print_info: n_expert         = 0
0.00.303.134 I print_info: n_expert_used    = 0
0.00.303.134 I print_info: causal attn      = 0
0.00.303.136 I print_info: pooling type     = 2
0.00.303.136 I print_info: rope type        = 2
0.00.303.136 I print_info: rope scaling     = linear
0.00.303.138 I print_info: freq_base_train  = 10000.0
0.00.303.139 I print_info: freq_scale_train = 1
0.00.303.139 I print_info: n_ctx_orig_yarn  = 512
0.00.303.140 I print_info: rope_finetuned   = unknown
0.00.303.140 I print_info: ssm_d_conv       = 0
0.00.303.140 I print_info: ssm_d_inner      = 0
0.00.303.141 I print_info: ssm_d_state      = 0
0.00.303.141 I print_info: ssm_dt_rank      = 0
0.00.303.141 I print_info: ssm_dt_b_c_rms   = 0
0.00.303.143 I print_info: model type       = 33M
0.00.303.144 I print_info: model params     = 33.21 M
0.00.303.145 I print_info: general.name     = Bge Small
0.00.303.151 I print_info: vocab type       = WPM
0.00.303.152 I print_info: n_vocab          = 30522
0.00.303.153 I print_info: n_merges         = 0
0.00.303.153 I print_info: BOS token        = 101 '[CLS]'
0.00.303.155 I print_info: UNK token        = 100 '[UNK]'
0.00.303.155 I print_info: SEP token        = 102 '[SEP]'
0.00.303.156 I print_info: PAD token        = 0 '[PAD]'
0.00.303.156 I print_info: MASK token       = 103 '[MASK]'
0.00.303.156 I print_info: LF token         = 0 '[PAD]'
0.00.303.157 I print_info: max token length = 21
0.00.303.158 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.307.198 I load_tensors: offloading 12 repeating layers to GPU
0.00.307.205 I load_tensors: offloading output layer to GPU
0.00.307.206 I load_tensors: offloaded 13/13 layers to GPU
0.00.307.210 I load_tensors:        CUDA0 model buffer size =    21.76 MiB
0.00.307.211 I load_tensors:   CPU_Mapped model buffer size =    12.63 MiB
................................................
0.00.323.676 I llama_context_unified: n_seq_max     = 1
0.00.323.681 I llama_context_unified: n_ctx         = 512
0.00.323.682 I llama_context_unified: n_ctx_per_seq = 512
0.00.323.683 I llama_context_unified: n_batch       = 2048
0.00.323.683 I llama_context_unified: n_ubatch      = 2048
0.00.323.684 I llama_context_unified: flash_attn    = 0
0.00.323.687 I llama_context_unified: freq_base     = 10000.0
0.00.323.689 I llama_context_unified: freq_scale    = 1
0.00.323.717 I init: kv_size = 512, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 12, can_shift = 1
0.00.324.033 I init:      CUDA0 KV buffer size =     9.00 MiB
0.00.324.046 I llama_context_unified: KV self size  =    9.00 MiB, K (f16):    4.50 MiB, V (f16):    4.50 MiB
0.00.324.054 I llama_context_unified:  CUDA_Host  output buffer size =     0.00 MiB
0.00.328.784 I llama_context_unified:      CUDA0 compute buffer size =    16.00 MiB
0.00.328.793 I llama_context_unified:  CUDA_Host compute buffer size =     2.51 MiB
0.00.328.794 I llama_context_unified: graph nodes  = 429
0.00.328.795 I llama_context_unified: graph splits = 4 (with bs=512), 2 (with bs=1)
0.00.328.800 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 512
0.00.328.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.378.421 I 
0.00.378.526 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.380.244 I batch_decode: n_tokens = 9, n_seq = 1

embedding 0: -0.044410 -0.020754  0.009170 -0.001655  0.002196 -0.036650  0.108931  0.042344  0.092309 -0.015072  0.005917 -0.036481 -0.018425  0.014472  0.017332  0.014432 -0.013508  0.010701 -0.084892 -0.007473  0.092652 -0.017753 -0.061696 -0.024788  0.028441  0.076682  0.026397 -0.014583  0.017679 -0.033615 -0.037828 -0.018343  0.068701 -0.009934 -0.024395  0.073155 -0.046605  0.010914 -0.050754  0.050080  0.033186 -0.012444  0.020459  0.049348  0.011134  0.005739 -0.028344  0.008502 -0.019006 -0.052754 -0.045980  0.030069 -0.035728  0.052555 -0.068303  0.044278  0.030528  0.047141  0.073743 -0.042495  0.074861  0.037862 -0.181810  0.082604  0.043203 -0.066060 -0.059883 -0.017352  0.005870  0.004658  0.016468 -0.027040  0.066044  0.112812  0.034565 -0.066982  0.027762 -0.067568 -0.034579 -0.033995  0.033031  0.013883 -0.003973 -0.037038 -0.052212  0.052915 -0.003172 -0.037021  0.062838  0.028698 -0.041871 -0.029677 -0.039289  0.035595  0.007587 -0.015758 -0.035207  0.018403  0.031150  0.344921 -0.043836  0.057503  0.016416 -0.021302 -0.063956 -0.000335 -0.036865 -0.029742 -0.008622 -0.019652  0.001899 -0.004259  0.004181  0.018599 -0.009188  0.025339  0.049193 -0.001480  0.050375 -0.040745 -0.031441  0.022472  0.030241 -0.023469 -0.043463 -0.080323  0.114177  0.047310  0.026666 -0.040173  0.067825 -0.023095  0.010348 -0.033761 -0.016901  0.044086  0.022973  0.051569  0.007891  0.007156  0.009548 -0.076084 -0.063888 -0.026735 -0.040055 -0.024399  0.027843  0.006767  0.026920  0.051560 -0.037914  0.058528  0.002075  0.032044 -0.018825 -0.021530  0.042409 -0.059515  0.018949  0.043093  0.043013  0.040919 -0.022027  0.028215 -0.024151  0.005923 -0.042390  0.000719  0.023584  0.001622  0.043504 -0.023005  0.042672  0.065502  0.055732  0.037359  0.001087  0.046751  0.044342 -0.008958  0.060285 -0.073106 -0.011162  0.033360  0.023168  0.015014 -0.034687  0.001036 -0.017213 -0.017897  0.046904  0.111633  0.029950  0.030634 -0.012233 -0.056736  0.005887  0.005323 -0.011585 -0.052474 -0.001368 -0.016781 -0.020660 -0.041139  0.009994 -0.058696  0.050963  0.051957 -0.010967 -0.040630 -0.014074 -0.025248 -0.015677  0.005633  0.007672 -0.027139  0.016029  0.030862  0.002174  0.022803 -0.022600 -0.097269 -0.050189 -0.277591 -0.013538 -0.061043 -0.027069  0.016976 -0.009901 -0.016431  0.034425  0.048713 -0.016629  0.016295 -0.024382  0.050051 -0.005073 -0.000616 -0.060138 -0.069789 -0.061331 -0.035584  0.044144 -0.055198  0.015151 -0.000431 -0.057344 -0.010267  0.011239  0.150962  0.126809 -0.012644  0.043929 -0.025468  0.014903 -0.000497 -0.150534  0.044320  0.006117 -0.036227 -0.029395 -0.020488 -0.034025  0.009633  0.035776 -0.048832 -0.052321 -0.017128 -0.024655  0.047610  0.050801 -0.016839 -0.057357  0.023445 -0.005886  0.012051  0.039080  0.008679 -0.007308 -0.106171 -0.027551 -0.097071  0.024256 -0.010987  0.092078  0.055347  0.005125  0.028129  0.000562 -0.051651 -0.038817 -0.013204 -0.045774 -0.015196  0.001976 -0.044282 -0.077479  0.065641 -0.006508 -0.001035 -0.016538  0.070822  0.024419 -0.036448  0.008217  0.001747 -0.033159  0.016623  0.038248  0.000537 -0.051665  0.022091 -0.038813  0.000273  0.012053  0.019895 -0.058657  0.005979 -0.049958 -0.268741  0.038455 -0.067912  0.037502 -0.012149  0.042876 -0.015161  0.051339 -0.072842  0.013249  0.023945 -0.007163  0.081980  0.028613 -0.021502  0.041956 -0.002837 -0.074286 -0.015218  0.020244  0.003307  0.022622  0.194816 -0.043627 -0.024185 -0.005286 -0.018513  0.073839  0.002023 -0.032209 -0.036646 -0.044497 -0.000062 -0.010959  0.018461 -0.027222 -0.009531  0.006318  0.049454 -0.015469  0.006199  0.026483 -0.030515  0.048648  0.111982 -0.042438 -0.011468  0.004811 -0.002940  0.025183 -0.060503  0.014708 -0.010021  0.037356  0.049106  0.035799  0.036678 -0.016969  0.026763 -0.015393 -0.050282  0.003638  0.054766  0.041528 -0.039214 

0.00.393.889 I llama_perf_context_print:        load time =     112.60 ms
0.00.393.891 I llama_perf_context_print: prompt eval time =      13.27 ms /     9 tokens (    1.47 ms per token,   678.37 tokens per second)
0.00.393.893 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.393.894 I llama_perf_context_print:       total time =      15.47 ms /    10 tokens

real	0m0.670s
user	0m0.145s
sys	0m0.537s
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_rerank_tiny
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:25 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json [1206/1206] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:25 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer.json [2030772/2030772] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:26 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/tokenizer_config.json [1215/1215] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:26 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/special_tokens_map.json [280/280] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/sentence_bert_config.json:
2025-02-12 11:57:26 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/vocab.txt:
2025-02-12 11:57:27 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/modules.json:
2025-02-12 11:57:27 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/ https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
+ local out=models-mnt/rerank-tiny/
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/
+ cd models-mnt/rerank-tiny/
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:27 URL:https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/config.json [1206/1206] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/rerank-tiny/1_Pooling https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
+ local out=models-mnt/rerank-tiny/1_Pooling
+ local url=https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/rerank-tiny/1_Pooling
+ cd models-mnt/rerank-tiny/1_Pooling
+ wget -nv -N https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json
https://huggingface.co/jinaai/jina-reranker-v1-tiny-en/raw/main/1_Pooling/config.json:
2025-02-12 11:57:27 ERROR 404: Not Found.
+ cd /home/ggml/work/llama.cpp
+ path_models=../models-mnt/rerank-tiny
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- x86 detected
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.0s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.280s
user	0m7.330s
sys	0m1.962s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-make.log
++ nproc
+ make -j6
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Built target build_info
[  3%] Built target sha256
[  3%] Built target sha1
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target xxhash
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/gguf.cpp.o
[  5%] Linking CXX shared library ../../bin/libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  8%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[  9%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 11%] Linking CXX shared library ../../bin/libggml-cpu.so
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-wmma-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/gla.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 20%] Built target ggml-cpu
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb16.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb32.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb64.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb8.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 34%] Linking CUDA shared library ../../../bin/libggml-cuda.so
[ 34%] Built target ggml-cuda
[ 35%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 35%] Linking CXX shared library ../../bin/libggml.so
[ 35%] Built target ggml
[ 35%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 35%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-arch.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-adapter.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-batch.cpp.o
[ 37%] Linking CXX executable ../../bin/llama-gguf
[ 37%] Linking CXX executable ../../bin/llama-gguf-hash
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-chat.cpp.o
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-context.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-graph.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-hparams.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-impl.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-kv-cache.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-mmap.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model-loader.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-quant.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library ../bin/libllama.so
[ 43%] Built target llama-gguf
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama
[ 44%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 45%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 45%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 45%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 45%] Linking C executable ../bin/test-c
[ 46%] Linking CXX executable ../../bin/llama-simple
[ 47%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/chat.cpp.o
[ 47%] Built target test-c
[ 47%] Built target llava
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Linking CXX static library libllava_static.a
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/llguidance.cpp.o
[ 48%] Built target llava_static
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 49%] Linking CXX shared library ../../bin/libllava_shared.so
[ 49%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 50%] Built target llama-simple-chat
[ 50%] Linking CXX static library libcommon.a
[ 50%] Built target llama-simple
[ 50%] Built target llama-quantize-stats
[ 50%] Built target llava_shared
[ 50%] Built target common
[ 50%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 50%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat.dir/test-chat.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 53%] Linking CXX executable ../bin/test-tokenizer-0
[ 54%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 56%] Building CXX object tests/CMakeFiles/test-chat.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-sampling
[ 56%] Linking CXX executable ../bin/test-grammar-integration
[ 56%] Linking CXX executable ../bin/test-chat
[ 56%] Built target test-llama-grammar
[ 56%] Built target test-grammar-parser
[ 56%] Built target test-sampling
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 58%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 58%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 59%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 59%] Built target test-tokenizer-0
[ 59%] Built target test-grammar-integration
[ 59%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 60%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 60%] Built target test-chat
[ 61%] Linking CXX executable ../bin/test-log
[ 61%] Linking CXX executable ../bin/test-arg-parser
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-chat-template
[ 62%] Built target test-log
[ 62%] Built target test-tokenizer-1-spm
[ 62%] Built target test-tokenizer-1-bpe
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/test-gguf.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Built target test-json-schema-to-grammar
[ 64%] Building CXX object tests/CMakeFiles/test-gguf.dir/get-model.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 64%] Linking CXX executable ../bin/test-gguf
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-model-load-cancel
[ 66%] Linking CXX executable ../bin/test-backend-ops
[ 66%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-arg-parser
[ 66%] Built target test-model-load-cancel
[ 66%] Built target test-gguf
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 67%] Built target test-autorelease
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 68%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 68%] Linking CXX executable ../bin/test-barrier
[ 68%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 69%] Linking CXX executable ../bin/test-quantize-fns
[ 69%] Linking CXX executable ../bin/test-quantize-perf
[ 70%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 70%] Built target test-chat-template
[ 70%] Linking CXX executable ../bin/test-rope
[ 70%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 71%] Linking CXX executable ../../bin/llama-batched-bench
[ 71%] Built target test-backend-ops
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-batched
[ 72%] Built target test-barrier
[ 72%] Built target test-quantize-fns
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Built target test-quantize-perf
[ 74%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 74%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 74%] Built target test-rope
[ 74%] Linking CXX executable ../../bin/llama-embedding
[ 74%] Linking CXX executable ../../bin/llama-eval-callback
[ 75%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 75%] Linking CXX executable ../../bin/llama-gguf-split
[ 75%] Built target llama-gbnf-validator
[ 76%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-gritlm
[ 76%] Built target llama-gguf-split
[ 76%] Built target llama-batched-bench
[ 76%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 76%] Built target llama-batched
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-imatrix
[ 77%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-infill
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Built target llama-embedding
[ 77%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 77%] Built target llama-eval-callback
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-lookup
[ 78%] Built target llama-gritlm
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 79%] Linking CXX executable ../../bin/llama-lookup-create
[ 79%] Built target llama-infill
[ 79%] Built target llama-bench
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Built target llama-imatrix
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-lookup-merge
[ 81%] Linking CXX executable ../../bin/llama-lookup-stats
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 81%] Built target llama-lookahead
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 82%] Linking CXX executable ../../bin/llama-parallel
[ 82%] Built target llama-lookup-merge
[ 82%] Built target llama-lookup
[ 82%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-passkey
[ 83%] Linking CXX executable ../../bin/llama-perplexity
[ 83%] Built target llama-lookup-create
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 84%] Linking CXX executable ../../bin/llama-quantize
[ 84%] Built target llama-lookup-stats
[ 84%] Built target llama-cli
[ 84%] Generating loading.html.hpp
[ 84%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 84%] Generating index.html.gz.hpp
[ 85%] Linking CXX executable ../../bin/llama-retrieval
[ 85%] Built target llama-parallel
[ 85%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 86%] Linking CXX executable ../../bin/llama-save-load-state
[ 86%] Built target llama-passkey
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 86%] Built target llama-perplexity
[ 87%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 87%] Building CXX object examples/run/CMakeFiles/llama-run.dir/linenoise.cpp/linenoise.cpp.o
[ 87%] Linking CXX executable ../../bin/llama-speculative
[ 88%] Linking CXX executable ../../bin/llama-run
[ 88%] Built target llama-quantize
[ 88%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-speculative-simple
[ 89%] Built target llama-retrieval
[ 89%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tokenize
[ 90%] Built target llama-save-load-state
[ 90%] Building CXX object examples/tts/CMakeFiles/llama-tts.dir/tts.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tts
[ 90%] Built target llama-speculative
[ 91%] Building CXX object examples/gen-docs/CMakeFiles/llama-gen-docs.dir/gen-docs.cpp.o
[ 91%] Linking CXX executable ../../bin/llama-gen-docs
[ 91%] Built target llama-run
[ 91%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 91%] Built target llama-speculative-simple
[ 91%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 92%] Linking CXX executable ../../bin/llama-cvector-generator
[ 92%] Built target llama-tokenize
[ 92%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 93%] Linking CXX executable ../../bin/llama-export-lora
[ 93%] Built target llama-tts
[ 94%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-llava-cli
[ 94%] Built target llama-gen-docs
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 95%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 95%] Built target llama-convert-llama2c-to-ggml
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-qwen2vl-cli.dir/qwen2vl-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-qwen2vl-cli
[ 96%] Built target llama-cvector-generator
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-llava-clip-quantize-cli.dir/clip-quantize-cli.cpp.o
[ 97%] Linking CXX executable ../../bin/llama-llava-clip-quantize-cli
[ 97%] Built target llama-export-lora
[ 98%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 98%] Built target llama-llava-cli
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-llava-clip-quantize-cli
[ 99%] Built target llama-vdot
[ 99%] Built target llama-minicpmv-cli
[ 99%] Built target llama-q8dot
[ 99%] Built target llama-qwen2vl-cli
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m5.422s
user	0m13.440s
sys	0m3.844s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/rerank-tiny --outfile ../models-mnt/rerank-tiny/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: rerank-tiny
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,              torch.bfloat16 --> F16, shape = {384, 61056}
INFO:hf-to-gguf:token_types.weight,             torch.bfloat16 --> F32, shape = {384, 2}
INFO:hf-to-gguf:token_embd_norm.weight,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:token_embd_norm.bias,           torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.0.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.0.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.0.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.0.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.1.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.1.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.1.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.1.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.2.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.2.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.2.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.2.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_q.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_q.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_k.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_k.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_v.weight,            torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_v.bias,              torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output.weight,       torch.bfloat16 --> F16, shape = {384, 384}
INFO:hf-to-gguf:blk.3.attn_output.bias,         torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.weight,  torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.attn_output_norm.bias,    torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.ffn_gate.weight,          torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_up.weight,            torch.bfloat16 --> F16, shape = {384, 1536}
INFO:hf-to-gguf:blk.3.ffn_down.weight,          torch.bfloat16 --> F16, shape = {1536, 384}
INFO:hf-to-gguf:blk.3.ffn_down.bias,            torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.weight, torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:blk.3.layer_output_norm.bias,   torch.bfloat16 --> F32, shape = {384}
INFO:hf-to-gguf:cls.weight,                     torch.bfloat16 --> F16, shape = {384, 1}
INFO:hf-to-gguf:cls.bias,                       torch.bfloat16 --> F32, shape = {1}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:gguf: context length = 8192
INFO:hf-to-gguf:gguf: embedding length = 384
INFO:hf-to-gguf:gguf: feed forward length = 1536
INFO:hf-to-gguf:gguf: head count = 12
INFO:hf-to-gguf:gguf: layer norm epsilon = 1e-12
INFO:hf-to-gguf:gguf: file type = 1
INFO:hf-to-gguf:Set model tokenizer
INFO:gguf.vocab:Adding 39382 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 2
INFO:gguf.vocab:Setting special token type unk to 3
INFO:gguf.vocab:Setting special token type sep to 2
INFO:gguf.vocab:Setting special token type pad to 1
WARNING:gguf.vocab:No handler for special token type cls with id 0 - skipping
INFO:gguf.vocab:Setting special token type mask to 4
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/rerank-tiny/ggml-model-f16.gguf: n_tensors = 70, total_size = 65.8M
Writing:   0%|          | 0.00/65.8M [00:00<?, ?byte/s]Writing:  71%|███████   | 46.9M/65.8M [00:00<00:00, 314Mbyte/s]Writing: 100%|██████████| 65.8M/65.8M [00:00<00:00, 308Mbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/rerank-tiny/ggml-model-f16.gguf
+ model_f16=../models-mnt/rerank-tiny/ggml-model-f16.gguf
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
+ ./bin/llama-embedding --model ../models-mnt/rerank-tiny/ggml-model-f16.gguf -p 'what is panda?</s></s>hi\nwhat is panda?</s></s>it'\''s a bear\nwhat is panda?</s></s>The giant panda (Ailuropoda melanoleuca), sometimes called a panda bear or simply panda, is a bear species endemic to China.' -ngl 99 -c 0 --pooling rank --embd-normalize -1 --verbose-prompt
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.317 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.291.599 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.304.184 I llama_model_loader: loaded meta data with 28 key-value pairs and 70 tensors from ../models-mnt/rerank-tiny/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.304.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.304.213 I llama_model_loader: - kv   0:                       general.architecture str              = jina-bert-v2
0.00.304.215 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.304.216 I llama_model_loader: - kv   2:                               general.name str              = Jina Bert Implementation
0.00.304.217 I llama_model_loader: - kv   3:                       general.organization str              = Jinaai
0.00.304.218 I llama_model_loader: - kv   4:                         general.size_label str              = 33M
0.00.304.221 I llama_model_loader: - kv   5:                   jina-bert-v2.block_count u32              = 4
0.00.304.224 I llama_model_loader: - kv   6:                jina-bert-v2.context_length u32              = 8192
0.00.304.225 I llama_model_loader: - kv   7:              jina-bert-v2.embedding_length u32              = 384
0.00.304.226 I llama_model_loader: - kv   8:           jina-bert-v2.feed_forward_length u32              = 1536
0.00.304.227 I llama_model_loader: - kv   9:          jina-bert-v2.attention.head_count u32              = 12
0.00.304.237 I llama_model_loader: - kv  10:  jina-bert-v2.attention.layer_norm_epsilon f32              = 0.000000
0.00.304.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 1
0.00.304.239 I llama_model_loader: - kv  12:              jina-bert-v2.attention.causal bool             = false
0.00.304.240 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.304.240 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = jina-v1-en
0.00.312.284 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,61056]   = ["<s>", "<pad>", "</s>", "<unk>", "<m...
0.00.314.397 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,61056]   = [3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, ...
0.00.319.605 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,39382]   = ["t h", "i n", "a n", "e r", "th e", ...
0.00.319.614 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.319.615 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 2
0.00.319.616 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.319.616 I llama_model_loader: - kv  21:          tokenizer.ggml.seperator_token_id u32              = 2
0.00.319.617 I llama_model_loader: - kv  22:            tokenizer.ggml.padding_token_id u32              = 1
0.00.319.618 I llama_model_loader: - kv  23:               tokenizer.ggml.mask_token_id u32              = 4
0.00.319.618 I llama_model_loader: - kv  24:            tokenizer.ggml.token_type_count u32              = 2
0.00.319.619 I llama_model_loader: - kv  25:               tokenizer.ggml.add_bos_token bool             = true
0.00.319.620 I llama_model_loader: - kv  26:               tokenizer.ggml.add_eos_token bool             = true
0.00.319.621 I llama_model_loader: - kv  27:               general.quantization_version u32              = 2
0.00.319.623 I llama_model_loader: - type  f32:   40 tensors
0.00.319.624 I llama_model_loader: - type  f16:   30 tensors
0.00.319.626 I print_info: file format = GGUF V3 (latest)
0.00.319.627 I print_info: file type   = F16
0.00.319.631 I print_info: file size   = 62.78 MiB (16.01 BPW) 
0.00.331.053 W load: empty token at index 5
0.00.346.118 W load: model vocab missing newline token, using special_pad_id instead
0.00.368.031 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.368.117 I load: special tokens cache size = 5
0.00.874.969 I load: token to piece cache size = 1.5060 MB
0.00.875.005 I print_info: arch             = jina-bert-v2
0.00.875.006 I print_info: vocab_only       = 0
0.00.875.007 I print_info: n_ctx_train      = 8192
0.00.875.007 I print_info: n_embd           = 384
0.00.875.008 I print_info: n_layer          = 4
0.00.875.027 I print_info: n_head           = 12
0.00.875.029 I print_info: n_head_kv        = 12
0.00.875.030 I print_info: n_rot            = 32
0.00.875.030 I print_info: n_swa            = 0
0.00.875.030 I print_info: n_embd_head_k    = 32
0.00.875.031 I print_info: n_embd_head_v    = 32
0.00.875.033 I print_info: n_gqa            = 1
0.00.875.035 I print_info: n_embd_k_gqa     = 384
0.00.875.036 I print_info: n_embd_v_gqa     = 384
0.00.875.039 I print_info: f_norm_eps       = 1.0e-12
0.00.875.039 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.875.040 I print_info: f_clamp_kqv      = 0.0e+00
0.00.875.041 I print_info: f_max_alibi_bias = 8.0e+00
0.00.875.041 I print_info: f_logit_scale    = 0.0e+00
0.00.875.043 I print_info: n_ff             = 1536
0.00.875.043 I print_info: n_expert         = 0
0.00.875.044 I print_info: n_expert_used    = 0
0.00.875.044 I print_info: causal attn      = 0
0.00.875.045 I print_info: pooling type     = -1
0.00.875.045 I print_info: rope type        = -1
0.00.875.046 I print_info: rope scaling     = linear
0.00.875.047 I print_info: freq_base_train  = 10000.0
0.00.875.047 I print_info: freq_scale_train = 1
0.00.875.049 I print_info: n_ctx_orig_yarn  = 8192
0.00.875.050 I print_info: rope_finetuned   = unknown
0.00.875.051 I print_info: ssm_d_conv       = 0
0.00.875.051 I print_info: ssm_d_inner      = 0
0.00.875.052 I print_info: ssm_d_state      = 0
0.00.875.052 I print_info: ssm_dt_rank      = 0
0.00.875.053 I print_info: ssm_dt_b_c_rms   = 0
0.00.875.054 I print_info: model type       = 33M
0.00.875.056 I print_info: model params     = 32.90 M
0.00.875.057 I print_info: general.name     = Jina Bert Implementation
0.00.875.061 I print_info: vocab type       = BPE
0.00.875.062 I print_info: n_vocab          = 61056
0.00.875.063 I print_info: n_merges         = 39382
0.00.875.064 I print_info: BOS token        = 0 '<s>'
0.00.875.064 I print_info: EOS token        = 2 '</s>'
0.00.875.065 I print_info: UNK token        = 3 '<unk>'
0.00.875.065 I print_info: SEP token        = 2 '</s>'
0.00.875.066 I print_info: PAD token        = 1 '<pad>'
0.00.875.067 I print_info: MASK token       = 4 '<mask>'
0.00.875.076 I print_info: EOG token        = 2 '</s>'
0.00.875.076 I print_info: max token length = 45
0.00.875.080 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.880.052 I load_tensors: offloading 4 repeating layers to GPU
0.00.880.059 I load_tensors: offloading output layer to GPU
0.00.880.059 I load_tensors: offloaded 5/5 layers to GPU
0.00.880.063 I load_tensors:        CUDA0 model buffer size =    18.05 MiB
0.00.880.066 I load_tensors:   CPU_Mapped model buffer size =    44.72 MiB
....................
0.00.885.940 I llama_context_unified: n_seq_max     = 1
0.00.885.945 I llama_context_unified: n_ctx         = 8192
0.00.885.946 I llama_context_unified: n_ctx_per_seq = 8192
0.00.885.947 I llama_context_unified: n_batch       = 2048
0.00.885.947 I llama_context_unified: n_ubatch      = 2048
0.00.885.948 I llama_context_unified: flash_attn    = 0
0.00.885.950 I llama_context_unified: freq_base     = 10000.0
0.00.885.951 I llama_context_unified: freq_scale    = 1
0.00.885.979 I init: kv_size = 8192, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 4, can_shift = 1
0.00.886.407 I init:      CUDA0 KV buffer size =    48.00 MiB
0.00.886.420 I llama_context_unified: KV self size  =   48.00 MiB, K (f16):   24.00 MiB, V (f16):   24.00 MiB
0.00.886.429 I llama_context_unified:  CUDA_Host  output buffer size =     0.00 MiB
0.00.899.030 I llama_context_unified:      CUDA0 compute buffer size =   223.00 MiB
0.00.899.040 I llama_context_unified:  CUDA_Host compute buffer size =    19.02 MiB
0.00.899.041 I llama_context_unified: graph nodes  = 154
0.00.899.042 I llama_context_unified: graph splits = 4 (with bs=2048), 2 (with bs=1)
0.00.899.051 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 8192
0.00.899.052 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.950.250 I 
0.00.950.361 I system_info: n_threads = 6 (n_threads_batch = 6) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.950.629 I main: prompt 0: 'what is panda?</s></s>hi'
0.00.950.635 I main: number of tokens in prompt = 9
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 23233 -> 'hi'
     2 -> '</s>'


0.00.950.649 I main: prompt 1: 'what is panda?</s></s>it's a bear'
0.00.950.649 I main: number of tokens in prompt = 13
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 21153 -> 'it'
    37 -> '''
    87 -> 's'
    69 -> 'a'
 25706 -> 'bear'
     2 -> '</s>'


0.00.950.657 I main: prompt 2: 'what is panda?</s></s>The giant panda (Ailuropoda melanoleuca), sometimes called a panda bear or simply panda, is a bear species endemic to China.'
0.00.950.658 I main: number of tokens in prompt = 40
     0 -> '<s>'
 21381 -> 'what'
 21152 -> 'is'
 49990 -> 'panda'
    61 -> '?'
     2 -> '</s>'
     2 -> '</s>'
 21215 -> 'he'
 28390 -> 'giant'
 49990 -> 'panda'
    38 -> '('
 21163 -> 'il'
 26237 -> 'uro'
 21223 -> 'po'
 23179 -> 'da'
 36906 -> 'melan'
 26791 -> 'ole'
    89 -> 'u'
 21402 -> 'ca'
 21686 -> '),'
 23314 -> 'sometimes'
 22517 -> 'called'
    69 -> 'a'
 49990 -> 'panda'
 25706 -> 'bear'
 21142 -> 'or'
 22810 -> 'simply'
 49990 -> 'panda'
    42 -> ','
 21152 -> 'is'
    69 -> 'a'
 25706 -> 'bear'
 25677 -> 'species'
 28930 -> 'ende'
 22024 -> 'mic'
 21148 -> 'to'
    76 -> 'h'
 22344 -> 'ina'
    44 -> '.'
     2 -> '</s>'


0.00.950.904 I batch_decode: n_tokens = 62, n_seq = 3

rerank score 0:    0.022
rerank score 1:    0.024
rerank score 2:    0.199

0.00.958.269 I llama_perf_context_print:        load time =     658.63 ms
0.00.958.272 I llama_perf_context_print: prompt eval time =       7.25 ms /    62 tokens (    0.12 ms per token,  8549.37 tokens per second)
0.00.958.273 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.00.958.274 I llama_perf_context_print:       total time =       8.02 ms /    63 tokens

real	0m1.234s
user	0m0.679s
sys	0m0.554s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 0'
+ check_score 'rerank score 0' 'rerank score 0:    0.022' 0.00 0.05
+ qnt='rerank score 0'
++ echo 'rerank score 0:    0.022'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.022
++ echo '0.022 < 0.00'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.022 > 0.05'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 0' 0.022
+ return 0
  - rerank score 0 @ 0.022 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 1'
+ check_score 'rerank score 1' 'rerank score 1:    0.024' 0.00 0.05
+ qnt='rerank score 1'
++ echo 'rerank score 1:    0.024'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.024
++ echo '0.024 < 0.00'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.024 > 0.05'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 1' 0.024
+ return 0
  - rerank score 1 @ 0.024 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/rerank_tiny-rk-f16.log
++ grep 'rerank score 2'
+ check_score 'rerank score 2' 'rerank score 2:    0.199' 0.10 0.30
+ qnt='rerank score 2'
++ echo 'rerank score 2:    0.199'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ score=0.199
++ echo '0.199 < 0.10'
++ bc
+ '[' 0 -eq 1 ']'
++ echo '0.199 > 0.30'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' 'rerank score 2' 0.199
+ return 0
  - rerank score 2 @ 0.199 OK
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_pythia_2_8b
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b.log
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:46 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/config.json [571/571] -> "config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:47 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer.json [2113710/2113710] -> "tokenizer.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:48 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/tokenizer_config.json [396/396] -> "tokenizer_config.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json
Last-modified header missing -- time-stamps turned off.
2025-02-12 11:57:48 URL:https://huggingface.co/EleutherAI/pythia-2.8b/raw/main/special_tokens_map.json [99/99] -> "special_tokens_map.json" [1]
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/pythia/2.8B/ https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ local out=models-mnt/pythia/2.8B/
+ local url=https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/pythia/2.8B/
+ cd models-mnt/pythia/2.8B/
+ wget -nv -N https://huggingface.co/EleutherAI/pythia-2.8b/resolve/main/pytorch_model.bin
+ cd /home/ggml/work/llama.cpp
+ gg_wget models-mnt/wikitext/ https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ local out=models-mnt/wikitext/
+ local url=https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
++ pwd
+ local cwd=/home/ggml/work/llama.cpp
+ mkdir -p models-mnt/wikitext/
+ cd models-mnt/wikitext/
+ wget -nv -N https://huggingface.co/datasets/ggml-org/ci/resolve/main/wikitext-2-raw-v1.zip
+ cd /home/ggml/work/llama.cpp
+ unzip -o models-mnt/wikitext/wikitext-2-raw-v1.zip -d models-mnt/wikitext/
Archive:  models-mnt/wikitext/wikitext-2-raw-v1.zip
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.test.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.valid.raw  
  inflating: models-mnt/wikitext/wikitext-2-raw/wiki.train.raw  
+ path_models=../models-mnt/pythia/2.8B
+ path_wiki=../models-mnt/wikitext/wikitext-2-raw
+ rm -rf build-ci-release
+ mkdir build-ci-release
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-cmake.log
+ cmake -DCMAKE_BUILD_TYPE=Release -DLLAMA_FATAL_WARNINGS=ON -DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native ..
-- The C compiler identification is GNU 11.4.0
-- The CXX compiler identification is GNU 11.4.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: /usr/bin/c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Git: /usr/bin/git (found version "2.34.1") 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- ccache found, compilation results will be cached. Disable with GGML_CCACHE=OFF.
-- CMAKE_SYSTEM_PROCESSOR: x86_64
-- Including CPU backend
-- Found OpenMP_C: -fopenmp (found version "4.5") 
-- Found OpenMP_CXX: -fopenmp (found version "4.5") 
-- Found OpenMP: TRUE (found version "4.5")  
-- x86 detected
-- Adding CPU backend variant ggml-cpu: -march=native 
-- Found CUDAToolkit: /usr/local/cuda-12.2/include (found version "12.2.140") 
-- CUDA Toolkit found
-- Using CUDA architectures: native
-- The CUDA compiler identification is NVIDIA 12.2.140
-- Detecting CUDA compiler ABI info
-- Detecting CUDA compiler ABI info - done
-- Check for working CUDA compiler: /usr/local/cuda-12.2/bin/nvcc - skipped
-- Detecting CUDA compile features
-- Detecting CUDA compile features - done
-- CUDA host compiler is GNU 11.4.0

-- Including CUDA backend
-- Configuring done (9.1s)
-- Generating done (0.2s)
-- Build files have been written to: /home/ggml/work/llama.cpp/build-ci-release

real	0m9.381s
user	0m7.372s
sys	0m1.932s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-make.log
++ nproc
+ make -j6
[  0%] Building CXX object common/CMakeFiles/build_info.dir/build-info.cpp.o
[  0%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml.c.o
[  0%] Building C object examples/gguf-hash/CMakeFiles/sha256.dir/deps/sha256/sha256.c.o
[  1%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-alloc.c.o
[  2%] Building C object examples/gguf-hash/CMakeFiles/xxhash.dir/deps/xxhash/xxhash.c.o
[  3%] Building C object examples/gguf-hash/CMakeFiles/sha1.dir/deps/sha1/sha1.c.o
[  3%] Built target sha256
[  3%] Built target sha1
[  3%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-backend.cpp.o
[  3%] Built target xxhash
[  3%] Built target build_info
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-threading.cpp.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/ggml-opt.cpp.o
[  4%] Building C object ggml/src/CMakeFiles/ggml-base.dir/ggml-quants.c.o
[  4%] Building CXX object ggml/src/CMakeFiles/ggml-base.dir/gguf.cpp.o
[  5%] Linking CXX shared library ../../bin/libggml-base.so
[  5%] Built target ggml-base
[  5%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.c.o
[  5%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-aarch64.cpp.o
[  6%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-hbm.cpp.o
[  7%] Building C object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-quants.c.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/acc.cu.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/arange.cu.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/amx.cpp.o
[  8%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/ggml-cpu-traits.cpp.o
[  8%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argmax.cu.o
[  9%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/amx/mmq.cpp.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/argsort.cu.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/binbcast.cu.o
[ 10%] Building CXX object ggml/src/CMakeFiles/ggml-cpu.dir/ggml-cpu/llamafile/sgemm.cpp.o
[ 10%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/clamp.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/concat.cu.o
[ 11%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/conv-transpose-1d.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/convert.cu.o
[ 12%] Linking CXX shared library ../../bin/libggml-cpu.so
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/count-equal.cu.o
[ 12%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cpy.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/cross-entropy-loss.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/diagmask.cu.o
[ 13%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-tile-f32.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn-wmma-f16.cu.o
[ 14%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/fattn.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/getrows.cu.o
[ 15%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/ggml-cuda.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/im2col.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/gla.cu.o
[ 16%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmv.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/mmvq.cu.o
[ 17%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/norm.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/opt-step-adamw.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/out-prod.cu.o
[ 18%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pad.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/pool2d.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/quantize.cu.o
[ 19%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/rope.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/scale.cu.o
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/softmax.cu.o
[ 20%] Built target ggml-cpu
[ 20%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sum.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/sumrows.cu.o
[ 21%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/tsembd.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/unary.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/upscale.cu.o
[ 22%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/wkv6.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb16.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb32.cu.o
[ 23%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb64.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-mma-f16-instance-cpb8.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq1_s.cu.o
[ 24%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_s.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq2_xxs.cu.o
[ 25%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_s.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq3_xxs.cu.o
[ 26%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_nl.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-iq4_xs.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q2_k.cu.o
[ 27%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q3_k.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_0.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_1.cu.o
[ 28%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q4_k.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_0.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_1.cu.o
[ 29%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q5_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q6_k.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/mmq-instance-q8_0.cu.o
[ 30%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q4_0-q4_0.cu.o
[ 31%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-q8_0-q8_0.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs128-f16-f16.cu.o
[ 32%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs256-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f16-instance-hs64-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs128-f16-f16.cu.o
[ 33%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs256-f16-f16.cu.o
[ 34%] Building CUDA object ggml/src/ggml-cuda/CMakeFiles/ggml-cuda.dir/template-instances/fattn-vec-f32-instance-hs64-f16-f16.cu.o
[ 34%] Linking CUDA shared library ../../../bin/libggml-cuda.so
[ 34%] Built target ggml-cuda
[ 35%] Building CXX object ggml/src/CMakeFiles/ggml.dir/ggml-backend-reg.cpp.o
[ 35%] Linking CXX shared library ../../bin/libggml.so
[ 35%] Built target ggml
[ 35%] Building CXX object src/CMakeFiles/llama.dir/llama.cpp.o
[ 35%] Building CXX object examples/gguf-hash/CMakeFiles/llama-gguf-hash.dir/gguf-hash.cpp.o
[ 35%] Building CXX object examples/gguf/CMakeFiles/llama-gguf.dir/gguf.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-adapter.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-arch.cpp.o
[ 36%] Building CXX object src/CMakeFiles/llama.dir/llama-batch.cpp.o
[ 37%] Linking CXX executable ../../bin/llama-gguf
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-chat.cpp.o
[ 38%] Linking CXX executable ../../bin/llama-gguf-hash
[ 38%] Building CXX object src/CMakeFiles/llama.dir/llama-context.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-grammar.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-graph.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-hparams.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-kv-cache.cpp.o
[ 39%] Building CXX object src/CMakeFiles/llama.dir/llama-mmap.cpp.o
[ 40%] Building CXX object src/CMakeFiles/llama.dir/llama-model-loader.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-impl.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-model.cpp.o
[ 41%] Building CXX object src/CMakeFiles/llama.dir/llama-quant.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-sampling.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/llama-vocab.cpp.o
[ 42%] Building CXX object src/CMakeFiles/llama.dir/unicode.cpp.o
[ 43%] Building CXX object src/CMakeFiles/llama.dir/unicode-data.cpp.o
[ 43%] Linking CXX shared library ../bin/libllama.so
[ 43%] Built target llama-gguf-hash
[ 43%] Built target llama-gguf
[ 43%] Built target llama
[ 44%] Building C object tests/CMakeFiles/test-c.dir/test-c.c.o
[ 45%] Building CXX object common/CMakeFiles/common.dir/arg.cpp.o
[ 45%] Building CXX object examples/simple/CMakeFiles/llama-simple.dir/simple.cpp.o
[ 45%] Building CXX object examples/quantize-stats/CMakeFiles/llama-quantize-stats.dir/quantize-stats.cpp.o
[ 45%] Building CXX object examples/simple-chat/CMakeFiles/llama-simple-chat.dir/simple-chat.cpp.o
[ 45%] Building CXX object examples/llava/CMakeFiles/llava.dir/llava.cpp.o
[ 45%] Linking C executable ../bin/test-c
[ 46%] Linking CXX executable ../../bin/llama-simple
[ 47%] Building CXX object examples/llava/CMakeFiles/llava.dir/clip.cpp.o
[ 47%] Linking CXX executable ../../bin/llama-simple-chat
[ 47%] Linking CXX executable ../../bin/llama-quantize-stats
[ 47%] Building CXX object common/CMakeFiles/common.dir/chat.cpp.o
[ 47%] Built target llava
[ 47%] Linking CXX static library libllava_static.a
[ 47%] Building CXX object common/CMakeFiles/common.dir/common.cpp.o
[ 47%] Built target test-c
[ 47%] Linking CXX shared library ../../bin/libllava_shared.so
[ 47%] Built target llava_static
[ 48%] Building CXX object common/CMakeFiles/common.dir/console.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/json-schema-to-grammar.cpp.o
[ 48%] Building CXX object common/CMakeFiles/common.dir/llguidance.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/log.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/ngram-cache.cpp.o
[ 49%] Building CXX object common/CMakeFiles/common.dir/sampling.cpp.o
[ 50%] Building CXX object common/CMakeFiles/common.dir/speculative.cpp.o
[ 50%] Built target llama-simple-chat
[ 50%] Linking CXX static library libcommon.a
[ 50%] Built target llama-simple
[ 50%] Built target llama-quantize-stats
[ 50%] Built target llava_shared
[ 50%] Built target common
[ 50%] Building CXX object tests/CMakeFiles/test-sampling.dir/test-sampling.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/test-grammar-parser.cpp.o
[ 51%] Building CXX object tests/CMakeFiles/test-tokenizer-0.dir/test-tokenizer-0.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/test-grammar-integration.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/test-llama-grammar.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-chat.dir/test-chat.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-grammar-parser.dir/get-model.cpp.o
[ 52%] Building CXX object tests/CMakeFiles/test-llama-grammar.dir/get-model.cpp.o
[ 53%] Building CXX object tests/CMakeFiles/test-sampling.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-tokenizer-0
[ 54%] Building CXX object tests/CMakeFiles/test-grammar-integration.dir/get-model.cpp.o
[ 54%] Linking CXX executable ../bin/test-grammar-parser
[ 55%] Linking CXX executable ../bin/test-llama-grammar
[ 55%] Linking CXX executable ../bin/test-sampling
[ 56%] Building CXX object tests/CMakeFiles/test-chat.dir/get-model.cpp.o
[ 56%] Linking CXX executable ../bin/test-grammar-integration
[ 56%] Linking CXX executable ../bin/test-chat
[ 56%] Built target test-llama-grammar
[ 56%] Built target test-sampling
[ 56%] Built target test-grammar-parser
[ 57%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/test-json-schema-to-grammar.cpp.o
[ 57%] Building CXX object tests/CMakeFiles/test-tokenizer-1-bpe.dir/test-tokenizer-1-bpe.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-tokenizer-1-spm.dir/test-tokenizer-1-spm.cpp.o
[ 58%] Building CXX object tests/CMakeFiles/test-json-schema-to-grammar.dir/get-model.cpp.o
[ 58%] Linking CXX executable ../bin/test-tokenizer-1-bpe
[ 58%] Linking CXX executable ../bin/test-tokenizer-1-spm
[ 59%] Linking CXX executable ../bin/test-json-schema-to-grammar
[ 59%] Built target test-tokenizer-0
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/test-log.cpp.o
[ 59%] Building CXX object tests/CMakeFiles/test-log.dir/get-model.cpp.o
[ 60%] Linking CXX executable ../bin/test-log
[ 60%] Built target test-grammar-integration
[ 60%] Built target test-chat
[ 60%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/test-arg-parser.cpp.o
[ 61%] Building CXX object tests/CMakeFiles/test-chat-template.dir/test-chat-template.cpp.o
[ 62%] Building CXX object tests/CMakeFiles/test-arg-parser.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-arg-parser
[ 62%] Building CXX object tests/CMakeFiles/test-chat-template.dir/get-model.cpp.o
[ 62%] Linking CXX executable ../bin/test-chat-template
[ 62%] Built target test-log
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/test-gguf.cpp.o
[ 63%] Built target test-tokenizer-1-bpe
[ 63%] Building CXX object tests/CMakeFiles/test-gguf.dir/get-model.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/test-backend-ops.cpp.o
[ 64%] Built target test-tokenizer-1-spm
[ 64%] Linking CXX executable ../bin/test-gguf
[ 64%] Built target test-json-schema-to-grammar
[ 64%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/test-model-load-cancel.cpp.o
[ 64%] Building CXX object tests/CMakeFiles/test-backend-ops.dir/get-model.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/test-autorelease.cpp.o
[ 65%] Building CXX object tests/CMakeFiles/test-model-load-cancel.dir/get-model.cpp.o
[ 65%] Linking CXX executable ../bin/test-backend-ops
[ 65%] Building CXX object tests/CMakeFiles/test-autorelease.dir/get-model.cpp.o
[ 66%] Linking CXX executable ../bin/test-model-load-cancel
[ 66%] Linking CXX executable ../bin/test-autorelease
[ 66%] Built target test-gguf
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/test-barrier.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-barrier.dir/get-model.cpp.o
[ 67%] Built target test-model-load-cancel
[ 67%] Linking CXX executable ../bin/test-barrier
[ 67%] Built target test-autorelease
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/test-quantize-fns.cpp.o
[ 67%] Built target test-arg-parser
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/test-quantize-perf.cpp.o
[ 67%] Building CXX object tests/CMakeFiles/test-quantize-fns.dir/get-model.cpp.o
[ 67%] Built target test-backend-ops
[ 67%] Building CXX object tests/CMakeFiles/test-rope.dir/test-rope.cpp.o
[ 68%] Linking CXX executable ../bin/test-quantize-fns
[ 68%] Building CXX object examples/batched-bench/CMakeFiles/llama-batched-bench.dir/batched-bench.cpp.o
[ 69%] Building CXX object tests/CMakeFiles/test-quantize-perf.dir/get-model.cpp.o
[ 70%] Building CXX object tests/CMakeFiles/test-rope.dir/get-model.cpp.o
[ 70%] Linking CXX executable ../bin/test-quantize-perf
[ 70%] Linking CXX executable ../bin/test-rope
[ 71%] Linking CXX executable ../../bin/llama-batched-bench
[ 71%] Built target test-chat-template
[ 72%] Building CXX object examples/batched/CMakeFiles/llama-batched.dir/batched.cpp.o
[ 72%] Linking CXX executable ../../bin/llama-batched
[ 72%] Built target test-barrier
[ 73%] Building CXX object examples/embedding/CMakeFiles/llama-embedding.dir/embedding.cpp.o
[ 73%] Linking CXX executable ../../bin/llama-embedding
[ 73%] Built target test-quantize-fns
[ 74%] Building CXX object examples/eval-callback/CMakeFiles/llama-eval-callback.dir/eval-callback.cpp.o
[ 74%] Built target test-quantize-perf
[ 74%] Built target test-rope
[ 74%] Building CXX object examples/gbnf-validator/CMakeFiles/llama-gbnf-validator.dir/gbnf-validator.cpp.o
[ 75%] Building CXX object examples/gguf-split/CMakeFiles/llama-gguf-split.dir/gguf-split.cpp.o
[ 75%] Linking CXX executable ../../bin/llama-eval-callback
[ 75%] Linking CXX executable ../../bin/llama-gbnf-validator
[ 75%] Linking CXX executable ../../bin/llama-gguf-split
[ 75%] Built target llama-batched-bench
[ 75%] Built target llama-gbnf-validator
[ 75%] Built target llama-gguf-split
[ 76%] Building CXX object examples/gritlm/CMakeFiles/llama-gritlm.dir/gritlm.cpp.o
[ 76%] Building CXX object examples/imatrix/CMakeFiles/llama-imatrix.dir/imatrix.cpp.o
[ 76%] Building CXX object examples/infill/CMakeFiles/llama-infill.dir/infill.cpp.o
[ 76%] Linking CXX executable ../../bin/llama-gritlm
[ 76%] Built target llama-batched
[ 77%] Linking CXX executable ../../bin/llama-imatrix
[ 77%] Linking CXX executable ../../bin/llama-infill
[ 77%] Building CXX object examples/llama-bench/CMakeFiles/llama-bench.dir/llama-bench.cpp.o
[ 77%] Built target llama-embedding
[ 77%] Linking CXX executable ../../bin/llama-bench
[ 77%] Building CXX object examples/lookahead/CMakeFiles/llama-lookahead.dir/lookahead.cpp.o
[ 77%] Linking CXX executable ../../bin/llama-lookahead
[ 77%] Built target llama-eval-callback
[ 78%] Building CXX object examples/lookup/CMakeFiles/llama-lookup.dir/lookup.cpp.o
[ 78%] Linking CXX executable ../../bin/llama-lookup
[ 78%] Built target llama-gritlm
[ 78%] Built target llama-imatrix
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-create.dir/lookup-create.cpp.o
[ 79%] Built target llama-infill
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-merge.dir/lookup-merge.cpp.o
[ 79%] Built target llama-bench
[ 79%] Linking CXX executable ../../bin/llama-lookup-create
[ 79%] Building CXX object examples/lookup/CMakeFiles/llama-lookup-stats.dir/lookup-stats.cpp.o
[ 80%] Linking CXX executable ../../bin/llama-lookup-merge
[ 81%] Building CXX object examples/main/CMakeFiles/llama-cli.dir/main.cpp.o
[ 81%] Built target llama-lookahead
[ 81%] Linking CXX executable ../../bin/llama-cli
[ 81%] Building CXX object examples/parallel/CMakeFiles/llama-parallel.dir/parallel.cpp.o
[ 81%] Linking CXX executable ../../bin/llama-lookup-stats
[ 82%] Linking CXX executable ../../bin/llama-parallel
[ 82%] Built target llama-lookup
[ 82%] Building CXX object examples/passkey/CMakeFiles/llama-passkey.dir/passkey.cpp.o
[ 82%] Built target llama-lookup-merge
[ 82%] Linking CXX executable ../../bin/llama-passkey
[ 83%] Building CXX object examples/perplexity/CMakeFiles/llama-perplexity.dir/perplexity.cpp.o
[ 83%] Linking CXX executable ../../bin/llama-perplexity
[ 83%] Built target llama-lookup-create
[ 83%] Building CXX object examples/quantize/CMakeFiles/llama-quantize.dir/quantize.cpp.o
[ 83%] Built target llama-cli
[ 84%] Linking CXX executable ../../bin/llama-quantize
[ 84%] Building CXX object examples/retrieval/CMakeFiles/llama-retrieval.dir/retrieval.cpp.o
[ 84%] Built target llama-lookup-stats
[ 84%] Built target llama-parallel
[ 84%] Generating loading.html.hpp
[ 85%] Linking CXX executable ../../bin/llama-retrieval
[ 85%] Building CXX object examples/save-load-state/CMakeFiles/llama-save-load-state.dir/save-load-state.cpp.o
[ 85%] Generating index.html.gz.hpp
[ 86%] Linking CXX executable ../../bin/llama-save-load-state
[ 86%] Built target llama-passkey
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/run.cpp.o
[ 86%] Built target llama-perplexity
[ 86%] Building CXX object examples/run/CMakeFiles/llama-run.dir/linenoise.cpp/linenoise.cpp.o
[ 87%] Building CXX object examples/speculative/CMakeFiles/llama-speculative.dir/speculative.cpp.o
[ 88%] Linking CXX executable ../../bin/llama-run
[ 88%] Linking CXX executable ../../bin/llama-speculative
[ 88%] Built target llama-quantize
[ 88%] Building CXX object examples/speculative-simple/CMakeFiles/llama-speculative-simple.dir/speculative-simple.cpp.o
[ 89%] Linking CXX executable ../../bin/llama-speculative-simple
[ 89%] Built target llama-retrieval
[ 89%] Building CXX object examples/tokenize/CMakeFiles/llama-tokenize.dir/tokenize.cpp.o
[ 89%] Built target llama-save-load-state
[ 90%] Linking CXX executable ../../bin/llama-tokenize
[ 90%] Building CXX object examples/tts/CMakeFiles/llama-tts.dir/tts.cpp.o
[ 90%] Linking CXX executable ../../bin/llama-tts
[ 90%] Built target llama-run
[ 91%] Building CXX object examples/gen-docs/CMakeFiles/llama-gen-docs.dir/gen-docs.cpp.o
[ 91%] Built target llama-speculative
[ 91%] Linking CXX executable ../../bin/llama-gen-docs
[ 91%] Building CXX object examples/convert-llama2c-to-ggml/CMakeFiles/llama-convert-llama2c-to-ggml.dir/convert-llama2c-to-ggml.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-convert-llama2c-to-ggml
[ 92%] Built target llama-speculative-simple
[ 92%] Built target llama-tokenize
[ 92%] Building CXX object examples/cvector-generator/CMakeFiles/llama-cvector-generator.dir/cvector-generator.cpp.o
[ 92%] Building CXX object examples/export-lora/CMakeFiles/llama-export-lora.dir/export-lora.cpp.o
[ 92%] Linking CXX executable ../../bin/llama-cvector-generator
[ 93%] Linking CXX executable ../../bin/llama-export-lora
[ 93%] Built target llama-tts
[ 94%] Building CXX object examples/llava/CMakeFiles/llama-llava-cli.dir/llava-cli.cpp.o
[ 94%] Linking CXX executable ../../bin/llama-llava-cli
[ 94%] Built target llama-convert-llama2c-to-ggml
[ 94%] Built target llama-gen-docs
[ 95%] Building CXX object examples/llava/CMakeFiles/llama-minicpmv-cli.dir/minicpmv-cli.cpp.o
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-qwen2vl-cli.dir/qwen2vl-cli.cpp.o
[ 96%] Linking CXX executable ../../bin/llama-minicpmv-cli
[ 96%] Linking CXX executable ../../bin/llama-qwen2vl-cli
[ 96%] Built target llama-export-lora
[ 96%] Built target llama-cvector-generator
[ 96%] Building CXX object examples/llava/CMakeFiles/llama-llava-clip-quantize-cli.dir/clip-quantize-cli.cpp.o
[ 97%] Building CXX object pocs/vdot/CMakeFiles/llama-vdot.dir/vdot.cpp.o
[ 98%] Linking CXX executable ../../bin/llama-llava-clip-quantize-cli
[ 98%] Linking CXX executable ../../bin/llama-vdot
[ 98%] Built target llama-llava-cli
[ 99%] Building CXX object pocs/vdot/CMakeFiles/llama-q8dot.dir/q8dot.cpp.o
[ 99%] Linking CXX executable ../../bin/llama-q8dot
[ 99%] Built target llama-minicpmv-cli
[ 99%] Built target llama-vdot
[ 99%] Built target llama-qwen2vl-cli
[ 99%] Built target llama-llava-clip-quantize-cli
[ 99%] Built target llama-q8dot
[100%] Building CXX object examples/server/CMakeFiles/llama-server.dir/server.cpp.o
[100%] Linking CXX executable ../../bin/llama-server
[100%] Built target llama-server

real	0m5.391s
user	0m13.312s
sys	0m3.917s
+ python3 ../convert_hf_to_gguf.py ../models-mnt/pythia/2.8B --outfile ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
INFO:hf-to-gguf:Loading model: 2.8B
INFO:gguf.gguf_writer:gguf: This GGUF file is for Little Endian only
INFO:hf-to-gguf:Exporting model...
INFO:hf-to-gguf:gguf: loading model part 'pytorch_model.bin'
INFO:hf-to-gguf:token_embd.weight,         torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:blk.0.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.0.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.0.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.0.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.0.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.0.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.0.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.0.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.0.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.1.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.1.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.1.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.1.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.1.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.1.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.1.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.1.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.2.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.2.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.2.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.2.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.2.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.2.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.2.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.2.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.3.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.3.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.3.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.3.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.3.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.3.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.3.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.3.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.4.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.4.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.4.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.4.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.4.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.4.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.4.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.4.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.5.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.5.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.5.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.5.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.5.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.5.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.5.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.5.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.6.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.6.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.6.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.6.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.6.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.6.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.6.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.6.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.7.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.7.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.7.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.7.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.7.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.7.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.7.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.7.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.8.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.8.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.8.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.8.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.8.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.8.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.8.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.8.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.attn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.weight,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_norm.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.9.attn_qkv.weight,     torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.9.attn_qkv.bias,       torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.9.attn_output.weight,  torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.9.attn_output.bias,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.9.ffn_up.weight,       torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.9.ffn_up.bias,         torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.9.ffn_down.weight,     torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.9.ffn_down.bias,       torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.10.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.10.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.10.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.10.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.10.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.10.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.10.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.10.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.11.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.11.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.11.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.11.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.11.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.11.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.11.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.11.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.12.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.12.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.12.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.12.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.12.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.12.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.12.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.12.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.13.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.13.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.13.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.13.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.13.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.13.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.13.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.13.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.14.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.14.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.14.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.14.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.14.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.14.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.14.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.14.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.15.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.15.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.15.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.15.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.15.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.15.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.15.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.15.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.16.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.16.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.16.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.16.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.16.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.16.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.16.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.16.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.17.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.17.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.17.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.17.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.17.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.17.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.17.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.17.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.18.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.18.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.18.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.18.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.18.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.18.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.18.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.18.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.19.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.19.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.19.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.19.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.19.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.19.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.19.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.19.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.20.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.20.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.20.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.20.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.20.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.20.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.20.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.20.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.21.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.21.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.21.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.21.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.21.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.21.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.21.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.21.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.22.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.22.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.22.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.22.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.22.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.22.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.22.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.22.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.23.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.23.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.23.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.23.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.23.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.23.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.23.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.23.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.24.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.24.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.24.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.24.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.24.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.24.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.24.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.24.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.25.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.25.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.25.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.25.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.25.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.25.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.25.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.25.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.26.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.26.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.26.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.26.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.26.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.26.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.26.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.26.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.27.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.27.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.27.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.27.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.27.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.27.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.27.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.27.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.28.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.28.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.28.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.28.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.28.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.28.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.28.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.28.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.29.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.29.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.29.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.29.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.29.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.29.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.29.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.29.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.30.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.30.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.30.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.30.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.30.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.30.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.30.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.30.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.weight,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.attn_norm.bias,     torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.weight,    torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_norm.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:re-format attention.linear_qkv.weight
INFO:hf-to-gguf:blk.31.attn_qkv.weight,    torch.float16 --> F16, shape = {2560, 7680}
INFO:hf-to-gguf:re-format attention.linear_qkv.bias
INFO:hf-to-gguf:blk.31.attn_qkv.bias,      torch.float16 --> F32, shape = {7680}
INFO:hf-to-gguf:blk.31.attn_output.weight, torch.float16 --> F16, shape = {2560, 2560}
INFO:hf-to-gguf:blk.31.attn_output.bias,   torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:blk.31.ffn_up.weight,      torch.float16 --> F16, shape = {2560, 10240}
INFO:hf-to-gguf:blk.31.ffn_up.bias,        torch.float16 --> F32, shape = {10240}
INFO:hf-to-gguf:blk.31.ffn_down.weight,    torch.float16 --> F16, shape = {10240, 2560}
INFO:hf-to-gguf:blk.31.ffn_down.bias,      torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.weight,        torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output_norm.bias,          torch.float16 --> F32, shape = {2560}
INFO:hf-to-gguf:output.weight,             torch.float16 --> F16, shape = {2560, 50304}
INFO:hf-to-gguf:Set meta model
INFO:hf-to-gguf:Set model parameters
INFO:hf-to-gguf:Set model tokenizer
/mnt/llama.cpp/venv/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1617: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be deprecated in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884
  warnings.warn(
INFO:gguf.vocab:Adding 50009 merge(s).
INFO:gguf.vocab:Setting special token type bos to 0
INFO:gguf.vocab:Setting special token type eos to 0
INFO:gguf.vocab:Setting special token type unk to 0
INFO:hf-to-gguf:Set model quantization version
INFO:gguf.gguf_writer:Writing the following files:
INFO:gguf.gguf_writer:../models-mnt/pythia/2.8B/ggml-model-f16.gguf: n_tensors = 388, total_size = 5.6G
Writing:   0%|          | 0.00/5.55G [00:00<?, ?byte/s]Writing:   5%|▍         | 258M/5.55G [00:00<00:04, 1.11Gbyte/s]Writing:   7%|▋         | 415M/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  10%|█         | 572M/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  13%|█▎        | 730M/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  16%|█▌        | 887M/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  19%|█▉        | 1.04G/5.55G [00:00<00:04, 1.09Gbyte/s]Writing:  22%|██▏       | 1.20G/5.55G [00:01<00:04, 1.08Gbyte/s]Writing:  24%|██▍       | 1.36G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  27%|██▋       | 1.52G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  30%|███       | 1.67G/5.55G [00:01<00:03, 1.07Gbyte/s]Writing:  33%|███▎      | 1.83G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  36%|███▌      | 1.99G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  39%|███▊      | 2.15G/5.55G [00:01<00:03, 1.08Gbyte/s]Writing:  41%|████▏     | 2.30G/5.55G [00:02<00:03, 1.07Gbyte/s]Writing:  44%|████▍     | 2.46G/5.55G [00:02<00:02, 1.06Gbyte/s]Writing:  47%|████▋     | 2.62G/5.55G [00:02<00:02, 1.07Gbyte/s]Writing:  50%|████▉     | 2.78G/5.55G [00:02<00:02, 1.07Gbyte/s]Writing:  53%|█████▎    | 2.93G/5.55G [00:02<00:02, 1.08Gbyte/s]Writing:  56%|█████▌    | 3.09G/5.55G [00:02<00:02, 1.08Gbyte/s]Writing:  59%|█████▊    | 3.25G/5.55G [00:03<00:02, 1.09Gbyte/s]Writing:  61%|██████▏   | 3.41G/5.55G [00:03<00:02, 1.07Gbyte/s]Writing:  64%|██████▍   | 3.56G/5.55G [00:03<00:01, 1.07Gbyte/s]Writing:  67%|██████▋   | 3.72G/5.55G [00:03<00:01, 1.08Gbyte/s]Writing:  70%|██████▉   | 3.88G/5.55G [00:03<00:01, 1.08Gbyte/s]Writing:  73%|███████▎  | 4.04G/5.55G [00:03<00:01, 1.08Gbyte/s]Writing:  76%|███████▌  | 4.19G/5.55G [00:03<00:01, 1.08Gbyte/s]Writing:  78%|███████▊  | 4.35G/5.55G [00:04<00:01, 1.08Gbyte/s]Writing:  81%|████████  | 4.51G/5.55G [00:04<00:00, 1.08Gbyte/s]Writing:  84%|████████▍ | 4.67G/5.55G [00:04<00:00, 1.08Gbyte/s]Writing:  87%|████████▋ | 4.82G/5.55G [00:04<00:00, 1.07Gbyte/s]Writing:  90%|████████▉ | 4.98G/5.55G [00:04<00:00, 1.07Gbyte/s]Writing:  93%|█████████▎| 5.14G/5.55G [00:04<00:00, 1.06Gbyte/s]Writing:  95%|█████████▌| 5.29G/5.55G [00:04<00:00, 1.07Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.10Gbyte/s]Writing: 100%|██████████| 5.55G/5.55G [00:05<00:00, 1.06Gbyte/s]
INFO:hf-to-gguf:Model successfully exported to ../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_f16=../models-mnt/pythia/2.8B/ggml-model-f16.gguf
+ model_q8_0=../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf
+ model_q4_0=../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf
+ model_q4_1=../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf
+ model_q5_0=../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf
+ model_q5_1=../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf
+ model_q2_k=../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf
+ model_q3_k=../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf
+ model_q4_k=../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf
+ model_q5_k=../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf
+ model_q6_k=../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf
+ wiki_test=../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf q8_0
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf' as Q8_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q8_0 .. size =   245.62 MiB ->   130.49 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    12.50 MiB ->     6.64 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q8_0 .. size =    37.50 MiB ->    19.92 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q8_0 .. size =    50.00 MiB ->    26.56 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  2815.06 MB

main: quantize time = 24459.03 ms
main:    total time = 24459.03 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf q4_0
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf' as Q4_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_0 .. size =   245.62 MiB ->    69.08 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_0 .. size =    37.50 MiB ->    10.55 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_0 .. size =    50.00 MiB ->    14.06 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1523.91 MB

main: quantize time = 16649.63 ms
main:    total time = 16649.63 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf q4_1
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf' as Q4_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_1 .. size =   245.62 MiB ->    76.76 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    12.50 MiB ->     3.91 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_1 .. size =    37.50 MiB ->    11.72 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_1 .. size =    50.00 MiB ->    15.62 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1681.58 MB

main: quantize time = 16945.52 ms
main:    total time = 16945.52 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf q5_0
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf' as Q5_0
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_0 .. size =   245.62 MiB ->    84.43 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_0 .. size =    37.50 MiB ->    12.89 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_0 .. size =    50.00 MiB ->    17.19 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1839.26 MB

main: quantize time = 19974.76 ms
main:    total time = 19974.76 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf q5_1
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf' as Q5_1
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_1 .. size =   245.62 MiB ->    92.11 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    12.50 MiB ->     4.69 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_1 .. size =    37.50 MiB ->    14.06 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_1 .. size =    50.00 MiB ->    18.75 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1996.94 MB

main: quantize time = 20396.35 ms
main:    total time = 20396.35 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf q2_k
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf' as Q2_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q2_K .. size =   245.62 MiB ->    40.30 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q3_K .. size =    12.50 MiB ->     2.69 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q2_K .. size =    37.50 MiB ->     6.15 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q2_K .. size =    50.00 MiB ->     8.20 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1034.19 MB

main: quantize time = 38315.68 ms
main:    total time = 38315.68 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf q3_k
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf' as Q3_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q3_K .. size =   245.62 MiB ->    52.77 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q4_K .. size =    37.50 MiB ->    10.55 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q3_K .. size =    50.00 MiB ->    10.74 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1407.60 MB

main: quantize time = 42942.08 ms
main:    total time = 42942.08 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf q4_k
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf' as Q4_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q4_K .. size =   245.62 MiB ->    69.08 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q4_K .. size =    12.50 MiB ->     3.52 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q5_K .. size =    37.50 MiB ->    12.89 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q4_K .. size =    50.00 MiB ->    14.06 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1702.03 MB

main: quantize time = 51749.37 ms
main:    total time = 51749.37 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf q5_k
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf' as Q5_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q5_K .. size =   245.62 MiB ->    84.43 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q5_K .. size =    12.50 MiB ->     4.30 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q5_K .. size =    50.00 MiB ->    17.19 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  1972.07 MB

main: quantize time = 44294.78 ms
main:    total time = 44294.78 ms
+ ./bin/llama-quantize ../models-mnt/pythia/2.8B/ggml-model-f16.gguf ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf q6_k
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '../models-mnt/pythia/2.8B/ggml-model-f16.gguf' to '../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf' as Q6_K
llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type  f16:  130 tensors
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
[   1/ 388]                        output.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   2/ 388]                     output_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   3/ 388]                   output_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   4/ 388]                    token_embd.weight - [ 2560, 50304,     1,     1], type =    f16, converting to q6_K .. size =   245.62 MiB ->   100.74 MiB
[   5/ 388]                 blk.0.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   6/ 388]               blk.0.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   7/ 388]               blk.0.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[   8/ 388]             blk.0.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[   9/ 388]                  blk.0.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  10/ 388]                blk.0.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  11/ 388]                  blk.0.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  12/ 388]                blk.0.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  13/ 388]                  blk.0.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  14/ 388]                blk.0.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  15/ 388]                    blk.0.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  16/ 388]                  blk.0.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  17/ 388]                 blk.1.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  18/ 388]               blk.1.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  19/ 388]               blk.1.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  20/ 388]             blk.1.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  21/ 388]                  blk.1.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  22/ 388]                blk.1.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  23/ 388]                  blk.1.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  24/ 388]                blk.1.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  25/ 388]                  blk.1.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  26/ 388]                blk.1.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  27/ 388]                    blk.1.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  28/ 388]                  blk.1.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  29/ 388]                 blk.2.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  30/ 388]               blk.2.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  31/ 388]               blk.2.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  32/ 388]             blk.2.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  33/ 388]                  blk.2.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  34/ 388]                blk.2.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  35/ 388]                  blk.2.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  36/ 388]                blk.2.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  37/ 388]                  blk.2.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  38/ 388]                blk.2.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  39/ 388]                    blk.2.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  40/ 388]                  blk.2.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  41/ 388]                 blk.3.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  42/ 388]               blk.3.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  43/ 388]               blk.3.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  44/ 388]             blk.3.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  45/ 388]                  blk.3.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  46/ 388]                blk.3.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  47/ 388]                  blk.3.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  48/ 388]                blk.3.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  49/ 388]                  blk.3.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  50/ 388]                blk.3.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  51/ 388]                    blk.3.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  52/ 388]                  blk.3.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  53/ 388]                 blk.4.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  54/ 388]               blk.4.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  55/ 388]               blk.4.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  56/ 388]             blk.4.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  57/ 388]                  blk.4.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  58/ 388]                blk.4.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  59/ 388]                  blk.4.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  60/ 388]                blk.4.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  61/ 388]                  blk.4.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  62/ 388]                blk.4.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  63/ 388]                    blk.4.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  64/ 388]                  blk.4.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  65/ 388]                 blk.5.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  66/ 388]               blk.5.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  67/ 388]               blk.5.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  68/ 388]             blk.5.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  69/ 388]                  blk.5.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  70/ 388]                blk.5.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  71/ 388]                  blk.5.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  72/ 388]                blk.5.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  73/ 388]                  blk.5.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  74/ 388]                blk.5.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  75/ 388]                    blk.5.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  76/ 388]                  blk.5.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  77/ 388]                 blk.6.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  78/ 388]               blk.6.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  79/ 388]               blk.6.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  80/ 388]             blk.6.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  81/ 388]                  blk.6.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  82/ 388]                blk.6.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  83/ 388]                  blk.6.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  84/ 388]                blk.6.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  85/ 388]                  blk.6.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  86/ 388]                blk.6.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  87/ 388]                    blk.6.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[  88/ 388]                  blk.6.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  89/ 388]                 blk.7.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  90/ 388]               blk.7.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  91/ 388]               blk.7.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  92/ 388]             blk.7.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[  93/ 388]                  blk.7.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[  94/ 388]                blk.7.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[  95/ 388]                  blk.7.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  96/ 388]                blk.7.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[  97/ 388]                  blk.7.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  98/ 388]                blk.7.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[  99/ 388]                    blk.7.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 100/ 388]                  blk.7.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 101/ 388]                 blk.8.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 102/ 388]               blk.8.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 103/ 388]               blk.8.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 104/ 388]             blk.8.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 105/ 388]                  blk.8.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 106/ 388]                blk.8.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 107/ 388]                  blk.8.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 108/ 388]                blk.8.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 109/ 388]                  blk.8.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 110/ 388]                blk.8.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 111/ 388]                    blk.8.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 112/ 388]                  blk.8.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 113/ 388]                 blk.9.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 114/ 388]               blk.9.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 115/ 388]               blk.9.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 116/ 388]             blk.9.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 117/ 388]                  blk.9.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 118/ 388]                blk.9.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 119/ 388]                  blk.9.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 120/ 388]                blk.9.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 121/ 388]                  blk.9.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 122/ 388]                blk.9.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 123/ 388]                    blk.9.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 124/ 388]                  blk.9.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 125/ 388]                blk.10.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 126/ 388]              blk.10.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 127/ 388]              blk.10.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 128/ 388]            blk.10.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 129/ 388]                 blk.10.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 130/ 388]               blk.10.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 131/ 388]                 blk.10.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 132/ 388]               blk.10.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 133/ 388]                 blk.10.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 134/ 388]               blk.10.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 135/ 388]                   blk.10.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 136/ 388]                 blk.10.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 137/ 388]                blk.11.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 138/ 388]              blk.11.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 139/ 388]              blk.11.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 140/ 388]            blk.11.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 141/ 388]                 blk.11.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 142/ 388]               blk.11.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 143/ 388]                 blk.11.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 144/ 388]               blk.11.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 145/ 388]                 blk.11.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 146/ 388]               blk.11.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 147/ 388]                   blk.11.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 148/ 388]                 blk.11.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 149/ 388]                blk.12.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 150/ 388]              blk.12.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 151/ 388]              blk.12.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 152/ 388]            blk.12.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 153/ 388]                 blk.12.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 154/ 388]               blk.12.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 155/ 388]                 blk.12.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 156/ 388]               blk.12.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 157/ 388]                 blk.12.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 158/ 388]               blk.12.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 159/ 388]                   blk.12.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 160/ 388]                 blk.12.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 161/ 388]                blk.13.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 162/ 388]              blk.13.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 163/ 388]              blk.13.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 164/ 388]            blk.13.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 165/ 388]                 blk.13.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 166/ 388]               blk.13.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 167/ 388]                 blk.13.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 168/ 388]               blk.13.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 169/ 388]                 blk.13.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 170/ 388]               blk.13.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 171/ 388]                   blk.13.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 172/ 388]                 blk.13.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 173/ 388]                blk.14.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 174/ 388]              blk.14.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 175/ 388]              blk.14.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 176/ 388]            blk.14.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 177/ 388]                 blk.14.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 178/ 388]               blk.14.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 179/ 388]                 blk.14.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 180/ 388]               blk.14.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 181/ 388]                 blk.14.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 182/ 388]               blk.14.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 183/ 388]                   blk.14.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 184/ 388]                 blk.14.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 185/ 388]                blk.15.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 186/ 388]              blk.15.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 187/ 388]              blk.15.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 188/ 388]            blk.15.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 189/ 388]                 blk.15.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 190/ 388]               blk.15.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 191/ 388]                 blk.15.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 192/ 388]               blk.15.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 193/ 388]                 blk.15.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 194/ 388]               blk.15.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 195/ 388]                   blk.15.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 196/ 388]                 blk.15.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 197/ 388]                blk.16.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 198/ 388]              blk.16.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 199/ 388]              blk.16.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 200/ 388]            blk.16.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 201/ 388]                 blk.16.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 202/ 388]               blk.16.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 203/ 388]                 blk.16.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 204/ 388]               blk.16.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 205/ 388]                 blk.16.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 206/ 388]               blk.16.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 207/ 388]                   blk.16.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 208/ 388]                 blk.16.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 209/ 388]                blk.17.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 210/ 388]              blk.17.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 211/ 388]              blk.17.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 212/ 388]            blk.17.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 213/ 388]                 blk.17.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 214/ 388]               blk.17.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 215/ 388]                 blk.17.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 216/ 388]               blk.17.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 217/ 388]                 blk.17.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 218/ 388]               blk.17.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 219/ 388]                   blk.17.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 220/ 388]                 blk.17.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 221/ 388]                blk.18.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 222/ 388]              blk.18.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 223/ 388]              blk.18.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 224/ 388]            blk.18.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 225/ 388]                 blk.18.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 226/ 388]               blk.18.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 227/ 388]                 blk.18.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 228/ 388]               blk.18.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 229/ 388]                 blk.18.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 230/ 388]               blk.18.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 231/ 388]                   blk.18.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 232/ 388]                 blk.18.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 233/ 388]                blk.19.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 234/ 388]              blk.19.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 235/ 388]              blk.19.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 236/ 388]            blk.19.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 237/ 388]                 blk.19.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 238/ 388]               blk.19.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 239/ 388]                 blk.19.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 240/ 388]               blk.19.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 241/ 388]                 blk.19.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 242/ 388]               blk.19.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 243/ 388]                   blk.19.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 244/ 388]                 blk.19.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 245/ 388]                blk.20.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 246/ 388]              blk.20.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 247/ 388]              blk.20.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 248/ 388]            blk.20.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 249/ 388]                 blk.20.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 250/ 388]               blk.20.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 251/ 388]                 blk.20.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 252/ 388]               blk.20.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 253/ 388]                 blk.20.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 254/ 388]               blk.20.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 255/ 388]                   blk.20.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 256/ 388]                 blk.20.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 257/ 388]                blk.21.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 258/ 388]              blk.21.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 259/ 388]              blk.21.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 260/ 388]            blk.21.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 261/ 388]                 blk.21.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 262/ 388]               blk.21.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 263/ 388]                 blk.21.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 264/ 388]               blk.21.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 265/ 388]                 blk.21.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 266/ 388]               blk.21.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 267/ 388]                   blk.21.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 268/ 388]                 blk.21.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 269/ 388]                blk.22.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 270/ 388]              blk.22.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 271/ 388]              blk.22.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 272/ 388]            blk.22.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 273/ 388]                 blk.22.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 274/ 388]               blk.22.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 275/ 388]                 blk.22.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 276/ 388]               blk.22.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 277/ 388]                 blk.22.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 278/ 388]               blk.22.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 279/ 388]                   blk.22.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 280/ 388]                 blk.22.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 281/ 388]                blk.23.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 282/ 388]              blk.23.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 283/ 388]              blk.23.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 284/ 388]            blk.23.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 285/ 388]                 blk.23.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 286/ 388]               blk.23.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 287/ 388]                 blk.23.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 288/ 388]               blk.23.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 289/ 388]                 blk.23.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 290/ 388]               blk.23.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 291/ 388]                   blk.23.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 292/ 388]                 blk.23.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 293/ 388]                blk.24.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 294/ 388]              blk.24.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 295/ 388]              blk.24.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 296/ 388]            blk.24.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 297/ 388]                 blk.24.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 298/ 388]               blk.24.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 299/ 388]                 blk.24.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 300/ 388]               blk.24.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 301/ 388]                 blk.24.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 302/ 388]               blk.24.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 303/ 388]                   blk.24.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 304/ 388]                 blk.24.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 305/ 388]                blk.25.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 306/ 388]              blk.25.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 307/ 388]              blk.25.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 308/ 388]            blk.25.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 309/ 388]                 blk.25.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 310/ 388]               blk.25.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 311/ 388]                 blk.25.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 312/ 388]               blk.25.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 313/ 388]                 blk.25.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 314/ 388]               blk.25.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 315/ 388]                   blk.25.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 316/ 388]                 blk.25.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 317/ 388]                blk.26.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 318/ 388]              blk.26.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 319/ 388]              blk.26.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 320/ 388]            blk.26.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 321/ 388]                 blk.26.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 322/ 388]               blk.26.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 323/ 388]                 blk.26.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 324/ 388]               blk.26.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 325/ 388]                 blk.26.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 326/ 388]               blk.26.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 327/ 388]                   blk.26.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 328/ 388]                 blk.26.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 329/ 388]                blk.27.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 330/ 388]              blk.27.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 331/ 388]              blk.27.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 332/ 388]            blk.27.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 333/ 388]                 blk.27.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 334/ 388]               blk.27.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 335/ 388]                 blk.27.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 336/ 388]               blk.27.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 337/ 388]                 blk.27.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 338/ 388]               blk.27.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 339/ 388]                   blk.27.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 340/ 388]                 blk.27.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 341/ 388]                blk.28.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 342/ 388]              blk.28.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 343/ 388]              blk.28.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 344/ 388]            blk.28.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 345/ 388]                 blk.28.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 346/ 388]               blk.28.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 347/ 388]                 blk.28.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 348/ 388]               blk.28.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 349/ 388]                 blk.28.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 350/ 388]               blk.28.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 351/ 388]                   blk.28.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 352/ 388]                 blk.28.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 353/ 388]                blk.29.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 354/ 388]              blk.29.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 355/ 388]              blk.29.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 356/ 388]            blk.29.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 357/ 388]                 blk.29.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 358/ 388]               blk.29.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 359/ 388]                 blk.29.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 360/ 388]               blk.29.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 361/ 388]                 blk.29.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 362/ 388]               blk.29.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 363/ 388]                   blk.29.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 364/ 388]                 blk.29.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 365/ 388]                blk.30.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 366/ 388]              blk.30.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 367/ 388]              blk.30.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 368/ 388]            blk.30.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 369/ 388]                 blk.30.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 370/ 388]               blk.30.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 371/ 388]                 blk.30.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 372/ 388]               blk.30.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 373/ 388]                 blk.30.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 374/ 388]               blk.30.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 375/ 388]                   blk.30.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 376/ 388]                 blk.30.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 377/ 388]                blk.31.attn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 378/ 388]              blk.31.attn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 379/ 388]              blk.31.attn_output.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 380/ 388]            blk.31.attn_output.weight - [ 2560,  2560,     1,     1], type =    f16, converting to q6_K .. size =    12.50 MiB ->     5.13 MiB
[ 381/ 388]                 blk.31.attn_qkv.bias - [ 7680,     1,     1,     1], type =    f32, size =    0.029 MB
[ 382/ 388]               blk.31.attn_qkv.weight - [ 2560,  7680,     1,     1], type =    f16, converting to q6_K .. size =    37.50 MiB ->    15.38 MiB
[ 383/ 388]                 blk.31.ffn_down.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 384/ 388]               blk.31.ffn_down.weight - [10240,  2560,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
[ 385/ 388]                 blk.31.ffn_norm.bias - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 386/ 388]               blk.31.ffn_norm.weight - [ 2560,     1,     1,     1], type =    f32, size =    0.010 MB
[ 387/ 388]                   blk.31.ffn_up.bias - [10240,     1,     1,     1], type =    f32, size =    0.039 MB
[ 388/ 388]                 blk.31.ffn_up.weight - [ 2560, 10240,     1,     1], type =    f16, converting to q6_K .. size =    50.00 MiB ->    20.51 MiB
llama_model_quantize_impl: model size  =  5295.33 MB
llama_model_quantize_impl: quant size  =  2174.32 MB

main: quantize time = 37520.08 ms
main:    total time = 37520.08 ms
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.201 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.546 I main: llama backend init
0.00.000.558 I main: load the model and apply lora adapter, if any
0.00.296.141 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.312.051 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.312.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.312.083 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.312.085 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.312.087 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.312.088 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.312.089 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.312.094 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.312.095 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.312.096 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.312.097 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.312.098 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.312.100 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.312.101 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.312.116 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.312.117 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.312.117 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.319.037 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.320.800 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.327.490 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.327.496 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.327.497 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.327.498 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.327.499 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.327.501 I llama_model_loader: - type  f32:  258 tensors
0.00.327.503 I llama_model_loader: - type  f16:  130 tensors
0.00.327.505 I print_info: file format = GGUF V3 (latest)
0.00.327.506 I print_info: file type   = all F32 (guessed)
0.00.327.510 I print_info: file size   = 5.17 GiB (16.01 BPW) 
0.00.371.949 I load: special tokens cache size = 25
0.00.393.985 I load: token to piece cache size = 0.2984 MB
0.00.394.003 I print_info: arch             = gptneox
0.00.394.003 I print_info: vocab_only       = 0
0.00.394.004 I print_info: n_ctx_train      = 2048
0.00.394.004 I print_info: n_embd           = 2560
0.00.394.005 I print_info: n_layer          = 32
0.00.394.017 I print_info: n_head           = 32
0.00.394.019 I print_info: n_head_kv        = 32
0.00.394.020 I print_info: n_rot            = 20
0.00.394.020 I print_info: n_swa            = 0
0.00.394.021 I print_info: n_embd_head_k    = 80
0.00.394.021 I print_info: n_embd_head_v    = 80
0.00.394.024 I print_info: n_gqa            = 1
0.00.394.026 I print_info: n_embd_k_gqa     = 2560
0.00.394.028 I print_info: n_embd_v_gqa     = 2560
0.00.394.029 I print_info: f_norm_eps       = 1.0e-05
0.00.394.031 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.394.032 I print_info: f_clamp_kqv      = 0.0e+00
0.00.394.032 I print_info: f_max_alibi_bias = 0.0e+00
0.00.394.033 I print_info: f_logit_scale    = 0.0e+00
0.00.394.034 I print_info: n_ff             = 10240
0.00.394.035 I print_info: n_expert         = 0
0.00.394.035 I print_info: n_expert_used    = 0
0.00.394.036 I print_info: causal attn      = 1
0.00.394.036 I print_info: pooling type     = 0
0.00.394.038 I print_info: rope type        = 2
0.00.394.038 I print_info: rope scaling     = linear
0.00.394.040 I print_info: freq_base_train  = 10000.0
0.00.394.041 I print_info: freq_scale_train = 1
0.00.394.041 I print_info: n_ctx_orig_yarn  = 2048
0.00.394.042 I print_info: rope_finetuned   = unknown
0.00.394.042 I print_info: ssm_d_conv       = 0
0.00.394.042 I print_info: ssm_d_inner      = 0
0.00.394.043 I print_info: ssm_d_state      = 0
0.00.394.044 I print_info: ssm_dt_rank      = 0
0.00.394.045 I print_info: ssm_dt_b_c_rms   = 0
0.00.394.046 I print_info: model type       = 2.8B
0.00.394.047 I print_info: model params     = 2.78 B
0.00.394.048 I print_info: general.name     = 2.8B
0.00.394.050 I print_info: vocab type       = BPE
0.00.394.052 I print_info: n_vocab          = 50304
0.00.394.055 I print_info: n_merges         = 50009
0.00.394.056 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.394.056 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.394.058 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.394.059 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.394.060 I print_info: LF token         = 187 'Ċ'
0.00.394.061 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.394.061 I print_info: max token length = 1024
0.00.394.067 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.724.774 I load_tensors: offloading 32 repeating layers to GPU
0.00.724.785 I load_tensors: offloading output layer to GPU
0.00.724.785 I load_tensors: offloaded 33/33 layers to GPU
0.00.724.794 I load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.724.796 I load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.605.178 I llama_context_unified: n_seq_max     = 1
0.01.605.183 I llama_context_unified: n_ctx         = 2048
0.01.605.183 I llama_context_unified: n_ctx_per_seq = 2048
0.01.605.184 I llama_context_unified: n_batch       = 2048
0.01.605.184 I llama_context_unified: n_ubatch      = 512
0.01.605.185 I llama_context_unified: flash_attn    = 0
0.01.605.191 I llama_context_unified: freq_base     = 10000.0
0.01.605.192 I llama_context_unified: freq_scale    = 1
0.01.605.238 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.01.606.494 I init:      CUDA0 KV buffer size =   640.00 MiB
0.01.606.507 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.607.731 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.01.617.452 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.01.617.460 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.01.617.460 I llama_context_unified: graph nodes  = 1287
0.01.617.461 I llama_context_unified: graph splits = 2
0.01.617.475 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.01.617.967 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.617.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.695.826 I main: llama threadpool init, n_threads = 1
0.01.695.847 I 
0.01.695.935 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.695.941 I 
0.01.696.056 I sampler seed: 1234
0.01.696.071 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.696.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.696.075 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.696.075 I 
I believe the meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live well." "The meaning of life is to help people live

0.04.293.620 I llama_perf_sampler_print:    sampling time =      10.85 ms /   263 runs   (    0.04 ms per token, 24230.70 tokens per second)
0.04.293.623 I llama_perf_context_print:        load time =    1398.03 ms
0.04.293.624 I llama_perf_context_print: prompt eval time =      14.27 ms /     7 tokens (    2.04 ms per token,   490.40 tokens per second)
0.04.293.626 I llama_perf_context_print:        eval time =    2547.56 ms /   255 runs   (    9.99 ms per token,   100.10 tokens per second)
0.04.293.629 I llama_perf_context_print:       total time =    2599.44 ms /   262 tokens

real	0m4.863s
user	0m3.701s
sys	0m1.154s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.548 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.864 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.265.006 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.281.056 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.281.081 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.281.091 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.281.092 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.281.093 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.281.095 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.281.096 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.281.100 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.281.102 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.281.104 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.281.105 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.281.105 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.281.106 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.281.108 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.281.115 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.281.116 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.281.117 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.288.050 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.289.797 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.296.632 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.296.640 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.296.641 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.296.642 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.296.643 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.296.644 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.296.646 I llama_model_loader: - type  f32:  258 tensors
0.00.296.646 I llama_model_loader: - type q8_0:  130 tensors
0.00.296.649 I print_info: file format = GGUF V3 (latest)
0.00.296.650 I print_info: file type   = Q8_0
0.00.296.652 I print_info: file size   = 2.75 GiB (8.51 BPW) 
0.00.340.274 I load: special tokens cache size = 25
0.00.362.171 I load: token to piece cache size = 0.2984 MB
0.00.362.187 I print_info: arch             = gptneox
0.00.362.188 I print_info: vocab_only       = 0
0.00.362.189 I print_info: n_ctx_train      = 2048
0.00.362.189 I print_info: n_embd           = 2560
0.00.362.190 I print_info: n_layer          = 32
0.00.362.201 I print_info: n_head           = 32
0.00.362.204 I print_info: n_head_kv        = 32
0.00.362.205 I print_info: n_rot            = 20
0.00.362.205 I print_info: n_swa            = 0
0.00.362.206 I print_info: n_embd_head_k    = 80
0.00.362.206 I print_info: n_embd_head_v    = 80
0.00.362.209 I print_info: n_gqa            = 1
0.00.362.210 I print_info: n_embd_k_gqa     = 2560
0.00.362.212 I print_info: n_embd_v_gqa     = 2560
0.00.362.214 I print_info: f_norm_eps       = 1.0e-05
0.00.362.215 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.362.215 I print_info: f_clamp_kqv      = 0.0e+00
0.00.362.216 I print_info: f_max_alibi_bias = 0.0e+00
0.00.362.217 I print_info: f_logit_scale    = 0.0e+00
0.00.362.218 I print_info: n_ff             = 10240
0.00.362.219 I print_info: n_expert         = 0
0.00.362.219 I print_info: n_expert_used    = 0
0.00.362.221 I print_info: causal attn      = 1
0.00.362.221 I print_info: pooling type     = 0
0.00.362.222 I print_info: rope type        = 2
0.00.362.222 I print_info: rope scaling     = linear
0.00.362.224 I print_info: freq_base_train  = 10000.0
0.00.362.225 I print_info: freq_scale_train = 1
0.00.362.225 I print_info: n_ctx_orig_yarn  = 2048
0.00.362.226 I print_info: rope_finetuned   = unknown
0.00.362.226 I print_info: ssm_d_conv       = 0
0.00.362.227 I print_info: ssm_d_inner      = 0
0.00.362.227 I print_info: ssm_d_state      = 0
0.00.362.228 I print_info: ssm_dt_rank      = 0
0.00.362.228 I print_info: ssm_dt_b_c_rms   = 0
0.00.362.229 I print_info: model type       = 2.8B
0.00.362.231 I print_info: model params     = 2.78 B
0.00.362.232 I print_info: general.name     = 2.8B
0.00.362.235 I print_info: vocab type       = BPE
0.00.362.237 I print_info: n_vocab          = 50304
0.00.362.238 I print_info: n_merges         = 50009
0.00.362.238 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.362.239 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.362.239 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.362.240 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.362.240 I print_info: LF token         = 187 'Ċ'
0.00.362.241 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.362.242 I print_info: max token length = 1024
0.00.362.243 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.546.599 I load_tensors: offloading 32 repeating layers to GPU
0.00.546.610 I load_tensors: offloading output layer to GPU
0.00.546.611 I load_tensors: offloaded 33/33 layers to GPU
0.00.546.619 I load_tensors:        CUDA0 model buffer size =  2684.57 MiB
0.00.546.621 I load_tensors:   CPU_Mapped model buffer size =   130.49 MiB
.............................................................................................
0.01.072.527 I llama_context_unified: n_seq_max     = 1
0.01.072.532 I llama_context_unified: n_ctx         = 2048
0.01.072.533 I llama_context_unified: n_ctx_per_seq = 2048
0.01.072.534 I llama_context_unified: n_batch       = 2048
0.01.072.534 I llama_context_unified: n_ubatch      = 512
0.01.072.535 I llama_context_unified: flash_attn    = 0
0.01.072.540 I llama_context_unified: freq_base     = 10000.0
0.01.072.541 I llama_context_unified: freq_scale    = 1
0.01.072.579 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.01.073.883 I init:      CUDA0 KV buffer size =   640.00 MiB
0.01.073.897 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.075.128 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.01.084.647 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.01.084.656 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.01.084.657 I llama_context_unified: graph nodes  = 1287
0.01.084.658 I llama_context_unified: graph splits = 2
0.01.084.668 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.01.085.159 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.085.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.154.708 I main: llama threadpool init, n_threads = 1
0.01.154.725 I 
0.01.154.807 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.154.813 I 
0.01.154.921 I sampler seed: 1234
0.01.154.935 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.154.938 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.154.939 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.154.939 I 
I believe the meaning of life is to help people.”

For the past eight years, the organization has been at the forefront of the fight against the disease. “If you’re going to save a life, save a life,” said Dr. Jolie, “because every second counts.”

“When I was in the hospital, I was so scared because I didn’t know how much time I had left,” said Lydia. “I remember watching my little sister cry, and I was in that room for two weeks. I was scared and I was scared to get out.”

“They say that the reason they’re doing what they’re doing is because of the generosity of the people of Utah,” said Dr. Jolie. “They say that if we continue to have this kind of generosity, that it will help other people like my little sisters.”

“I know that my little sisters are in a place where they’re happy and they’re doing what they want to do,” said Lydia. “And that’s all I want for my little sisters. So I can’t really ask for anything more.”

The organization has donated more than $2.5 million dollars to date to help patients. “I’m

0.03.187.462 I llama_perf_sampler_print:    sampling time =      11.57 ms /   263 runs   (    0.04 ms per token, 22729.24 tokens per second)
0.03.187.466 I llama_perf_context_print:        load time =     887.90 ms
0.03.187.468 I llama_perf_context_print: prompt eval time =      10.91 ms /     7 tokens (    1.56 ms per token,   641.38 tokens per second)
0.03.187.469 I llama_perf_context_print:        eval time =    1984.96 ms /   255 runs   (    7.78 ms per token,   128.47 tokens per second)
0.03.187.471 I llama_perf_context_print:       total time =    2034.55 ms /   262 tokens

real	0m3.468s
user	0m2.634s
sys	0m0.837s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.704 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.092 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.272.551 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.288.974 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.288.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.289.010 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.289.011 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.289.012 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.289.014 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.289.015 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.289.019 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.289.020 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.289.021 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.289.022 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.289.023 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.289.025 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.289.027 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.289.036 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.289.037 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.289.038 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.295.838 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.297.585 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.304.380 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.304.388 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.304.389 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.304.389 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.304.390 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.304.391 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.304.393 I llama_model_loader: - type  f32:  258 tensors
0.00.304.394 I llama_model_loader: - type q4_0:  129 tensors
0.00.304.394 I llama_model_loader: - type q6_K:    1 tensors
0.00.304.398 I print_info: file format = GGUF V3 (latest)
0.00.304.399 I print_info: file type   = Q4_0
0.00.304.402 I print_info: file size   = 1.49 GiB (4.61 BPW) 
0.00.350.248 I load: special tokens cache size = 25
0.00.373.614 I load: token to piece cache size = 0.2984 MB
0.00.373.635 I print_info: arch             = gptneox
0.00.373.636 I print_info: vocab_only       = 0
0.00.373.637 I print_info: n_ctx_train      = 2048
0.00.373.637 I print_info: n_embd           = 2560
0.00.373.638 I print_info: n_layer          = 32
0.00.373.653 I print_info: n_head           = 32
0.00.373.655 I print_info: n_head_kv        = 32
0.00.373.655 I print_info: n_rot            = 20
0.00.373.656 I print_info: n_swa            = 0
0.00.373.657 I print_info: n_embd_head_k    = 80
0.00.373.658 I print_info: n_embd_head_v    = 80
0.00.373.661 I print_info: n_gqa            = 1
0.00.373.663 I print_info: n_embd_k_gqa     = 2560
0.00.373.665 I print_info: n_embd_v_gqa     = 2560
0.00.373.667 I print_info: f_norm_eps       = 1.0e-05
0.00.373.667 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.373.668 I print_info: f_clamp_kqv      = 0.0e+00
0.00.373.669 I print_info: f_max_alibi_bias = 0.0e+00
0.00.373.669 I print_info: f_logit_scale    = 0.0e+00
0.00.373.670 I print_info: n_ff             = 10240
0.00.373.671 I print_info: n_expert         = 0
0.00.373.671 I print_info: n_expert_used    = 0
0.00.373.672 I print_info: causal attn      = 1
0.00.373.672 I print_info: pooling type     = 0
0.00.373.673 I print_info: rope type        = 2
0.00.373.674 I print_info: rope scaling     = linear
0.00.373.675 I print_info: freq_base_train  = 10000.0
0.00.373.677 I print_info: freq_scale_train = 1
0.00.373.679 I print_info: n_ctx_orig_yarn  = 2048
0.00.373.679 I print_info: rope_finetuned   = unknown
0.00.373.680 I print_info: ssm_d_conv       = 0
0.00.373.681 I print_info: ssm_d_inner      = 0
0.00.373.682 I print_info: ssm_d_state      = 0
0.00.373.682 I print_info: ssm_dt_rank      = 0
0.00.373.682 I print_info: ssm_dt_b_c_rms   = 0
0.00.373.683 I print_info: model type       = 2.8B
0.00.373.684 I print_info: model params     = 2.78 B
0.00.373.685 I print_info: general.name     = 2.8B
0.00.373.687 I print_info: vocab type       = BPE
0.00.373.689 I print_info: n_vocab          = 50304
0.00.373.689 I print_info: n_merges         = 50009
0.00.373.690 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.373.690 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.373.692 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.373.692 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.373.693 I print_info: LF token         = 187 'Ċ'
0.00.373.693 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.373.694 I print_info: max token length = 1024
0.00.373.696 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.472.372 I load_tensors: offloading 32 repeating layers to GPU
0.00.472.385 I load_tensors: offloading output layer to GPU
0.00.472.386 I load_tensors: offloaded 33/33 layers to GPU
0.00.472.394 I load_tensors:        CUDA0 model buffer size =  1454.83 MiB
0.00.472.396 I load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
0.00.777.102 I llama_context_unified: n_seq_max     = 1
0.00.777.109 I llama_context_unified: n_ctx         = 2048
0.00.777.109 I llama_context_unified: n_ctx_per_seq = 2048
0.00.777.110 I llama_context_unified: n_batch       = 2048
0.00.777.110 I llama_context_unified: n_ubatch      = 512
0.00.777.111 I llama_context_unified: flash_attn    = 0
0.00.777.116 I llama_context_unified: freq_base     = 10000.0
0.00.777.117 I llama_context_unified: freq_scale    = 1
0.00.777.157 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.778.473 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.778.487 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.779.733 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.789.313 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.789.323 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.789.324 I llama_context_unified: graph nodes  = 1287
0.00.789.325 I llama_context_unified: graph splits = 2
0.00.789.336 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.789.826 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.789.829 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.858.150 I main: llama threadpool init, n_threads = 1
0.00.858.168 I 
0.00.858.251 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.858.257 I 
0.00.858.368 I sampler seed: 1234
0.00.858.383 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.858.387 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.858.389 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.858.389 I 
I believe the meaning of life is to laugh until you’re in stitches, and to dance until you can’t anymore. I believe that every single life is a precious gift. I believe that if we all gave our life, there would be less to give. And I believe that there is no more important thing in the world than to live your life to the fullest, to give your all to what you do, and to enjoy yourself to the utmost. I believe that laughter is the best medicine, and that laughter is the best medicine to keep your mind clear of the doubts and the worries. I believe in being true to your self and being true to your family. I believe in being true to your community. I believe in being true to your faith. I believe in being true to your country. I believe in being true to your country, your community, and your family.

I believe in being true to your friends. I believe in being true to your work ethic. I believe in being true to your friends, your family, your country, your community, and your faith.

I believe in being true to your dreams. I believe that your dreams are just as important as your goals. I believe that your goals are just as important as your dreams.

I

0.02.454.867 I llama_perf_sampler_print:    sampling time =      11.47 ms /   263 runs   (    0.04 ms per token, 22933.38 tokens per second)
0.02.454.870 I llama_perf_context_print:        load time =     583.94 ms
0.02.454.873 I llama_perf_context_print: prompt eval time =       9.84 ms /     7 tokens (    1.41 ms per token,   711.60 tokens per second)
0.02.454.876 I llama_perf_context_print:        eval time =    1550.40 ms /   255 runs   (    6.08 ms per token,   164.47 tokens per second)
0.02.454.877 I llama_perf_context_print:       total time =    1598.37 ms /   262 tokens

real	0m2.730s
user	0m2.023s
sys	0m0.710s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.177 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.516 I main: llama backend init
0.00.000.527 I main: load the model and apply lora adapter, if any
0.00.288.562 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.305.224 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.305.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.305.259 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.305.260 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.305.261 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.305.262 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.305.262 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.305.267 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.305.267 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.305.268 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.305.269 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.305.270 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.305.271 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.305.273 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.305.281 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.305.282 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.305.283 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.312.093 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.313.834 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.320.626 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.320.635 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.320.636 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.320.636 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.320.637 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.320.638 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.320.640 I llama_model_loader: - type  f32:  258 tensors
0.00.320.641 I llama_model_loader: - type q4_1:  129 tensors
0.00.320.642 I llama_model_loader: - type q6_K:    1 tensors
0.00.320.644 I print_info: file format = GGUF V3 (latest)
0.00.320.645 I print_info: file type   = Q4_1
0.00.320.647 I print_info: file size   = 1.64 GiB (5.08 BPW) 
0.00.368.207 I load: special tokens cache size = 25
0.00.390.060 I load: token to piece cache size = 0.2984 MB
0.00.390.086 I print_info: arch             = gptneox
0.00.390.087 I print_info: vocab_only       = 0
0.00.390.087 I print_info: n_ctx_train      = 2048
0.00.390.088 I print_info: n_embd           = 2560
0.00.390.088 I print_info: n_layer          = 32
0.00.390.101 I print_info: n_head           = 32
0.00.390.105 I print_info: n_head_kv        = 32
0.00.390.105 I print_info: n_rot            = 20
0.00.390.105 I print_info: n_swa            = 0
0.00.390.106 I print_info: n_embd_head_k    = 80
0.00.390.107 I print_info: n_embd_head_v    = 80
0.00.390.109 I print_info: n_gqa            = 1
0.00.390.111 I print_info: n_embd_k_gqa     = 2560
0.00.390.114 I print_info: n_embd_v_gqa     = 2560
0.00.390.116 I print_info: f_norm_eps       = 1.0e-05
0.00.390.116 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.390.117 I print_info: f_clamp_kqv      = 0.0e+00
0.00.390.118 I print_info: f_max_alibi_bias = 0.0e+00
0.00.390.119 I print_info: f_logit_scale    = 0.0e+00
0.00.390.120 I print_info: n_ff             = 10240
0.00.390.121 I print_info: n_expert         = 0
0.00.390.122 I print_info: n_expert_used    = 0
0.00.390.122 I print_info: causal attn      = 1
0.00.390.123 I print_info: pooling type     = 0
0.00.390.123 I print_info: rope type        = 2
0.00.390.123 I print_info: rope scaling     = linear
0.00.390.125 I print_info: freq_base_train  = 10000.0
0.00.390.126 I print_info: freq_scale_train = 1
0.00.390.126 I print_info: n_ctx_orig_yarn  = 2048
0.00.390.127 I print_info: rope_finetuned   = unknown
0.00.390.128 I print_info: ssm_d_conv       = 0
0.00.390.128 I print_info: ssm_d_inner      = 0
0.00.390.129 I print_info: ssm_d_state      = 0
0.00.390.129 I print_info: ssm_dt_rank      = 0
0.00.390.129 I print_info: ssm_dt_b_c_rms   = 0
0.00.390.130 I print_info: model type       = 2.8B
0.00.390.131 I print_info: model params     = 2.78 B
0.00.390.131 I print_info: general.name     = 2.8B
0.00.390.134 I print_info: vocab type       = BPE
0.00.390.135 I print_info: n_vocab          = 50304
0.00.390.136 I print_info: n_merges         = 50009
0.00.390.136 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.390.138 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.390.138 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.390.138 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.390.140 I print_info: LF token         = 187 'Ċ'
0.00.390.141 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.390.141 I print_info: max token length = 1024
0.00.390.143 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.499.875 I load_tensors: offloading 32 repeating layers to GPU
0.00.499.885 I load_tensors: offloading output layer to GPU
0.00.499.886 I load_tensors: offloaded 33/33 layers to GPU
0.00.499.894 I load_tensors:        CUDA0 model buffer size =  1604.83 MiB
0.00.499.895 I load_tensors:   CPU_Mapped model buffer size =    76.76 MiB
............................................................................................
0.00.815.920 I llama_context_unified: n_seq_max     = 1
0.00.815.925 I llama_context_unified: n_ctx         = 2048
0.00.815.926 I llama_context_unified: n_ctx_per_seq = 2048
0.00.815.926 I llama_context_unified: n_batch       = 2048
0.00.815.927 I llama_context_unified: n_ubatch      = 512
0.00.815.928 I llama_context_unified: flash_attn    = 0
0.00.815.933 I llama_context_unified: freq_base     = 10000.0
0.00.815.934 I llama_context_unified: freq_scale    = 1
0.00.815.991 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.817.235 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.817.249 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.818.457 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.828.808 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.828.817 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.828.818 I llama_context_unified: graph nodes  = 1287
0.00.828.819 I llama_context_unified: graph splits = 2
0.00.828.830 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.829.319 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.829.323 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.897.638 I main: llama threadpool init, n_threads = 1
0.00.897.656 I 
0.00.897.739 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.897.744 I 
0.00.897.846 I sampler seed: 1234
0.00.897.860 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.897.865 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.897.866 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.897.866 I 
I believe the meaning of life is to know God, but I don’t know how to do that.”

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our life without an understanding of God.

“If you ask me, ‘What is the meaning of life?’, I’ll tell you. I’m a scientist. I’m an agnostic. But if I had to choose between atheism and Christianity, I’d choose Christianity.

“If you ask me, ‘Why am I here?’, I’d say that it’s to know God. But I don’t know how to get to know God. That’s the problem.

“I don’t know how to get there. I don’t know how to get to know God. I have no idea where to go.

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our life without an understanding of God.”

“I’m not sure that we could have a meaningful conversation with God if we understood God. We’re going to have to live our

0.02.508.106 I llama_perf_sampler_print:    sampling time =      11.00 ms /   263 runs   (    0.04 ms per token, 23911.26 tokens per second)
0.02.508.110 I llama_perf_context_print:        load time =     607.46 ms
0.02.508.111 I llama_perf_context_print: prompt eval time =       9.06 ms /     7 tokens (    1.29 ms per token,   772.71 tokens per second)
0.02.508.113 I llama_perf_context_print:        eval time =    1563.95 ms /   255 runs   (    6.13 ms per token,   163.05 tokens per second)
0.02.508.114 I llama_perf_context_print:       total time =    1612.07 ms /   262 tokens

real	0m2.790s
user	0m2.070s
sys	0m0.719s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.176 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.503 I main: llama backend init
0.00.000.514 I main: load the model and apply lora adapter, if any
0.00.266.619 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.283.071 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.283.094 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.283.106 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.283.111 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.283.111 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.283.112 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.283.113 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.283.117 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.283.118 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.283.119 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.283.120 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.283.121 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.283.122 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.283.123 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.283.132 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.283.133 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.283.134 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.289.894 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.291.686 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.298.432 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.298.439 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.298.439 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.298.440 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.298.441 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.298.442 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.298.444 I llama_model_loader: - type  f32:  258 tensors
0.00.298.445 I llama_model_loader: - type q5_0:  129 tensors
0.00.298.446 I llama_model_loader: - type q6_K:    1 tensors
0.00.298.448 I print_info: file format = GGUF V3 (latest)
0.00.298.449 I print_info: file type   = Q5_0
0.00.298.451 I print_info: file size   = 1.80 GiB (5.56 BPW) 
0.00.344.203 I load: special tokens cache size = 25
0.00.367.605 I load: token to piece cache size = 0.2984 MB
0.00.367.629 I print_info: arch             = gptneox
0.00.367.630 I print_info: vocab_only       = 0
0.00.367.630 I print_info: n_ctx_train      = 2048
0.00.367.631 I print_info: n_embd           = 2560
0.00.367.631 I print_info: n_layer          = 32
0.00.367.647 I print_info: n_head           = 32
0.00.367.650 I print_info: n_head_kv        = 32
0.00.367.650 I print_info: n_rot            = 20
0.00.367.651 I print_info: n_swa            = 0
0.00.367.652 I print_info: n_embd_head_k    = 80
0.00.367.653 I print_info: n_embd_head_v    = 80
0.00.367.655 I print_info: n_gqa            = 1
0.00.367.658 I print_info: n_embd_k_gqa     = 2560
0.00.367.660 I print_info: n_embd_v_gqa     = 2560
0.00.367.662 I print_info: f_norm_eps       = 1.0e-05
0.00.367.663 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.367.663 I print_info: f_clamp_kqv      = 0.0e+00
0.00.367.664 I print_info: f_max_alibi_bias = 0.0e+00
0.00.367.665 I print_info: f_logit_scale    = 0.0e+00
0.00.367.667 I print_info: n_ff             = 10240
0.00.367.667 I print_info: n_expert         = 0
0.00.367.668 I print_info: n_expert_used    = 0
0.00.367.669 I print_info: causal attn      = 1
0.00.367.670 I print_info: pooling type     = 0
0.00.367.670 I print_info: rope type        = 2
0.00.367.671 I print_info: rope scaling     = linear
0.00.367.673 I print_info: freq_base_train  = 10000.0
0.00.367.674 I print_info: freq_scale_train = 1
0.00.367.674 I print_info: n_ctx_orig_yarn  = 2048
0.00.367.675 I print_info: rope_finetuned   = unknown
0.00.367.676 I print_info: ssm_d_conv       = 0
0.00.367.676 I print_info: ssm_d_inner      = 0
0.00.367.677 I print_info: ssm_d_state      = 0
0.00.367.677 I print_info: ssm_dt_rank      = 0
0.00.367.677 I print_info: ssm_dt_b_c_rms   = 0
0.00.367.678 I print_info: model type       = 2.8B
0.00.367.679 I print_info: model params     = 2.78 B
0.00.367.679 I print_info: general.name     = 2.8B
0.00.367.683 I print_info: vocab type       = BPE
0.00.367.684 I print_info: n_vocab          = 50304
0.00.367.685 I print_info: n_merges         = 50009
0.00.367.686 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.367.686 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.367.687 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.367.687 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.367.688 I print_info: LF token         = 187 'Ċ'
0.00.367.689 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.367.690 I print_info: max token length = 1024
0.00.367.691 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.487.898 I load_tensors: offloading 32 repeating layers to GPU
0.00.487.908 I load_tensors: offloading output layer to GPU
0.00.487.909 I load_tensors: offloaded 33/33 layers to GPU
0.00.487.917 I load_tensors:        CUDA0 model buffer size =  1754.83 MiB
0.00.487.919 I load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
............................................................................................
0.00.840.763 I llama_context_unified: n_seq_max     = 1
0.00.840.769 I llama_context_unified: n_ctx         = 2048
0.00.840.770 I llama_context_unified: n_ctx_per_seq = 2048
0.00.840.770 I llama_context_unified: n_batch       = 2048
0.00.840.771 I llama_context_unified: n_ubatch      = 512
0.00.840.772 I llama_context_unified: flash_attn    = 0
0.00.840.778 I llama_context_unified: freq_base     = 10000.0
0.00.840.779 I llama_context_unified: freq_scale    = 1
0.00.840.820 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.842.096 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.842.125 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.843.350 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.853.674 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.853.684 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.853.685 I llama_context_unified: graph nodes  = 1287
0.00.853.685 I llama_context_unified: graph splits = 2
0.00.853.696 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.854.199 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.854.203 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.923.062 I main: llama threadpool init, n_threads = 1
0.00.923.081 I 
0.00.923.165 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.923.170 I 
0.00.923.283 I sampler seed: 1234
0.00.923.298 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.923.302 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.923.304 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.923.304 I 
I believe the meaning of life is to enjoy the process and not the results.

I believe that people are not defined by their jobs, their clothes or their social status.

I believe that a person is more important than a job.

I believe that no one is wrong and everyone has something to learn.

I believe that there is a purpose to every person's life.

I believe that all of us are creative, but we have to understand the difference between the creative and the un Creative

I believe that when we stop worrying about things, they start to happen.

I believe that the world is a better place when people have fun, laugh, and play.

I believe in being a positive influence to the people around me.

I believe in having a positive attitude about life.

I believe in living in the moment.

I believe in loving one another.

I believe in the power of love.

I believe that a person who is full of positive energy is a more productive person.

I believe that we should never make the mistake of thinking that what we are doing is not important.

I believe that we should never be so caught up in our own little worlds that we forget about other

0.02.633.358 I llama_perf_sampler_print:    sampling time =      11.18 ms /   263 runs   (    0.04 ms per token, 23519.94 tokens per second)
0.02.633.362 I llama_perf_context_print:        load time =     654.81 ms
0.02.633.363 I llama_perf_context_print: prompt eval time =       9.72 ms /     7 tokens (    1.39 ms per token,   719.79 tokens per second)
0.02.633.365 I llama_perf_context_print:        eval time =    1664.21 ms /   255 runs   (    6.53 ms per token,   153.23 tokens per second)
0.02.633.366 I llama_perf_context_print:       total time =    1711.92 ms /   262 tokens

real	0m2.910s
user	0m2.205s
sys	0m0.707s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.188 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.523 I main: llama backend init
0.00.000.534 I main: load the model and apply lora adapter, if any
0.00.270.989 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.287.357 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.287.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.287.393 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.287.395 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.287.396 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.287.397 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.287.398 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.287.403 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.287.404 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.287.405 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.287.406 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.287.407 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.287.408 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.287.409 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.287.418 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.287.419 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.287.420 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.294.460 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.296.211 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.303.021 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.303.029 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.303.030 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.303.031 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.303.031 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.303.032 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.303.035 I llama_model_loader: - type  f32:  258 tensors
0.00.303.035 I llama_model_loader: - type q5_1:  129 tensors
0.00.303.036 I llama_model_loader: - type q6_K:    1 tensors
0.00.303.039 I print_info: file format = GGUF V3 (latest)
0.00.303.040 I print_info: file type   = Q5_1
0.00.303.043 I print_info: file size   = 1.95 GiB (6.04 BPW) 
0.00.346.678 I load: special tokens cache size = 25
0.00.368.543 I load: token to piece cache size = 0.2984 MB
0.00.368.560 I print_info: arch             = gptneox
0.00.368.561 I print_info: vocab_only       = 0
0.00.368.561 I print_info: n_ctx_train      = 2048
0.00.368.562 I print_info: n_embd           = 2560
0.00.368.562 I print_info: n_layer          = 32
0.00.368.573 I print_info: n_head           = 32
0.00.368.575 I print_info: n_head_kv        = 32
0.00.368.576 I print_info: n_rot            = 20
0.00.368.576 I print_info: n_swa            = 0
0.00.368.577 I print_info: n_embd_head_k    = 80
0.00.368.578 I print_info: n_embd_head_v    = 80
0.00.368.580 I print_info: n_gqa            = 1
0.00.368.582 I print_info: n_embd_k_gqa     = 2560
0.00.368.584 I print_info: n_embd_v_gqa     = 2560
0.00.368.586 I print_info: f_norm_eps       = 1.0e-05
0.00.368.587 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.368.587 I print_info: f_clamp_kqv      = 0.0e+00
0.00.368.588 I print_info: f_max_alibi_bias = 0.0e+00
0.00.368.588 I print_info: f_logit_scale    = 0.0e+00
0.00.368.593 I print_info: n_ff             = 10240
0.00.368.594 I print_info: n_expert         = 0
0.00.368.594 I print_info: n_expert_used    = 0
0.00.368.595 I print_info: causal attn      = 1
0.00.368.596 I print_info: pooling type     = 0
0.00.368.596 I print_info: rope type        = 2
0.00.368.596 I print_info: rope scaling     = linear
0.00.368.598 I print_info: freq_base_train  = 10000.0
0.00.368.599 I print_info: freq_scale_train = 1
0.00.368.599 I print_info: n_ctx_orig_yarn  = 2048
0.00.368.599 I print_info: rope_finetuned   = unknown
0.00.368.600 I print_info: ssm_d_conv       = 0
0.00.368.600 I print_info: ssm_d_inner      = 0
0.00.368.601 I print_info: ssm_d_state      = 0
0.00.368.602 I print_info: ssm_dt_rank      = 0
0.00.368.602 I print_info: ssm_dt_b_c_rms   = 0
0.00.368.603 I print_info: model type       = 2.8B
0.00.368.604 I print_info: model params     = 2.78 B
0.00.368.604 I print_info: general.name     = 2.8B
0.00.368.607 I print_info: vocab type       = BPE
0.00.368.608 I print_info: n_vocab          = 50304
0.00.368.609 I print_info: n_merges         = 50009
0.00.368.610 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.368.611 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.368.611 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.368.612 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.368.612 I print_info: LF token         = 187 'Ċ'
0.00.368.613 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.368.613 I print_info: max token length = 1024
0.00.368.616 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.498.444 I load_tensors: offloading 32 repeating layers to GPU
0.00.498.454 I load_tensors: offloading output layer to GPU
0.00.498.454 I load_tensors: offloaded 33/33 layers to GPU
0.00.498.463 I load_tensors:        CUDA0 model buffer size =  1904.83 MiB
0.00.498.465 I load_tensors:   CPU_Mapped model buffer size =    92.11 MiB
............................................................................................
0.00.874.152 I llama_context_unified: n_seq_max     = 1
0.00.874.157 I llama_context_unified: n_ctx         = 2048
0.00.874.158 I llama_context_unified: n_ctx_per_seq = 2048
0.00.874.158 I llama_context_unified: n_batch       = 2048
0.00.874.159 I llama_context_unified: n_ubatch      = 512
0.00.874.160 I llama_context_unified: flash_attn    = 0
0.00.874.165 I llama_context_unified: freq_base     = 10000.0
0.00.874.166 I llama_context_unified: freq_scale    = 1
0.00.874.208 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.875.495 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.875.509 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.876.772 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.886.893 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.886.902 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.886.903 I llama_context_unified: graph nodes  = 1287
0.00.886.904 I llama_context_unified: graph splits = 2
0.00.886.913 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.887.404 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.887.407 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.956.098 I main: llama threadpool init, n_threads = 1
0.00.956.117 I 
0.00.956.203 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.956.209 I 
0.00.956.321 I sampler seed: 1234
0.00.956.336 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.956.339 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.956.340 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.956.340 I 
I believe the meaning of life is to love, laugh and be happy." "I believe in the afterlife." "I believe in the power of the sun to heal and the power of love to heal." "And I believe in the power of love to save us all from ourselves." "What was that?" "What's going on?" "You're not supposed to be here." "I need your help." "I think you should leave." "No." "You don't understand." "I'm in pain." "No." "Not like this." "I've seen what they can do." "I'm not like you." "I'm not here to save you, to heal you or to make you happy." "I'm here to kill you." "I can't do this." "It's not me." "It's them." "It's them!" "Them?" "Who?" "Them." "Them." "What are you talking about?" "I'm talking about the ones who have been killing people and using them for their own purposes." "The ones who have been trying to take over the world." "I don't understand." "I'm not them." "I'm me." "They're coming." "I can feel it." "

0.02.680.583 I llama_perf_sampler_print:    sampling time =      11.40 ms /   263 runs   (    0.04 ms per token, 23074.22 tokens per second)
0.02.680.587 I llama_perf_context_print:        load time =     683.36 ms
0.02.680.589 I llama_perf_context_print: prompt eval time =       9.61 ms /     7 tokens (    1.37 ms per token,   728.79 tokens per second)
0.02.680.590 I llama_perf_context_print:        eval time =    1678.19 ms /   255 runs   (    6.58 ms per token,   151.95 tokens per second)
0.02.680.591 I llama_perf_context_print:       total time =    1726.22 ms /   262 tokens

real	0m2.955s
user	0m2.207s
sys	0m0.744s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.180 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.557 I main: llama backend init
0.00.000.572 I main: load the model and apply lora adapter, if any
0.00.268.208 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.284.584 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.284.608 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.284.620 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.284.625 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.284.626 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.284.628 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.284.629 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.284.632 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.284.633 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.284.634 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.284.635 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.284.636 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.284.637 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.284.638 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.284.646 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.284.647 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.284.647 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.291.834 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.293.593 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.300.358 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.300.367 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.300.368 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.300.368 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.300.369 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.300.371 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.300.373 I llama_model_loader: - type  f32:  258 tensors
0.00.300.374 I llama_model_loader: - type q2_K:   65 tensors
0.00.300.374 I llama_model_loader: - type q3_K:   64 tensors
0.00.300.375 I llama_model_loader: - type q6_K:    1 tensors
0.00.300.377 I print_info: file format = GGUF V3 (latest)
0.00.300.378 I print_info: file type   = Q2_K - Medium
0.00.300.380 I print_info: file size   = 1.01 GiB (3.13 BPW) 
0.00.344.304 I load: special tokens cache size = 25
0.00.366.347 I load: token to piece cache size = 0.2984 MB
0.00.366.363 I print_info: arch             = gptneox
0.00.366.364 I print_info: vocab_only       = 0
0.00.366.365 I print_info: n_ctx_train      = 2048
0.00.366.366 I print_info: n_embd           = 2560
0.00.366.367 I print_info: n_layer          = 32
0.00.366.379 I print_info: n_head           = 32
0.00.366.382 I print_info: n_head_kv        = 32
0.00.366.382 I print_info: n_rot            = 20
0.00.366.383 I print_info: n_swa            = 0
0.00.366.383 I print_info: n_embd_head_k    = 80
0.00.366.384 I print_info: n_embd_head_v    = 80
0.00.366.386 I print_info: n_gqa            = 1
0.00.366.388 I print_info: n_embd_k_gqa     = 2560
0.00.366.390 I print_info: n_embd_v_gqa     = 2560
0.00.366.391 I print_info: f_norm_eps       = 1.0e-05
0.00.366.392 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.366.393 I print_info: f_clamp_kqv      = 0.0e+00
0.00.366.393 I print_info: f_max_alibi_bias = 0.0e+00
0.00.366.394 I print_info: f_logit_scale    = 0.0e+00
0.00.366.395 I print_info: n_ff             = 10240
0.00.366.396 I print_info: n_expert         = 0
0.00.366.397 I print_info: n_expert_used    = 0
0.00.366.397 I print_info: causal attn      = 1
0.00.366.398 I print_info: pooling type     = 0
0.00.366.398 I print_info: rope type        = 2
0.00.366.398 I print_info: rope scaling     = linear
0.00.366.400 I print_info: freq_base_train  = 10000.0
0.00.366.401 I print_info: freq_scale_train = 1
0.00.366.401 I print_info: n_ctx_orig_yarn  = 2048
0.00.366.402 I print_info: rope_finetuned   = unknown
0.00.366.402 I print_info: ssm_d_conv       = 0
0.00.366.402 I print_info: ssm_d_inner      = 0
0.00.366.403 I print_info: ssm_d_state      = 0
0.00.366.404 I print_info: ssm_dt_rank      = 0
0.00.366.404 I print_info: ssm_dt_b_c_rms   = 0
0.00.366.404 I print_info: model type       = 2.8B
0.00.366.405 I print_info: model params     = 2.78 B
0.00.366.406 I print_info: general.name     = 2.8B
0.00.366.408 I print_info: vocab type       = BPE
0.00.366.410 I print_info: n_vocab          = 50304
0.00.366.411 I print_info: n_merges         = 50009
0.00.366.411 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.366.412 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.366.412 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.366.413 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.366.414 I print_info: LF token         = 187 'Ċ'
0.00.366.415 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.366.416 I print_info: max token length = 1024
0.00.366.417 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.437.356 I load_tensors: offloading 32 repeating layers to GPU
0.00.437.368 I load_tensors: offloading output layer to GPU
0.00.437.369 I load_tensors: offloaded 33/33 layers to GPU
0.00.437.377 I load_tensors:        CUDA0 model buffer size =   993.89 MiB
0.00.437.379 I load_tensors:   CPU_Mapped model buffer size =    40.30 MiB
.......................................................................................
0.00.639.501 I llama_context_unified: n_seq_max     = 1
0.00.639.507 I llama_context_unified: n_ctx         = 2048
0.00.639.508 I llama_context_unified: n_ctx_per_seq = 2048
0.00.639.508 I llama_context_unified: n_batch       = 2048
0.00.639.509 I llama_context_unified: n_ubatch      = 512
0.00.639.510 I llama_context_unified: flash_attn    = 0
0.00.639.515 I llama_context_unified: freq_base     = 10000.0
0.00.639.516 I llama_context_unified: freq_scale    = 1
0.00.639.554 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.640.814 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.640.828 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.642.128 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.652.279 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.652.288 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.652.289 I llama_context_unified: graph nodes  = 1287
0.00.652.290 I llama_context_unified: graph splits = 2
0.00.652.299 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.652.789 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.652.792 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.723.040 I main: llama threadpool init, n_threads = 1
0.00.723.059 I 
0.00.723.144 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.723.149 I 
0.00.723.268 I sampler seed: 1234
0.00.723.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.723.299 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.723.305 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.723.305 I 
I believe the meaning of life is in the first place the best way to be.

—


.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.

.



0.02.488.287 I llama_perf_sampler_print:    sampling time =      10.35 ms /   263 runs   (    0.04 ms per token, 25422.91 tokens per second)
0.02.488.290 I llama_perf_context_print:        load time =     453.06 ms
0.02.488.292 I llama_perf_context_print: prompt eval time =      13.98 ms /     7 tokens (    2.00 ms per token,   500.79 tokens per second)
0.02.488.294 I llama_perf_context_print:        eval time =    1715.97 ms /   255 runs   (    6.73 ms per token,   148.60 tokens per second)
0.02.488.296 I llama_perf_context_print:       total time =    1767.01 ms /   262 tokens

real	0m2.760s
user	0m2.108s
sys	0m0.654s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.734 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.064 I main: llama backend init
0.00.001.074 I main: load the model and apply lora adapter, if any
0.00.270.520 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.286.839 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.286.862 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.286.872 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.286.874 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.286.875 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.286.876 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.286.877 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.286.880 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.286.881 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.286.882 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.286.884 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.286.885 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.286.886 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.286.887 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.286.895 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.286.896 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.286.897 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.293.756 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.295.513 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.302.367 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.302.375 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.302.376 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.302.377 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.302.377 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.302.378 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.302.381 I llama_model_loader: - type  f32:  258 tensors
0.00.302.382 I llama_model_loader: - type q3_K:   33 tensors
0.00.302.382 I llama_model_loader: - type q4_K:   94 tensors
0.00.302.383 I llama_model_loader: - type q5_K:    2 tensors
0.00.302.383 I llama_model_loader: - type q6_K:    1 tensors
0.00.302.386 I print_info: file format = GGUF V3 (latest)
0.00.302.387 I print_info: file type   = Q3_K - Medium
0.00.302.389 I print_info: file size   = 1.37 GiB (4.25 BPW) 
0.00.346.262 I load: special tokens cache size = 25
0.00.368.121 I load: token to piece cache size = 0.2984 MB
0.00.368.138 I print_info: arch             = gptneox
0.00.368.138 I print_info: vocab_only       = 0
0.00.368.139 I print_info: n_ctx_train      = 2048
0.00.368.140 I print_info: n_embd           = 2560
0.00.368.140 I print_info: n_layer          = 32
0.00.368.152 I print_info: n_head           = 32
0.00.368.154 I print_info: n_head_kv        = 32
0.00.368.155 I print_info: n_rot            = 20
0.00.368.155 I print_info: n_swa            = 0
0.00.368.156 I print_info: n_embd_head_k    = 80
0.00.368.156 I print_info: n_embd_head_v    = 80
0.00.368.159 I print_info: n_gqa            = 1
0.00.368.160 I print_info: n_embd_k_gqa     = 2560
0.00.368.162 I print_info: n_embd_v_gqa     = 2560
0.00.368.164 I print_info: f_norm_eps       = 1.0e-05
0.00.368.165 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.368.165 I print_info: f_clamp_kqv      = 0.0e+00
0.00.368.166 I print_info: f_max_alibi_bias = 0.0e+00
0.00.368.166 I print_info: f_logit_scale    = 0.0e+00
0.00.368.168 I print_info: n_ff             = 10240
0.00.368.168 I print_info: n_expert         = 0
0.00.368.169 I print_info: n_expert_used    = 0
0.00.368.169 I print_info: causal attn      = 1
0.00.368.170 I print_info: pooling type     = 0
0.00.368.173 I print_info: rope type        = 2
0.00.368.174 I print_info: rope scaling     = linear
0.00.368.176 I print_info: freq_base_train  = 10000.0
0.00.368.176 I print_info: freq_scale_train = 1
0.00.368.177 I print_info: n_ctx_orig_yarn  = 2048
0.00.368.177 I print_info: rope_finetuned   = unknown
0.00.368.178 I print_info: ssm_d_conv       = 0
0.00.368.179 I print_info: ssm_d_inner      = 0
0.00.368.182 I print_info: ssm_d_state      = 0
0.00.368.182 I print_info: ssm_dt_rank      = 0
0.00.368.183 I print_info: ssm_dt_b_c_rms   = 0
0.00.368.184 I print_info: model type       = 2.8B
0.00.368.184 I print_info: model params     = 2.78 B
0.00.368.185 I print_info: general.name     = 2.8B
0.00.368.187 I print_info: vocab type       = BPE
0.00.368.188 I print_info: n_vocab          = 50304
0.00.368.189 I print_info: n_merges         = 50009
0.00.368.190 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.368.190 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.368.191 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.368.191 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.368.192 I print_info: LF token         = 187 'Ċ'
0.00.368.192 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.368.193 I print_info: max token length = 1024
0.00.368.194 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.459.895 I load_tensors: offloading 32 repeating layers to GPU
0.00.459.906 I load_tensors: offloading output layer to GPU
0.00.459.907 I load_tensors: offloaded 33/33 layers to GPU
0.00.459.915 I load_tensors:        CUDA0 model buffer size =  1354.83 MiB
0.00.459.917 I load_tensors:   CPU_Mapped model buffer size =    52.77 MiB
...........................................................................................
0.00.728.689 I llama_context_unified: n_seq_max     = 1
0.00.728.695 I llama_context_unified: n_ctx         = 2048
0.00.728.696 I llama_context_unified: n_ctx_per_seq = 2048
0.00.728.696 I llama_context_unified: n_batch       = 2048
0.00.728.697 I llama_context_unified: n_ubatch      = 512
0.00.728.698 I llama_context_unified: flash_attn    = 0
0.00.728.703 I llama_context_unified: freq_base     = 10000.0
0.00.728.704 I llama_context_unified: freq_scale    = 1
0.00.728.744 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.730.013 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.730.024 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.731.240 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.741.491 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.741.496 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.741.497 I llama_context_unified: graph nodes  = 1287
0.00.741.497 I llama_context_unified: graph splits = 2
0.00.741.508 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.741.999 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.742.003 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.813.657 I main: llama threadpool init, n_threads = 1
0.00.813.675 I 
0.00.813.756 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.813.762 I 
0.00.813.869 I sampler seed: 1234
0.00.813.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.813.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.813.905 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.813.906 I 
I believe the meaning of life is to get out of this house and go out and have a good time. I don’t believe in the meaning of life. I am not religious. I do not believe in religion. I believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in love, in life and in the moon.

I do not believe in the meaning of life. I do not believe in religion. I do believe in love, in life and in the moon.

I do not believe in the meaning of life. I do not believe in religion. I believe in love, in life and in the moon.

I believe in life, love, the moon and a night in the woods.

I don’t believe in the meaning of life. I don’t believe in religion. I do believe in love, in life and in the moon.

I believe in life, love, the moon and a night in

0.02.612.214 I llama_perf_sampler_print:    sampling time =      10.94 ms /   263 runs   (    0.04 ms per token, 24051.21 tokens per second)
0.02.612.218 I llama_perf_context_print:        load time =     541.36 ms
0.02.612.220 I llama_perf_context_print: prompt eval time =      12.50 ms /     7 tokens (    1.79 ms per token,   560.13 tokens per second)
0.02.612.222 I llama_perf_context_print:        eval time =    1749.90 ms /   255 runs   (    6.86 ms per token,   145.72 tokens per second)
0.02.612.224 I llama_perf_context_print:       total time =    1800.33 ms /   262 tokens

real	0m2.888s
user	0m2.208s
sys	0m0.685s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.184 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.526 I main: llama backend init
0.00.000.536 I main: load the model and apply lora adapter, if any
0.00.264.776 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.281.501 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.281.527 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.281.537 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.281.542 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.281.543 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.281.543 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.281.544 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.281.548 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.281.549 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.281.551 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.281.552 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.281.553 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.281.555 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.281.556 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.281.564 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.281.564 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.281.565 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.288.568 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.290.317 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.297.135 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.297.144 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.297.145 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.297.146 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.297.146 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.297.147 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.297.150 I llama_model_loader: - type  f32:  258 tensors
0.00.297.150 I llama_model_loader: - type q4_K:   81 tensors
0.00.297.151 I llama_model_loader: - type q5_K:   32 tensors
0.00.297.152 I llama_model_loader: - type q6_K:   17 tensors
0.00.297.154 I print_info: file format = GGUF V3 (latest)
0.00.297.155 I print_info: file type   = Q4_K - Medium
0.00.297.157 I print_info: file size   = 1.66 GiB (5.14 BPW) 
0.00.341.873 I load: special tokens cache size = 25
0.00.363.700 I load: token to piece cache size = 0.2984 MB
0.00.363.719 I print_info: arch             = gptneox
0.00.363.720 I print_info: vocab_only       = 0
0.00.363.721 I print_info: n_ctx_train      = 2048
0.00.363.721 I print_info: n_embd           = 2560
0.00.363.722 I print_info: n_layer          = 32
0.00.363.734 I print_info: n_head           = 32
0.00.363.736 I print_info: n_head_kv        = 32
0.00.363.736 I print_info: n_rot            = 20
0.00.363.737 I print_info: n_swa            = 0
0.00.363.737 I print_info: n_embd_head_k    = 80
0.00.363.738 I print_info: n_embd_head_v    = 80
0.00.363.740 I print_info: n_gqa            = 1
0.00.363.742 I print_info: n_embd_k_gqa     = 2560
0.00.363.743 I print_info: n_embd_v_gqa     = 2560
0.00.363.746 I print_info: f_norm_eps       = 1.0e-05
0.00.363.747 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.363.749 I print_info: f_clamp_kqv      = 0.0e+00
0.00.363.750 I print_info: f_max_alibi_bias = 0.0e+00
0.00.363.751 I print_info: f_logit_scale    = 0.0e+00
0.00.363.752 I print_info: n_ff             = 10240
0.00.363.753 I print_info: n_expert         = 0
0.00.363.753 I print_info: n_expert_used    = 0
0.00.363.754 I print_info: causal attn      = 1
0.00.363.754 I print_info: pooling type     = 0
0.00.363.755 I print_info: rope type        = 2
0.00.363.756 I print_info: rope scaling     = linear
0.00.363.758 I print_info: freq_base_train  = 10000.0
0.00.363.758 I print_info: freq_scale_train = 1
0.00.363.760 I print_info: n_ctx_orig_yarn  = 2048
0.00.363.760 I print_info: rope_finetuned   = unknown
0.00.363.761 I print_info: ssm_d_conv       = 0
0.00.363.761 I print_info: ssm_d_inner      = 0
0.00.363.761 I print_info: ssm_d_state      = 0
0.00.363.762 I print_info: ssm_dt_rank      = 0
0.00.363.762 I print_info: ssm_dt_b_c_rms   = 0
0.00.363.763 I print_info: model type       = 2.8B
0.00.363.764 I print_info: model params     = 2.78 B
0.00.363.764 I print_info: general.name     = 2.8B
0.00.363.768 I print_info: vocab type       = BPE
0.00.363.769 I print_info: n_vocab          = 50304
0.00.363.769 I print_info: n_merges         = 50009
0.00.363.770 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.363.770 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.363.772 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.363.772 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.363.773 I print_info: LF token         = 187 'Ċ'
0.00.363.773 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.363.774 I print_info: max token length = 1024
0.00.363.775 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.473.368 I load_tensors: offloading 32 repeating layers to GPU
0.00.473.380 I load_tensors: offloading output layer to GPU
0.00.473.381 I load_tensors: offloaded 33/33 layers to GPU
0.00.473.389 I load_tensors:        CUDA0 model buffer size =  1632.95 MiB
0.00.473.391 I load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
..................................................................................
0.00.795.152 I llama_context_unified: n_seq_max     = 1
0.00.795.159 I llama_context_unified: n_ctx         = 2048
0.00.795.159 I llama_context_unified: n_ctx_per_seq = 2048
0.00.795.160 I llama_context_unified: n_batch       = 2048
0.00.795.160 I llama_context_unified: n_ubatch      = 512
0.00.795.161 I llama_context_unified: flash_attn    = 0
0.00.795.167 I llama_context_unified: freq_base     = 10000.0
0.00.795.168 I llama_context_unified: freq_scale    = 1
0.00.795.207 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.796.491 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.796.502 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.797.827 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.808.070 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.808.080 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.808.081 I llama_context_unified: graph nodes  = 1287
0.00.808.082 I llama_context_unified: graph splits = 2
0.00.808.092 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.808.585 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.808.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.878.399 I main: llama threadpool init, n_threads = 1
0.00.878.419 I 
0.00.878.501 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.878.507 I 
0.00.878.621 I sampler seed: 1234
0.00.878.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.878.639 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.878.640 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.878.640 I 
I believe the meaning of life is to take chances and try to do something that you think is impossible and then you do it anyway.

You never know.

You can do it.

You have a chance to do it.

And if you can’t, well that’s okay too.

You’ve got to do it anyway.

The first time I started smoking I was like, ‘This is not going to work. I have no way to make this work.’

Then I went back to the same spot and I tried it again.

This time, I wasn’t as nervous. I had a lot of success with this.

I felt good.

I didn’t have to think about it.

I just wanted to do it.

I didn’t want to stop.

I thought, ‘It’s not going to work. I’m not going to quit.’

That’s when I started to think about it.

I started to think about it as a choice.

I thought about it as a chance.

And then I started to think about it as a choice that I had control over.

And that’s when

0.02.587.656 I llama_perf_sampler_print:    sampling time =      11.25 ms /   263 runs   (    0.04 ms per token, 23369.47 tokens per second)
0.02.587.660 I llama_perf_context_print:        load time =     611.61 ms
0.02.587.662 I llama_perf_context_print: prompt eval time =      12.23 ms /     7 tokens (    1.75 ms per token,   572.55 tokens per second)
0.02.587.665 I llama_perf_context_print:        eval time =    1660.67 ms /   255 runs   (    6.51 ms per token,   153.55 tokens per second)
0.02.587.666 I llama_perf_context_print:       total time =    1711.26 ms /   262 tokens

real	0m2.866s
user	0m2.162s
sys	0m0.702s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.176 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.533 I main: llama backend init
0.00.000.544 I main: load the model and apply lora adapter, if any
0.00.264.745 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.284.524 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.284.554 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.284.565 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.284.569 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.284.570 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.284.570 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.284.571 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.284.576 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.284.576 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.284.577 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.284.579 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.284.579 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.284.580 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.284.581 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.284.589 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.284.591 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.284.592 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.292.116 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.112 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.301.457 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.301.466 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.301.467 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.301.468 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.301.469 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.301.470 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.301.473 I llama_model_loader: - type  f32:  258 tensors
0.00.301.473 I llama_model_loader: - type q5_K:   81 tensors
0.00.301.474 I llama_model_loader: - type q6_K:   49 tensors
0.00.301.477 I print_info: file format = GGUF V3 (latest)
0.00.301.477 I print_info: file type   = Q5_K - Medium
0.00.301.480 I print_info: file size   = 1.93 GiB (5.96 BPW) 
0.00.346.284 I load: special tokens cache size = 25
0.00.368.365 I load: token to piece cache size = 0.2984 MB
0.00.368.383 I print_info: arch             = gptneox
0.00.368.384 I print_info: vocab_only       = 0
0.00.368.385 I print_info: n_ctx_train      = 2048
0.00.368.385 I print_info: n_embd           = 2560
0.00.368.386 I print_info: n_layer          = 32
0.00.368.400 I print_info: n_head           = 32
0.00.368.403 I print_info: n_head_kv        = 32
0.00.368.403 I print_info: n_rot            = 20
0.00.368.405 I print_info: n_swa            = 0
0.00.368.405 I print_info: n_embd_head_k    = 80
0.00.368.406 I print_info: n_embd_head_v    = 80
0.00.368.408 I print_info: n_gqa            = 1
0.00.368.410 I print_info: n_embd_k_gqa     = 2560
0.00.368.412 I print_info: n_embd_v_gqa     = 2560
0.00.368.414 I print_info: f_norm_eps       = 1.0e-05
0.00.368.414 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.368.415 I print_info: f_clamp_kqv      = 0.0e+00
0.00.368.416 I print_info: f_max_alibi_bias = 0.0e+00
0.00.368.416 I print_info: f_logit_scale    = 0.0e+00
0.00.368.417 I print_info: n_ff             = 10240
0.00.368.418 I print_info: n_expert         = 0
0.00.368.419 I print_info: n_expert_used    = 0
0.00.368.420 I print_info: causal attn      = 1
0.00.368.420 I print_info: pooling type     = 0
0.00.368.420 I print_info: rope type        = 2
0.00.368.421 I print_info: rope scaling     = linear
0.00.368.423 I print_info: freq_base_train  = 10000.0
0.00.368.423 I print_info: freq_scale_train = 1
0.00.368.424 I print_info: n_ctx_orig_yarn  = 2048
0.00.368.425 I print_info: rope_finetuned   = unknown
0.00.368.426 I print_info: ssm_d_conv       = 0
0.00.368.426 I print_info: ssm_d_inner      = 0
0.00.368.426 I print_info: ssm_d_state      = 0
0.00.368.427 I print_info: ssm_dt_rank      = 0
0.00.368.428 I print_info: ssm_dt_b_c_rms   = 0
0.00.368.429 I print_info: model type       = 2.8B
0.00.368.430 I print_info: model params     = 2.78 B
0.00.368.430 I print_info: general.name     = 2.8B
0.00.368.434 I print_info: vocab type       = BPE
0.00.368.435 I print_info: n_vocab          = 50304
0.00.368.435 I print_info: n_merges         = 50009
0.00.368.436 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.368.436 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.368.437 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.368.438 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.368.438 I print_info: LF token         = 187 'Ċ'
0.00.368.439 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.368.440 I print_info: max token length = 1024
0.00.368.442 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.498.470 I load_tensors: offloading 32 repeating layers to GPU
0.00.498.482 I load_tensors: offloading output layer to GPU
0.00.498.483 I load_tensors: offloaded 33/33 layers to GPU
0.00.498.492 I load_tensors:        CUDA0 model buffer size =  1887.64 MiB
0.00.498.493 I load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
...........................................................................................
0.00.892.173 I llama_context_unified: n_seq_max     = 1
0.00.892.186 I llama_context_unified: n_ctx         = 2048
0.00.892.187 I llama_context_unified: n_ctx_per_seq = 2048
0.00.892.187 I llama_context_unified: n_batch       = 2048
0.00.892.188 I llama_context_unified: n_ubatch      = 512
0.00.892.188 I llama_context_unified: flash_attn    = 0
0.00.892.195 I llama_context_unified: freq_base     = 10000.0
0.00.892.196 I llama_context_unified: freq_scale    = 1
0.00.892.237 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.893.544 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.893.556 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.894.765 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.905.237 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.905.247 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.905.248 I llama_context_unified: graph nodes  = 1287
0.00.905.248 I llama_context_unified: graph splits = 2
0.00.905.259 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.905.765 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.905.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.975.653 I main: llama threadpool init, n_threads = 1
0.00.975.673 I 
0.00.975.757 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.975.763 I 
0.00.975.870 I sampler seed: 1234
0.00.975.885 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.975.891 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.975.892 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.00.975.892 I 
I believe the meaning of life is to create art." "I believe it's to be creative." "To be creative." "To be creative." "I think about it all the time." "It's all I think about." "I'm just trying to get away from it, but..." "You have to have some sort of idea of what you want to do." "I don't think that's a problem." "I don't think you're alone in that." "I think, I hope, it's not a problem." "I've got a list of things I want to do." "I don't know if I'll have time, but it's all on the list." "It's all on the list, but it's not just the list." "I'm not just putting it on the list." "I'm not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "I'm not just putting it on the list." "You're not just putting it on the list." "You're not just putting it on the list." "You're not just putting

0.02.787.115 I llama_perf_sampler_print:    sampling time =      11.12 ms /   263 runs   (    0.04 ms per token, 23655.33 tokens per second)
0.02.787.119 I llama_perf_context_print:        load time =     709.16 ms
0.02.787.121 I llama_perf_context_print: prompt eval time =      12.57 ms /     7 tokens (    1.80 ms per token,   557.06 tokens per second)
0.02.787.123 I llama_perf_context_print:        eval time =    1762.92 ms /   255 runs   (    6.91 ms per token,   144.65 tokens per second)
0.02.787.124 I llama_perf_context_print:       total time =    1813.20 ms /   262 tokens

real	0m3.065s
user	0m2.327s
sys	0m0.743s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-cli -no-cnv --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -t 1 -ngl 99 -c 0 -s 1234 -n 256 --ignore-eos -p 'I believe the meaning of life is'
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.000.181 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.523 I main: llama backend init
0.00.000.535 I main: load the model and apply lora adapter, if any
0.00.269.247 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.285.589 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.285.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.285.624 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.285.629 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.285.630 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.285.631 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.285.632 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.285.636 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.285.637 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.285.638 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.285.639 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.285.639 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.285.640 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.285.641 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.285.652 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.285.652 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.285.653 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.292.489 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.279 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.301.054 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.301.063 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.301.064 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.301.064 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.301.065 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.301.066 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.301.068 I llama_model_loader: - type  f32:  258 tensors
0.00.301.069 I llama_model_loader: - type q6_K:  130 tensors
0.00.301.072 I print_info: file format = GGUF V3 (latest)
0.00.301.073 I print_info: file type   = Q6_K
0.00.301.075 I print_info: file size   = 2.12 GiB (6.57 BPW) 
0.00.345.516 I load: special tokens cache size = 25
0.00.367.557 I load: token to piece cache size = 0.2984 MB
0.00.367.574 I print_info: arch             = gptneox
0.00.367.575 I print_info: vocab_only       = 0
0.00.367.576 I print_info: n_ctx_train      = 2048
0.00.367.576 I print_info: n_embd           = 2560
0.00.367.577 I print_info: n_layer          = 32
0.00.367.588 I print_info: n_head           = 32
0.00.367.590 I print_info: n_head_kv        = 32
0.00.367.590 I print_info: n_rot            = 20
0.00.367.591 I print_info: n_swa            = 0
0.00.367.592 I print_info: n_embd_head_k    = 80
0.00.367.592 I print_info: n_embd_head_v    = 80
0.00.367.594 I print_info: n_gqa            = 1
0.00.367.596 I print_info: n_embd_k_gqa     = 2560
0.00.367.598 I print_info: n_embd_v_gqa     = 2560
0.00.367.600 I print_info: f_norm_eps       = 1.0e-05
0.00.367.600 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.367.602 I print_info: f_clamp_kqv      = 0.0e+00
0.00.367.602 I print_info: f_max_alibi_bias = 0.0e+00
0.00.367.603 I print_info: f_logit_scale    = 0.0e+00
0.00.367.604 I print_info: n_ff             = 10240
0.00.367.606 I print_info: n_expert         = 0
0.00.367.606 I print_info: n_expert_used    = 0
0.00.367.607 I print_info: causal attn      = 1
0.00.367.607 I print_info: pooling type     = 0
0.00.367.608 I print_info: rope type        = 2
0.00.367.609 I print_info: rope scaling     = linear
0.00.367.611 I print_info: freq_base_train  = 10000.0
0.00.367.611 I print_info: freq_scale_train = 1
0.00.367.612 I print_info: n_ctx_orig_yarn  = 2048
0.00.367.612 I print_info: rope_finetuned   = unknown
0.00.367.613 I print_info: ssm_d_conv       = 0
0.00.367.613 I print_info: ssm_d_inner      = 0
0.00.367.614 I print_info: ssm_d_state      = 0
0.00.367.614 I print_info: ssm_dt_rank      = 0
0.00.367.615 I print_info: ssm_dt_b_c_rms   = 0
0.00.367.616 I print_info: model type       = 2.8B
0.00.367.617 I print_info: model params     = 2.78 B
0.00.367.617 I print_info: general.name     = 2.8B
0.00.367.619 I print_info: vocab type       = BPE
0.00.367.621 I print_info: n_vocab          = 50304
0.00.367.624 I print_info: n_merges         = 50009
0.00.367.625 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.367.625 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.367.627 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.367.628 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.367.629 I print_info: LF token         = 187 'Ċ'
0.00.367.629 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.367.630 I print_info: max token length = 1024
0.00.367.632 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.507.516 I load_tensors: offloading 32 repeating layers to GPU
0.00.507.528 I load_tensors: offloading output layer to GPU
0.00.507.529 I load_tensors: offloaded 33/33 layers to GPU
0.00.507.537 I load_tensors:        CUDA0 model buffer size =  2073.58 MiB
0.00.507.538 I load_tensors:   CPU_Mapped model buffer size =   100.74 MiB
.............................................................................................
0.00.919.464 I llama_context_unified: n_seq_max     = 1
0.00.919.471 I llama_context_unified: n_ctx         = 2048
0.00.919.471 I llama_context_unified: n_ctx_per_seq = 2048
0.00.919.472 I llama_context_unified: n_batch       = 2048
0.00.919.472 I llama_context_unified: n_ubatch      = 512
0.00.919.473 I llama_context_unified: flash_attn    = 0
0.00.919.478 I llama_context_unified: freq_base     = 10000.0
0.00.919.479 I llama_context_unified: freq_scale    = 1
0.00.919.519 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.920.779 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.920.793 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.922.101 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.933.332 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.933.341 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.933.342 I llama_context_unified: graph nodes  = 1287
0.00.933.342 I llama_context_unified: graph splits = 2
0.00.933.353 I common_init_from_params: added <|endoftext|> logit bias = -inf
0.00.933.844 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.933.847 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.003.955 I main: llama threadpool init, n_threads = 1
0.01.003.972 I 
0.01.004.053 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.004.059 I 
0.01.004.161 I sampler seed: 1234
0.01.004.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 2048
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.004.192 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.004.198 I generate: n_ctx = 2048, n_batch = 2048, n_predict = 256, n_keep = 0
0.01.004.199 I 
I believe the meaning of life is to create beauty in this world.

If you are a parent, it is your job to make sure your child's eyes are open to the world.

I want to see the world through the eyes of a child. I want to know about life, about the world, about everything.

I want to be a kid again.

The more I see the world through my eyes, the more I want to see. The more I want to understand, the more I want to understand.

I want to make sure that when I grow up, I can understand the world.

I don't want to go through my life without understanding it.

I want to live a life of understanding.

I want to live a life that is full of understanding.

I want to live a life that has no regrets.

I want to live a life that has no regrets.

The more I live, the more I want to live.

The more I live, the more I want to live.

The more I live, the more I want to live.

The more I live, the more I want to live.

I want to live a life that

0.02.917.575 I llama_perf_sampler_print:    sampling time =      11.20 ms /   263 runs   (    0.04 ms per token, 23490.53 tokens per second)
0.02.917.578 I llama_perf_context_print:        load time =     732.93 ms
0.02.917.580 I llama_perf_context_print: prompt eval time =      11.42 ms /     7 tokens (    1.63 ms per token,   612.91 tokens per second)
0.02.917.582 I llama_perf_context_print:        eval time =    1864.49 ms /   255 runs   (    7.31 ms per token,   136.77 tokens per second)
0.02.917.583 I llama_perf_context_print:       total time =    1915.39 ms /   262 tokens

real	0m3.195s
user	0m2.431s
sys	0m0.765s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.450 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.270.749 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.286.929 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.286.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.286.961 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.286.962 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.286.963 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.286.965 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.286.967 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.286.972 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.286.974 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.286.975 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.286.976 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.286.977 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.286.980 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.286.982 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.286.991 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.286.992 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.286.993 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.293.800 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.295.562 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.302.401 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.302.410 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.302.411 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.302.412 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.302.413 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.302.415 I llama_model_loader: - type  f32:  258 tensors
0.00.302.416 I llama_model_loader: - type  f16:  130 tensors
0.00.302.418 I print_info: file format = GGUF V3 (latest)
0.00.302.419 I print_info: file type   = all F32 (guessed)
0.00.302.422 I print_info: file size   = 5.17 GiB (16.01 BPW) 
0.00.345.692 I load: special tokens cache size = 25
0.00.367.562 I load: token to piece cache size = 0.2984 MB
0.00.367.585 I print_info: arch             = gptneox
0.00.367.586 I print_info: vocab_only       = 0
0.00.367.587 I print_info: n_ctx_train      = 2048
0.00.367.588 I print_info: n_embd           = 2560
0.00.367.588 I print_info: n_layer          = 32
0.00.367.598 I print_info: n_head           = 32
0.00.367.600 I print_info: n_head_kv        = 32
0.00.367.601 I print_info: n_rot            = 20
0.00.367.601 I print_info: n_swa            = 0
0.00.367.601 I print_info: n_embd_head_k    = 80
0.00.367.602 I print_info: n_embd_head_v    = 80
0.00.367.604 I print_info: n_gqa            = 1
0.00.367.607 I print_info: n_embd_k_gqa     = 2560
0.00.367.609 I print_info: n_embd_v_gqa     = 2560
0.00.367.610 I print_info: f_norm_eps       = 1.0e-05
0.00.367.612 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.367.612 I print_info: f_clamp_kqv      = 0.0e+00
0.00.367.613 I print_info: f_max_alibi_bias = 0.0e+00
0.00.367.613 I print_info: f_logit_scale    = 0.0e+00
0.00.367.615 I print_info: n_ff             = 10240
0.00.367.615 I print_info: n_expert         = 0
0.00.367.616 I print_info: n_expert_used    = 0
0.00.367.616 I print_info: causal attn      = 1
0.00.367.616 I print_info: pooling type     = 0
0.00.367.617 I print_info: rope type        = 2
0.00.367.618 I print_info: rope scaling     = linear
0.00.367.620 I print_info: freq_base_train  = 10000.0
0.00.367.621 I print_info: freq_scale_train = 1
0.00.367.621 I print_info: n_ctx_orig_yarn  = 2048
0.00.367.622 I print_info: rope_finetuned   = unknown
0.00.367.623 I print_info: ssm_d_conv       = 0
0.00.367.623 I print_info: ssm_d_inner      = 0
0.00.367.624 I print_info: ssm_d_state      = 0
0.00.367.625 I print_info: ssm_dt_rank      = 0
0.00.367.626 I print_info: ssm_dt_b_c_rms   = 0
0.00.367.627 I print_info: model type       = 2.8B
0.00.367.628 I print_info: model params     = 2.78 B
0.00.367.628 I print_info: general.name     = 2.8B
0.00.367.631 I print_info: vocab type       = BPE
0.00.367.632 I print_info: n_vocab          = 50304
0.00.367.634 I print_info: n_merges         = 50009
0.00.367.635 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.367.635 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.367.636 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.367.637 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.367.638 I print_info: LF token         = 187 'Ċ'
0.00.367.639 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.367.639 I print_info: max token length = 1024
0.00.367.640 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.696.911 I load_tensors: offloading 32 repeating layers to GPU
0.00.696.923 I load_tensors: offloading output layer to GPU
0.00.696.924 I load_tensors: offloaded 33/33 layers to GPU
0.00.696.933 I load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.696.934 I load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.551.727 I llama_context_unified: n_seq_max     = 1
0.01.551.734 I llama_context_unified: n_ctx         = 2048
0.01.551.734 I llama_context_unified: n_ctx_per_seq = 2048
0.01.551.735 I llama_context_unified: n_batch       = 512
0.01.551.735 I llama_context_unified: n_ubatch      = 512
0.01.551.736 I llama_context_unified: flash_attn    = 0
0.01.551.742 I llama_context_unified: freq_base     = 10000.0
0.01.551.743 I llama_context_unified: freq_scale    = 1
0.01.551.785 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.01.553.097 I init:      CUDA0 KV buffer size =   640.00 MiB
0.01.553.111 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.554.351 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.01.564.630 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.01.564.639 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.01.564.640 I llama_context_unified: graph nodes  = 1287
0.01.564.640 I llama_context_unified: graph splits = 2
0.01.564.645 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.564.645 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.640.903 I 
0.01.641.024 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.641.038 I perplexity: tokenizing the input ..
0.02.401.757 I perplexity: tokenization took 760.707 ms
0.02.402.118 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.957.047 I perplexity: 0.55 seconds per pass - ETA 0.03 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
0.04.471.729 I Final estimate: PPL = 10.3475 +/- 0.42292

0.04.473.569 I llama_perf_context_print:        load time =    1370.14 ms
0.04.473.572 I llama_perf_context_print: prompt eval time =    1715.06 ms /  8192 tokens (    0.21 ms per token,  4776.51 tokens per second)
0.04.473.574 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.473.575 I llama_perf_context_print:       total time =    2832.67 ms /  8193 tokens

real	0m4.773s
user	0m4.472s
sys	0m1.263s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.429 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.269.721 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.286.095 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q8_0.gguf (version GGUF V3 (latest))
0.00.286.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.286.131 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.286.135 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.286.136 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.286.137 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.286.138 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.286.142 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.286.143 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.286.144 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.286.145 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.286.145 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.286.147 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.286.148 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.286.156 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.286.156 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.286.157 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.293.128 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.904 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.301.635 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.301.644 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.301.644 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.301.645 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.301.646 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.301.647 I llama_model_loader: - kv  22:                          general.file_type u32              = 7
0.00.301.649 I llama_model_loader: - type  f32:  258 tensors
0.00.301.650 I llama_model_loader: - type q8_0:  130 tensors
0.00.301.653 I print_info: file format = GGUF V3 (latest)
0.00.301.653 I print_info: file type   = Q8_0
0.00.301.656 I print_info: file size   = 2.75 GiB (8.51 BPW) 
0.00.346.109 I load: special tokens cache size = 25
0.00.368.128 I load: token to piece cache size = 0.2984 MB
0.00.368.146 I print_info: arch             = gptneox
0.00.368.148 I print_info: vocab_only       = 0
0.00.368.150 I print_info: n_ctx_train      = 2048
0.00.368.150 I print_info: n_embd           = 2560
0.00.368.150 I print_info: n_layer          = 32
0.00.368.162 I print_info: n_head           = 32
0.00.368.164 I print_info: n_head_kv        = 32
0.00.368.165 I print_info: n_rot            = 20
0.00.368.165 I print_info: n_swa            = 0
0.00.368.167 I print_info: n_embd_head_k    = 80
0.00.368.167 I print_info: n_embd_head_v    = 80
0.00.368.169 I print_info: n_gqa            = 1
0.00.368.172 I print_info: n_embd_k_gqa     = 2560
0.00.368.174 I print_info: n_embd_v_gqa     = 2560
0.00.368.175 I print_info: f_norm_eps       = 1.0e-05
0.00.368.176 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.368.177 I print_info: f_clamp_kqv      = 0.0e+00
0.00.368.177 I print_info: f_max_alibi_bias = 0.0e+00
0.00.368.178 I print_info: f_logit_scale    = 0.0e+00
0.00.368.179 I print_info: n_ff             = 10240
0.00.368.180 I print_info: n_expert         = 0
0.00.368.180 I print_info: n_expert_used    = 0
0.00.368.181 I print_info: causal attn      = 1
0.00.368.181 I print_info: pooling type     = 0
0.00.368.185 I print_info: rope type        = 2
0.00.368.185 I print_info: rope scaling     = linear
0.00.368.187 I print_info: freq_base_train  = 10000.0
0.00.368.188 I print_info: freq_scale_train = 1
0.00.368.189 I print_info: n_ctx_orig_yarn  = 2048
0.00.368.189 I print_info: rope_finetuned   = unknown
0.00.368.189 I print_info: ssm_d_conv       = 0
0.00.368.190 I print_info: ssm_d_inner      = 0
0.00.368.190 I print_info: ssm_d_state      = 0
0.00.368.191 I print_info: ssm_dt_rank      = 0
0.00.368.191 I print_info: ssm_dt_b_c_rms   = 0
0.00.368.192 I print_info: model type       = 2.8B
0.00.368.193 I print_info: model params     = 2.78 B
0.00.368.194 I print_info: general.name     = 2.8B
0.00.368.197 I print_info: vocab type       = BPE
0.00.368.199 I print_info: n_vocab          = 50304
0.00.368.199 I print_info: n_merges         = 50009
0.00.368.200 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.368.200 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.368.201 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.368.202 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.368.203 I print_info: LF token         = 187 'Ċ'
0.00.368.203 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.368.204 I print_info: max token length = 1024
0.00.368.205 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.550.565 I load_tensors: offloading 32 repeating layers to GPU
0.00.550.576 I load_tensors: offloading output layer to GPU
0.00.550.577 I load_tensors: offloaded 33/33 layers to GPU
0.00.550.586 I load_tensors:        CUDA0 model buffer size =  2684.57 MiB
0.00.550.587 I load_tensors:   CPU_Mapped model buffer size =   130.49 MiB
.............................................................................................
0.01.009.170 I llama_context_unified: n_seq_max     = 1
0.01.009.177 I llama_context_unified: n_ctx         = 2048
0.01.009.177 I llama_context_unified: n_ctx_per_seq = 2048
0.01.009.178 I llama_context_unified: n_batch       = 512
0.01.009.178 I llama_context_unified: n_ubatch      = 512
0.01.009.179 I llama_context_unified: flash_attn    = 0
0.01.009.184 I llama_context_unified: freq_base     = 10000.0
0.01.009.185 I llama_context_unified: freq_scale    = 1
0.01.009.227 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.01.010.543 I init:      CUDA0 KV buffer size =   640.00 MiB
0.01.010.553 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.011.772 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.01.021.419 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.01.021.430 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.01.021.431 I llama_context_unified: graph nodes  = 1287
0.01.021.432 I llama_context_unified: graph splits = 2
0.01.021.435 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.021.436 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.090.889 I 
0.01.090.991 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.091.003 I perplexity: tokenizing the input ..
0.01.824.152 I perplexity: tokenization took 733.139 ms
0.01.824.468 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.421.266 I perplexity: 0.60 seconds per pass - ETA 0.03 minutes
[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,
0.04.054.557 I Final estimate: PPL = 10.3702 +/- 0.42431

0.04.056.296 I llama_perf_context_print:        load time =     821.15 ms
0.04.056.299 I llama_perf_context_print: prompt eval time =    1880.91 ms /  8192 tokens (    0.23 ms per token,  4355.34 tokens per second)
0.04.056.300 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.056.301 I llama_perf_context_print:       total time =    2965.41 ms /  8193 tokens

real	0m4.354s
user	0m4.271s
sys	0m1.062s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.447 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.269.304 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.285.520 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
0.00.285.545 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.285.554 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.285.559 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.285.561 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.285.561 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.285.562 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.285.566 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.285.566 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.285.568 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.285.569 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.285.570 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.285.572 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.285.573 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.285.581 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.285.581 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.285.582 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.292.452 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.248 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.300.979 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.300.987 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.300.988 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.300.989 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.300.989 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.300.990 I llama_model_loader: - kv  22:                          general.file_type u32              = 2
0.00.300.992 I llama_model_loader: - type  f32:  258 tensors
0.00.300.993 I llama_model_loader: - type q4_0:  129 tensors
0.00.300.994 I llama_model_loader: - type q6_K:    1 tensors
0.00.300.997 I print_info: file format = GGUF V3 (latest)
0.00.300.997 I print_info: file type   = Q4_0
0.00.300.999 I print_info: file size   = 1.49 GiB (4.61 BPW) 
0.00.345.668 I load: special tokens cache size = 25
0.00.369.071 I load: token to piece cache size = 0.2984 MB
0.00.369.091 I print_info: arch             = gptneox
0.00.369.092 I print_info: vocab_only       = 0
0.00.369.093 I print_info: n_ctx_train      = 2048
0.00.369.093 I print_info: n_embd           = 2560
0.00.369.094 I print_info: n_layer          = 32
0.00.369.107 I print_info: n_head           = 32
0.00.369.109 I print_info: n_head_kv        = 32
0.00.369.110 I print_info: n_rot            = 20
0.00.369.110 I print_info: n_swa            = 0
0.00.369.111 I print_info: n_embd_head_k    = 80
0.00.369.111 I print_info: n_embd_head_v    = 80
0.00.369.113 I print_info: n_gqa            = 1
0.00.369.115 I print_info: n_embd_k_gqa     = 2560
0.00.369.117 I print_info: n_embd_v_gqa     = 2560
0.00.369.119 I print_info: f_norm_eps       = 1.0e-05
0.00.369.120 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.369.120 I print_info: f_clamp_kqv      = 0.0e+00
0.00.369.121 I print_info: f_max_alibi_bias = 0.0e+00
0.00.369.121 I print_info: f_logit_scale    = 0.0e+00
0.00.369.123 I print_info: n_ff             = 10240
0.00.369.123 I print_info: n_expert         = 0
0.00.369.124 I print_info: n_expert_used    = 0
0.00.369.124 I print_info: causal attn      = 1
0.00.369.125 I print_info: pooling type     = 0
0.00.369.126 I print_info: rope type        = 2
0.00.369.127 I print_info: rope scaling     = linear
0.00.369.128 I print_info: freq_base_train  = 10000.0
0.00.369.129 I print_info: freq_scale_train = 1
0.00.369.130 I print_info: n_ctx_orig_yarn  = 2048
0.00.369.130 I print_info: rope_finetuned   = unknown
0.00.369.130 I print_info: ssm_d_conv       = 0
0.00.369.131 I print_info: ssm_d_inner      = 0
0.00.369.131 I print_info: ssm_d_state      = 0
0.00.369.131 I print_info: ssm_dt_rank      = 0
0.00.369.133 I print_info: ssm_dt_b_c_rms   = 0
0.00.369.134 I print_info: model type       = 2.8B
0.00.369.135 I print_info: model params     = 2.78 B
0.00.369.135 I print_info: general.name     = 2.8B
0.00.369.138 I print_info: vocab type       = BPE
0.00.369.140 I print_info: n_vocab          = 50304
0.00.369.141 I print_info: n_merges         = 50009
0.00.369.141 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.369.143 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.369.144 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.369.144 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.369.145 I print_info: LF token         = 187 'Ċ'
0.00.369.145 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.369.147 I print_info: max token length = 1024
0.00.369.156 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.469.378 I load_tensors: offloading 32 repeating layers to GPU
0.00.469.390 I load_tensors: offloading output layer to GPU
0.00.469.391 I load_tensors: offloaded 33/33 layers to GPU
0.00.469.399 I load_tensors:        CUDA0 model buffer size =  1454.83 MiB
0.00.469.401 I load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
0.00.729.385 I llama_context_unified: n_seq_max     = 1
0.00.729.391 I llama_context_unified: n_ctx         = 2048
0.00.729.392 I llama_context_unified: n_ctx_per_seq = 2048
0.00.729.392 I llama_context_unified: n_batch       = 512
0.00.729.393 I llama_context_unified: n_ubatch      = 512
0.00.729.393 I llama_context_unified: flash_attn    = 0
0.00.729.398 I llama_context_unified: freq_base     = 10000.0
0.00.729.399 I llama_context_unified: freq_scale    = 1
0.00.729.440 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.730.733 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.730.746 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.731.949 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.741.751 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.741.760 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.741.761 I llama_context_unified: graph nodes  = 1287
0.00.741.761 I llama_context_unified: graph splits = 2
0.00.741.766 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.741.766 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.807.598 I 
0.00.807.707 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.807.720 I perplexity: tokenizing the input ..
0.01.561.151 I perplexity: tokenization took 753.42 ms
0.01.561.476 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.202.793 I perplexity: 0.64 seconds per pass - ETA 0.03 minutes
[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,
0.03.966.334 I Final estimate: PPL = 10.9657 +/- 0.44766

0.03.967.939 I llama_perf_context_print:        load time =     538.28 ms
0.03.967.942 I llama_perf_context_print: prompt eval time =    2054.34 ms /  8192 tokens (    0.25 ms per token,  3987.65 tokens per second)
0.03.967.944 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.967.945 I llama_perf_context_print:       total time =    3160.34 ms /  8193 tokens

real	0m4.261s
user	0m4.308s
sys	0m0.922s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.434 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.276.900 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.293.135 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_1.gguf (version GGUF V3 (latest))
0.00.293.157 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.293.167 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.293.172 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.293.173 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.293.174 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.293.174 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.293.178 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.293.179 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.293.180 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.293.181 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.293.182 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.293.184 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.293.186 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.293.194 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.293.195 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.293.198 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.300.031 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.301.776 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.308.592 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.308.600 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.308.601 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.308.601 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.308.602 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.308.603 I llama_model_loader: - kv  22:                          general.file_type u32              = 3
0.00.308.605 I llama_model_loader: - type  f32:  258 tensors
0.00.308.606 I llama_model_loader: - type q4_1:  129 tensors
0.00.308.606 I llama_model_loader: - type q6_K:    1 tensors
0.00.308.609 I print_info: file format = GGUF V3 (latest)
0.00.308.610 I print_info: file type   = Q4_1
0.00.308.612 I print_info: file size   = 1.64 GiB (5.08 BPW) 
0.00.353.058 I load: special tokens cache size = 25
0.00.375.274 I load: token to piece cache size = 0.2984 MB
0.00.375.290 I print_info: arch             = gptneox
0.00.375.291 I print_info: vocab_only       = 0
0.00.375.292 I print_info: n_ctx_train      = 2048
0.00.375.294 I print_info: n_embd           = 2560
0.00.375.295 I print_info: n_layer          = 32
0.00.375.308 I print_info: n_head           = 32
0.00.375.310 I print_info: n_head_kv        = 32
0.00.375.311 I print_info: n_rot            = 20
0.00.375.312 I print_info: n_swa            = 0
0.00.375.312 I print_info: n_embd_head_k    = 80
0.00.375.312 I print_info: n_embd_head_v    = 80
0.00.375.315 I print_info: n_gqa            = 1
0.00.375.317 I print_info: n_embd_k_gqa     = 2560
0.00.375.320 I print_info: n_embd_v_gqa     = 2560
0.00.375.321 I print_info: f_norm_eps       = 1.0e-05
0.00.375.322 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.375.323 I print_info: f_clamp_kqv      = 0.0e+00
0.00.375.323 I print_info: f_max_alibi_bias = 0.0e+00
0.00.375.323 I print_info: f_logit_scale    = 0.0e+00
0.00.375.328 I print_info: n_ff             = 10240
0.00.375.329 I print_info: n_expert         = 0
0.00.375.330 I print_info: n_expert_used    = 0
0.00.375.330 I print_info: causal attn      = 1
0.00.375.331 I print_info: pooling type     = 0
0.00.375.331 I print_info: rope type        = 2
0.00.375.332 I print_info: rope scaling     = linear
0.00.375.333 I print_info: freq_base_train  = 10000.0
0.00.375.334 I print_info: freq_scale_train = 1
0.00.375.335 I print_info: n_ctx_orig_yarn  = 2048
0.00.375.335 I print_info: rope_finetuned   = unknown
0.00.375.336 I print_info: ssm_d_conv       = 0
0.00.375.337 I print_info: ssm_d_inner      = 0
0.00.375.337 I print_info: ssm_d_state      = 0
0.00.375.337 I print_info: ssm_dt_rank      = 0
0.00.375.338 I print_info: ssm_dt_b_c_rms   = 0
0.00.375.339 I print_info: model type       = 2.8B
0.00.375.339 I print_info: model params     = 2.78 B
0.00.375.340 I print_info: general.name     = 2.8B
0.00.375.342 I print_info: vocab type       = BPE
0.00.375.344 I print_info: n_vocab          = 50304
0.00.375.344 I print_info: n_merges         = 50009
0.00.375.345 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.375.345 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.375.346 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.375.346 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.375.347 I print_info: LF token         = 187 'Ċ'
0.00.375.348 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.375.348 I print_info: max token length = 1024
0.00.375.350 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.484.940 I load_tensors: offloading 32 repeating layers to GPU
0.00.484.951 I load_tensors: offloading output layer to GPU
0.00.484.952 I load_tensors: offloaded 33/33 layers to GPU
0.00.484.961 I load_tensors:        CUDA0 model buffer size =  1604.83 MiB
0.00.484.962 I load_tensors:   CPU_Mapped model buffer size =    76.76 MiB
............................................................................................
0.00.801.046 I llama_context_unified: n_seq_max     = 1
0.00.801.052 I llama_context_unified: n_ctx         = 2048
0.00.801.053 I llama_context_unified: n_ctx_per_seq = 2048
0.00.801.053 I llama_context_unified: n_batch       = 512
0.00.801.054 I llama_context_unified: n_ubatch      = 512
0.00.801.055 I llama_context_unified: flash_attn    = 0
0.00.801.060 I llama_context_unified: freq_base     = 10000.0
0.00.801.062 I llama_context_unified: freq_scale    = 1
0.00.801.102 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.802.389 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.802.403 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.803.635 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.814.815 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.814.825 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.814.826 I llama_context_unified: graph nodes  = 1287
0.00.814.827 I llama_context_unified: graph splits = 2
0.00.814.831 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.814.832 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.882.661 I 
0.00.882.768 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.882.781 I perplexity: tokenizing the input ..
0.01.629.455 I perplexity: tokenization took 746.664 ms
0.01.629.770 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.271.475 I perplexity: 0.64 seconds per pass - ETA 0.03 minutes
[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,
0.04.036.074 I Final estimate: PPL = 10.8426 +/- 0.43891

0.04.037.743 I llama_perf_context_print:        load time =     605.74 ms
0.04.037.745 I llama_perf_context_print: prompt eval time =    2054.45 ms /  8192 tokens (    0.25 ms per token,  3987.43 tokens per second)
0.04.037.747 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.037.748 I llama_perf_context_print:       total time =    3155.08 ms /  8193 tokens

real	0m4.332s
user	0m4.294s
sys	0m1.015s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.474 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.268.231 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.284.439 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_0.gguf (version GGUF V3 (latest))
0.00.284.461 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.284.471 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.284.474 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.284.475 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.284.477 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.284.478 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.284.481 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.284.482 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.284.483 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.284.484 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.284.485 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.284.486 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.284.487 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.284.495 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.284.496 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.284.497 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.291.582 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.293.329 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.300.222 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.300.231 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.300.232 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.300.233 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.300.234 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.300.235 I llama_model_loader: - kv  22:                          general.file_type u32              = 8
0.00.300.237 I llama_model_loader: - type  f32:  258 tensors
0.00.300.238 I llama_model_loader: - type q5_0:  129 tensors
0.00.300.238 I llama_model_loader: - type q6_K:    1 tensors
0.00.300.242 I print_info: file format = GGUF V3 (latest)
0.00.300.242 I print_info: file type   = Q5_0
0.00.300.245 I print_info: file size   = 1.80 GiB (5.56 BPW) 
0.00.346.016 I load: special tokens cache size = 25
0.00.368.306 I load: token to piece cache size = 0.2984 MB
0.00.368.323 I print_info: arch             = gptneox
0.00.368.324 I print_info: vocab_only       = 0
0.00.368.325 I print_info: n_ctx_train      = 2048
0.00.368.327 I print_info: n_embd           = 2560
0.00.368.328 I print_info: n_layer          = 32
0.00.368.342 I print_info: n_head           = 32
0.00.368.344 I print_info: n_head_kv        = 32
0.00.368.345 I print_info: n_rot            = 20
0.00.368.345 I print_info: n_swa            = 0
0.00.368.345 I print_info: n_embd_head_k    = 80
0.00.368.346 I print_info: n_embd_head_v    = 80
0.00.368.348 I print_info: n_gqa            = 1
0.00.368.350 I print_info: n_embd_k_gqa     = 2560
0.00.368.352 I print_info: n_embd_v_gqa     = 2560
0.00.368.354 I print_info: f_norm_eps       = 1.0e-05
0.00.368.355 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.368.355 I print_info: f_clamp_kqv      = 0.0e+00
0.00.368.356 I print_info: f_max_alibi_bias = 0.0e+00
0.00.368.356 I print_info: f_logit_scale    = 0.0e+00
0.00.368.357 I print_info: n_ff             = 10240
0.00.368.358 I print_info: n_expert         = 0
0.00.368.359 I print_info: n_expert_used    = 0
0.00.368.359 I print_info: causal attn      = 1
0.00.368.359 I print_info: pooling type     = 0
0.00.368.361 I print_info: rope type        = 2
0.00.368.361 I print_info: rope scaling     = linear
0.00.368.363 I print_info: freq_base_train  = 10000.0
0.00.368.364 I print_info: freq_scale_train = 1
0.00.368.365 I print_info: n_ctx_orig_yarn  = 2048
0.00.368.366 I print_info: rope_finetuned   = unknown
0.00.368.366 I print_info: ssm_d_conv       = 0
0.00.368.366 I print_info: ssm_d_inner      = 0
0.00.368.367 I print_info: ssm_d_state      = 0
0.00.368.367 I print_info: ssm_dt_rank      = 0
0.00.368.368 I print_info: ssm_dt_b_c_rms   = 0
0.00.368.368 I print_info: model type       = 2.8B
0.00.368.369 I print_info: model params     = 2.78 B
0.00.368.369 I print_info: general.name     = 2.8B
0.00.368.372 I print_info: vocab type       = BPE
0.00.368.373 I print_info: n_vocab          = 50304
0.00.368.374 I print_info: n_merges         = 50009
0.00.368.374 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.368.375 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.368.376 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.368.376 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.368.377 I print_info: LF token         = 187 'Ċ'
0.00.368.378 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.368.378 I print_info: max token length = 1024
0.00.368.388 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.489.246 I load_tensors: offloading 32 repeating layers to GPU
0.00.489.257 I load_tensors: offloading output layer to GPU
0.00.489.258 I load_tensors: offloaded 33/33 layers to GPU
0.00.489.266 I load_tensors:        CUDA0 model buffer size =  1754.83 MiB
0.00.489.268 I load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
............................................................................................
0.00.799.626 I llama_context_unified: n_seq_max     = 1
0.00.799.631 I llama_context_unified: n_ctx         = 2048
0.00.799.632 I llama_context_unified: n_ctx_per_seq = 2048
0.00.799.632 I llama_context_unified: n_batch       = 512
0.00.799.633 I llama_context_unified: n_ubatch      = 512
0.00.799.634 I llama_context_unified: flash_attn    = 0
0.00.799.639 I llama_context_unified: freq_base     = 10000.0
0.00.799.640 I llama_context_unified: freq_scale    = 1
0.00.799.679 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.801.054 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.801.067 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.802.348 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.812.613 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.812.623 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.812.624 I llama_context_unified: graph nodes  = 1287
0.00.812.624 I llama_context_unified: graph splits = 2
0.00.812.628 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.812.630 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.880.651 I 
0.00.880.764 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.880.777 I perplexity: tokenizing the input ..
0.01.639.169 I perplexity: tokenization took 758.382 ms
0.01.639.480 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.242.795 I perplexity: 0.60 seconds per pass - ETA 0.03 minutes
[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,
0.03.889.364 I Final estimate: PPL = 10.5064 +/- 0.42936

0.03.890.909 I llama_perf_context_print:        load time =     612.40 ms
0.03.890.912 I llama_perf_context_print: prompt eval time =    1900.87 ms /  8192 tokens (    0.23 ms per token,  4309.61 tokens per second)
0.03.890.913 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.890.915 I llama_perf_context_print:       total time =    3010.26 ms /  8193 tokens

real	0m4.185s
user	0m4.164s
sys	0m0.983s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.506 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.279.459 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.295.530 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_1.gguf (version GGUF V3 (latest))
0.00.295.553 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.295.563 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.295.565 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.295.565 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.295.567 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.295.568 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.295.572 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.295.573 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.295.573 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.295.574 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.295.575 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.295.576 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.295.577 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.295.585 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.295.586 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.295.586 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.302.448 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.304.205 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.311.988 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.311.997 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.311.998 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.311.999 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.312.000 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.312.001 I llama_model_loader: - kv  22:                          general.file_type u32              = 9
0.00.312.004 I llama_model_loader: - type  f32:  258 tensors
0.00.312.004 I llama_model_loader: - type q5_1:  129 tensors
0.00.312.005 I llama_model_loader: - type q6_K:    1 tensors
0.00.312.008 I print_info: file format = GGUF V3 (latest)
0.00.312.008 I print_info: file type   = Q5_1
0.00.312.010 I print_info: file size   = 1.95 GiB (6.04 BPW) 
0.00.357.208 I load: special tokens cache size = 25
0.00.379.249 I load: token to piece cache size = 0.2984 MB
0.00.379.277 I print_info: arch             = gptneox
0.00.379.277 I print_info: vocab_only       = 0
0.00.379.278 I print_info: n_ctx_train      = 2048
0.00.379.278 I print_info: n_embd           = 2560
0.00.379.279 I print_info: n_layer          = 32
0.00.379.294 I print_info: n_head           = 32
0.00.379.297 I print_info: n_head_kv        = 32
0.00.379.297 I print_info: n_rot            = 20
0.00.379.298 I print_info: n_swa            = 0
0.00.379.298 I print_info: n_embd_head_k    = 80
0.00.379.299 I print_info: n_embd_head_v    = 80
0.00.379.301 I print_info: n_gqa            = 1
0.00.379.303 I print_info: n_embd_k_gqa     = 2560
0.00.379.305 I print_info: n_embd_v_gqa     = 2560
0.00.379.308 I print_info: f_norm_eps       = 1.0e-05
0.00.379.309 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.379.309 I print_info: f_clamp_kqv      = 0.0e+00
0.00.379.310 I print_info: f_max_alibi_bias = 0.0e+00
0.00.379.310 I print_info: f_logit_scale    = 0.0e+00
0.00.379.312 I print_info: n_ff             = 10240
0.00.379.312 I print_info: n_expert         = 0
0.00.379.313 I print_info: n_expert_used    = 0
0.00.379.314 I print_info: causal attn      = 1
0.00.379.315 I print_info: pooling type     = 0
0.00.379.315 I print_info: rope type        = 2
0.00.379.316 I print_info: rope scaling     = linear
0.00.379.318 I print_info: freq_base_train  = 10000.0
0.00.379.319 I print_info: freq_scale_train = 1
0.00.379.320 I print_info: n_ctx_orig_yarn  = 2048
0.00.379.320 I print_info: rope_finetuned   = unknown
0.00.379.320 I print_info: ssm_d_conv       = 0
0.00.379.321 I print_info: ssm_d_inner      = 0
0.00.379.321 I print_info: ssm_d_state      = 0
0.00.379.322 I print_info: ssm_dt_rank      = 0
0.00.379.322 I print_info: ssm_dt_b_c_rms   = 0
0.00.379.323 I print_info: model type       = 2.8B
0.00.379.324 I print_info: model params     = 2.78 B
0.00.379.325 I print_info: general.name     = 2.8B
0.00.379.328 I print_info: vocab type       = BPE
0.00.379.329 I print_info: n_vocab          = 50304
0.00.379.329 I print_info: n_merges         = 50009
0.00.379.330 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.379.330 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.379.331 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.379.332 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.379.333 I print_info: LF token         = 187 'Ċ'
0.00.379.334 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.379.335 I print_info: max token length = 1024
0.00.379.336 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.508.748 I load_tensors: offloading 32 repeating layers to GPU
0.00.508.758 I load_tensors: offloading output layer to GPU
0.00.508.759 I load_tensors: offloaded 33/33 layers to GPU
0.00.508.767 I load_tensors:        CUDA0 model buffer size =  1904.83 MiB
0.00.508.769 I load_tensors:   CPU_Mapped model buffer size =    92.11 MiB
............................................................................................
0.00.872.011 I llama_context_unified: n_seq_max     = 1
0.00.872.018 I llama_context_unified: n_ctx         = 2048
0.00.872.019 I llama_context_unified: n_ctx_per_seq = 2048
0.00.872.019 I llama_context_unified: n_batch       = 512
0.00.872.020 I llama_context_unified: n_ubatch      = 512
0.00.872.021 I llama_context_unified: flash_attn    = 0
0.00.872.026 I llama_context_unified: freq_base     = 10000.0
0.00.872.028 I llama_context_unified: freq_scale    = 1
0.00.872.070 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.873.358 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.873.372 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.874.605 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.884.090 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.884.098 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.884.099 I llama_context_unified: graph nodes  = 1287
0.00.884.099 I llama_context_unified: graph splits = 2
0.00.884.103 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.884.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.951.886 I 
0.00.952.043 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.952.059 I perplexity: tokenizing the input ..
0.01.701.789 I perplexity: tokenization took 749.723 ms
0.01.702.104 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.307.503 I perplexity: 0.61 seconds per pass - ETA 0.03 minutes
[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,
0.03.952.388 I Final estimate: PPL = 10.4307 +/- 0.42590

0.03.954.096 I llama_perf_context_print:        load time =     672.41 ms
0.03.954.098 I llama_perf_context_print: prompt eval time =    1898.44 ms /  8192 tokens (    0.23 ms per token,  4315.12 tokens per second)
0.03.954.101 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.954.103 I llama_perf_context_print:       total time =    3002.21 ms /  8193 tokens

real	0m4.247s
user	0m4.189s
sys	0m1.003s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q2_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.471 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.269.792 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.285.789 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q2_k.gguf (version GGUF V3 (latest))
0.00.285.811 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.285.821 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.285.826 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.285.827 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.285.828 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.285.828 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.285.833 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.285.833 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.285.834 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.285.835 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.285.836 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.285.838 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.285.839 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.285.846 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.285.848 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.285.849 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.292.694 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.444 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.301.179 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.301.187 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.301.188 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.301.189 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.301.190 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.301.191 I llama_model_loader: - kv  22:                          general.file_type u32              = 10
0.00.301.193 I llama_model_loader: - type  f32:  258 tensors
0.00.301.194 I llama_model_loader: - type q2_K:   65 tensors
0.00.301.194 I llama_model_loader: - type q3_K:   64 tensors
0.00.301.195 I llama_model_loader: - type q6_K:    1 tensors
0.00.301.198 I print_info: file format = GGUF V3 (latest)
0.00.301.198 I print_info: file type   = Q2_K - Medium
0.00.301.201 I print_info: file size   = 1.01 GiB (3.13 BPW) 
0.00.345.871 I load: special tokens cache size = 25
0.00.367.809 I load: token to piece cache size = 0.2984 MB
0.00.367.826 I print_info: arch             = gptneox
0.00.367.827 I print_info: vocab_only       = 0
0.00.367.827 I print_info: n_ctx_train      = 2048
0.00.367.828 I print_info: n_embd           = 2560
0.00.367.828 I print_info: n_layer          = 32
0.00.367.840 I print_info: n_head           = 32
0.00.367.842 I print_info: n_head_kv        = 32
0.00.367.842 I print_info: n_rot            = 20
0.00.367.843 I print_info: n_swa            = 0
0.00.367.843 I print_info: n_embd_head_k    = 80
0.00.367.844 I print_info: n_embd_head_v    = 80
0.00.367.846 I print_info: n_gqa            = 1
0.00.367.848 I print_info: n_embd_k_gqa     = 2560
0.00.367.851 I print_info: n_embd_v_gqa     = 2560
0.00.367.853 I print_info: f_norm_eps       = 1.0e-05
0.00.367.853 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.367.854 I print_info: f_clamp_kqv      = 0.0e+00
0.00.367.856 I print_info: f_max_alibi_bias = 0.0e+00
0.00.367.857 I print_info: f_logit_scale    = 0.0e+00
0.00.367.858 I print_info: n_ff             = 10240
0.00.367.859 I print_info: n_expert         = 0
0.00.367.859 I print_info: n_expert_used    = 0
0.00.367.860 I print_info: causal attn      = 1
0.00.367.863 I print_info: pooling type     = 0
0.00.367.864 I print_info: rope type        = 2
0.00.367.864 I print_info: rope scaling     = linear
0.00.367.866 I print_info: freq_base_train  = 10000.0
0.00.367.867 I print_info: freq_scale_train = 1
0.00.367.867 I print_info: n_ctx_orig_yarn  = 2048
0.00.367.868 I print_info: rope_finetuned   = unknown
0.00.367.869 I print_info: ssm_d_conv       = 0
0.00.367.870 I print_info: ssm_d_inner      = 0
0.00.367.871 I print_info: ssm_d_state      = 0
0.00.367.871 I print_info: ssm_dt_rank      = 0
0.00.367.872 I print_info: ssm_dt_b_c_rms   = 0
0.00.367.873 I print_info: model type       = 2.8B
0.00.367.874 I print_info: model params     = 2.78 B
0.00.367.874 I print_info: general.name     = 2.8B
0.00.367.877 I print_info: vocab type       = BPE
0.00.367.878 I print_info: n_vocab          = 50304
0.00.367.879 I print_info: n_merges         = 50009
0.00.367.879 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.367.880 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.367.881 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.367.882 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.367.883 I print_info: LF token         = 187 'Ċ'
0.00.367.883 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.367.884 I print_info: max token length = 1024
0.00.367.893 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.437.816 I load_tensors: offloading 32 repeating layers to GPU
0.00.437.827 I load_tensors: offloading output layer to GPU
0.00.437.828 I load_tensors: offloaded 33/33 layers to GPU
0.00.437.836 I load_tensors:        CUDA0 model buffer size =   993.89 MiB
0.00.437.837 I load_tensors:   CPU_Mapped model buffer size =    40.30 MiB
.......................................................................................
0.00.620.819 I llama_context_unified: n_seq_max     = 1
0.00.620.825 I llama_context_unified: n_ctx         = 2048
0.00.620.826 I llama_context_unified: n_ctx_per_seq = 2048
0.00.620.826 I llama_context_unified: n_batch       = 512
0.00.620.827 I llama_context_unified: n_ubatch      = 512
0.00.620.828 I llama_context_unified: flash_attn    = 0
0.00.620.833 I llama_context_unified: freq_base     = 10000.0
0.00.620.834 I llama_context_unified: freq_scale    = 1
0.00.620.873 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.622.170 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.622.184 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.623.473 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.632.938 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.632.946 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.632.947 I llama_context_unified: graph nodes  = 1287
0.00.632.948 I llama_context_unified: graph splits = 2
0.00.632.952 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.632.952 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.703.125 I 
0.00.703.235 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.703.297 I perplexity: tokenizing the input ..
0.01.441.255 I perplexity: tokenization took 737.948 ms
0.01.441.579 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.070.275 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]65.3391,[2]77.8564,[3]87.6350,[4]86.2160,
0.03.792.708 I Final estimate: PPL = 86.2160 +/- 4.58012

0.03.794.301 I llama_perf_context_print:        load time =     433.32 ms
0.03.794.304 I llama_perf_context_print: prompt eval time =    2001.92 ms /  8192 tokens (    0.24 ms per token,  4092.08 tokens per second)
0.03.794.305 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.794.306 I llama_perf_context_print:       total time =    3091.18 ms /  8193 tokens

real	0m4.083s
user	0m4.117s
sys	0m0.915s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.395 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.274.057 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.290.145 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q3_k.gguf (version GGUF V3 (latest))
0.00.290.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.290.179 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.290.183 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.290.184 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.290.186 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.290.187 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.290.191 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.290.192 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.290.193 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.290.194 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.290.195 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.290.196 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.290.197 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.290.205 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.290.206 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.290.207 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.296.985 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.298.731 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.305.687 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.305.696 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.305.697 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.305.698 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.305.699 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.305.700 I llama_model_loader: - kv  22:                          general.file_type u32              = 12
0.00.305.702 I llama_model_loader: - type  f32:  258 tensors
0.00.305.703 I llama_model_loader: - type q3_K:   33 tensors
0.00.305.703 I llama_model_loader: - type q4_K:   94 tensors
0.00.305.704 I llama_model_loader: - type q5_K:    2 tensors
0.00.305.705 I llama_model_loader: - type q6_K:    1 tensors
0.00.305.708 I print_info: file format = GGUF V3 (latest)
0.00.305.708 I print_info: file type   = Q3_K - Medium
0.00.305.710 I print_info: file size   = 1.37 GiB (4.25 BPW) 
0.00.350.451 I load: special tokens cache size = 25
0.00.372.419 I load: token to piece cache size = 0.2984 MB
0.00.372.450 I print_info: arch             = gptneox
0.00.372.450 I print_info: vocab_only       = 0
0.00.372.451 I print_info: n_ctx_train      = 2048
0.00.372.451 I print_info: n_embd           = 2560
0.00.372.452 I print_info: n_layer          = 32
0.00.372.466 I print_info: n_head           = 32
0.00.372.469 I print_info: n_head_kv        = 32
0.00.372.469 I print_info: n_rot            = 20
0.00.372.470 I print_info: n_swa            = 0
0.00.372.471 I print_info: n_embd_head_k    = 80
0.00.372.472 I print_info: n_embd_head_v    = 80
0.00.372.474 I print_info: n_gqa            = 1
0.00.372.476 I print_info: n_embd_k_gqa     = 2560
0.00.372.478 I print_info: n_embd_v_gqa     = 2560
0.00.372.479 I print_info: f_norm_eps       = 1.0e-05
0.00.372.480 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.372.481 I print_info: f_clamp_kqv      = 0.0e+00
0.00.372.482 I print_info: f_max_alibi_bias = 0.0e+00
0.00.372.482 I print_info: f_logit_scale    = 0.0e+00
0.00.372.484 I print_info: n_ff             = 10240
0.00.372.485 I print_info: n_expert         = 0
0.00.372.485 I print_info: n_expert_used    = 0
0.00.372.486 I print_info: causal attn      = 1
0.00.372.487 I print_info: pooling type     = 0
0.00.372.487 I print_info: rope type        = 2
0.00.372.488 I print_info: rope scaling     = linear
0.00.372.489 I print_info: freq_base_train  = 10000.0
0.00.372.490 I print_info: freq_scale_train = 1
0.00.372.491 I print_info: n_ctx_orig_yarn  = 2048
0.00.372.491 I print_info: rope_finetuned   = unknown
0.00.372.491 I print_info: ssm_d_conv       = 0
0.00.372.492 I print_info: ssm_d_inner      = 0
0.00.372.496 I print_info: ssm_d_state      = 0
0.00.372.496 I print_info: ssm_dt_rank      = 0
0.00.372.497 I print_info: ssm_dt_b_c_rms   = 0
0.00.372.498 I print_info: model type       = 2.8B
0.00.372.501 I print_info: model params     = 2.78 B
0.00.372.502 I print_info: general.name     = 2.8B
0.00.372.505 I print_info: vocab type       = BPE
0.00.372.506 I print_info: n_vocab          = 50304
0.00.372.507 I print_info: n_merges         = 50009
0.00.372.508 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.372.509 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.372.509 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.372.510 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.372.510 I print_info: LF token         = 187 'Ċ'
0.00.372.511 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.372.512 I print_info: max token length = 1024
0.00.372.513 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.466.189 I load_tensors: offloading 32 repeating layers to GPU
0.00.466.201 I load_tensors: offloading output layer to GPU
0.00.466.202 I load_tensors: offloaded 33/33 layers to GPU
0.00.466.211 I load_tensors:        CUDA0 model buffer size =  1354.83 MiB
0.00.466.213 I load_tensors:   CPU_Mapped model buffer size =    52.77 MiB
...........................................................................................
0.00.707.943 I llama_context_unified: n_seq_max     = 1
0.00.707.949 I llama_context_unified: n_ctx         = 2048
0.00.707.950 I llama_context_unified: n_ctx_per_seq = 2048
0.00.707.950 I llama_context_unified: n_batch       = 512
0.00.707.951 I llama_context_unified: n_ubatch      = 512
0.00.707.952 I llama_context_unified: flash_attn    = 0
0.00.707.957 I llama_context_unified: freq_base     = 10000.0
0.00.707.958 I llama_context_unified: freq_scale    = 1
0.00.707.998 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.709.278 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.709.292 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.710.509 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.720.088 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.720.096 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.720.097 I llama_context_unified: graph nodes  = 1287
0.00.720.097 I llama_context_unified: graph splits = 2
0.00.720.102 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.720.102 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.788.589 I 
0.00.788.698 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.788.712 I perplexity: tokenizing the input ..
0.01.532.684 I perplexity: tokenization took 743.962 ms
0.01.533.001 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.176.201 I perplexity: 0.64 seconds per pass - ETA 0.03 minutes
[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,
0.03.940.896 I Final estimate: PPL = 11.2719 +/- 0.46044

0.03.942.474 I llama_perf_context_print:        load time =     514.51 ms
0.03.942.476 I llama_perf_context_print: prompt eval time =    2054.84 ms /  8192 tokens (    0.25 ms per token,  3986.68 tokens per second)
0.03.942.478 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.942.480 I llama_perf_context_print:       total time =    3153.88 ms /  8193 tokens

real	0m4.236s
user	0m4.251s
sys	0m0.958s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.447 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.277.709 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.294.578 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_k.gguf (version GGUF V3 (latest))
0.00.294.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.294.613 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.294.614 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.294.615 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.294.616 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.294.617 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.294.622 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.294.623 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.294.624 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.294.625 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.294.627 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.294.628 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.294.630 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.294.641 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.294.642 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.294.643 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.303.247 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.305.013 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.311.781 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.311.788 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.311.789 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.311.790 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.311.791 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.311.792 I llama_model_loader: - kv  22:                          general.file_type u32              = 15
0.00.311.795 I llama_model_loader: - type  f32:  258 tensors
0.00.311.796 I llama_model_loader: - type q4_K:   81 tensors
0.00.311.797 I llama_model_loader: - type q5_K:   32 tensors
0.00.311.797 I llama_model_loader: - type q6_K:   17 tensors
0.00.311.800 I print_info: file format = GGUF V3 (latest)
0.00.311.800 I print_info: file type   = Q4_K - Medium
0.00.311.803 I print_info: file size   = 1.66 GiB (5.14 BPW) 
0.00.357.432 I load: special tokens cache size = 25
0.00.379.364 I load: token to piece cache size = 0.2984 MB
0.00.379.388 I print_info: arch             = gptneox
0.00.379.389 I print_info: vocab_only       = 0
0.00.379.390 I print_info: n_ctx_train      = 2048
0.00.379.390 I print_info: n_embd           = 2560
0.00.379.391 I print_info: n_layer          = 32
0.00.379.404 I print_info: n_head           = 32
0.00.379.406 I print_info: n_head_kv        = 32
0.00.379.407 I print_info: n_rot            = 20
0.00.379.407 I print_info: n_swa            = 0
0.00.379.408 I print_info: n_embd_head_k    = 80
0.00.379.409 I print_info: n_embd_head_v    = 80
0.00.379.411 I print_info: n_gqa            = 1
0.00.379.413 I print_info: n_embd_k_gqa     = 2560
0.00.379.415 I print_info: n_embd_v_gqa     = 2560
0.00.379.417 I print_info: f_norm_eps       = 1.0e-05
0.00.379.418 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.379.419 I print_info: f_clamp_kqv      = 0.0e+00
0.00.379.420 I print_info: f_max_alibi_bias = 0.0e+00
0.00.379.420 I print_info: f_logit_scale    = 0.0e+00
0.00.379.421 I print_info: n_ff             = 10240
0.00.379.422 I print_info: n_expert         = 0
0.00.379.423 I print_info: n_expert_used    = 0
0.00.379.423 I print_info: causal attn      = 1
0.00.379.423 I print_info: pooling type     = 0
0.00.379.424 I print_info: rope type        = 2
0.00.379.424 I print_info: rope scaling     = linear
0.00.379.426 I print_info: freq_base_train  = 10000.0
0.00.379.427 I print_info: freq_scale_train = 1
0.00.379.428 I print_info: n_ctx_orig_yarn  = 2048
0.00.379.429 I print_info: rope_finetuned   = unknown
0.00.379.429 I print_info: ssm_d_conv       = 0
0.00.379.429 I print_info: ssm_d_inner      = 0
0.00.379.430 I print_info: ssm_d_state      = 0
0.00.379.430 I print_info: ssm_dt_rank      = 0
0.00.379.430 I print_info: ssm_dt_b_c_rms   = 0
0.00.379.432 I print_info: model type       = 2.8B
0.00.379.433 I print_info: model params     = 2.78 B
0.00.379.433 I print_info: general.name     = 2.8B
0.00.379.436 I print_info: vocab type       = BPE
0.00.379.438 I print_info: n_vocab          = 50304
0.00.379.438 I print_info: n_merges         = 50009
0.00.379.439 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.379.439 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.379.440 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.379.441 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.379.442 I print_info: LF token         = 187 'Ċ'
0.00.379.442 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.379.443 I print_info: max token length = 1024
0.00.379.444 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.493.052 I load_tensors: offloading 32 repeating layers to GPU
0.00.493.061 I load_tensors: offloading output layer to GPU
0.00.493.062 I load_tensors: offloaded 33/33 layers to GPU
0.00.493.070 I load_tensors:        CUDA0 model buffer size =  1632.95 MiB
0.00.493.072 I load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
..................................................................................
0.00.786.125 I llama_context_unified: n_seq_max     = 1
0.00.786.132 I llama_context_unified: n_ctx         = 2048
0.00.786.132 I llama_context_unified: n_ctx_per_seq = 2048
0.00.786.133 I llama_context_unified: n_batch       = 512
0.00.786.133 I llama_context_unified: n_ubatch      = 512
0.00.786.134 I llama_context_unified: flash_attn    = 0
0.00.786.139 I llama_context_unified: freq_base     = 10000.0
0.00.786.140 I llama_context_unified: freq_scale    = 1
0.00.786.181 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.787.455 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.787.469 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.788.699 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.798.626 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.798.636 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.798.637 I llama_context_unified: graph nodes  = 1287
0.00.798.638 I llama_context_unified: graph splits = 2
0.00.798.642 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.798.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.868.550 I 
0.00.868.651 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.868.665 I perplexity: tokenizing the input ..
0.01.607.460 I perplexity: tokenization took 738.785 ms
0.01.607.783 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.239.859 I perplexity: 0.63 seconds per pass - ETA 0.03 minutes
[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,
0.03.980.696 I Final estimate: PPL = 10.6047 +/- 0.43503

0.03.982.408 I llama_perf_context_print:        load time =     590.82 ms
0.03.982.411 I llama_perf_context_print: prompt eval time =    2024.84 ms /  8192 tokens (    0.25 ms per token,  4045.75 tokens per second)
0.03.982.412 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.982.413 I llama_perf_context_print:       total time =    3113.86 ms /  8193 tokens

real	0m4.274s
user	0m4.257s
sys	0m0.978s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.396 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.276.200 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.292.271 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q5_k.gguf (version GGUF V3 (latest))
0.00.292.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.292.304 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.292.308 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.292.309 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.292.313 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.292.314 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.292.318 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.292.319 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.292.321 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.292.322 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.292.323 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.292.325 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.292.327 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.292.335 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.292.336 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.292.339 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.299.887 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.301.766 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.308.627 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.308.635 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.308.636 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.308.637 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.308.638 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.308.639 I llama_model_loader: - kv  22:                          general.file_type u32              = 17
0.00.308.641 I llama_model_loader: - type  f32:  258 tensors
0.00.308.642 I llama_model_loader: - type q5_K:   81 tensors
0.00.308.645 I llama_model_loader: - type q6_K:   49 tensors
0.00.308.648 I print_info: file format = GGUF V3 (latest)
0.00.308.649 I print_info: file type   = Q5_K - Medium
0.00.308.651 I print_info: file size   = 1.93 GiB (5.96 BPW) 
0.00.353.381 I load: special tokens cache size = 25
0.00.375.446 I load: token to piece cache size = 0.2984 MB
0.00.375.465 I print_info: arch             = gptneox
0.00.375.467 I print_info: vocab_only       = 0
0.00.375.468 I print_info: n_ctx_train      = 2048
0.00.375.469 I print_info: n_embd           = 2560
0.00.375.469 I print_info: n_layer          = 32
0.00.375.485 I print_info: n_head           = 32
0.00.375.487 I print_info: n_head_kv        = 32
0.00.375.487 I print_info: n_rot            = 20
0.00.375.488 I print_info: n_swa            = 0
0.00.375.488 I print_info: n_embd_head_k    = 80
0.00.375.489 I print_info: n_embd_head_v    = 80
0.00.375.492 I print_info: n_gqa            = 1
0.00.375.493 I print_info: n_embd_k_gqa     = 2560
0.00.375.495 I print_info: n_embd_v_gqa     = 2560
0.00.375.497 I print_info: f_norm_eps       = 1.0e-05
0.00.375.498 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.375.498 I print_info: f_clamp_kqv      = 0.0e+00
0.00.375.499 I print_info: f_max_alibi_bias = 0.0e+00
0.00.375.500 I print_info: f_logit_scale    = 0.0e+00
0.00.375.501 I print_info: n_ff             = 10240
0.00.375.502 I print_info: n_expert         = 0
0.00.375.502 I print_info: n_expert_used    = 0
0.00.375.503 I print_info: causal attn      = 1
0.00.375.503 I print_info: pooling type     = 0
0.00.375.503 I print_info: rope type        = 2
0.00.375.504 I print_info: rope scaling     = linear
0.00.375.506 I print_info: freq_base_train  = 10000.0
0.00.375.506 I print_info: freq_scale_train = 1
0.00.375.507 I print_info: n_ctx_orig_yarn  = 2048
0.00.375.507 I print_info: rope_finetuned   = unknown
0.00.375.508 I print_info: ssm_d_conv       = 0
0.00.375.509 I print_info: ssm_d_inner      = 0
0.00.375.510 I print_info: ssm_d_state      = 0
0.00.375.510 I print_info: ssm_dt_rank      = 0
0.00.375.510 I print_info: ssm_dt_b_c_rms   = 0
0.00.375.511 I print_info: model type       = 2.8B
0.00.375.512 I print_info: model params     = 2.78 B
0.00.375.513 I print_info: general.name     = 2.8B
0.00.375.516 I print_info: vocab type       = BPE
0.00.375.517 I print_info: n_vocab          = 50304
0.00.375.518 I print_info: n_merges         = 50009
0.00.375.521 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.375.522 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.375.522 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.375.523 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.375.524 I print_info: LF token         = 187 'Ċ'
0.00.375.525 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.375.525 I print_info: max token length = 1024
0.00.375.527 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.506.299 I load_tensors: offloading 32 repeating layers to GPU
0.00.506.309 I load_tensors: offloading output layer to GPU
0.00.506.310 I load_tensors: offloaded 33/33 layers to GPU
0.00.506.320 I load_tensors:        CUDA0 model buffer size =  1887.64 MiB
0.00.506.321 I load_tensors:   CPU_Mapped model buffer size =    84.43 MiB
...........................................................................................
0.00.833.463 I llama_context_unified: n_seq_max     = 1
0.00.833.469 I llama_context_unified: n_ctx         = 2048
0.00.833.470 I llama_context_unified: n_ctx_per_seq = 2048
0.00.833.470 I llama_context_unified: n_batch       = 512
0.00.833.471 I llama_context_unified: n_ubatch      = 512
0.00.833.472 I llama_context_unified: flash_attn    = 0
0.00.833.477 I llama_context_unified: freq_base     = 10000.0
0.00.833.478 I llama_context_unified: freq_scale    = 1
0.00.833.519 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.834.817 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.834.831 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.836.041 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.846.738 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.846.748 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.846.749 I llama_context_unified: graph nodes  = 1287
0.00.846.750 I llama_context_unified: graph splits = 2
0.00.846.754 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.846.754 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.914.337 I 
0.00.914.448 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.914.461 I perplexity: tokenizing the input ..
0.01.656.952 I perplexity: tokenization took 742.481 ms
0.01.657.264 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.276.776 I perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,
0.03.979.591 I Final estimate: PPL = 10.4169 +/- 0.42612

0.03.981.323 I llama_perf_context_print:        load time =     638.12 ms
0.03.981.325 I llama_perf_context_print: prompt eval time =    1971.48 ms /  8192 tokens (    0.24 ms per token,  4155.26 tokens per second)
0.03.981.327 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.03.981.328 I llama_perf_context_print:       total time =    3066.99 ms /  8193 tokens

real	0m4.279s
user	0m4.261s
sys	0m0.983s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
+ ./bin/llama-perplexity --model ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.418 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.272.769 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.288.934 I llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q6_k.gguf (version GGUF V3 (latest))
0.00.288.959 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.288.970 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.288.972 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.288.973 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.288.975 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.288.976 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.288.980 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.288.981 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.288.982 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.288.983 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.288.984 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.288.986 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.288.987 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.288.994 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.288.995 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.288.995 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.295.887 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.297.633 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.304.416 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.304.425 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.304.426 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.304.427 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.304.427 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.304.428 I llama_model_loader: - kv  22:                          general.file_type u32              = 18
0.00.304.431 I llama_model_loader: - type  f32:  258 tensors
0.00.304.432 I llama_model_loader: - type q6_K:  130 tensors
0.00.304.434 I print_info: file format = GGUF V3 (latest)
0.00.304.435 I print_info: file type   = Q6_K
0.00.304.438 I print_info: file size   = 2.12 GiB (6.57 BPW) 
0.00.348.811 I load: special tokens cache size = 25
0.00.370.851 I load: token to piece cache size = 0.2984 MB
0.00.370.869 I print_info: arch             = gptneox
0.00.370.869 I print_info: vocab_only       = 0
0.00.370.870 I print_info: n_ctx_train      = 2048
0.00.370.870 I print_info: n_embd           = 2560
0.00.370.871 I print_info: n_layer          = 32
0.00.370.881 I print_info: n_head           = 32
0.00.370.883 I print_info: n_head_kv        = 32
0.00.370.884 I print_info: n_rot            = 20
0.00.370.885 I print_info: n_swa            = 0
0.00.370.885 I print_info: n_embd_head_k    = 80
0.00.370.886 I print_info: n_embd_head_v    = 80
0.00.370.889 I print_info: n_gqa            = 1
0.00.370.891 I print_info: n_embd_k_gqa     = 2560
0.00.370.892 I print_info: n_embd_v_gqa     = 2560
0.00.370.894 I print_info: f_norm_eps       = 1.0e-05
0.00.370.895 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.370.895 I print_info: f_clamp_kqv      = 0.0e+00
0.00.370.896 I print_info: f_max_alibi_bias = 0.0e+00
0.00.370.896 I print_info: f_logit_scale    = 0.0e+00
0.00.370.898 I print_info: n_ff             = 10240
0.00.370.899 I print_info: n_expert         = 0
0.00.370.899 I print_info: n_expert_used    = 0
0.00.370.900 I print_info: causal attn      = 1
0.00.370.900 I print_info: pooling type     = 0
0.00.370.901 I print_info: rope type        = 2
0.00.370.902 I print_info: rope scaling     = linear
0.00.370.903 I print_info: freq_base_train  = 10000.0
0.00.370.904 I print_info: freq_scale_train = 1
0.00.370.905 I print_info: n_ctx_orig_yarn  = 2048
0.00.370.905 I print_info: rope_finetuned   = unknown
0.00.370.906 I print_info: ssm_d_conv       = 0
0.00.370.906 I print_info: ssm_d_inner      = 0
0.00.370.907 I print_info: ssm_d_state      = 0
0.00.370.908 I print_info: ssm_dt_rank      = 0
0.00.370.909 I print_info: ssm_dt_b_c_rms   = 0
0.00.370.910 I print_info: model type       = 2.8B
0.00.370.911 I print_info: model params     = 2.78 B
0.00.370.911 I print_info: general.name     = 2.8B
0.00.370.914 I print_info: vocab type       = BPE
0.00.370.915 I print_info: n_vocab          = 50304
0.00.370.916 I print_info: n_merges         = 50009
0.00.370.918 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.370.918 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.370.919 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.370.919 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.370.920 I print_info: LF token         = 187 'Ċ'
0.00.370.920 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.370.921 I print_info: max token length = 1024
0.00.370.922 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.519.180 I load_tensors: offloading 32 repeating layers to GPU
0.00.519.191 I load_tensors: offloading output layer to GPU
0.00.519.191 I load_tensors: offloaded 33/33 layers to GPU
0.00.519.200 I load_tensors:        CUDA0 model buffer size =  2073.58 MiB
0.00.519.202 I load_tensors:   CPU_Mapped model buffer size =   100.74 MiB
.............................................................................................
0.00.886.981 I llama_context_unified: n_seq_max     = 1
0.00.886.988 I llama_context_unified: n_ctx         = 2048
0.00.886.988 I llama_context_unified: n_ctx_per_seq = 2048
0.00.886.989 I llama_context_unified: n_batch       = 512
0.00.886.990 I llama_context_unified: n_ubatch      = 512
0.00.886.990 I llama_context_unified: flash_attn    = 0
0.00.886.996 I llama_context_unified: freq_base     = 10000.0
0.00.886.997 I llama_context_unified: freq_scale    = 1
0.00.887.038 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.00.888.370 I init:      CUDA0 KV buffer size =   640.00 MiB
0.00.888.386 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.00.889.611 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.00.900.345 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.00.900.355 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.00.900.356 I llama_context_unified: graph nodes  = 1287
0.00.900.356 I llama_context_unified: graph splits = 2
0.00.900.361 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.900.362 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.969.487 I 
0.00.969.600 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.969.613 I perplexity: tokenizing the input ..
0.01.730.923 I perplexity: tokenization took 761.301 ms
0.01.731.238 I perplexity: calculating perplexity over 4 chunks, n_ctx=2048, batch_size=512, n_seq=1
0.02.354.706 I perplexity: 0.62 seconds per pass - ETA 0.03 minutes
[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,
0.04.066.743 I Final estimate: PPL = 10.3844 +/- 0.42499

0.04.068.284 I llama_perf_context_print:        load time =     696.70 ms
0.04.068.286 I llama_perf_context_print: prompt eval time =    1984.61 ms /  8192 tokens (    0.24 ms per token,  4127.76 tokens per second)
0.04.068.288 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.04.068.289 I llama_perf_context_print:       total time =    3098.80 ms /  8193 tokens

real	0m4.366s
user	0m4.300s
sys	0m1.043s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ ./bin/llama-imatrix --model ../models-mnt/pythia/2.8B/ggml-model-f16.gguf -f ../models-mnt/wikitext/wikitext-2-raw/wiki.test.raw -t 1 -ngl 99 -c 2048 -b 512 --chunks 4
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
0.00.005.526 I build: 4722 (e633dc171) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.269.467 I llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
0.00.286.044 I llama_model_loader: loaded meta data with 22 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-f16.gguf (version GGUF V3 (latest))
0.00.286.065 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.286.075 I llama_model_loader: - kv   0:                       general.architecture str              = gptneox
0.00.286.077 I llama_model_loader: - kv   1:                               general.type str              = model
0.00.286.077 I llama_model_loader: - kv   2:                               general.name str              = 2.8B
0.00.286.079 I llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
0.00.286.080 I llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
0.00.286.085 I llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
0.00.286.086 I llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
0.00.286.087 I llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
0.00.286.088 I llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
0.00.286.088 I llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
0.00.286.089 I llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
0.00.286.090 I llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
0.00.286.110 I llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
0.00.286.111 I llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
0.00.286.112 I llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
0.00.292.986 I llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
0.00.294.738 I llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.301.482 I llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
0.00.301.490 I llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
0.00.301.492 I llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
0.00.301.492 I llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
0.00.301.493 I llama_model_loader: - kv  21:               general.quantization_version u32              = 2
0.00.301.496 I llama_model_loader: - type  f32:  258 tensors
0.00.301.496 I llama_model_loader: - type  f16:  130 tensors
0.00.301.499 I print_info: file format = GGUF V3 (latest)
0.00.301.500 I print_info: file type   = all F32 (guessed)
0.00.301.503 I print_info: file size   = 5.17 GiB (16.01 BPW) 
0.00.345.254 I load: special tokens cache size = 25
0.00.367.189 I load: token to piece cache size = 0.2984 MB
0.00.367.205 I print_info: arch             = gptneox
0.00.367.206 I print_info: vocab_only       = 0
0.00.367.207 I print_info: n_ctx_train      = 2048
0.00.367.207 I print_info: n_embd           = 2560
0.00.367.208 I print_info: n_layer          = 32
0.00.367.221 I print_info: n_head           = 32
0.00.367.223 I print_info: n_head_kv        = 32
0.00.367.224 I print_info: n_rot            = 20
0.00.367.224 I print_info: n_swa            = 0
0.00.367.226 I print_info: n_embd_head_k    = 80
0.00.367.227 I print_info: n_embd_head_v    = 80
0.00.367.230 I print_info: n_gqa            = 1
0.00.367.232 I print_info: n_embd_k_gqa     = 2560
0.00.367.234 I print_info: n_embd_v_gqa     = 2560
0.00.367.235 I print_info: f_norm_eps       = 1.0e-05
0.00.367.236 I print_info: f_norm_rms_eps   = 0.0e+00
0.00.367.237 I print_info: f_clamp_kqv      = 0.0e+00
0.00.367.237 I print_info: f_max_alibi_bias = 0.0e+00
0.00.367.238 I print_info: f_logit_scale    = 0.0e+00
0.00.367.239 I print_info: n_ff             = 10240
0.00.367.239 I print_info: n_expert         = 0
0.00.367.240 I print_info: n_expert_used    = 0
0.00.367.240 I print_info: causal attn      = 1
0.00.367.241 I print_info: pooling type     = 0
0.00.367.242 I print_info: rope type        = 2
0.00.367.243 I print_info: rope scaling     = linear
0.00.367.245 I print_info: freq_base_train  = 10000.0
0.00.367.245 I print_info: freq_scale_train = 1
0.00.367.246 I print_info: n_ctx_orig_yarn  = 2048
0.00.367.246 I print_info: rope_finetuned   = unknown
0.00.367.247 I print_info: ssm_d_conv       = 0
0.00.367.249 I print_info: ssm_d_inner      = 0
0.00.367.250 I print_info: ssm_d_state      = 0
0.00.367.250 I print_info: ssm_dt_rank      = 0
0.00.367.251 I print_info: ssm_dt_b_c_rms   = 0
0.00.367.252 I print_info: model type       = 2.8B
0.00.367.253 I print_info: model params     = 2.78 B
0.00.367.254 I print_info: general.name     = 2.8B
0.00.367.256 I print_info: vocab type       = BPE
0.00.367.257 I print_info: n_vocab          = 50304
0.00.367.258 I print_info: n_merges         = 50009
0.00.367.259 I print_info: BOS token        = 0 '<|endoftext|>'
0.00.367.260 I print_info: EOS token        = 0 '<|endoftext|>'
0.00.367.260 I print_info: EOT token        = 0 '<|endoftext|>'
0.00.367.261 I print_info: UNK token        = 0 '<|endoftext|>'
0.00.367.261 I print_info: LF token         = 187 'Ċ'
0.00.367.262 I print_info: EOG token        = 0 '<|endoftext|>'
0.00.367.263 I print_info: max token length = 1024
0.00.367.271 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.698.279 I load_tensors: offloading 32 repeating layers to GPU
0.00.698.289 I load_tensors: offloading output layer to GPU
0.00.698.290 I load_tensors: offloaded 33/33 layers to GPU
0.00.698.299 I load_tensors:        CUDA0 model buffer size =  5049.71 MiB
0.00.698.300 I load_tensors:   CPU_Mapped model buffer size =   245.62 MiB
.............................................................................................
0.01.545.642 I llama_context_unified: n_seq_max     = 1
0.01.545.648 I llama_context_unified: n_ctx         = 2048
0.01.545.648 I llama_context_unified: n_ctx_per_seq = 2048
0.01.545.649 I llama_context_unified: n_batch       = 512
0.01.545.649 I llama_context_unified: n_ubatch      = 512
0.01.545.650 I llama_context_unified: flash_attn    = 0
0.01.545.656 I llama_context_unified: freq_base     = 10000.0
0.01.545.657 I llama_context_unified: freq_scale    = 1
0.01.545.697 I init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
0.01.546.999 I init:      CUDA0 KV buffer size =   640.00 MiB
0.01.547.014 I llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
0.01.548.337 I llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
0.01.558.550 I llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
0.01.558.559 I llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
0.01.558.559 I llama_context_unified: graph nodes  = 1287
0.01.558.560 I llama_context_unified: graph splits = 2
0.01.558.564 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.558.565 I 
0.01.558.657 I system_info: n_threads = 1 (n_threads_batch = 1) / 6 | CUDA : ARCHS = 700 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.665 I compute_imatrix: tokenizing the input ..
0.02.297.803 I compute_imatrix: tokenization took 739.128 ms
0.02.298.750 I compute_imatrix: computing over 4 chunks with batch_size 512
0.05.482.756 I compute_imatrix: 3.18 seconds per pass - ETA 0.20 minutes
[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,
Final estimate: PPL = 10.3475 +/- 0.42292

0.14.930.150 I llama_perf_context_print:        load time =    2807.62 ms
0.14.930.153 I llama_perf_context_print: prompt eval time =   11252.51 ms /  8192 tokens (    1.37 ms per token,   728.02 tokens per second)
0.14.930.154 I llama_perf_context_print:        eval time =       0.00 ms /     1 runs   (    0.00 ms per token,      inf tokens per second)
0.14.930.156 I llama_perf_context_print:       total time =   14660.67 ms /  8193 tokens

real	0m15.234s
user	0m14.382s
sys	0m1.886s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 10 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_0
print_info: file size   = 1.49 GiB (4.61 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token:      1 '<|padding|>' is not marked as EOG
load: special tokens cache size = 25
load: token to piece cache size = 0.2984 MB
print_info: arch             = gptneox
print_info: vocab_only       = 0
print_info: n_ctx_train      = 2048
print_info: n_embd           = 2560
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 32
print_info: n_rot            = 20
print_info: n_swa            = 0
print_info: n_embd_head_k    = 80
print_info: n_embd_head_v    = 80
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 2560
print_info: n_embd_v_gqa     = 2560
print_info: f_norm_eps       = 1.0e-05
print_info: f_norm_rms_eps   = 0.0e+00
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: n_ff             = 10240
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 2048
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 2.8B
print_info: model params     = 2.78 B
print_info: general.name     = 2.8B
print_info: vocab type       = BPE
print_info: n_vocab          = 50304
print_info: n_merges         = 50009
print_info: BOS token        = 0 '<|endoftext|>'
print_info: EOS token        = 0 '<|endoftext|>'
print_info: EOT token        = 0 '<|endoftext|>'
print_info: UNK token        = 0 '<|endoftext|>'
print_info: LF token         = 187 'Ċ'
print_info: EOG token        = 0 '<|endoftext|>'
print_info: max token length = 1024
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU
load_tensors: layer   1 assigned to device CPU
load_tensors: layer   2 assigned to device CPU
load_tensors: layer   3 assigned to device CPU
load_tensors: layer   4 assigned to device CPU
load_tensors: layer   5 assigned to device CPU
load_tensors: layer   6 assigned to device CPU
load_tensors: layer   7 assigned to device CPU
load_tensors: layer   8 assigned to device CPU
load_tensors: layer   9 assigned to device CPU
load_tensors: layer  10 assigned to device CPU
load_tensors: layer  11 assigned to device CPU
load_tensors: layer  12 assigned to device CPU
load_tensors: layer  13 assigned to device CPU
load_tensors: layer  14 assigned to device CPU
load_tensors: layer  15 assigned to device CPU
load_tensors: layer  16 assigned to device CPU
load_tensors: layer  17 assigned to device CPU
load_tensors: layer  18 assigned to device CPU
load_tensors: layer  19 assigned to device CPU
load_tensors: layer  20 assigned to device CPU
load_tensors: layer  21 assigned to device CPU
load_tensors: layer  22 assigned to device CUDA0
load_tensors: layer  23 assigned to device CUDA0
load_tensors: layer  24 assigned to device CUDA0
load_tensors: layer  25 assigned to device CUDA0
load_tensors: layer  26 assigned to device CUDA0
load_tensors: layer  27 assigned to device CUDA0
load_tensors: layer  28 assigned to device CUDA0
load_tensors: layer  29 assigned to device CUDA0
load_tensors: layer  30 assigned to device CUDA0
load_tensors: layer  31 assigned to device CUDA0
load_tensors: layer  32 assigned to device CPU
load_tensors: tensor 'token_embd.weight' (q4_0) (and 179 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors: offloading 10 repeating layers to GPU
load_tensors: offloaded 10/33 layers to GPU
load_tensors:        CUDA0 model buffer size =   423.14 MiB
load_tensors:  CPU_AARCH64 model buffer size =   928.12 MiB
load_tensors:   CPU_Mapped model buffer size =  1086.70 MiB
...........................repack: repack tensor blk.0.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.0.attn_output.weight with q4_0_8x8
repack: repack tensor blk.0.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_output.weight with q4_0_8x8
repack: repack tensor blk.1.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.2.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.2.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.3.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.3.attn_output.weight with q4_0_8x8
repack: repack tensor blk.3.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_output.weight with q4_0_8x8
repack: repack tensor blk.4.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_output.weight with q4_0_8x8
repack: repack tensor blk.5.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.5.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_output.weight with q4_0_8x8
repack: repack tensor blk.6.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.6.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.7.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.7.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.7.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.7.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_output.weight with q4_0_8x8
repack: repack tensor blk.8.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_output.weight with q4_0_8x8
repack: repack tensor blk.9.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_output.weight with q4_0_8x8
repack: repack tensor blk.10.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.11.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.11.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_0_8x8
repack: repack tensor blk.12.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.12.attn_output.weight with q4_0_8x8
repack: repack tensor blk.12.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_output.weight with q4_0_8x8
repack: repack tensor blk.13.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.13.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_output.weight with q4_0_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.15.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.15.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.16.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.16.attn_output.weight with q4_0_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_output.weight with q4_0_8x8
repack: repack tensor blk.17.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_output.weight with q4_0_8x8
repack: repack tensor blk.18.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_output.weight with q4_0_8x8
repack: repack tensor blk.19.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.20.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.20.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_output.weight with q4_0_8x8
repack: repack tensor blk.21.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.21.ffn_up.weight with q4_0_8x8
....
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
0.01.250.411 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.250.425 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox
            Gigot the wall from the wall,
            Scraped


second run: The quick brown fox
            Gigot the wall from the wall,
            Scraped


single seq run: The quick brown fox
            Gigot the wall from the wall,
            Scraped

real	0m5.229s
user	0m12.719s
sys	0m1.386s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 10 -c 0 -fa
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_0
print_info: file size   = 1.49 GiB (4.61 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token:      1 '<|padding|>' is not marked as EOG
load: special tokens cache size = 25
load: token to piece cache size = 0.2984 MB
print_info: arch             = gptneox
print_info: vocab_only       = 0
print_info: n_ctx_train      = 2048
print_info: n_embd           = 2560
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 32
print_info: n_rot            = 20
print_info: n_swa            = 0
print_info: n_embd_head_k    = 80
print_info: n_embd_head_v    = 80
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 2560
print_info: n_embd_v_gqa     = 2560
print_info: f_norm_eps       = 1.0e-05
print_info: f_norm_rms_eps   = 0.0e+00
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: n_ff             = 10240
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 2048
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 2.8B
print_info: model params     = 2.78 B
print_info: general.name     = 2.8B
print_info: vocab type       = BPE
print_info: n_vocab          = 50304
print_info: n_merges         = 50009
print_info: BOS token        = 0 '<|endoftext|>'
print_info: EOS token        = 0 '<|endoftext|>'
print_info: EOT token        = 0 '<|endoftext|>'
print_info: UNK token        = 0 '<|endoftext|>'
print_info: LF token         = 187 'Ċ'
print_info: EOG token        = 0 '<|endoftext|>'
print_info: max token length = 1024
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU
load_tensors: layer   1 assigned to device CPU
load_tensors: layer   2 assigned to device CPU
load_tensors: layer   3 assigned to device CPU
load_tensors: layer   4 assigned to device CPU
load_tensors: layer   5 assigned to device CPU
load_tensors: layer   6 assigned to device CPU
load_tensors: layer   7 assigned to device CPU
load_tensors: layer   8 assigned to device CPU
load_tensors: layer   9 assigned to device CPU
load_tensors: layer  10 assigned to device CPU
load_tensors: layer  11 assigned to device CPU
load_tensors: layer  12 assigned to device CPU
load_tensors: layer  13 assigned to device CPU
load_tensors: layer  14 assigned to device CPU
load_tensors: layer  15 assigned to device CPU
load_tensors: layer  16 assigned to device CPU
load_tensors: layer  17 assigned to device CPU
load_tensors: layer  18 assigned to device CPU
load_tensors: layer  19 assigned to device CPU
load_tensors: layer  20 assigned to device CPU
load_tensors: layer  21 assigned to device CPU
load_tensors: layer  22 assigned to device CUDA0
load_tensors: layer  23 assigned to device CUDA0
load_tensors: layer  24 assigned to device CUDA0
load_tensors: layer  25 assigned to device CUDA0
load_tensors: layer  26 assigned to device CUDA0
load_tensors: layer  27 assigned to device CUDA0
load_tensors: layer  28 assigned to device CUDA0
load_tensors: layer  29 assigned to device CUDA0
load_tensors: layer  30 assigned to device CUDA0
load_tensors: layer  31 assigned to device CUDA0
load_tensors: layer  32 assigned to device CPU
load_tensors: tensor 'token_embd.weight' (q4_0) (and 179 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors: offloading 10 repeating layers to GPU
load_tensors: offloaded 10/33 layers to GPU
load_tensors:        CUDA0 model buffer size =   423.14 MiB
load_tensors:  CPU_AARCH64 model buffer size =   928.12 MiB
load_tensors:   CPU_Mapped model buffer size =  1086.70 MiB
...........................repack: repack tensor blk.0.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.0.attn_output.weight with q4_0_8x8
repack: repack tensor blk.0.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.0.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.1.attn_output.weight with q4_0_8x8
repack: repack tensor blk.1.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.1.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.2.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.2.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.2.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.3.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.3.attn_output.weight with q4_0_8x8
repack: repack tensor blk.3.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.3.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.4.attn_output.weight with q4_0_8x8
repack: repack tensor blk.4.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.4.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.5.attn_output.weight with q4_0_8x8
repack: repack tensor blk.5.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.5.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.6.attn_output.weight with q4_0_8x8
repack: repack tensor blk.6.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.6.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.7.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.7.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.7.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.7.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.8.attn_output.weight with q4_0_8x8
repack: repack tensor blk.8.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.8.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.9.attn_output.weight with q4_0_8x8
repack: repack tensor blk.9.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.9.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.10.attn_output.weight with q4_0_8x8
repack: repack tensor blk.10.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.10.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.11.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.11.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.11.ffn_up.weight with q4_0_8x8
repack: repack tensor blk.12.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.12.attn_output.weight with q4_0_8x8
repack: repack tensor blk.12.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.12.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.13.attn_output.weight with q4_0_8x8
repack: repack tensor blk.13.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.13.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.14.attn_output.weight with q4_0_8x8
repack: repack tensor blk.14.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.14.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.15.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.15.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.15.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.16.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.16.attn_output.weight with q4_0_8x8
repack: repack tensor blk.16.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.16.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.17.attn_output.weight with q4_0_8x8
repack: repack tensor blk.17.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.17.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.18.attn_output.weight with q4_0_8x8
repack: repack tensor blk.18.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.18.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.19.attn_output.weight with q4_0_8x8
repack: repack tensor blk.19.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.19.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.20.attn_qkv.weight with q4_0_8x8
repack: repack tensor blk.20.attn_output.weight with q4_0_8x8
.repack: repack tensor blk.20.ffn_down.weight with q4_0_8x8
repack: repack tensor blk.20.ffn_up.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_qkv.weight with q4_0_8x8
.repack: repack tensor blk.21.attn_output.weight with q4_0_8x8
repack: repack tensor blk.21.ffn_down.weight with q4_0_8x8
.repack: repack tensor blk.21.ffn_up.weight with q4_0_8x8
....
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
0.01.246.909 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.01.246.922 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CPU
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   200.00 MiB
init:        CPU KV buffer size =   440.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:        CPU  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   203.99 MiB
llama_context_unified:  CUDA_Host compute buffer size =    29.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 313 (with bs=512), 3 (with bs=1)
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the


second run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the


single seq run: The quick brown fox jumps over the fence -- but the fourth fence is a dead-in-the

real	0m4.171s
user	0m11.197s
sys	0m1.431s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 99 -c 0
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_0
print_info: file size   = 1.49 GiB (4.61 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token:      1 '<|padding|>' is not marked as EOG
load: special tokens cache size = 25
load: token to piece cache size = 0.2984 MB
print_info: arch             = gptneox
print_info: vocab_only       = 0
print_info: n_ctx_train      = 2048
print_info: n_embd           = 2560
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 32
print_info: n_rot            = 20
print_info: n_swa            = 0
print_info: n_embd_head_k    = 80
print_info: n_embd_head_v    = 80
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 2560
print_info: n_embd_v_gqa     = 2560
print_info: f_norm_eps       = 1.0e-05
print_info: f_norm_rms_eps   = 0.0e+00
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: n_ff             = 10240
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 2048
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 2.8B
print_info: model params     = 2.78 B
print_info: general.name     = 2.8B
print_info: vocab type       = BPE
print_info: n_vocab          = 50304
print_info: n_merges         = 50009
print_info: BOS token        = 0 '<|endoftext|>'
print_info: EOS token        = 0 '<|endoftext|>'
print_info: EOT token        = 0 '<|endoftext|>'
print_info: UNK token        = 0 '<|endoftext|>'
print_info: LF token         = 187 'Ċ'
print_info: EOG token        = 0 '<|endoftext|>'
print_info: max token length = 1024
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CUDA0
load_tensors: layer   1 assigned to device CUDA0
load_tensors: layer   2 assigned to device CUDA0
load_tensors: layer   3 assigned to device CUDA0
load_tensors: layer   4 assigned to device CUDA0
load_tensors: layer   5 assigned to device CUDA0
load_tensors: layer   6 assigned to device CUDA0
load_tensors: layer   7 assigned to device CUDA0
load_tensors: layer   8 assigned to device CUDA0
load_tensors: layer   9 assigned to device CUDA0
load_tensors: layer  10 assigned to device CUDA0
load_tensors: layer  11 assigned to device CUDA0
load_tensors: layer  12 assigned to device CUDA0
load_tensors: layer  13 assigned to device CUDA0
load_tensors: layer  14 assigned to device CUDA0
load_tensors: layer  15 assigned to device CUDA0
load_tensors: layer  16 assigned to device CUDA0
load_tensors: layer  17 assigned to device CUDA0
load_tensors: layer  18 assigned to device CUDA0
load_tensors: layer  19 assigned to device CUDA0
load_tensors: layer  20 assigned to device CUDA0
load_tensors: layer  21 assigned to device CUDA0
load_tensors: layer  22 assigned to device CUDA0
load_tensors: layer  23 assigned to device CUDA0
load_tensors: layer  24 assigned to device CUDA0
load_tensors: layer  25 assigned to device CUDA0
load_tensors: layer  26 assigned to device CUDA0
load_tensors: layer  27 assigned to device CUDA0
load_tensors: layer  28 assigned to device CUDA0
load_tensors: layer  29 assigned to device CUDA0
load_tensors: layer  30 assigned to device CUDA0
load_tensors: layer  31 assigned to device CUDA0
load_tensors: layer  32 assigned to device CUDA0
load_tensors: tensor 'token_embd.weight' (q4_0) (and 0 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors: offloading 32 repeating layers to GPU
load_tensors: offloading output layer to GPU
load_tensors: offloaded 33/33 layers to GPU
load_tensors:        CUDA0 model buffer size =  1454.83 MiB
load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 2
0.00.735.753 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.735.766 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 0
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   162.00 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1287
llama_context_unified: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st


second run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st


single seq run: The quick brown fox
     Lives, in the fox-hole, on the kitchen-st

real	0m4.561s
user	0m3.834s
sys	0m0.725s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-save-load-state.log
+ ./bin/llama-save-load-state --model ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf -ngl 99 -c 0 -fa
ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: Tesla V100-PCIE-16GB, compute capability 7.0, VMM: yes
main: build = 4722 (e633dc171)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
llama_model_load_from_file_impl: using device CUDA0 (Tesla V100-PCIE-16GB) - 15841 MiB free
llama_model_loader: loaded meta data with 23 key-value pairs and 388 tensors from ../models-mnt/pythia/2.8B/ggml-model-q4_0.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gptneox
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = 2.8B
llama_model_loader: - kv   3:                           general.finetune str              = 2.8B
llama_model_loader: - kv   4:                         general.size_label str              = 2.8B
llama_model_loader: - kv   5:                     gptneox.context_length u32              = 2048
llama_model_loader: - kv   6:                   gptneox.embedding_length u32              = 2560
llama_model_loader: - kv   7:                        gptneox.block_count u32              = 32
llama_model_loader: - kv   8:                gptneox.feed_forward_length u32              = 10240
llama_model_loader: - kv   9:               gptneox.rope.dimension_count u32              = 20
llama_model_loader: - kv  10:               gptneox.attention.head_count u32              = 32
llama_model_loader: - kv  11:              gptneox.use_parallel_residual bool             = true
llama_model_loader: - kv  12:       gptneox.attention.layer_norm_epsilon f32              = 0.000010
llama_model_loader: - kv  13:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  14:                         tokenizer.ggml.pre str              = olmo
llama_model_loader: - kv  15:                      tokenizer.ggml.tokens arr[str,50304]   = ["<|endoftext|>", "<|padding|>", "!",...
llama_model_loader: - kv  16:                  tokenizer.ggml.token_type arr[i32,50304]   = [3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  17:                      tokenizer.ggml.merges arr[str,50009]   = ["Ġ Ġ", "Ġ t", "Ġ a", "h e", "i n...
llama_model_loader: - kv  18:                tokenizer.ggml.bos_token_id u32              = 0
llama_model_loader: - kv  19:                tokenizer.ggml.eos_token_id u32              = 0
llama_model_loader: - kv  20:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - kv  22:                          general.file_type u32              = 2
llama_model_loader: - type  f32:  258 tensors
llama_model_loader: - type q4_0:  129 tensors
llama_model_loader: - type q6_K:    1 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_0
print_info: file size   = 1.49 GiB (4.61 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token:      1 '<|padding|>' is not marked as EOG
load: special tokens cache size = 25
load: token to piece cache size = 0.2984 MB
print_info: arch             = gptneox
print_info: vocab_only       = 0
print_info: n_ctx_train      = 2048
print_info: n_embd           = 2560
print_info: n_layer          = 32
print_info: n_head           = 32
print_info: n_head_kv        = 32
print_info: n_rot            = 20
print_info: n_swa            = 0
print_info: n_embd_head_k    = 80
print_info: n_embd_head_v    = 80
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 2560
print_info: n_embd_v_gqa     = 2560
print_info: f_norm_eps       = 1.0e-05
print_info: f_norm_rms_eps   = 0.0e+00
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: n_ff             = 10240
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 2048
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 2.8B
print_info: model params     = 2.78 B
print_info: general.name     = 2.8B
print_info: vocab type       = BPE
print_info: n_vocab          = 50304
print_info: n_merges         = 50009
print_info: BOS token        = 0 '<|endoftext|>'
print_info: EOS token        = 0 '<|endoftext|>'
print_info: EOT token        = 0 '<|endoftext|>'
print_info: UNK token        = 0 '<|endoftext|>'
print_info: LF token         = 187 'Ċ'
print_info: EOG token        = 0 '<|endoftext|>'
print_info: max token length = 1024
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CUDA0
load_tensors: layer   1 assigned to device CUDA0
load_tensors: layer   2 assigned to device CUDA0
load_tensors: layer   3 assigned to device CUDA0
load_tensors: layer   4 assigned to device CUDA0
load_tensors: layer   5 assigned to device CUDA0
load_tensors: layer   6 assigned to device CUDA0
load_tensors: layer   7 assigned to device CUDA0
load_tensors: layer   8 assigned to device CUDA0
load_tensors: layer   9 assigned to device CUDA0
load_tensors: layer  10 assigned to device CUDA0
load_tensors: layer  11 assigned to device CUDA0
load_tensors: layer  12 assigned to device CUDA0
load_tensors: layer  13 assigned to device CUDA0
load_tensors: layer  14 assigned to device CUDA0
load_tensors: layer  15 assigned to device CUDA0
load_tensors: layer  16 assigned to device CUDA0
load_tensors: layer  17 assigned to device CUDA0
load_tensors: layer  18 assigned to device CUDA0
load_tensors: layer  19 assigned to device CUDA0
load_tensors: layer  20 assigned to device CUDA0
load_tensors: layer  21 assigned to device CUDA0
load_tensors: layer  22 assigned to device CUDA0
load_tensors: layer  23 assigned to device CUDA0
load_tensors: layer  24 assigned to device CUDA0
load_tensors: layer  25 assigned to device CUDA0
load_tensors: layer  26 assigned to device CUDA0
load_tensors: layer  27 assigned to device CUDA0
load_tensors: layer  28 assigned to device CUDA0
load_tensors: layer  29 assigned to device CUDA0
load_tensors: layer  30 assigned to device CUDA0
load_tensors: layer  31 assigned to device CUDA0
load_tensors: layer  32 assigned to device CUDA0
load_tensors: tensor 'token_embd.weight' (q4_0) (and 0 others) cannot be used with preferred buffer type CPU_AARCH64, using CPU instead
load_tensors: offloading 32 repeating layers to GPU
load_tensors: offloading output layer to GPU
load_tensors: offloaded 33/33 layers to GPU
load_tensors:        CUDA0 model buffer size =  1454.83 MiB
load_tensors:   CPU_Mapped model buffer size =    69.08 MiB
...........................................................................................
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   103.25 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 2
0.00.741.842 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 2048
0.00.741.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
main : serialized state into 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   103.25 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
llama_context_unified: n_seq_max     = 1
llama_context_unified: n_ctx         = 2048
llama_context_unified: n_ctx_per_seq = 2048
llama_context_unified: n_batch       = 2048
llama_context_unified: n_ubatch      = 512
llama_context_unified: flash_attn    = 1
llama_context_unified: freq_base     = 10000.0
llama_context_unified: freq_scale    = 1
init: kv_size = 2048, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 32, can_shift = 1
init: layer   0: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   1: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   2: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   3: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   4: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   5: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   6: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   7: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   8: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer   9: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  10: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  11: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  12: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  13: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  14: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  15: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  16: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  17: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  18: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  19: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  20: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  21: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  22: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  23: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  24: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  25: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  26: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  27: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  28: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  29: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  30: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init: layer  31: n_embd_k_gqa = 2560, n_embd_v_gqa = 2560, dev = CUDA0
init:      CUDA0 KV buffer size =   640.00 MiB
llama_context_unified: KV self size  =  640.00 MiB, K (f16):  320.00 MiB, V (f16):  320.00 MiB
llama_context_unified:  CUDA_Host  output buffer size =     0.19 MiB
llama_context_unified:      CUDA0 compute buffer size =   103.25 MiB
llama_context_unified:  CUDA_Host compute buffer size =     9.01 MiB
llama_context_unified: graph nodes  = 1160
llama_context_unified: graph splits = 2
main : deserialized state from 1512799 out of a maximum of 1512799 bytes
main : seq 0 copied, 1311532 bytes
main : kv cache cleared
main : seq 1 restored, 1311532 bytes

main : success

first run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see


second run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see


single seq run: The quick brown fox jumped over the fence", "The children are playing in the garden. I see

real	0m1.576s
user	0m0.890s
sys	0m0.682s
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-f16.log
++ grep '^\[1\]'
+ check_ppl f16 '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
+ qnt=f16
++ echo '[1]9.6667,[2]11.4286,[3]11.6311,[4]10.3475,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3475
++ echo '10.3475 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' f16 10.3475
+ return 0
  - f16 @ 10.3475 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q8_0.log
++ grep '^\[1\]'
+ check_ppl q8_0 '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
+ qnt=q8_0
++ echo '[1]9.7126,[2]11.4535,[3]11.6553,[4]10.3702,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3702
++ echo '10.3702 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q8_0 10.3702
+ return 0
  - q8_0 @ 10.3702 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_0.log
++ grep '^\[1\]'
+ check_ppl q4_0 '[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,'
+ qnt=q4_0
++ echo '[1]10.2476,[2]12.0349,[3]12.3143,[4]10.9657,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.9657
++ echo '10.9657 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_0 10.9657
+ return 0
  - q4_0 @ 10.9657 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_1.log
++ grep '^\[1\]'
+ check_ppl q4_1 '[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,'
+ qnt=q4_1
++ echo '[1]9.9582,[2]11.8210,[3]12.1417,[4]10.8426,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.8426
++ echo '10.8426 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_1 10.8426
+ return 0
  - q4_1 @ 10.8426 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_0.log
++ grep '^\[1\]'
+ check_ppl q5_0 '[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,'
+ qnt=q5_0
++ echo '[1]9.8159,[2]11.5385,[3]11.8249,[4]10.5064,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.5064
++ echo '10.5064 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_0 10.5064
+ return 0
  - q5_0 @ 10.5064 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_1.log
++ grep '^\[1\]'
+ check_ppl q5_1 '[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,'
+ qnt=q5_1
++ echo '[1]9.7281,[2]11.5058,[3]11.7213,[4]10.4307,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.4307
++ echo '10.4307 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_1 10.4307
+ return 0
  - q5_1 @ 10.4307 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q3_k.log
++ grep '^\[1\]'
+ check_ppl q3_k '[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,'
+ qnt=q3_k
++ echo '[1]10.3244,[2]12.1315,[3]12.5462,[4]11.2719,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=11.2719
++ echo '11.2719 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q3_k 11.2719
+ return 0
  - q3_k @ 11.2719 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q4_k.log
++ grep '^\[1\]'
+ check_ppl q4_k '[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,'
+ qnt=q4_k
++ echo '[1]9.7790,[2]11.6049,[3]11.8535,[4]10.6047,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.6047
++ echo '10.6047 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q4_k 10.6047
+ return 0
  - q4_k @ 10.6047 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q5_k.log
++ grep '^\[1\]'
+ check_ppl q5_k '[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,'
+ qnt=q5_k
++ echo '[1]9.7144,[2]11.4413,[3]11.6827,[4]10.4169,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.4169
++ echo '10.4169 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q5_k 10.4169
+ return 0
  - q5_k @ 10.4169 OK
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-ppl.log
++ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-tg-q6_k.log
++ grep '^\[1\]'
+ check_ppl q6_k '[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,'
+ qnt=q6_k
++ echo '[1]9.6910,[2]11.4667,[3]11.6498,[4]10.3844,'
++ grep -oE '[0-9]+\.[0-9]+'
++ tail -n 1
+ ppl=10.3844
++ echo '10.3844 > 20.0'
++ bc
+ '[' 0 -eq 1 ']'
+ printf '  - %s @ %s OK\n' q6_k 10.3844
+ return 0
  - q6_k @ 10.3844 OK
+ cat /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/pythia_2_8b-imatrix.log
+ grep Final
+ set +e
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_debug
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_with_model_debug.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-debug
+ set -e
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_with_model_debug-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-debug
    Start 26: test-model-load-cancel
1/2 Test #26: test-model-load-cancel ...........   Passed    4.51 sec
    Start 27: test-autorelease
2/2 Test #27: test-autorelease .................   Passed    1.44 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   5.95 sec*proc (2 tests)

Total Test time (real) =   5.95 sec
0.95user 5.02system 0:05.98elapsed 99%CPU (0avgtext+0avgdata 5872964maxresident)k
0inputs+56outputs (0major+1472032minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
+ gg_run_ctest_with_model_release
+ cd /home/ggml/work/llama.cpp
+ local model
+ tee /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_with_model_release.log
++ gg_get_model
++ local gguf_0=/mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf
++ local gguf_1=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
++ local gguf_2=/mnt/llama.cpp/models/open-llama/7B-v2/ggml-model-f16.gguf
++ [[ -s /mnt/llama.cpp/models/pythia/1.4B/ggml-model-f16.gguf ]]
++ [[ -s /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf ]]
++ echo -n /mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ model=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ cd build-ci-release
+ set -e
+ tee -a /home/ggml/results/llama.cpp/e6/33dc171a8ae3d44c647bbd94a1921ed74c181c/ggml-4-x86-cuda-v100/ctest_with_model_release-ctest.log
+ LLAMACPP_TEST_MODELFILE=/mnt/llama.cpp/models/pythia/2.8B/ggml-model-f16.gguf
+ time ctest --output-on-failure -L model
Test project /home/ggml/work/llama.cpp/build-ci-release
    Start 26: test-model-load-cancel
1/2 Test #26: test-model-load-cancel ...........   Passed    4.11 sec
    Start 27: test-autorelease
2/2 Test #27: test-autorelease .................   Passed    1.21 sec

100% tests passed, 0 tests failed out of 2

Label Time Summary:
model    =   5.33 sec*proc (2 tests)

Total Test time (real) =   5.33 sec
0.30user 5.03system 0:05.36elapsed 99%CPU (0avgtext+0avgdata 5866156maxresident)k
0inputs+56outputs (0major+1472659minor)pagefaults 0swaps
+ set +e
+ cd ..
+ cur=0
+ echo 0
+ set +x
