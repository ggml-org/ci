+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.023.919 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.074 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.079 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.084 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.086 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.088 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.089 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.090 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.092 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.100 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.101 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.103 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.107 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.711 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.797 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.810 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.811 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.813 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.814 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.818 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.820 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.821 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.822 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.824 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.833 I llama_model_loader: - type  f32:   37 tensors
0.00.356.835 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.451 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.567 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.574 I llm_load_vocab: special tokens cache size = 5
0.00.873.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.873.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.873.149 I llm_load_print_meta: arch             = gemma
0.00.873.150 I llm_load_print_meta: vocab type       = SPM
0.00.873.151 I llm_load_print_meta: n_vocab          = 256000
0.00.873.153 I llm_load_print_meta: n_merges         = 0
0.00.873.154 I llm_load_print_meta: vocab_only       = 0
0.00.873.154 I llm_load_print_meta: n_ctx_train      = 8192
0.00.873.155 I llm_load_print_meta: n_embd           = 2048
0.00.873.155 I llm_load_print_meta: n_layer          = 18
0.00.873.225 I llm_load_print_meta: n_head           = 8
0.00.873.233 I llm_load_print_meta: n_head_kv        = 1
0.00.873.233 I llm_load_print_meta: n_rot            = 256
0.00.873.234 I llm_load_print_meta: n_swa            = 0
0.00.873.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.873.235 I llm_load_print_meta: n_embd_head_v    = 256
0.00.873.240 I llm_load_print_meta: n_gqa            = 8
0.00.873.245 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.873.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.873.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.873.252 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.873.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.873.254 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.873.254 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.873.260 I llm_load_print_meta: n_ff             = 16384
0.00.873.261 I llm_load_print_meta: n_expert         = 0
0.00.873.265 I llm_load_print_meta: n_expert_used    = 0
0.00.873.266 I llm_load_print_meta: causal attn      = 1
0.00.873.266 I llm_load_print_meta: pooling type     = 0
0.00.873.266 I llm_load_print_meta: rope type        = 2
0.00.873.267 I llm_load_print_meta: rope scaling     = linear
0.00.873.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.873.269 I llm_load_print_meta: freq_scale_train = 1
0.00.873.269 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.873.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.873.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.873.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.873.271 I llm_load_print_meta: ssm_d_state      = 0
0.00.873.272 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.873.273 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.873.274 I llm_load_print_meta: model type       = 2B
0.00.873.275 I llm_load_print_meta: model ftype      = Q8_0
0.00.873.276 I llm_load_print_meta: model params     = 2.51 B
0.00.873.277 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.873.277 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.873.278 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.873.279 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.873.279 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.873.279 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.873.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.873.280 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.873.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.873.288 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.873.289 I llm_load_print_meta: max token length = 93
0.00.975.509 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.975.522 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.975.523 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.975.523 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.975.524 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.975.525 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.981.437 I llama_new_context_with_model: n_seq_max     = 1
0.00.981.444 I llama_new_context_with_model: n_ctx         = 4096
0.00.981.445 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.981.445 I llama_new_context_with_model: n_batch       = 2048
0.00.981.446 I llama_new_context_with_model: n_ubatch      = 512
0.00.981.446 I llama_new_context_with_model: flash_attn    = 0
0.00.981.449 I llama_new_context_with_model: freq_base     = 10000.0
0.00.981.450 I llama_new_context_with_model: freq_scale    = 1
0.00.981.451 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.539 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.996.107 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.996.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.996.265 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.998.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.998.977 I llama_new_context_with_model: graph nodes  = 601
0.00.998.978 I llama_new_context_with_model: graph splits = 1
0.00.999.002 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.999.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.611.027 I main: llama threadpool init, n_threads = 4
0.01.611.045 I 
0.01.611.169 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.611.173 I 
0.01.611.411 I sampler seed: 3116915731
0.01.611.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.611.437 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.611.440 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.611.440 I 
 seconally.

**Assistant**

I am unable to provide medical advice or make medical recommendations. If you are experiencing medical symptoms, please consult a qualified healthcare

0.15.100.600 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.12 tokens per second)
0.15.100.603 I llama_perf_context_print:        load time =    1610.02 ms
0.15.100.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.100.626 I llama_perf_context_print:        eval time =   13399.82 ms /    32 runs   (  418.74 ms per token,     2.39 tokens per second)
0.15.100.629 I llama_perf_context_print:       total time =   13489.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.023.483 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.583 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.599 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.606 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.621 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.628 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.589 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.688 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.699 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.701 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.702 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.703 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.704 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.706 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.709 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.711 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.712 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.713 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.715 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.725 I llama_model_loader: - type  f32:   37 tensors
0.00.352.728 I llama_model_loader: - type q8_0:  127 tensors
0.00.584.837 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.411 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.377 I llm_load_vocab: special tokens cache size = 5
0.00.864.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.864.444 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.864.445 I llm_load_print_meta: arch             = gemma
0.00.864.445 I llm_load_print_meta: vocab type       = SPM
0.00.864.446 I llm_load_print_meta: n_vocab          = 256000
0.00.864.449 I llm_load_print_meta: n_merges         = 0
0.00.864.449 I llm_load_print_meta: vocab_only       = 0
0.00.864.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.864.450 I llm_load_print_meta: n_embd           = 2048
0.00.864.451 I llm_load_print_meta: n_layer          = 18
0.00.864.517 I llm_load_print_meta: n_head           = 8
0.00.864.524 I llm_load_print_meta: n_head_kv        = 1
0.00.864.526 I llm_load_print_meta: n_rot            = 256
0.00.864.526 I llm_load_print_meta: n_swa            = 0
0.00.864.527 I llm_load_print_meta: n_embd_head_k    = 256
0.00.864.527 I llm_load_print_meta: n_embd_head_v    = 256
0.00.864.536 I llm_load_print_meta: n_gqa            = 8
0.00.864.541 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.864.546 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.864.547 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.864.549 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.864.549 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.864.550 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.864.550 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.864.555 I llm_load_print_meta: n_ff             = 16384
0.00.864.556 I llm_load_print_meta: n_expert         = 0
0.00.864.557 I llm_load_print_meta: n_expert_used    = 0
0.00.864.557 I llm_load_print_meta: causal attn      = 1
0.00.864.557 I llm_load_print_meta: pooling type     = 0
0.00.864.558 I llm_load_print_meta: rope type        = 2
0.00.864.558 I llm_load_print_meta: rope scaling     = linear
0.00.864.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.864.561 I llm_load_print_meta: freq_scale_train = 1
0.00.864.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.864.563 I llm_load_print_meta: rope_finetuned   = unknown
0.00.864.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.864.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.864.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.864.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.864.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.864.566 I llm_load_print_meta: model type       = 2B
0.00.864.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.864.568 I llm_load_print_meta: model params     = 2.51 B
0.00.864.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.864.569 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.864.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.864.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.864.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.864.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.864.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.864.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.864.578 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.864.579 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.864.579 I llm_load_print_meta: max token length = 93
0.00.961.386 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.967.447 I llama_new_context_with_model: n_seq_max     = 1
0.00.967.454 I llama_new_context_with_model: n_ctx         = 4096
0.00.967.455 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.967.455 I llama_new_context_with_model: n_batch       = 2048
0.00.967.455 I llama_new_context_with_model: n_ubatch      = 512
0.00.967.456 I llama_new_context_with_model: flash_attn    = 0
0.00.967.459 I llama_new_context_with_model: freq_base     = 10000.0
0.00.967.460 I llama_new_context_with_model: freq_scale    = 1
0.00.967.460 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.549 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.982.631 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.982.672 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.982.789 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.985.428 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.985.432 I llama_new_context_with_model: graph nodes  = 601
0.00.985.432 I llama_new_context_with_model: graph splits = 1
0.00.985.455 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.985.458 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.596.643 I main: llama threadpool init, n_threads = 4
0.01.596.663 I 
0.01.596.788 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.596.792 I 
0.01.597.036 I sampler seed: 3752556596
0.01.597.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.597.059 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.597.062 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.597.062 I 
 increasities, and societal pressures to conform.

**Answer:**

**The pressures of societal conformity, expectations, and expectations can negatively impact an individual's

0.15.201.941 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.44 tokens per second)
0.15.201.944 I llama_perf_context_print:        load time =    1595.70 ms
0.15.201.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.201.982 I llama_perf_context_print:        eval time =   13515.84 ms /    32 runs   (  422.37 ms per token,     2.37 tokens per second)
0.15.201.984 I llama_perf_context_print:       total time =   13605.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.026.492 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.505 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.612 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.630 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.641 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.646 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.650 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.659 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.664 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.666 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.670 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.252.028 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.354.517 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.378.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.378.728 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.378.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.378.731 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.378.732 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.378.733 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.378.735 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.378.739 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.378.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.378.741 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.378.743 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.378.745 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.378.755 I llama_model_loader: - type  f32:   37 tensors
0.00.378.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.955 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.860 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.855 I llm_load_vocab: special tokens cache size = 5
0.00.890.551 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.890.629 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.890.630 I llm_load_print_meta: arch             = gemma
0.00.890.631 I llm_load_print_meta: vocab type       = SPM
0.00.890.632 I llm_load_print_meta: n_vocab          = 256000
0.00.890.635 I llm_load_print_meta: n_merges         = 0
0.00.890.635 I llm_load_print_meta: vocab_only       = 0
0.00.890.635 I llm_load_print_meta: n_ctx_train      = 8192
0.00.890.636 I llm_load_print_meta: n_embd           = 2048
0.00.890.636 I llm_load_print_meta: n_layer          = 18
0.00.890.702 I llm_load_print_meta: n_head           = 8
0.00.890.709 I llm_load_print_meta: n_head_kv        = 1
0.00.890.709 I llm_load_print_meta: n_rot            = 256
0.00.890.710 I llm_load_print_meta: n_swa            = 0
0.00.890.710 I llm_load_print_meta: n_embd_head_k    = 256
0.00.890.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.890.715 I llm_load_print_meta: n_gqa            = 8
0.00.890.720 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.890.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.890.755 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.890.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.890.763 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.890.763 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.890.763 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.890.771 I llm_load_print_meta: n_ff             = 16384
0.00.890.771 I llm_load_print_meta: n_expert         = 0
0.00.890.772 I llm_load_print_meta: n_expert_used    = 0
0.00.890.773 I llm_load_print_meta: causal attn      = 1
0.00.890.774 I llm_load_print_meta: pooling type     = 0
0.00.890.774 I llm_load_print_meta: rope type        = 2
0.00.890.781 I llm_load_print_meta: rope scaling     = linear
0.00.890.782 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.890.783 I llm_load_print_meta: freq_scale_train = 1
0.00.890.783 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.890.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.890.784 I llm_load_print_meta: ssm_d_conv       = 0
0.00.890.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.890.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.890.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.890.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.890.786 I llm_load_print_meta: model type       = 2B
0.00.890.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.890.788 I llm_load_print_meta: model params     = 2.51 B
0.00.890.789 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.890.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.890.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.890.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.890.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.890.792 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.890.792 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.890.793 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.890.800 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.890.801 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.890.802 I llm_load_print_meta: max token length = 93
0.00.971.529 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.971.537 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.971.538 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.971.538 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.971.539 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.971.540 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.977.751 I llama_new_context_with_model: n_seq_max     = 1
0.00.977.758 I llama_new_context_with_model: n_ctx         = 4096
0.00.977.759 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.977.759 I llama_new_context_with_model: n_batch       = 2048
0.00.977.759 I llama_new_context_with_model: n_ubatch      = 512
0.00.977.760 I llama_new_context_with_model: flash_attn    = 0
0.00.977.762 I llama_new_context_with_model: freq_base     = 10000.0
0.00.977.763 I llama_new_context_with_model: freq_scale    = 1
0.00.977.764 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.977.859 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.992.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.992.530 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.992.646 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.995.272 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.995.275 I llama_new_context_with_model: graph nodes  = 601
0.00.995.276 I llama_new_context_with_model: graph splits = 1
0.00.995.300 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.995.304 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.604.965 I main: llama threadpool init, n_threads = 4
0.01.604.981 I 
0.01.605.100 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.605.101 I 
0.01.605.346 I sampler seed: 277153754
0.01.605.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.605.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.605.376 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.605.377 I 
 increasels, a creature that resembles a small lizard with a furry coat and glowing eyes.

**Description of a Crescilla:**

* Small, approximately 

0.15.048.292 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.61 tokens per second)
0.15.048.296 I llama_perf_context_print:        load time =    1604.00 ms
0.15.048.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.048.311 I llama_perf_context_print:        eval time =   13353.72 ms /    32 runs   (  417.30 ms per token,     2.40 tokens per second)
0.15.048.312 I llama_perf_context_print:       total time =   13443.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.932 I main: load the model and apply lora adapter, if any
0.00.023.315 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.327 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.431 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.445 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.452 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.457 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.459 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.466 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.474 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.489 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.493 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.496 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.149 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.151 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.152 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.153 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.155 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.156 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.160 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.162 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.163 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.164 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.166 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.176 I llama_model_loader: - type  f32:   37 tensors
0.00.352.178 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.397 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.459 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.461 I llm_load_vocab: special tokens cache size = 5
0.00.848.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.567 I llm_load_print_meta: arch             = gemma
0.00.848.568 I llm_load_print_meta: vocab type       = SPM
0.00.848.569 I llm_load_print_meta: n_vocab          = 256000
0.00.848.572 I llm_load_print_meta: n_merges         = 0
0.00.848.572 I llm_load_print_meta: vocab_only       = 0
0.00.848.573 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.573 I llm_load_print_meta: n_embd           = 2048
0.00.848.574 I llm_load_print_meta: n_layer          = 18
0.00.848.640 I llm_load_print_meta: n_head           = 8
0.00.848.647 I llm_load_print_meta: n_head_kv        = 1
0.00.848.648 I llm_load_print_meta: n_rot            = 256
0.00.848.648 I llm_load_print_meta: n_swa            = 0
0.00.848.649 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.649 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.653 I llm_load_print_meta: n_gqa            = 8
0.00.848.658 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.663 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.666 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.666 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.667 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.672 I llm_load_print_meta: n_ff             = 16384
0.00.848.673 I llm_load_print_meta: n_expert         = 0
0.00.848.673 I llm_load_print_meta: n_expert_used    = 0
0.00.848.674 I llm_load_print_meta: causal attn      = 1
0.00.848.674 I llm_load_print_meta: pooling type     = 0
0.00.848.675 I llm_load_print_meta: rope type        = 2
0.00.848.675 I llm_load_print_meta: rope scaling     = linear
0.00.848.677 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.677 I llm_load_print_meta: freq_scale_train = 1
0.00.848.678 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.678 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.678 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.679 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.679 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.679 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.679 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.680 I llm_load_print_meta: model type       = 2B
0.00.848.681 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.682 I llm_load_print_meta: model params     = 2.51 B
0.00.848.682 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.683 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.684 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.684 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.685 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.685 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.685 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.686 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.691 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.693 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.693 I llm_load_print_meta: max token length = 93
0.00.921.694 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.921.704 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.928.071 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.078 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.079 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.079 I llama_new_context_with_model: n_batch       = 2048
0.00.928.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.080 I llama_new_context_with_model: flash_attn    = 0
0.00.928.083 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.084 I llama_new_context_with_model: freq_scale    = 1
0.00.928.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.183 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.943.540 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.581 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.301 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.305 I llama_new_context_with_model: graph nodes  = 601
0.00.946.305 I llama_new_context_with_model: graph splits = 1
0.00.946.330 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.946.333 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.010 I main: llama threadpool init, n_threads = 4
0.01.559.027 I 
0.01.559.167 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.559.172 I 
0.01.559.410 I sampler seed: 870937044
0.01.559.425 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.437 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.441 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.442 I 
 increamically. 

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.11.235.561 I llama_perf_sampler_print:    sampling time =      35.63 ms /    24 runs   (    1.48 ms per token,   673.63 tokens per second)
0.11.235.564 I llama_perf_context_print:        load time =    1557.98 ms
0.11.235.565 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.235.582 I llama_perf_context_print:        eval time =    9610.67 ms /    23 runs   (  417.86 ms per token,     2.39 tokens per second)
0.11.235.583 I llama_perf_context_print:       total time =    9676.56 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.411s
user	3m34.592s
sys	0m9.597s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4392 (d283d02b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185668.22 ms
main:    total time = 185668.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.483 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.493 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.613 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.614 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.629 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.634 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.051 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.230 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.368 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.381 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.383 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.384 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.385 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.387 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.388 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.392 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.393 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.395 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.396 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.362.398 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.407 I llama_model_loader: - type  f32:   37 tensors
0.00.362.409 I llama_model_loader: - type q4_K:  108 tensors
0.00.362.410 I llama_model_loader: - type q6_K:   19 tensors
0.00.592.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.150 I llm_load_vocab: special tokens cache size = 5
0.00.886.053 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.886.127 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.886.128 I llm_load_print_meta: arch             = gemma
0.00.886.129 I llm_load_print_meta: vocab type       = SPM
0.00.886.129 I llm_load_print_meta: n_vocab          = 256000
0.00.886.132 I llm_load_print_meta: n_merges         = 0
0.00.886.132 I llm_load_print_meta: vocab_only       = 0
0.00.886.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.886.133 I llm_load_print_meta: n_embd           = 2048
0.00.886.133 I llm_load_print_meta: n_layer          = 18
0.00.886.201 I llm_load_print_meta: n_head           = 8
0.00.886.209 I llm_load_print_meta: n_head_kv        = 1
0.00.886.209 I llm_load_print_meta: n_rot            = 256
0.00.886.210 I llm_load_print_meta: n_swa            = 0
0.00.886.210 I llm_load_print_meta: n_embd_head_k    = 256
0.00.886.210 I llm_load_print_meta: n_embd_head_v    = 256
0.00.886.216 I llm_load_print_meta: n_gqa            = 8
0.00.886.220 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.886.226 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.886.228 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.886.230 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.886.230 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.886.231 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.886.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.886.237 I llm_load_print_meta: n_ff             = 16384
0.00.886.238 I llm_load_print_meta: n_expert         = 0
0.00.886.238 I llm_load_print_meta: n_expert_used    = 0
0.00.886.239 I llm_load_print_meta: causal attn      = 1
0.00.886.240 I llm_load_print_meta: pooling type     = 0
0.00.886.240 I llm_load_print_meta: rope type        = 2
0.00.886.241 I llm_load_print_meta: rope scaling     = linear
0.00.886.242 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.886.254 I llm_load_print_meta: freq_scale_train = 1
0.00.886.255 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.886.256 I llm_load_print_meta: rope_finetuned   = unknown
0.00.886.256 I llm_load_print_meta: ssm_d_conv       = 0
0.00.886.257 I llm_load_print_meta: ssm_d_inner      = 0
0.00.886.271 I llm_load_print_meta: ssm_d_state      = 0
0.00.886.271 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.886.272 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.886.273 I llm_load_print_meta: model type       = 2B
0.00.886.275 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.886.276 I llm_load_print_meta: model params     = 2.51 B
0.00.886.282 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.886.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.886.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.886.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.886.284 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.886.284 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.886.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.886.285 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.886.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.886.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.886.301 I llm_load_print_meta: max token length = 93
0.00.949.391 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.949.402 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.949.403 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.949.403 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.949.404 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.949.405 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.955.191 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.199 I llama_new_context_with_model: n_batch       = 2048
0.00.955.200 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.200 I llama_new_context_with_model: flash_attn    = 0
0.00.955.203 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.205 I llama_new_context_with_model: freq_scale    = 1
0.00.955.206 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.294 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.970.107 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.147 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.919 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.924 I llama_new_context_with_model: graph nodes  = 601
0.00.972.924 I llama_new_context_with_model: graph splits = 1
0.00.972.948 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.951 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.379 I main: llama threadpool init, n_threads = 4
0.01.551.397 I 
0.01.551.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.551.521 I 
0.01.551.758 I sampler seed: 3278934095
0.01.551.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.782 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.785 I 
 seconal in the heart.

Answer: Coronary artery disease.

Explanation: Coronary artery disease refers to the condition in which the coronary arteries, which supply blood

0.12.689.526 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.02 tokens per second)
0.12.689.530 I llama_perf_context_print:        load time =    1550.38 ms
0.12.689.532 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.689.543 I llama_perf_context_print:        eval time =   11046.58 ms /    32 runs   (  345.21 ms per token,     2.90 tokens per second)
0.12.689.545 I llama_perf_context_print:       total time =   11138.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4392 (d283d02b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185657.72 ms
main:    total time = 185657.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4392 (d283d02b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.321 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.464 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.466 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.468 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.473 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.477 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.488 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.491 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.176 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.614 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.798 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.813 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.815 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.816 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.818 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.834 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.839 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.848 I llama_model_loader: - type  f32:   37 tensors
0.00.350.850 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.851 I llama_model_loader: - type q6_K:   19 tensors
0.00.589.262 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.978 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.970 I llm_load_vocab: special tokens cache size = 5
0.00.869.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.869.313 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.869.317 I llm_load_print_meta: arch             = gemma
0.00.869.318 I llm_load_print_meta: vocab type       = SPM
0.00.869.319 I llm_load_print_meta: n_vocab          = 256000
0.00.869.321 I llm_load_print_meta: n_merges         = 0
0.00.869.322 I llm_load_print_meta: vocab_only       = 0
0.00.869.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.869.323 I llm_load_print_meta: n_embd           = 2048
0.00.869.323 I llm_load_print_meta: n_layer          = 18
0.00.869.389 I llm_load_print_meta: n_head           = 8
0.00.869.399 I llm_load_print_meta: n_head_kv        = 1
0.00.869.400 I llm_load_print_meta: n_rot            = 256
0.00.869.402 I llm_load_print_meta: n_swa            = 0
0.00.869.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.869.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.869.408 I llm_load_print_meta: n_gqa            = 8
0.00.869.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.869.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.869.419 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.869.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.869.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.869.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.869.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.869.427 I llm_load_print_meta: n_ff             = 16384
0.00.869.428 I llm_load_print_meta: n_expert         = 0
0.00.869.428 I llm_load_print_meta: n_expert_used    = 0
0.00.869.428 I llm_load_print_meta: causal attn      = 1
0.00.869.429 I llm_load_print_meta: pooling type     = 0
0.00.869.429 I llm_load_print_meta: rope type        = 2
0.00.869.430 I llm_load_print_meta: rope scaling     = linear
0.00.869.432 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.869.433 I llm_load_print_meta: freq_scale_train = 1
0.00.869.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.869.434 I llm_load_print_meta: rope_finetuned   = unknown
0.00.869.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.869.435 I llm_load_print_meta: ssm_d_inner      = 0
0.00.869.436 I llm_load_print_meta: ssm_d_state      = 0
0.00.869.436 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.869.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.869.438 I llm_load_print_meta: model type       = 2B
0.00.869.439 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.869.440 I llm_load_print_meta: model params     = 2.51 B
0.00.869.441 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.869.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.869.442 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.869.442 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.869.443 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.869.443 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.869.462 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.869.463 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.869.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.869.470 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.869.471 I llm_load_print_meta: max token length = 93
0.00.929.644 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.935.821 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.830 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.830 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.831 I llama_new_context_with_model: n_batch       = 2048
0.00.935.831 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.832 I llama_new_context_with_model: flash_attn    = 0
0.00.935.836 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.837 I llama_new_context_with_model: freq_scale    = 1
0.00.935.838 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.937 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.950.738 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.781 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.514 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.518 I llama_new_context_with_model: graph nodes  = 601
0.00.953.519 I llama_new_context_with_model: graph splits = 1
0.00.953.542 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.953.546 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.533.642 I main: llama threadpool init, n_threads = 4
0.01.533.659 I 
0.01.533.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.802 I 
0.01.534.041 I sampler seed: 2038684383
0.01.534.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.534.065 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.534.069 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.534.069 I 
 seconded, "I have a question about the ethical implications of artificial intelligence."

Answer:

The ethical implications of artificial intelligence (AI) are complex and

0.12.715.564 I llama_perf_sampler_print:    sampling time =      49.52 ms /    33 runs   (    1.50 ms per token,   666.38 tokens per second)
0.12.715.566 I llama_perf_context_print:        load time =    1532.67 ms
0.12.715.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.715.583 I llama_perf_context_print:        eval time =   11091.89 ms /    32 runs   (  346.62 ms per token,     2.88 tokens per second)
0.12.715.597 I llama_perf_context_print:       total time =   11181.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.665s
user	46m43.618s
sys	0m6.320s
