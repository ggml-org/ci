+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.355 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.364 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.457 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.469 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.471 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.483 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.494 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.495 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.496 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.497 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.984 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.412 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.943 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.944 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.945 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.947 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.954 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.956 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.968 I llama_model_loader: - type  f32:   37 tensors
0.00.356.970 I llama_model_loader: - type q8_0:  127 tensors
0.00.590.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.484 I llm_load_vocab: special tokens cache size = 5
0.00.848.434 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.513 I llm_load_print_meta: arch             = gemma
0.00.848.514 I llm_load_print_meta: vocab type       = SPM
0.00.848.515 I llm_load_print_meta: n_vocab          = 256000
0.00.848.518 I llm_load_print_meta: n_merges         = 0
0.00.848.518 I llm_load_print_meta: vocab_only       = 0
0.00.848.519 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.519 I llm_load_print_meta: n_embd           = 2048
0.00.848.519 I llm_load_print_meta: n_layer          = 18
0.00.848.583 I llm_load_print_meta: n_head           = 8
0.00.848.590 I llm_load_print_meta: n_head_kv        = 1
0.00.848.591 I llm_load_print_meta: n_rot            = 256
0.00.848.592 I llm_load_print_meta: n_swa            = 0
0.00.848.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.597 I llm_load_print_meta: n_gqa            = 8
0.00.848.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.623 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.623 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.624 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.624 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.629 I llm_load_print_meta: n_ff             = 16384
0.00.848.629 I llm_load_print_meta: n_expert         = 0
0.00.848.646 I llm_load_print_meta: n_expert_used    = 0
0.00.848.647 I llm_load_print_meta: causal attn      = 1
0.00.848.647 I llm_load_print_meta: pooling type     = 0
0.00.848.648 I llm_load_print_meta: rope type        = 2
0.00.848.653 I llm_load_print_meta: rope scaling     = linear
0.00.848.659 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.666 I llm_load_print_meta: freq_scale_train = 1
0.00.848.667 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.668 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.669 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.669 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.670 I llm_load_print_meta: model type       = 2B
0.00.848.671 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.672 I llm_load_print_meta: model params     = 2.51 B
0.00.848.672 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.673 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.674 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.676 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.684 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.692 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.693 I llm_load_print_meta: max token length = 93
0.00.950.969 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.950.980 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.950.981 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.950.982 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.950.982 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.950.983 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.956.973 I llama_new_context_with_model: n_seq_max     = 1
0.00.956.981 I llama_new_context_with_model: n_ctx         = 4096
0.00.956.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.956.981 I llama_new_context_with_model: n_batch       = 2048
0.00.956.982 I llama_new_context_with_model: n_ubatch      = 512
0.00.956.982 I llama_new_context_with_model: flash_attn    = 0
0.00.956.985 I llama_new_context_with_model: freq_base     = 10000.0
0.00.956.985 I llama_new_context_with_model: freq_scale    = 1
0.00.956.986 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.957 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.999 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.972.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.792 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.795 I llama_new_context_with_model: graph nodes  = 601
0.00.974.796 I llama_new_context_with_model: graph splits = 1
0.00.974.819 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.249 I main: llama threadpool init, n_threads = 4
0.01.584.266 I 
0.01.584.385 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.385 I 
0.01.584.629 I sampler seed: 3380553260
0.01.584.644 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.656 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.656 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.657 I 
 seconally to the given sentence:

The boy who cried wolf was afraid.

**Answer:** The boy who cried wolf was frightened. [end of text]


0.13.925.746 I llama_perf_sampler_print:    sampling time =      44.48 ms /    30 runs   (    1.48 ms per token,   674.40 tokens per second)
0.13.925.749 I llama_perf_context_print:        load time =    1583.32 ms
0.13.925.751 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.925.766 I llama_perf_context_print:        eval time =   12259.95 ms /    29 runs   (  422.76 ms per token,     2.37 tokens per second)
0.13.925.767 I llama_perf_context_print:       total time =   12341.51 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.833 I main: load the model and apply lora adapter, if any
0.00.023.473 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.573 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.590 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.602 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.604 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.605 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.606 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.608 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.621 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.639 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.102 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.514 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.525 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.531 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.533 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.539 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.543 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.556 I llama_model_loader: - type  f32:   37 tensors
0.00.357.559 I llama_model_loader: - type q8_0:  127 tensors
0.00.603.206 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.671.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.672.167 I llm_load_vocab: special tokens cache size = 5
0.00.870.063 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.870.139 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.870.140 I llm_load_print_meta: arch             = gemma
0.00.870.141 I llm_load_print_meta: vocab type       = SPM
0.00.870.142 I llm_load_print_meta: n_vocab          = 256000
0.00.870.144 I llm_load_print_meta: n_merges         = 0
0.00.870.144 I llm_load_print_meta: vocab_only       = 0
0.00.870.145 I llm_load_print_meta: n_ctx_train      = 8192
0.00.870.145 I llm_load_print_meta: n_embd           = 2048
0.00.870.146 I llm_load_print_meta: n_layer          = 18
0.00.870.212 I llm_load_print_meta: n_head           = 8
0.00.870.219 I llm_load_print_meta: n_head_kv        = 1
0.00.870.220 I llm_load_print_meta: n_rot            = 256
0.00.870.220 I llm_load_print_meta: n_swa            = 0
0.00.870.221 I llm_load_print_meta: n_embd_head_k    = 256
0.00.870.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.870.225 I llm_load_print_meta: n_gqa            = 8
0.00.870.230 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.870.235 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.870.237 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.870.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.870.238 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.870.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.870.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.870.244 I llm_load_print_meta: n_ff             = 16384
0.00.870.244 I llm_load_print_meta: n_expert         = 0
0.00.870.245 I llm_load_print_meta: n_expert_used    = 0
0.00.870.245 I llm_load_print_meta: causal attn      = 1
0.00.870.245 I llm_load_print_meta: pooling type     = 0
0.00.870.246 I llm_load_print_meta: rope type        = 2
0.00.870.246 I llm_load_print_meta: rope scaling     = linear
0.00.870.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.870.248 I llm_load_print_meta: freq_scale_train = 1
0.00.870.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.870.249 I llm_load_print_meta: rope_finetuned   = unknown
0.00.870.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.870.249 I llm_load_print_meta: ssm_d_inner      = 0
0.00.870.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.870.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.870.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.870.251 I llm_load_print_meta: model type       = 2B
0.00.870.252 I llm_load_print_meta: model ftype      = Q8_0
0.00.870.253 I llm_load_print_meta: model params     = 2.51 B
0.00.870.253 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.870.254 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.870.255 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.870.255 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.870.255 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.870.256 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.870.256 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.870.257 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.870.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.870.264 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.870.265 I llm_load_print_meta: max token length = 93
0.00.964.569 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.970.657 I llama_new_context_with_model: n_seq_max     = 1
0.00.970.666 I llama_new_context_with_model: n_ctx         = 4096
0.00.970.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.970.666 I llama_new_context_with_model: n_batch       = 2048
0.00.970.666 I llama_new_context_with_model: n_ubatch      = 512
0.00.970.667 I llama_new_context_with_model: flash_attn    = 0
0.00.970.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.970.671 I llama_new_context_with_model: freq_scale    = 1
0.00.970.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.986.623 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.986.670 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.986.792 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.989.470 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.989.473 I llama_new_context_with_model: graph nodes  = 601
0.00.989.474 I llama_new_context_with_model: graph splits = 1
0.00.989.497 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.633.045 I main: llama threadpool init, n_threads = 4
0.01.633.062 I 
0.01.633.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.633.192 I 
0.01.633.436 I sampler seed: 3877947797
0.01.633.450 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.633.462 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.633.463 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.633.464 I 
 increasively in this sentence.

The more he eats, the more hungry he becomes.

This sentence shows a monotonic relationship between two variables: the amount of

0.15.414.658 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.14 tokens per second)
0.15.414.661 I llama_perf_context_print:        load time =    1632.11 ms
0.15.414.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.414.664 I llama_perf_context_print:        eval time =   13691.98 ms /    32 runs   (  427.87 ms per token,     2.34 tokens per second)
0.15.414.673 I llama_perf_context_print:       total time =   13781.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.645 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.657 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.773 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.776 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.787 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.788 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.804 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.805 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.806 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.808 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.435 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.409 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.772 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.781 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.782 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.783 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.785 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.786 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.787 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.793 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.796 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.806 I llama_model_loader: - type  f32:   37 tensors
0.00.354.808 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.915 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.752 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.678 I llm_load_vocab: special tokens cache size = 5
0.00.844.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.347 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.349 I llm_load_print_meta: arch             = gemma
0.00.844.349 I llm_load_print_meta: vocab type       = SPM
0.00.844.350 I llm_load_print_meta: n_vocab          = 256000
0.00.844.352 I llm_load_print_meta: n_merges         = 0
0.00.844.353 I llm_load_print_meta: vocab_only       = 0
0.00.844.353 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.354 I llm_load_print_meta: n_embd           = 2048
0.00.844.354 I llm_load_print_meta: n_layer          = 18
0.00.844.419 I llm_load_print_meta: n_head           = 8
0.00.844.426 I llm_load_print_meta: n_head_kv        = 1
0.00.844.426 I llm_load_print_meta: n_rot            = 256
0.00.844.427 I llm_load_print_meta: n_swa            = 0
0.00.844.427 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.427 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.432 I llm_load_print_meta: n_gqa            = 8
0.00.844.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.442 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.443 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.444 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.445 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.451 I llm_load_print_meta: n_ff             = 16384
0.00.844.452 I llm_load_print_meta: n_expert         = 0
0.00.844.452 I llm_load_print_meta: n_expert_used    = 0
0.00.844.452 I llm_load_print_meta: causal attn      = 1
0.00.844.457 I llm_load_print_meta: pooling type     = 0
0.00.844.457 I llm_load_print_meta: rope type        = 2
0.00.844.457 I llm_load_print_meta: rope scaling     = linear
0.00.844.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.459 I llm_load_print_meta: freq_scale_train = 1
0.00.844.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.460 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.460 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.461 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.462 I llm_load_print_meta: model type       = 2B
0.00.844.463 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.464 I llm_load_print_meta: model params     = 2.51 B
0.00.844.465 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.465 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.467 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.468 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.468 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.468 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.484 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.485 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.485 I llm_load_print_meta: max token length = 93
0.00.923.246 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.923.257 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.258 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.923.259 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.923.259 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.260 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.929.172 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.179 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.180 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.180 I llama_new_context_with_model: n_batch       = 2048
0.00.929.180 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.181 I llama_new_context_with_model: flash_attn    = 0
0.00.929.184 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.185 I llama_new_context_with_model: freq_scale    = 1
0.00.929.185 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.496 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.537 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.325 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.329 I llama_new_context_with_model: graph nodes  = 601
0.00.946.329 I llama_new_context_with_model: graph splits = 1
0.00.946.351 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.554.137 I main: llama threadpool init, n_threads = 4
0.01.554.153 I 
0.01.554.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.554.284 I 
0.01.554.524 I sampler seed: 741943736
0.01.554.538 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.550 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.551 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.551 I 
 increasities into a chorus.

**Chorus:**
"The universe is a grand symphony,
A tapestry of stars and light.
From distant galaxies to

0.15.162.672 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.11 tokens per second)
0.15.162.676 I llama_perf_context_print:        load time =    1553.15 ms
0.15.162.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.162.678 I llama_perf_context_print:        eval time =   13518.75 ms /    32 runs   (  422.46 ms per token,     2.37 tokens per second)
0.15.162.679 I llama_perf_context_print:       total time =   13608.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.023.484 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.496 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.612 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.616 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.625 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.631 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.633 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.638 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.643 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.644 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.659 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.664 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.666 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.524 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.720 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.733 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.735 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.737 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.738 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.744 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.749 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.750 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.759 I llama_model_loader: - type  f32:   37 tensors
0.00.358.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.181 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.545 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.497 I llm_load_vocab: special tokens cache size = 5
0.00.848.571 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.651 I llm_load_print_meta: arch             = gemma
0.00.848.652 I llm_load_print_meta: vocab type       = SPM
0.00.848.653 I llm_load_print_meta: n_vocab          = 256000
0.00.848.656 I llm_load_print_meta: n_merges         = 0
0.00.848.656 I llm_load_print_meta: vocab_only       = 0
0.00.848.657 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.658 I llm_load_print_meta: n_embd           = 2048
0.00.848.658 I llm_load_print_meta: n_layer          = 18
0.00.848.723 I llm_load_print_meta: n_head           = 8
0.00.848.730 I llm_load_print_meta: n_head_kv        = 1
0.00.848.731 I llm_load_print_meta: n_rot            = 256
0.00.848.731 I llm_load_print_meta: n_swa            = 0
0.00.848.732 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.737 I llm_load_print_meta: n_gqa            = 8
0.00.848.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.747 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.756 I llm_load_print_meta: n_ff             = 16384
0.00.848.757 I llm_load_print_meta: n_expert         = 0
0.00.848.758 I llm_load_print_meta: n_expert_used    = 0
0.00.848.758 I llm_load_print_meta: causal attn      = 1
0.00.848.758 I llm_load_print_meta: pooling type     = 0
0.00.848.759 I llm_load_print_meta: rope type        = 2
0.00.848.759 I llm_load_print_meta: rope scaling     = linear
0.00.848.761 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.762 I llm_load_print_meta: freq_scale_train = 1
0.00.848.762 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.762 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.763 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.763 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.763 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.764 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.764 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.764 I llm_load_print_meta: model type       = 2B
0.00.848.766 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.767 I llm_load_print_meta: model params     = 2.51 B
0.00.848.767 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.768 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.769 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.769 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.770 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.770 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.770 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.771 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.776 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.778 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.778 I llm_load_print_meta: max token length = 93
0.00.921.760 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.921.774 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.928.052 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.063 I llama_new_context_with_model: n_batch       = 2048
0.00.928.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.064 I llama_new_context_with_model: flash_attn    = 0
0.00.928.067 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.068 I llama_new_context_with_model: freq_scale    = 1
0.00.928.069 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.012 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.054 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.176 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.884 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.888 I llama_new_context_with_model: graph nodes  = 601
0.00.946.888 I llama_new_context_with_model: graph splits = 1
0.00.946.914 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.347 I main: llama threadpool init, n_threads = 4
0.01.557.363 I 
0.01.557.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.557.499 I 
0.01.557.747 I sampler seed: 3557179661
0.01.557.761 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.775 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.779 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.780 I 
 increasities, and other types of sexual violence. [end of text]


0.06.235.427 I llama_perf_sampler_print:    sampling time =      16.97 ms /    12 runs   (    1.41 ms per token,   707.21 tokens per second)
0.06.235.430 I llama_perf_context_print:        load time =    1556.35 ms
0.06.235.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.235.433 I llama_perf_context_print:        eval time =    4646.46 ms /    11 runs   (  422.41 ms per token,     2.37 tokens per second)
0.06.235.434 I llama_perf_context_print:       total time =    4678.09 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.483s
user	3m11.333s
sys	0m9.632s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4311 (d231c1b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186025.67 ms
main:    total time = 186025.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.711 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.934 I main: llama backend init
0.00.000.943 I main: load the model and apply lora adapter, if any
0.00.023.686 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.700 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.799 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.814 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.816 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.822 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.829 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.831 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.834 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.845 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.846 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.848 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.849 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.850 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.152 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.547 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.008 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.017 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.019 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.020 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.021 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.023 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.024 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.032 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.033 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.361.035 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.044 I llama_model_loader: - type  f32:   37 tensors
0.00.361.046 I llama_model_loader: - type q4_K:  108 tensors
0.00.361.046 I llama_model_loader: - type q6_K:   19 tensors
0.00.609.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.679.821 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.680.777 I llm_load_vocab: special tokens cache size = 5
0.00.872.659 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.736 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.737 I llm_load_print_meta: arch             = gemma
0.00.872.737 I llm_load_print_meta: vocab type       = SPM
0.00.872.738 I llm_load_print_meta: n_vocab          = 256000
0.00.872.741 I llm_load_print_meta: n_merges         = 0
0.00.872.742 I llm_load_print_meta: vocab_only       = 0
0.00.872.742 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.742 I llm_load_print_meta: n_embd           = 2048
0.00.872.743 I llm_load_print_meta: n_layer          = 18
0.00.872.808 I llm_load_print_meta: n_head           = 8
0.00.872.815 I llm_load_print_meta: n_head_kv        = 1
0.00.872.815 I llm_load_print_meta: n_rot            = 256
0.00.872.815 I llm_load_print_meta: n_swa            = 0
0.00.872.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.816 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.821 I llm_load_print_meta: n_gqa            = 8
0.00.872.826 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.832 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.833 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.835 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.835 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.840 I llm_load_print_meta: n_ff             = 16384
0.00.872.841 I llm_load_print_meta: n_expert         = 0
0.00.872.841 I llm_load_print_meta: n_expert_used    = 0
0.00.872.842 I llm_load_print_meta: causal attn      = 1
0.00.872.842 I llm_load_print_meta: pooling type     = 0
0.00.872.842 I llm_load_print_meta: rope type        = 2
0.00.872.843 I llm_load_print_meta: rope scaling     = linear
0.00.872.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.845 I llm_load_print_meta: freq_scale_train = 1
0.00.872.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.846 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.847 I llm_load_print_meta: model type       = 2B
0.00.872.848 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.872.849 I llm_load_print_meta: model params     = 2.51 B
0.00.872.850 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.872.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.851 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.861 I llm_load_print_meta: max token length = 93
0.00.934.785 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.934.797 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.934.798 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.934.799 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.934.800 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.934.800 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.940.641 I llama_new_context_with_model: n_seq_max     = 1
0.00.940.649 I llama_new_context_with_model: n_ctx         = 4096
0.00.940.649 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.940.650 I llama_new_context_with_model: n_batch       = 2048
0.00.940.650 I llama_new_context_with_model: n_ubatch      = 512
0.00.940.650 I llama_new_context_with_model: flash_attn    = 0
0.00.940.653 I llama_new_context_with_model: freq_base     = 10000.0
0.00.940.654 I llama_new_context_with_model: freq_scale    = 1
0.00.940.654 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.955.640 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.955.683 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.955.800 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.958.478 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.958.483 I llama_new_context_with_model: graph nodes  = 601
0.00.958.483 I llama_new_context_with_model: graph splits = 1
0.00.958.506 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.537.685 I main: llama threadpool init, n_threads = 4
0.01.537.702 I 
0.01.537.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.537.828 I 
0.01.538.091 I sampler seed: 3432174939
0.01.538.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.114 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.117 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.117 I 
 seconally after the first sentence.

...and the impact of this knowledge would be far-reaching, extending beyond the realm of academia and impacting various sectors of

0.12.660.874 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.07 tokens per second)
0.12.660.877 I llama_perf_context_print:        load time =    1536.64 ms
0.12.660.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.660.880 I llama_perf_context_print:        eval time =   11034.36 ms /    32 runs   (  344.82 ms per token,     2.90 tokens per second)
0.12.660.880 I llama_perf_context_print:       total time =   11123.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4311 (d231c1b1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185946.44 ms
main:    total time = 185946.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4311 (d231c1b1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.025.902 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.035 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.056 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.060 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.064 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.422 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.631 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.986 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.999 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.001 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.002 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.006 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.015 I llama_model_loader: - type  f32:   37 tensors
0.00.358.017 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.018 I llama_model_loader: - type q6_K:   19 tensors
0.00.607.852 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.673.084 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.996 I llm_load_vocab: special tokens cache size = 5
0.00.863.544 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.621 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.622 I llm_load_print_meta: arch             = gemma
0.00.863.623 I llm_load_print_meta: vocab type       = SPM
0.00.863.624 I llm_load_print_meta: n_vocab          = 256000
0.00.863.626 I llm_load_print_meta: n_merges         = 0
0.00.863.626 I llm_load_print_meta: vocab_only       = 0
0.00.863.627 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.627 I llm_load_print_meta: n_embd           = 2048
0.00.863.627 I llm_load_print_meta: n_layer          = 18
0.00.863.692 I llm_load_print_meta: n_head           = 8
0.00.863.699 I llm_load_print_meta: n_head_kv        = 1
0.00.863.699 I llm_load_print_meta: n_rot            = 256
0.00.863.700 I llm_load_print_meta: n_swa            = 0
0.00.863.700 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.705 I llm_load_print_meta: n_gqa            = 8
0.00.863.710 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.717 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.719 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.720 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.720 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.725 I llm_load_print_meta: n_ff             = 16384
0.00.863.726 I llm_load_print_meta: n_expert         = 0
0.00.863.726 I llm_load_print_meta: n_expert_used    = 0
0.00.863.727 I llm_load_print_meta: causal attn      = 1
0.00.863.727 I llm_load_print_meta: pooling type     = 0
0.00.863.727 I llm_load_print_meta: rope type        = 2
0.00.863.728 I llm_load_print_meta: rope scaling     = linear
0.00.863.730 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.730 I llm_load_print_meta: freq_scale_train = 1
0.00.863.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.732 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.733 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.743 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.744 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.748 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.748 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.749 I llm_load_print_meta: model type       = 2B
0.00.863.750 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.863.762 I llm_load_print_meta: model params     = 2.51 B
0.00.863.763 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.863.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.773 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.774 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.783 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.791 I llm_load_print_meta: max token length = 93
0.00.923.349 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.929.107 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.115 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.116 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.116 I llama_new_context_with_model: n_batch       = 2048
0.00.929.117 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.118 I llama_new_context_with_model: flash_attn    = 0
0.00.929.120 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.121 I llama_new_context_with_model: freq_scale    = 1
0.00.929.122 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.116 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.158 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.867 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.871 I llama_new_context_with_model: graph nodes  = 601
0.00.946.872 I llama_new_context_with_model: graph splits = 1
0.00.946.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.532.871 I main: llama threadpool init, n_threads = 4
0.01.532.889 I 
0.01.533.017 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.021 I 
0.01.533.267 I sampler seed: 238347105
0.01.533.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.533.290 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.533.294 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.533.294 I 
 encompases.

**Solution:**

1. Identify the key components of the problem.
2. Analyze the potential causes of the problem.
3.

0.12.659.581 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.35 tokens per second)
0.12.659.584 I llama_perf_context_print:        load time =    1531.88 ms
0.12.659.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.659.586 I llama_perf_context_print:        eval time =   11037.80 ms /    32 runs   (  344.93 ms per token,     2.90 tokens per second)
0.12.659.587 I llama_perf_context_print:       total time =   11126.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.226s
user	46m45.075s
sys	0m6.482s
