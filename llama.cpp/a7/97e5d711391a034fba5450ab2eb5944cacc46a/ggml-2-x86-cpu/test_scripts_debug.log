+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.001.129 I main: load the model and apply lora adapter, if any
0.00.024.079 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.091 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.195 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.202 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.238 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.117 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.969 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.056 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.066 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.067 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.090 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.095 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.096 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.098 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.107 I llama_model_loader: - type  f32:   37 tensors
0.00.268.110 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.265 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.432 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.428 I llm_load_vocab: special tokens cache size = 5
0.00.614.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.930 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.931 I llm_load_print_meta: arch             = gemma
0.00.614.932 I llm_load_print_meta: vocab type       = SPM
0.00.614.933 I llm_load_print_meta: n_vocab          = 256000
0.00.614.935 I llm_load_print_meta: n_merges         = 0
0.00.614.936 I llm_load_print_meta: vocab_only       = 0
0.00.614.936 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.937 I llm_load_print_meta: n_embd           = 2048
0.00.614.937 I llm_load_print_meta: n_layer          = 18
0.00.615.002 I llm_load_print_meta: n_head           = 8
0.00.615.009 I llm_load_print_meta: n_head_kv        = 1
0.00.615.010 I llm_load_print_meta: n_rot            = 256
0.00.615.010 I llm_load_print_meta: n_swa            = 0
0.00.615.011 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.011 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.016 I llm_load_print_meta: n_gqa            = 8
0.00.615.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.028 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.029 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.034 I llm_load_print_meta: n_ff             = 16384
0.00.615.035 I llm_load_print_meta: n_expert         = 0
0.00.615.035 I llm_load_print_meta: n_expert_used    = 0
0.00.615.035 I llm_load_print_meta: causal attn      = 1
0.00.615.036 I llm_load_print_meta: pooling type     = 0
0.00.615.037 I llm_load_print_meta: rope type        = 2
0.00.615.038 I llm_load_print_meta: rope scaling     = linear
0.00.615.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.040 I llm_load_print_meta: freq_scale_train = 1
0.00.615.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.041 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.042 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.042 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.043 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.044 I llm_load_print_meta: model type       = 2B
0.00.615.049 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.050 I llm_load_print_meta: model params     = 2.51 B
0.00.615.058 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.059 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.059 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.060 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.060 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.061 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.061 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.067 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.069 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.069 I llm_load_print_meta: max token length = 93
0.00.718.045 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.718.054 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.718.055 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.718.055 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.718.056 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.718.057 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.128 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.136 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.137 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.137 I llama_new_context_with_model: n_batch       = 2048
0.00.724.138 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.138 I llama_new_context_with_model: flash_attn    = 0
0.00.724.141 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.142 I llama_new_context_with_model: freq_scale    = 1
0.00.724.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.291 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.331 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.458 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.015 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.744.019 I llama_new_context_with_model: graph nodes  = 601
0.00.744.020 I llama_new_context_with_model: graph splits = 1
0.00.744.043 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.323 I main: llama threadpool init, n_threads = 4
0.01.352.336 I 
0.01.352.444 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.448 I 
0.01.352.681 I sampler seed: 881082629
0.01.352.693 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.700 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.703 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.704 I 
 increamically. The answer should be:

I am a creature of the night,
My eyes gleam in the darkness.
I hunt my prey with silent

0.14.803.094 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.26 tokens per second)
0.14.803.097 I llama_perf_context_print:        load time =    1351.10 ms
0.14.803.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.803.111 I llama_perf_context_print:        eval time =   13359.72 ms /    32 runs   (  417.49 ms per token,     2.40 tokens per second)
0.14.803.113 I llama_perf_context_print:       total time =   13450.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.001.143 I main: load the model and apply lora adapter, if any
0.00.023.778 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.883 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.898 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.904 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.911 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.913 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.916 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.943 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.947 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.102 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.191 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.203 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.204 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.206 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.207 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.210 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.214 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.223 I llama_model_loader: - type  f32:   37 tensors
0.00.268.225 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.448 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.862 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.838 I llm_load_vocab: special tokens cache size = 5
0.00.612.419 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.499 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.504 I llm_load_print_meta: arch             = gemma
0.00.612.505 I llm_load_print_meta: vocab type       = SPM
0.00.612.506 I llm_load_print_meta: n_vocab          = 256000
0.00.612.509 I llm_load_print_meta: n_merges         = 0
0.00.612.510 I llm_load_print_meta: vocab_only       = 0
0.00.612.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.511 I llm_load_print_meta: n_embd           = 2048
0.00.612.512 I llm_load_print_meta: n_layer          = 18
0.00.612.588 I llm_load_print_meta: n_head           = 8
0.00.612.598 I llm_load_print_meta: n_head_kv        = 1
0.00.612.600 I llm_load_print_meta: n_rot            = 256
0.00.612.600 I llm_load_print_meta: n_swa            = 0
0.00.612.601 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.608 I llm_load_print_meta: n_gqa            = 8
0.00.612.615 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.625 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.627 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.629 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.629 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.630 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.634 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.642 I llm_load_print_meta: n_ff             = 16384
0.00.612.643 I llm_load_print_meta: n_expert         = 0
0.00.612.643 I llm_load_print_meta: n_expert_used    = 0
0.00.612.644 I llm_load_print_meta: causal attn      = 1
0.00.612.644 I llm_load_print_meta: pooling type     = 0
0.00.612.645 I llm_load_print_meta: rope type        = 2
0.00.612.654 I llm_load_print_meta: rope scaling     = linear
0.00.612.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.656 I llm_load_print_meta: freq_scale_train = 1
0.00.612.657 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.658 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.658 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.659 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.659 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.659 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.660 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.661 I llm_load_print_meta: model type       = 2B
0.00.612.662 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.663 I llm_load_print_meta: model params     = 2.51 B
0.00.612.674 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.676 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.677 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.678 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.689 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.691 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.692 I llm_load_print_meta: max token length = 93
0.00.710.764 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.717.030 I llama_new_context_with_model: n_seq_max     = 1
0.00.717.038 I llama_new_context_with_model: n_ctx         = 4096
0.00.717.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.717.039 I llama_new_context_with_model: n_batch       = 2048
0.00.717.039 I llama_new_context_with_model: n_ubatch      = 512
0.00.717.040 I llama_new_context_with_model: flash_attn    = 0
0.00.717.043 I llama_new_context_with_model: freq_base     = 10000.0
0.00.717.044 I llama_new_context_with_model: freq_scale    = 1
0.00.717.045 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.989 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.734.033 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.734.156 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.675 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.679 I llama_new_context_with_model: graph nodes  = 601
0.00.736.680 I llama_new_context_with_model: graph splits = 1
0.00.736.706 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.348 I main: llama threadpool init, n_threads = 4
0.01.341.363 I 
0.01.341.481 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.485 I 
0.01.341.725 I sampler seed: 3936449005
0.01.341.737 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.747 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.748 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.748 I 
 seconary to the primary key constraint of a table.

Answer: Foreign key constraint.

A foreign key constraint is a type of database constraint that establishes a

0.14.955.456 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.07 tokens per second)
0.14.955.460 I llama_perf_context_print:        load time =    1340.10 ms
0.14.955.461 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.955.484 I llama_perf_context_print:        eval time =   13523.38 ms /    32 runs   (  422.61 ms per token,     2.37 tokens per second)
0.14.955.485 I llama_perf_context_print:       total time =   13614.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.709 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.001.175 I main: load the model and apply lora adapter, if any
0.00.024.240 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.348 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.363 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.372 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.373 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.377 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.386 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.387 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.684 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.982 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.995 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.997 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.998 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.019 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.021 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.022 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.023 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.031 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.041 I llama_model_loader: - type  f32:   37 tensors
0.00.270.046 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.561 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.156 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.191 I llm_load_vocab: special tokens cache size = 5
0.00.621.443 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.518 I llm_load_print_meta: arch             = gemma
0.00.621.519 I llm_load_print_meta: vocab type       = SPM
0.00.621.519 I llm_load_print_meta: n_vocab          = 256000
0.00.621.522 I llm_load_print_meta: n_merges         = 0
0.00.621.522 I llm_load_print_meta: vocab_only       = 0
0.00.621.523 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.523 I llm_load_print_meta: n_embd           = 2048
0.00.621.523 I llm_load_print_meta: n_layer          = 18
0.00.621.589 I llm_load_print_meta: n_head           = 8
0.00.621.596 I llm_load_print_meta: n_head_kv        = 1
0.00.621.596 I llm_load_print_meta: n_rot            = 256
0.00.621.597 I llm_load_print_meta: n_swa            = 0
0.00.621.598 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.599 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.604 I llm_load_print_meta: n_gqa            = 8
0.00.621.608 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.613 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.615 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.617 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.617 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.618 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.618 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.623 I llm_load_print_meta: n_ff             = 16384
0.00.621.623 I llm_load_print_meta: n_expert         = 0
0.00.621.629 I llm_load_print_meta: n_expert_used    = 0
0.00.621.629 I llm_load_print_meta: causal attn      = 1
0.00.621.630 I llm_load_print_meta: pooling type     = 0
0.00.621.630 I llm_load_print_meta: rope type        = 2
0.00.621.630 I llm_load_print_meta: rope scaling     = linear
0.00.621.632 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.632 I llm_load_print_meta: freq_scale_train = 1
0.00.621.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.648 I llm_load_print_meta: model type       = 2B
0.00.621.650 I llm_load_print_meta: model ftype      = Q8_0
0.00.621.651 I llm_load_print_meta: model params     = 2.51 B
0.00.621.659 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.621.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.662 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.663 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.663 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.665 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.671 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.672 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.673 I llm_load_print_meta: max token length = 93
0.00.713.174 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.713.185 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.713.187 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.713.187 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.713.188 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.713.189 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.719.057 I llama_new_context_with_model: n_seq_max     = 1
0.00.719.065 I llama_new_context_with_model: n_ctx         = 4096
0.00.719.065 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.719.066 I llama_new_context_with_model: n_batch       = 2048
0.00.719.066 I llama_new_context_with_model: n_ubatch      = 512
0.00.719.067 I llama_new_context_with_model: flash_attn    = 0
0.00.719.070 I llama_new_context_with_model: freq_base     = 10000.0
0.00.719.070 I llama_new_context_with_model: freq_scale    = 1
0.00.719.071 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.381 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.421 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.071 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.075 I llama_new_context_with_model: graph nodes  = 601
0.00.738.075 I llama_new_context_with_model: graph splits = 1
0.00.738.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.891 I main: llama threadpool init, n_threads = 4
0.01.343.905 I 
0.01.344.011 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.015 I 
0.01.344.244 I sampler seed: 788491467
0.01.344.256 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.263 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.264 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.264 I 
 increasities and engage in discourse to create a richer understanding of the relationship between technology and society.

Answer the question by addressing the points mentioned above.

**

0.14.877.208 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.46 tokens per second)
0.14.877.211 I llama_perf_context_print:        load time =    1342.60 ms
0.14.877.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.228 I llama_perf_context_print:        eval time =   13442.85 ms /    32 runs   (  420.09 ms per token,     2.38 tokens per second)
0.14.877.229 I llama_perf_context_print:       total time =   13533.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.721 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.959 I main: llama backend init
0.00.001.225 I main: load the model and apply lora adapter, if any
0.00.023.882 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.896 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.992 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.017 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.018 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.027 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.028 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.032 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.537 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.455 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.549 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.557 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.561 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.563 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.568 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.569 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.571 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.572 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.581 I llama_model_loader: - type  f32:   37 tensors
0.00.268.584 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.983 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.622 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.580 I llm_load_vocab: special tokens cache size = 5
0.00.623.464 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.536 I llm_load_print_meta: arch             = gemma
0.00.623.537 I llm_load_print_meta: vocab type       = SPM
0.00.623.537 I llm_load_print_meta: n_vocab          = 256000
0.00.623.540 I llm_load_print_meta: n_merges         = 0
0.00.623.540 I llm_load_print_meta: vocab_only       = 0
0.00.623.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.541 I llm_load_print_meta: n_embd           = 2048
0.00.623.542 I llm_load_print_meta: n_layer          = 18
0.00.623.605 I llm_load_print_meta: n_head           = 8
0.00.623.612 I llm_load_print_meta: n_head_kv        = 1
0.00.623.628 I llm_load_print_meta: n_rot            = 256
0.00.623.628 I llm_load_print_meta: n_swa            = 0
0.00.623.629 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.629 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.635 I llm_load_print_meta: n_gqa            = 8
0.00.623.639 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.648 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.648 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.649 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.653 I llm_load_print_meta: n_ff             = 16384
0.00.623.654 I llm_load_print_meta: n_expert         = 0
0.00.623.659 I llm_load_print_meta: n_expert_used    = 0
0.00.623.664 I llm_load_print_meta: causal attn      = 1
0.00.623.665 I llm_load_print_meta: pooling type     = 0
0.00.623.665 I llm_load_print_meta: rope type        = 2
0.00.623.666 I llm_load_print_meta: rope scaling     = linear
0.00.623.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.668 I llm_load_print_meta: freq_scale_train = 1
0.00.623.673 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.673 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.673 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.674 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.674 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.676 I llm_load_print_meta: model type       = 2B
0.00.623.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.677 I llm_load_print_meta: model params     = 2.51 B
0.00.623.686 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.704 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.709 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.710 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.716 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.718 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.719 I llm_load_print_meta: max token length = 93
0.00.696.722 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.696.734 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.702.511 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.518 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.519 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.519 I llama_new_context_with_model: n_batch       = 2048
0.00.702.519 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.520 I llama_new_context_with_model: flash_attn    = 0
0.00.702.522 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.523 I llama_new_context_with_model: freq_scale    = 1
0.00.702.524 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.718.759 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.718.800 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.718.923 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.525 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.529 I llama_new_context_with_model: graph nodes  = 601
0.00.721.529 I llama_new_context_with_model: graph splits = 1
0.00.721.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.523 I main: llama threadpool init, n_threads = 4
0.01.326.536 I 
0.01.326.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.644 I 
0.01.326.875 I sampler seed: 1291099280
0.01.326.888 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.895 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.326.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.896 I 
 seconally.

I'm not sure what I'm doing.
I'm feeling lost.
I'm not sure what to do next

0.14.814.530 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.00 tokens per second)
0.14.814.533 I llama_perf_context_print:        load time =    1325.17 ms
0.14.814.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.814.537 I llama_perf_context_print:        eval time =   13398.12 ms /    32 runs   (  418.69 ms per token,     2.39 tokens per second)
0.14.814.539 I llama_perf_context_print:       total time =   13488.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.589s
user	3m48.969s
sys	0m9.609s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4041 (a797e5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200382.14 ms
main:    total time = 200382.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.001.144 I main: load the model and apply lora adapter, if any
0.00.023.762 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.775 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.895 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.899 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.900 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.901 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.902 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.903 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.916 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.917 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.919 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.920 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.445 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.442 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.704 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.714 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.715 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.716 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.717 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.719 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.720 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.724 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.725 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.726 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.727 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.728 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.736 I llama_model_loader: - type  f32:   37 tensors
0.00.268.739 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.739 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.806 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.985 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.979 I llm_load_vocab: special tokens cache size = 5
0.00.625.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.026 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.028 I llm_load_print_meta: arch             = gemma
0.00.626.028 I llm_load_print_meta: vocab type       = SPM
0.00.626.029 I llm_load_print_meta: n_vocab          = 256000
0.00.626.031 I llm_load_print_meta: n_merges         = 0
0.00.626.032 I llm_load_print_meta: vocab_only       = 0
0.00.626.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.033 I llm_load_print_meta: n_embd           = 2048
0.00.626.033 I llm_load_print_meta: n_layer          = 18
0.00.626.100 I llm_load_print_meta: n_head           = 8
0.00.626.108 I llm_load_print_meta: n_head_kv        = 1
0.00.626.108 I llm_load_print_meta: n_rot            = 256
0.00.626.109 I llm_load_print_meta: n_swa            = 0
0.00.626.109 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.111 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.116 I llm_load_print_meta: n_gqa            = 8
0.00.626.121 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.126 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.128 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.129 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.130 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.139 I llm_load_print_meta: n_ff             = 16384
0.00.626.140 I llm_load_print_meta: n_expert         = 0
0.00.626.140 I llm_load_print_meta: n_expert_used    = 0
0.00.626.144 I llm_load_print_meta: causal attn      = 1
0.00.626.144 I llm_load_print_meta: pooling type     = 0
0.00.626.144 I llm_load_print_meta: rope type        = 2
0.00.626.145 I llm_load_print_meta: rope scaling     = linear
0.00.626.146 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.147 I llm_load_print_meta: freq_scale_train = 1
0.00.626.148 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.148 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.148 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.150 I llm_load_print_meta: model type       = 2B
0.00.626.152 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.626.153 I llm_load_print_meta: model params     = 2.51 B
0.00.626.163 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.626.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.165 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.166 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.167 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.168 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.175 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.175 I llm_load_print_meta: max token length = 93
0.00.689.107 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.689.116 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.689.117 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.689.118 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.689.119 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.689.119 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.695.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.695.067 I llama_new_context_with_model: n_ctx         = 4096
0.00.695.067 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.695.068 I llama_new_context_with_model: n_batch       = 2048
0.00.695.068 I llama_new_context_with_model: n_ubatch      = 512
0.00.695.069 I llama_new_context_with_model: flash_attn    = 0
0.00.695.072 I llama_new_context_with_model: freq_base     = 10000.0
0.00.695.073 I llama_new_context_with_model: freq_scale    = 1
0.00.695.074 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.935 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.711.975 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.096 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.642 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.646 I llama_new_context_with_model: graph nodes  = 601
0.00.714.646 I llama_new_context_with_model: graph splits = 1
0.00.714.672 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.388 I main: llama threadpool init, n_threads = 4
0.01.287.402 I 
0.01.287.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.514 I 
0.01.287.752 I sampler seed: 2594810649
0.01.287.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.770 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.287.774 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.287.774 I 
 seconally.

I. She is the most beautiful woman in the world.
II. She is a celebrity.
III. She is intelligent.


0.12.171.563 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.15 tokens per second)
0.12.171.566 I llama_perf_context_print:        load time =    1286.14 ms
0.12.171.579 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.171.581 I llama_perf_context_print:        eval time =   10793.83 ms /    32 runs   (  337.31 ms per token,     2.96 tokens per second)
0.12.171.582 I llama_perf_context_print:       total time =   10884.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4041 (a797e5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199249.89 ms
main:    total time = 199249.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.001.108 I main: load the model and apply lora adapter, if any
0.00.023.375 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.489 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.506 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.508 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.514 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.516 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.531 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.533 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.534 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.416 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.898 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.912 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.913 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.935 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.940 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.941 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.950 I llama_model_loader: - type  f32:   37 tensors
0.00.267.956 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.957 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.594 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.672 I llm_load_vocab: special tokens cache size = 5
0.00.609.533 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.609 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.610 I llm_load_print_meta: arch             = gemma
0.00.609.611 I llm_load_print_meta: vocab type       = SPM
0.00.609.612 I llm_load_print_meta: n_vocab          = 256000
0.00.609.614 I llm_load_print_meta: n_merges         = 0
0.00.609.615 I llm_load_print_meta: vocab_only       = 0
0.00.609.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.615 I llm_load_print_meta: n_embd           = 2048
0.00.609.616 I llm_load_print_meta: n_layer          = 18
0.00.609.682 I llm_load_print_meta: n_head           = 8
0.00.609.702 I llm_load_print_meta: n_head_kv        = 1
0.00.609.703 I llm_load_print_meta: n_rot            = 256
0.00.609.704 I llm_load_print_meta: n_swa            = 0
0.00.609.705 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.705 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.710 I llm_load_print_meta: n_gqa            = 8
0.00.609.714 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.720 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.722 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.723 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.724 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.724 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.725 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.736 I llm_load_print_meta: n_ff             = 16384
0.00.609.737 I llm_load_print_meta: n_expert         = 0
0.00.609.737 I llm_load_print_meta: n_expert_used    = 0
0.00.609.738 I llm_load_print_meta: causal attn      = 1
0.00.609.738 I llm_load_print_meta: pooling type     = 0
0.00.609.739 I llm_load_print_meta: rope type        = 2
0.00.609.739 I llm_load_print_meta: rope scaling     = linear
0.00.609.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.743 I llm_load_print_meta: freq_scale_train = 1
0.00.609.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.744 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.744 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.745 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.745 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.745 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.746 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.746 I llm_load_print_meta: model type       = 2B
0.00.609.747 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.748 I llm_load_print_meta: model params     = 2.51 B
0.00.609.758 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.760 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.763 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.763 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.763 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.764 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.770 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.772 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.772 I llm_load_print_meta: max token length = 93
0.00.668.829 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.674.696 I llama_new_context_with_model: n_seq_max     = 1
0.00.674.704 I llama_new_context_with_model: n_ctx         = 4096
0.00.674.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.674.705 I llama_new_context_with_model: n_batch       = 2048
0.00.674.705 I llama_new_context_with_model: n_ubatch      = 512
0.00.674.706 I llama_new_context_with_model: flash_attn    = 0
0.00.674.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.674.710 I llama_new_context_with_model: freq_scale    = 1
0.00.674.711 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.587 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.634 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.692.764 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.400 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.404 I llama_new_context_with_model: graph nodes  = 601
0.00.695.404 I llama_new_context_with_model: graph splits = 1
0.00.695.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.664 I main: llama threadpool init, n_threads = 4
0.01.267.678 I 
0.01.267.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.790 I 
0.01.268.024 I sampler seed: 3985120783
0.01.268.037 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.043 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.268.046 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.047 I 
 squaRED in the title of the question refers to:

A) A type of plant
B) A type of bacteria
C) A type of fungus

0.12.132.198 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.87 tokens per second)
0.12.132.202 I llama_perf_context_print:        load time =    1266.46 ms
0.12.132.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.132.227 I llama_perf_context_print:        eval time =   10774.15 ms /    32 runs   (  336.69 ms per token,     2.97 tokens per second)
0.12.132.228 I llama_perf_context_print:       total time =   10864.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.903s
user	50m23.447s
sys	0m6.573s
