+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.022.687 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.696 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.704 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.718 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.728 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.466 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.422 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.428 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.429 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.429 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.430 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.431 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.431 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.434 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.435 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.436 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.437 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.438 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.441 I llama_model_loader: - type  f32:   37 tensors
0.00.133.442 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.238 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.740 I llm_load_vocab: special tokens cache size = 5
0.00.274.556 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.573 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.573 I llm_load_print_meta: arch             = gemma
0.00.274.574 I llm_load_print_meta: vocab type       = SPM
0.00.274.575 I llm_load_print_meta: n_vocab          = 256000
0.00.274.575 I llm_load_print_meta: n_merges         = 0
0.00.274.577 I llm_load_print_meta: vocab_only       = 0
0.00.274.579 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.580 I llm_load_print_meta: n_embd           = 2048
0.00.274.580 I llm_load_print_meta: n_layer          = 18
0.00.274.592 I llm_load_print_meta: n_head           = 8
0.00.274.593 I llm_load_print_meta: n_head_kv        = 1
0.00.274.593 I llm_load_print_meta: n_rot            = 256
0.00.274.594 I llm_load_print_meta: n_swa            = 0
0.00.274.594 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.594 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.595 I llm_load_print_meta: n_gqa            = 8
0.00.274.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.597 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.598 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.599 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.599 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.600 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.600 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.601 I llm_load_print_meta: n_ff             = 16384
0.00.274.601 I llm_load_print_meta: n_expert         = 0
0.00.274.602 I llm_load_print_meta: n_expert_used    = 0
0.00.274.602 I llm_load_print_meta: causal attn      = 1
0.00.274.603 I llm_load_print_meta: pooling type     = 0
0.00.274.603 I llm_load_print_meta: rope type        = 2
0.00.274.604 I llm_load_print_meta: rope scaling     = linear
0.00.274.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.606 I llm_load_print_meta: freq_scale_train = 1
0.00.274.606 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.606 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.608 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.609 I llm_load_print_meta: model type       = 2B
0.00.274.610 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.611 I llm_load_print_meta: model params     = 2.51 B
0.00.274.612 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.612 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.615 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.615 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.616 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.616 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.617 I llm_load_print_meta: max token length = 93
0.00.375.898 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.375.907 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.375.908 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.375.909 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.375.909 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.375.910 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.208 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.214 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.214 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.215 I llama_new_context_with_model: n_batch       = 2048
0.00.381.215 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.215 I llama_new_context_with_model: flash_attn    = 0
0.00.381.217 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.218 I llama_new_context_with_model: freq_scale    = 1
0.00.381.219 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.246 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.261 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.602 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.608 I llama_new_context_with_model: graph nodes  = 601
0.00.397.608 I llama_new_context_with_model: graph splits = 1
0.00.397.610 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.360 I main: llama threadpool init, n_threads = 4
0.00.482.373 I 
0.00.482.446 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.450 I 
0.00.482.490 I sampler seed: 3367096196
0.00.482.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.504 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.504 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.505 I 
 increasities. 

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions within the parameters

0.02.739.106 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6711.41 tokens per second)
0.02.739.108 I llama_perf_context_print:        load time =     481.44 ms
0.02.739.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.739.111 I llama_perf_context_print:        eval time =    2236.87 ms /    32 runs   (   69.90 ms per token,    14.31 tokens per second)
0.02.739.112 I llama_perf_context_print:       total time =    2256.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.688 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.918 I main: llama backend init
0.00.001.054 I main: load the model and apply lora adapter, if any
0.00.021.659 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.672 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.682 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.684 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.688 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.689 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.690 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.691 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.696 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.697 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.698 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.698 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.329 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.122 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.973 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.974 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.975 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.976 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.977 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.981 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.982 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.984 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.985 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.989 I llama_model_loader: - type  f32:   37 tensors
0.00.131.990 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.683 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.444 I llm_load_vocab: special tokens cache size = 5
0.00.277.142 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.159 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.159 I llm_load_print_meta: arch             = gemma
0.00.277.160 I llm_load_print_meta: vocab type       = SPM
0.00.277.160 I llm_load_print_meta: n_vocab          = 256000
0.00.277.161 I llm_load_print_meta: n_merges         = 0
0.00.277.161 I llm_load_print_meta: vocab_only       = 0
0.00.277.162 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.162 I llm_load_print_meta: n_embd           = 2048
0.00.277.162 I llm_load_print_meta: n_layer          = 18
0.00.277.175 I llm_load_print_meta: n_head           = 8
0.00.277.176 I llm_load_print_meta: n_head_kv        = 1
0.00.277.176 I llm_load_print_meta: n_rot            = 256
0.00.277.177 I llm_load_print_meta: n_swa            = 0
0.00.277.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.178 I llm_load_print_meta: n_gqa            = 8
0.00.277.179 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.180 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.182 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.184 I llm_load_print_meta: n_ff             = 16384
0.00.277.184 I llm_load_print_meta: n_expert         = 0
0.00.277.185 I llm_load_print_meta: n_expert_used    = 0
0.00.277.185 I llm_load_print_meta: causal attn      = 1
0.00.277.185 I llm_load_print_meta: pooling type     = 0
0.00.277.186 I llm_load_print_meta: rope type        = 2
0.00.277.186 I llm_load_print_meta: rope scaling     = linear
0.00.277.187 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.188 I llm_load_print_meta: freq_scale_train = 1
0.00.277.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.189 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.190 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.190 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.191 I llm_load_print_meta: model type       = 2B
0.00.277.191 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.192 I llm_load_print_meta: model params     = 2.51 B
0.00.277.193 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.193 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.193 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.194 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.195 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.195 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.196 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.196 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.196 I llm_load_print_meta: max token length = 93
0.00.372.380 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.377.583 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.589 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.589 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.590 I llama_new_context_with_model: n_batch       = 2048
0.00.377.590 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.591 I llama_new_context_with_model: flash_attn    = 0
0.00.377.593 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.594 I llama_new_context_with_model: freq_scale    = 1
0.00.377.595 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.671 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.687 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.780 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.980 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.986 I llama_new_context_with_model: graph nodes  = 601
0.00.394.986 I llama_new_context_with_model: graph splits = 1
0.00.394.988 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.276 I main: llama threadpool init, n_threads = 4
0.00.477.291 I 
0.00.477.367 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.370 I 
0.00.477.415 I sampler seed: 1264967876
0.00.477.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.431 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.432 I 
 increably.

I am unable to find the requested information. Please check your search parameters and try again. [end of text]


0.02.073.082 I llama_perf_sampler_print:    sampling time =       3.58 ms /    24 runs   (    0.15 ms per token,  6705.78 tokens per second)
0.02.073.085 I llama_perf_context_print:        load time =     476.20 ms
0.02.073.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.073.088 I llama_perf_context_print:        eval time =    1582.02 ms /    23 runs   (   68.78 ms per token,    14.54 tokens per second)
0.02.073.089 I llama_perf_context_print:       total time =    1595.81 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.929 I main: load the model and apply lora adapter, if any
0.00.023.782 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.792 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.799 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.805 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.806 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.813 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.821 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.827 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.828 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.829 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.830 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.832 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.709 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.189 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.025 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.033 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.033 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.034 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.036 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.039 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.040 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.040 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.041 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.042 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.048 I llama_model_loader: - type  f32:   37 tensors
0.00.135.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.077 I llm_load_vocab: special tokens cache size = 5
0.00.287.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.337 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.338 I llm_load_print_meta: arch             = gemma
0.00.287.339 I llm_load_print_meta: vocab type       = SPM
0.00.287.339 I llm_load_print_meta: n_vocab          = 256000
0.00.287.340 I llm_load_print_meta: n_merges         = 0
0.00.287.340 I llm_load_print_meta: vocab_only       = 0
0.00.287.341 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.341 I llm_load_print_meta: n_embd           = 2048
0.00.287.341 I llm_load_print_meta: n_layer          = 18
0.00.287.353 I llm_load_print_meta: n_head           = 8
0.00.287.354 I llm_load_print_meta: n_head_kv        = 1
0.00.287.354 I llm_load_print_meta: n_rot            = 256
0.00.287.354 I llm_load_print_meta: n_swa            = 0
0.00.287.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.356 I llm_load_print_meta: n_gqa            = 8
0.00.287.357 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.358 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.360 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.360 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.361 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.361 I llm_load_print_meta: n_ff             = 16384
0.00.287.362 I llm_load_print_meta: n_expert         = 0
0.00.287.362 I llm_load_print_meta: n_expert_used    = 0
0.00.287.362 I llm_load_print_meta: causal attn      = 1
0.00.287.363 I llm_load_print_meta: pooling type     = 0
0.00.287.363 I llm_load_print_meta: rope type        = 2
0.00.287.364 I llm_load_print_meta: rope scaling     = linear
0.00.287.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.366 I llm_load_print_meta: freq_scale_train = 1
0.00.287.366 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.367 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.367 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.367 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.368 I llm_load_print_meta: model type       = 2B
0.00.287.369 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.370 I llm_load_print_meta: model params     = 2.51 B
0.00.287.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.373 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.374 I llm_load_print_meta: max token length = 93
0.00.377.830 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.377.837 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.377.838 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.377.838 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.377.839 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.377.840 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.383.122 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.129 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.129 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.129 I llama_new_context_with_model: n_batch       = 2048
0.00.383.130 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.130 I llama_new_context_with_model: flash_attn    = 0
0.00.383.133 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.134 I llama_new_context_with_model: freq_scale    = 1
0.00.383.135 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.827 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.843 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.934 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.172 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.179 I llama_new_context_with_model: graph nodes  = 601
0.00.400.179 I llama_new_context_with_model: graph splits = 1
0.00.400.181 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.397 I main: llama threadpool init, n_threads = 4
0.00.492.415 I 
0.00.492.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.510 I 
0.00.492.563 I sampler seed: 3788031147
0.00.492.578 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.585 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.585 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.586 I 
 increasities. [end of text]


0.00.769.519 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7911.39 tokens per second)
0.00.769.522 I llama_perf_context_print:        load time =     491.44 ms
0.00.769.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.769.525 I llama_perf_context_print:        eval time =     273.86 ms /     4 runs   (   68.46 ms per token,    14.61 tokens per second)
0.00.769.526 I llama_perf_context_print:       total time =     277.13 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.559 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.021.216 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.227 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.241 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.250 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.250 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.251 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.257 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.258 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.752 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.788 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.796 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.797 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.798 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.799 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.801 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.802 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.802 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.803 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.804 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.807 I llama_model_loader: - type  f32:   37 tensors
0.00.131.808 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.975 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.681 I llm_load_vocab: special tokens cache size = 5
0.00.279.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.821 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.822 I llm_load_print_meta: arch             = gemma
0.00.279.822 I llm_load_print_meta: vocab type       = SPM
0.00.279.824 I llm_load_print_meta: n_vocab          = 256000
0.00.279.824 I llm_load_print_meta: n_merges         = 0
0.00.279.824 I llm_load_print_meta: vocab_only       = 0
0.00.279.825 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.825 I llm_load_print_meta: n_embd           = 2048
0.00.279.825 I llm_load_print_meta: n_layer          = 18
0.00.279.836 I llm_load_print_meta: n_head           = 8
0.00.279.837 I llm_load_print_meta: n_head_kv        = 1
0.00.279.838 I llm_load_print_meta: n_rot            = 256
0.00.279.838 I llm_load_print_meta: n_swa            = 0
0.00.279.838 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.839 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.840 I llm_load_print_meta: n_gqa            = 8
0.00.279.841 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.842 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.843 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.844 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.844 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.845 I llm_load_print_meta: n_ff             = 16384
0.00.279.846 I llm_load_print_meta: n_expert         = 0
0.00.279.846 I llm_load_print_meta: n_expert_used    = 0
0.00.279.846 I llm_load_print_meta: causal attn      = 1
0.00.279.847 I llm_load_print_meta: pooling type     = 0
0.00.279.847 I llm_load_print_meta: rope type        = 2
0.00.279.847 I llm_load_print_meta: rope scaling     = linear
0.00.279.849 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.849 I llm_load_print_meta: freq_scale_train = 1
0.00.279.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.851 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.851 I llm_load_print_meta: model type       = 2B
0.00.279.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.853 I llm_load_print_meta: model params     = 2.51 B
0.00.279.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.855 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.856 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.857 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.857 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.857 I llm_load_print_meta: max token length = 93
0.00.351.364 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.351.371 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.356.601 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.608 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.608 I llama_new_context_with_model: n_batch       = 2048
0.00.356.609 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.609 I llama_new_context_with_model: flash_attn    = 0
0.00.356.612 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.613 I llama_new_context_with_model: freq_scale    = 1
0.00.356.614 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.761 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.866 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.092 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.097 I llama_new_context_with_model: graph nodes  = 601
0.00.373.098 I llama_new_context_with_model: graph splits = 1
0.00.373.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.247 I main: llama threadpool init, n_threads = 4
0.00.461.263 I 
0.00.461.340 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.343 I 
0.00.461.388 I sampler seed: 294325280
0.00.461.400 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.402 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.404 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.404 I 
 increasities, the ancient magic that binds the world together.

**The Weaver's Hand:**

The Weaver's Hand is a powerful artifact imbued with

0.02.861.361 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6519.16 tokens per second)
0.02.861.364 I llama_perf_context_print:        load time =     460.33 ms
0.02.861.365 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.861.367 I llama_perf_context_print:        eval time =    2380.77 ms /    32 runs   (   74.40 ms per token,    13.44 tokens per second)
0.02.861.368 I llama_perf_context_print:       total time =    2400.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.960s
user	0m29.025s
sys	0m9.466s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4041 (a797e5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32075.01 ms
main:    total time = 32075.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.455 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.685 I main: llama backend init
0.00.000.830 I main: load the model and apply lora adapter, if any
0.00.021.519 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.529 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.553 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.557 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.558 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.559 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.560 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.561 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.562 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.566 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.567 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.568 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.569 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.569 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.386 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.329 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.191 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.198 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.199 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.205 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.207 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.207 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.208 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.209 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.213 I llama_model_loader: - type  f32:   37 tensors
0.00.132.214 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.215 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.058 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.362 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.000 I llm_load_vocab: special tokens cache size = 5
0.00.269.856 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.873 I llm_load_print_meta: arch             = gemma
0.00.269.874 I llm_load_print_meta: vocab type       = SPM
0.00.269.874 I llm_load_print_meta: n_vocab          = 256000
0.00.269.875 I llm_load_print_meta: n_merges         = 0
0.00.269.875 I llm_load_print_meta: vocab_only       = 0
0.00.269.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.876 I llm_load_print_meta: n_embd           = 2048
0.00.269.876 I llm_load_print_meta: n_layer          = 18
0.00.269.888 I llm_load_print_meta: n_head           = 8
0.00.269.891 I llm_load_print_meta: n_head_kv        = 1
0.00.269.894 I llm_load_print_meta: n_rot            = 256
0.00.269.894 I llm_load_print_meta: n_swa            = 0
0.00.269.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.897 I llm_load_print_meta: n_gqa            = 8
0.00.269.898 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.899 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.900 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.903 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.903 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.904 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.904 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.906 I llm_load_print_meta: n_ff             = 16384
0.00.269.906 I llm_load_print_meta: n_expert         = 0
0.00.269.907 I llm_load_print_meta: n_expert_used    = 0
0.00.269.910 I llm_load_print_meta: causal attn      = 1
0.00.269.910 I llm_load_print_meta: pooling type     = 0
0.00.269.911 I llm_load_print_meta: rope type        = 2
0.00.269.911 I llm_load_print_meta: rope scaling     = linear
0.00.269.913 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.914 I llm_load_print_meta: freq_scale_train = 1
0.00.269.914 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.915 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.916 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.916 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.916 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.919 I llm_load_print_meta: model type       = 2B
0.00.269.920 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.922 I llm_load_print_meta: model params     = 2.51 B
0.00.269.923 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.924 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.924 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.925 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.926 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.929 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.931 I llm_load_print_meta: max token length = 93
0.00.331.485 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.493 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.494 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.495 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.495 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.496 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.039 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.046 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.047 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.047 I llama_new_context_with_model: n_batch       = 2048
0.00.337.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.048 I llama_new_context_with_model: flash_attn    = 0
0.00.337.050 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.051 I llama_new_context_with_model: freq_scale    = 1
0.00.337.052 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.045 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.062 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.166 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.444 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.450 I llama_new_context_with_model: graph nodes  = 601
0.00.354.451 I llama_new_context_with_model: graph splits = 1
0.00.354.453 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.583 I main: llama threadpool init, n_threads = 4
0.00.431.595 I 
0.00.431.686 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.690 I 
0.00.431.736 I sampler seed: 219923258
0.00.431.748 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.751 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.753 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.753 I 
 increasively. 😅 [end of text]


0.00.692.419 I llama_perf_sampler_print:    sampling time =       0.79 ms /     6 runs   (    0.13 ms per token,  7643.31 tokens per second)
0.00.692.421 I llama_perf_context_print:        load time =     430.73 ms
0.00.692.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.692.425 I llama_perf_context_print:        eval time =     257.04 ms /     5 runs   (   51.41 ms per token,    19.45 tokens per second)
0.00.692.426 I llama_perf_context_print:       total time =     260.84 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4041 (a797e5d7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32209.06 ms
main:    total time = 32209.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.608 I build: 4041 (a797e5d7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.000.950 I main: load the model and apply lora adapter, if any
0.00.021.674 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.688 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.696 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.697 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.702 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.712 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.714 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.714 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.320 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.002 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.008 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.009 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.009 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.010 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.011 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.011 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.014 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.014 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.018 I llama_model_loader: - type  f32:   37 tensors
0.00.132.019 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.019 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.413 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.654 I llm_load_vocab: special tokens cache size = 5
0.00.286.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.584 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.584 I llm_load_print_meta: arch             = gemma
0.00.286.585 I llm_load_print_meta: vocab type       = SPM
0.00.286.585 I llm_load_print_meta: n_vocab          = 256000
0.00.286.586 I llm_load_print_meta: n_merges         = 0
0.00.286.586 I llm_load_print_meta: vocab_only       = 0
0.00.286.587 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.588 I llm_load_print_meta: n_embd           = 2048
0.00.286.589 I llm_load_print_meta: n_layer          = 18
0.00.286.601 I llm_load_print_meta: n_head           = 8
0.00.286.602 I llm_load_print_meta: n_head_kv        = 1
0.00.286.602 I llm_load_print_meta: n_rot            = 256
0.00.286.604 I llm_load_print_meta: n_swa            = 0
0.00.286.604 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.606 I llm_load_print_meta: n_gqa            = 8
0.00.286.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.614 I llm_load_print_meta: n_ff             = 16384
0.00.286.614 I llm_load_print_meta: n_expert         = 0
0.00.286.615 I llm_load_print_meta: n_expert_used    = 0
0.00.286.615 I llm_load_print_meta: causal attn      = 1
0.00.286.616 I llm_load_print_meta: pooling type     = 0
0.00.286.616 I llm_load_print_meta: rope type        = 2
0.00.286.616 I llm_load_print_meta: rope scaling     = linear
0.00.286.621 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.621 I llm_load_print_meta: freq_scale_train = 1
0.00.286.622 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.623 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.623 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.624 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.624 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.625 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.625 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.626 I llm_load_print_meta: model type       = 2B
0.00.286.626 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.627 I llm_load_print_meta: model params     = 2.51 B
0.00.286.628 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.629 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.629 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.630 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.634 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.634 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.634 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.635 I llm_load_print_meta: max token length = 93
0.00.344.765 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.350.020 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.026 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.027 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.027 I llama_new_context_with_model: n_batch       = 2048
0.00.350.028 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.028 I llama_new_context_with_model: flash_attn    = 0
0.00.350.030 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.031 I llama_new_context_with_model: freq_scale    = 1
0.00.350.032 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.059 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.075 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.166 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.413 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.419 I llama_new_context_with_model: graph nodes  = 601
0.00.367.420 I llama_new_context_with_model: graph splits = 1
0.00.367.422 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.992 I main: llama threadpool init, n_threads = 4
0.00.442.006 I 
0.00.442.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.083 I 
0.00.442.124 I sampler seed: 2059978104
0.00.442.135 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.138 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.138 I 
 increasities and anxieties that often accompany the decision to have an abortion.

**Answer the following questions based on the provided information:**

a) What are the

0.02.045.055 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6550.22 tokens per second)
0.02.045.058 I llama_perf_context_print:        load time =     441.02 ms
0.02.045.059 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.060 I llama_perf_context_print:        eval time =    1583.78 ms /    32 runs   (   49.49 ms per token,    20.20 tokens per second)
0.02.045.061 I llama_perf_context_print:       total time =    1603.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.062s
user	8m9.861s
sys	0m6.839s
