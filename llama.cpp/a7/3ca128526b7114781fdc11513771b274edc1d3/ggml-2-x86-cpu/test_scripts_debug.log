+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.001.128 I main: load the model and apply lora adapter, if any
0.00.023.667 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.676 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.772 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.776 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.777 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.778 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.782 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.794 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.795 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.796 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.797 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.339 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.492 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.512 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.513 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.514 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.522 I llama_model_loader: - type  f32:   37 tensors
0.00.265.524 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.562 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.354 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.265 I llm_load_vocab: special tokens cache size = 5
0.00.590.679 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.751 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.753 I llm_load_print_meta: arch             = gemma
0.00.590.754 I llm_load_print_meta: vocab type       = SPM
0.00.590.755 I llm_load_print_meta: n_vocab          = 256000
0.00.590.757 I llm_load_print_meta: n_merges         = 0
0.00.590.758 I llm_load_print_meta: vocab_only       = 0
0.00.590.758 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.759 I llm_load_print_meta: n_embd           = 2048
0.00.590.759 I llm_load_print_meta: n_layer          = 18
0.00.590.832 I llm_load_print_meta: n_head           = 8
0.00.590.841 I llm_load_print_meta: n_head_kv        = 1
0.00.590.841 I llm_load_print_meta: n_rot            = 256
0.00.590.841 I llm_load_print_meta: n_swa            = 0
0.00.590.842 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.842 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.847 I llm_load_print_meta: n_gqa            = 8
0.00.590.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.857 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.859 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.859 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.860 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.865 I llm_load_print_meta: n_ff             = 16384
0.00.590.865 I llm_load_print_meta: n_expert         = 0
0.00.590.866 I llm_load_print_meta: n_expert_used    = 0
0.00.590.866 I llm_load_print_meta: causal attn      = 1
0.00.590.866 I llm_load_print_meta: pooling type     = 0
0.00.590.867 I llm_load_print_meta: rope type        = 2
0.00.590.868 I llm_load_print_meta: rope scaling     = linear
0.00.590.885 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.887 I llm_load_print_meta: freq_scale_train = 1
0.00.590.887 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.888 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.888 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.888 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.889 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.889 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.889 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.890 I llm_load_print_meta: model type       = 2B
0.00.590.891 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.892 I llm_load_print_meta: model params     = 2.51 B
0.00.590.901 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.902 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.902 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.903 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.904 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.904 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.905 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.906 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.914 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.914 I llm_load_print_meta: max token length = 93
0.00.693.979 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.693.989 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.693.990 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.693.991 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.693.992 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.693.993 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.699.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.812 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.812 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.813 I llama_new_context_with_model: n_batch       = 2048
0.00.699.813 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.813 I llama_new_context_with_model: flash_attn    = 0
0.00.699.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.817 I llama_new_context_with_model: freq_scale    = 1
0.00.699.817 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.892 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.930 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.716.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.626 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.630 I llama_new_context_with_model: graph nodes  = 601
0.00.718.631 I llama_new_context_with_model: graph splits = 1
0.00.718.656 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.712 I main: llama threadpool init, n_threads = 4
0.01.324.724 I 
0.01.324.830 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.834 I 
0.01.325.062 I sampler seed: 2117146242
0.01.325.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.082 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.325.085 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.085 I 
 increabling.

**What is the meaning of the given sentence?**

The given sentence is not provided to me, so I am unable to extract the

0.14.796.166 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.08 tokens per second)
0.14.796.183 I llama_perf_context_print:        load time =    1323.49 ms
0.14.796.185 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.796.187 I llama_perf_context_print:        eval time =   13380.78 ms /    32 runs   (  418.15 ms per token,     2.39 tokens per second)
0.14.796.188 I llama_perf_context_print:       total time =   13471.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.001.101 I main: load the model and apply lora adapter, if any
0.00.023.179 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.295 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.315 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.319 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.320 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.327 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.329 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.088 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.861 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.195 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.204 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.205 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.206 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.207 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.208 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.219 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.225 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.227 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.228 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.230 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.231 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.238 I llama_model_loader: - type  f32:   37 tensors
0.00.265.241 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.317 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.897 I llm_load_vocab: special tokens cache size = 5
0.00.603.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.736 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.737 I llm_load_print_meta: arch             = gemma
0.00.603.737 I llm_load_print_meta: vocab type       = SPM
0.00.603.738 I llm_load_print_meta: n_vocab          = 256000
0.00.603.741 I llm_load_print_meta: n_merges         = 0
0.00.603.742 I llm_load_print_meta: vocab_only       = 0
0.00.603.742 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.743 I llm_load_print_meta: n_embd           = 2048
0.00.603.743 I llm_load_print_meta: n_layer          = 18
0.00.603.809 I llm_load_print_meta: n_head           = 8
0.00.603.816 I llm_load_print_meta: n_head_kv        = 1
0.00.603.817 I llm_load_print_meta: n_rot            = 256
0.00.603.818 I llm_load_print_meta: n_swa            = 0
0.00.603.818 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.824 I llm_load_print_meta: n_gqa            = 8
0.00.603.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.849 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.851 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.851 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.852 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.852 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.858 I llm_load_print_meta: n_ff             = 16384
0.00.603.868 I llm_load_print_meta: n_expert         = 0
0.00.603.869 I llm_load_print_meta: n_expert_used    = 0
0.00.603.869 I llm_load_print_meta: causal attn      = 1
0.00.603.870 I llm_load_print_meta: pooling type     = 0
0.00.603.870 I llm_load_print_meta: rope type        = 2
0.00.603.871 I llm_load_print_meta: rope scaling     = linear
0.00.603.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.873 I llm_load_print_meta: freq_scale_train = 1
0.00.603.874 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.874 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.874 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.888 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.889 I llm_load_print_meta: model type       = 2B
0.00.603.890 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.891 I llm_load_print_meta: model params     = 2.51 B
0.00.603.901 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.901 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.902 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.902 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.910 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.911 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.919 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.927 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.934 I llm_load_print_meta: max token length = 93
0.00.701.214 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.707.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.067 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.067 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.068 I llama_new_context_with_model: n_batch       = 2048
0.00.707.068 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.069 I llama_new_context_with_model: flash_attn    = 0
0.00.707.072 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.072 I llama_new_context_with_model: freq_scale    = 1
0.00.707.073 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.953 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.992 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.626 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.630 I llama_new_context_with_model: graph nodes  = 601
0.00.726.631 I llama_new_context_with_model: graph splits = 1
0.00.726.654 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.334.399 I main: llama threadpool init, n_threads = 4
0.01.334.413 I 
0.01.334.520 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.334.524 I 
0.01.334.761 I sampler seed: 2362003296
0.01.334.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.781 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.782 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.782 I 
 increably.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.09.420.632 I llama_perf_sampler_print:    sampling time =      29.12 ms /    20 runs   (    1.46 ms per token,   686.74 tokens per second)
0.09.420.635 I llama_perf_context_print:        load time =    1333.20 ms
0.09.420.637 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.420.639 I llama_perf_context_print:        eval time =    8032.32 ms /    19 runs   (  422.75 ms per token,     2.37 tokens per second)
0.09.420.640 I llama_perf_context_print:       total time =    8086.24 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.025.378 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.389 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.510 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.519 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.525 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.527 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.528 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.530 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.545 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.547 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.549 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.550 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.406 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.748 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.761 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.762 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.763 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.766 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.767 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.768 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.769 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.278.770 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.778 I llama_model_loader: - type  f32:   37 tensors
0.00.278.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.681 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.459 I llm_load_vocab: special tokens cache size = 5
0.00.616.902 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.979 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.979 I llm_load_print_meta: arch             = gemma
0.00.616.980 I llm_load_print_meta: vocab type       = SPM
0.00.616.981 I llm_load_print_meta: n_vocab          = 256000
0.00.616.984 I llm_load_print_meta: n_merges         = 0
0.00.616.984 I llm_load_print_meta: vocab_only       = 0
0.00.616.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.985 I llm_load_print_meta: n_embd           = 2048
0.00.616.985 I llm_load_print_meta: n_layer          = 18
0.00.617.053 I llm_load_print_meta: n_head           = 8
0.00.617.064 I llm_load_print_meta: n_head_kv        = 1
0.00.617.064 I llm_load_print_meta: n_rot            = 256
0.00.617.065 I llm_load_print_meta: n_swa            = 0
0.00.617.066 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.067 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.073 I llm_load_print_meta: n_gqa            = 8
0.00.617.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.094 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.096 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.097 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.104 I llm_load_print_meta: n_ff             = 16384
0.00.617.105 I llm_load_print_meta: n_expert         = 0
0.00.617.106 I llm_load_print_meta: n_expert_used    = 0
0.00.617.108 I llm_load_print_meta: causal attn      = 1
0.00.617.109 I llm_load_print_meta: pooling type     = 0
0.00.617.110 I llm_load_print_meta: rope type        = 2
0.00.617.111 I llm_load_print_meta: rope scaling     = linear
0.00.617.124 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.127 I llm_load_print_meta: freq_scale_train = 1
0.00.617.127 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.128 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.134 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.134 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.135 I llm_load_print_meta: model type       = 2B
0.00.617.144 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.145 I llm_load_print_meta: model params     = 2.51 B
0.00.617.157 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.160 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.173 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.177 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.192 I llm_load_print_meta: max token length = 93
0.00.715.465 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.715.474 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.715.475 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.715.476 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.715.476 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.715.477 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.721.615 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.623 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.623 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.623 I llama_new_context_with_model: n_batch       = 2048
0.00.721.624 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.624 I llama_new_context_with_model: flash_attn    = 0
0.00.721.627 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.628 I llama_new_context_with_model: freq_scale    = 1
0.00.721.629 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.256 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.298 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.057 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.061 I llama_new_context_with_model: graph nodes  = 601
0.00.741.061 I llama_new_context_with_model: graph splits = 1
0.00.741.087 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.097 I main: llama threadpool init, n_threads = 4
0.01.367.111 I 
0.01.367.230 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.234 I 
0.01.367.486 I sampler seed: 3682348465
0.01.367.499 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.507 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.367.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.512 I 
 increasively.

I'm so excited about this new opportunity to work with you!

I'm eager to learn more about your company and your products

0.14.813.063 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.68 tokens per second)
0.14.813.067 I llama_perf_context_print:        load time =    1365.87 ms
0.14.813.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.813.094 I llama_perf_context_print:        eval time =   13356.24 ms /    32 runs   (  417.38 ms per token,     2.40 tokens per second)
0.14.813.098 I llama_perf_context_print:       total time =   13445.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.122 I main: load the model and apply lora adapter, if any
0.00.023.351 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.362 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.469 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.475 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.489 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.494 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.513 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.515 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.426 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.435 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.437 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.440 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.442 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.448 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.449 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.450 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.457 I llama_model_loader: - type  f32:   37 tensors
0.00.265.460 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.514 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.203 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.111 I llm_load_vocab: special tokens cache size = 5
0.00.615.672 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.739 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.740 I llm_load_print_meta: arch             = gemma
0.00.615.741 I llm_load_print_meta: vocab type       = SPM
0.00.615.742 I llm_load_print_meta: n_vocab          = 256000
0.00.615.744 I llm_load_print_meta: n_merges         = 0
0.00.615.744 I llm_load_print_meta: vocab_only       = 0
0.00.615.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.745 I llm_load_print_meta: n_embd           = 2048
0.00.615.746 I llm_load_print_meta: n_layer          = 18
0.00.615.807 I llm_load_print_meta: n_head           = 8
0.00.615.835 I llm_load_print_meta: n_head_kv        = 1
0.00.615.837 I llm_load_print_meta: n_rot            = 256
0.00.615.837 I llm_load_print_meta: n_swa            = 0
0.00.615.839 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.840 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.849 I llm_load_print_meta: n_gqa            = 8
0.00.615.855 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.864 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.866 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.876 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.884 I llm_load_print_meta: n_ff             = 16384
0.00.615.886 I llm_load_print_meta: n_expert         = 0
0.00.615.887 I llm_load_print_meta: n_expert_used    = 0
0.00.615.888 I llm_load_print_meta: causal attn      = 1
0.00.615.892 I llm_load_print_meta: pooling type     = 0
0.00.615.893 I llm_load_print_meta: rope type        = 2
0.00.615.893 I llm_load_print_meta: rope scaling     = linear
0.00.615.896 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.897 I llm_load_print_meta: freq_scale_train = 1
0.00.615.897 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.898 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.898 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.899 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.900 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.901 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.905 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.906 I llm_load_print_meta: model type       = 2B
0.00.615.908 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.909 I llm_load_print_meta: model params     = 2.51 B
0.00.615.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.923 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.934 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.941 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.944 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.944 I llm_load_print_meta: max token length = 93
0.00.689.294 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.689.301 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.695.339 I llama_new_context_with_model: n_seq_max     = 1
0.00.695.346 I llama_new_context_with_model: n_ctx         = 4096
0.00.695.347 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.695.347 I llama_new_context_with_model: n_batch       = 2048
0.00.695.348 I llama_new_context_with_model: n_ubatch      = 512
0.00.695.348 I llama_new_context_with_model: flash_attn    = 0
0.00.695.351 I llama_new_context_with_model: freq_base     = 10000.0
0.00.695.351 I llama_new_context_with_model: freq_scale    = 1
0.00.695.352 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.243 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.278 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.404 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.961 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.714.965 I llama_new_context_with_model: graph nodes  = 601
0.00.714.965 I llama_new_context_with_model: graph splits = 1
0.00.714.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.321.844 I main: llama threadpool init, n_threads = 4
0.01.321.858 I 
0.01.321.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.321.979 I 
0.01.322.216 I sampler seed: 3969069305
0.01.322.229 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.238 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.242 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.243 I 
 increamically.

I am a large language model and I am able to generate human-quality text. I am also able to understand and respond to your questions

0.14.779.107 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.45 tokens per second)
0.14.779.127 I llama_perf_context_print:        load time =    1320.62 ms
0.14.779.129 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.779.131 I llama_perf_context_print:        eval time =   13366.95 ms /    32 runs   (  417.72 ms per token,     2.39 tokens per second)
0.14.779.132 I llama_perf_context_print:       total time =   13457.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.450s
user	3m26.518s
sys	0m9.504s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (a73ca128)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198885.17 ms
main:    total time = 198885.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.117 I main: load the model and apply lora adapter, if any
0.00.024.496 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.506 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.595 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.606 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.608 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.612 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.614 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.615 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.627 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.628 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.439 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.440 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.926 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.927 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.928 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.938 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.947 I llama_model_loader: - type  f32:   37 tensors
0.00.266.949 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.950 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.702 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.384 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.295 I llm_load_vocab: special tokens cache size = 5
0.00.615.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.461 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.462 I llm_load_print_meta: arch             = gemma
0.00.615.463 I llm_load_print_meta: vocab type       = SPM
0.00.615.464 I llm_load_print_meta: n_vocab          = 256000
0.00.615.466 I llm_load_print_meta: n_merges         = 0
0.00.615.467 I llm_load_print_meta: vocab_only       = 0
0.00.615.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.467 I llm_load_print_meta: n_embd           = 2048
0.00.615.468 I llm_load_print_meta: n_layer          = 18
0.00.615.532 I llm_load_print_meta: n_head           = 8
0.00.615.539 I llm_load_print_meta: n_head_kv        = 1
0.00.615.540 I llm_load_print_meta: n_rot            = 256
0.00.615.540 I llm_load_print_meta: n_swa            = 0
0.00.615.540 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.541 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.545 I llm_load_print_meta: n_gqa            = 8
0.00.615.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.554 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.565 I llm_load_print_meta: n_ff             = 16384
0.00.615.575 I llm_load_print_meta: n_expert         = 0
0.00.615.576 I llm_load_print_meta: n_expert_used    = 0
0.00.615.576 I llm_load_print_meta: causal attn      = 1
0.00.615.576 I llm_load_print_meta: pooling type     = 0
0.00.615.577 I llm_load_print_meta: rope type        = 2
0.00.615.577 I llm_load_print_meta: rope scaling     = linear
0.00.615.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.579 I llm_load_print_meta: freq_scale_train = 1
0.00.615.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.594 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.595 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.595 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.604 I llm_load_print_meta: model type       = 2B
0.00.615.606 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.607 I llm_load_print_meta: model params     = 2.51 B
0.00.615.623 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.630 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.631 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.634 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.635 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.643 I llm_load_print_meta: max token length = 93
0.00.679.485 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.679.495 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.679.496 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.679.497 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.679.498 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.679.499 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.685.455 I llama_new_context_with_model: n_seq_max     = 1
0.00.685.463 I llama_new_context_with_model: n_ctx         = 4096
0.00.685.463 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.685.464 I llama_new_context_with_model: n_batch       = 2048
0.00.685.464 I llama_new_context_with_model: n_ubatch      = 512
0.00.685.464 I llama_new_context_with_model: flash_attn    = 0
0.00.685.467 I llama_new_context_with_model: freq_base     = 10000.0
0.00.685.467 I llama_new_context_with_model: freq_scale    = 1
0.00.685.468 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.702.012 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.702.050 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.702.170 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.722 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.704.726 I llama_new_context_with_model: graph nodes  = 601
0.00.704.727 I llama_new_context_with_model: graph splits = 1
0.00.704.752 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.221 I main: llama threadpool init, n_threads = 4
0.01.274.234 I 
0.01.274.338 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.342 I 
0.01.274.565 I sampler seed: 929105700
0.01.274.577 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.583 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.584 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.585 I 
 encompates several subgenres, each with its own unique characteristics. Here are some of the most prominent subgenres of clothing:

**1. Casual:**


0.12.122.639 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.49 tokens per second)
0.12.122.642 I llama_perf_context_print:        load time =    1273.01 ms
0.12.122.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.122.667 I llama_perf_context_print:        eval time =   10759.32 ms /    32 runs   (  336.23 ms per token,     2.97 tokens per second)
0.12.122.669 I llama_perf_context_print:       total time =   10848.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (a73ca128)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198951.12 ms
main:    total time = 198951.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4017 (a73ca128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.001.160 I main: load the model and apply lora adapter, if any
0.00.023.718 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.828 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.844 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.846 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.851 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.854 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.855 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.856 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.866 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.867 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.868 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.477 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.739 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.749 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.757 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.765 I llama_model_loader: - type  f32:   37 tensors
0.00.265.766 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.767 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.579 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.444 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.311 I llm_load_vocab: special tokens cache size = 5
0.00.596.429 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.496 I llm_load_print_meta: arch             = gemma
0.00.596.497 I llm_load_print_meta: vocab type       = SPM
0.00.596.498 I llm_load_print_meta: n_vocab          = 256000
0.00.596.501 I llm_load_print_meta: n_merges         = 0
0.00.596.502 I llm_load_print_meta: vocab_only       = 0
0.00.596.502 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.502 I llm_load_print_meta: n_embd           = 2048
0.00.596.503 I llm_load_print_meta: n_layer          = 18
0.00.596.567 I llm_load_print_meta: n_head           = 8
0.00.596.574 I llm_load_print_meta: n_head_kv        = 1
0.00.596.575 I llm_load_print_meta: n_rot            = 256
0.00.596.576 I llm_load_print_meta: n_swa            = 0
0.00.596.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.583 I llm_load_print_meta: n_gqa            = 8
0.00.596.608 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.618 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.620 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.622 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.628 I llm_load_print_meta: n_ff             = 16384
0.00.596.629 I llm_load_print_meta: n_expert         = 0
0.00.596.630 I llm_load_print_meta: n_expert_used    = 0
0.00.596.630 I llm_load_print_meta: causal attn      = 1
0.00.596.630 I llm_load_print_meta: pooling type     = 0
0.00.596.631 I llm_load_print_meta: rope type        = 2
0.00.596.632 I llm_load_print_meta: rope scaling     = linear
0.00.596.633 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.634 I llm_load_print_meta: freq_scale_train = 1
0.00.596.635 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.635 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.636 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.636 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.637 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.639 I llm_load_print_meta: model type       = 2B
0.00.596.640 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.641 I llm_load_print_meta: model params     = 2.51 B
0.00.596.651 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.651 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.652 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.653 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.657 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.658 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.658 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.664 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.665 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.666 I llm_load_print_meta: max token length = 93
0.00.657.413 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.663.135 I llama_new_context_with_model: n_seq_max     = 1
0.00.663.141 I llama_new_context_with_model: n_ctx         = 4096
0.00.663.142 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.663.142 I llama_new_context_with_model: n_batch       = 2048
0.00.663.143 I llama_new_context_with_model: n_ubatch      = 512
0.00.663.143 I llama_new_context_with_model: flash_attn    = 0
0.00.663.146 I llama_new_context_with_model: freq_base     = 10000.0
0.00.663.147 I llama_new_context_with_model: freq_scale    = 1
0.00.663.147 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.679.685 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.679.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.679.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.682.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.682.415 I llama_new_context_with_model: graph nodes  = 601
0.00.682.415 I llama_new_context_with_model: graph splits = 1
0.00.682.439 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.253.820 I main: llama threadpool init, n_threads = 4
0.01.253.832 I 
0.01.253.938 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.253.942 I 
0.01.254.173 I sampler seed: 4116568694
0.01.254.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.254.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.254.197 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.254.197 I 
 squared by the sun, creating a fiery spectacle.

This is the description of a fiery spectacle that the sun creates.

I understand that the sun is

0.12.123.147 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.23 tokens per second)
0.12.123.160 I llama_perf_context_print:        load time =    1252.55 ms
0.12.123.162 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.123.165 I llama_perf_context_print:        eval time =   10779.48 ms /    32 runs   (  336.86 ms per token,     2.97 tokens per second)
0.12.123.166 I llama_perf_context_print:       total time =   10869.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.039s
user	50m6.328s
sys	0m6.469s
