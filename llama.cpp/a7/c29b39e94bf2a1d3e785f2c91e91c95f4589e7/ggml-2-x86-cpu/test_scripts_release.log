+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.541 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.367 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.384 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.389 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.390 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.396 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.397 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.398 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.403 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.403 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.596 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.502 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.504 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.505 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.506 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.510 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.511 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.515 I llama_model_loader: - type  f32:   37 tensors
0.00.131.516 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.434 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.475 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.982 I llm_load_vocab: special tokens cache size = 5
0.00.269.110 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.127 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.128 I llm_load_print_meta: arch             = gemma
0.00.269.128 I llm_load_print_meta: vocab type       = SPM
0.00.269.129 I llm_load_print_meta: n_vocab          = 256000
0.00.269.129 I llm_load_print_meta: n_merges         = 0
0.00.269.130 I llm_load_print_meta: vocab_only       = 0
0.00.269.130 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.130 I llm_load_print_meta: n_embd           = 2048
0.00.269.131 I llm_load_print_meta: n_layer          = 18
0.00.269.142 I llm_load_print_meta: n_head           = 8
0.00.269.144 I llm_load_print_meta: n_head_kv        = 1
0.00.269.144 I llm_load_print_meta: n_rot            = 256
0.00.269.144 I llm_load_print_meta: n_swa            = 0
0.00.269.145 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.145 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.146 I llm_load_print_meta: n_gqa            = 8
0.00.269.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.148 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.149 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.149 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.150 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.151 I llm_load_print_meta: n_ff             = 16384
0.00.269.151 I llm_load_print_meta: n_expert         = 0
0.00.269.152 I llm_load_print_meta: n_expert_used    = 0
0.00.269.152 I llm_load_print_meta: causal attn      = 1
0.00.269.152 I llm_load_print_meta: pooling type     = 0
0.00.269.152 I llm_load_print_meta: rope type        = 2
0.00.269.153 I llm_load_print_meta: rope scaling     = linear
0.00.269.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.155 I llm_load_print_meta: freq_scale_train = 1
0.00.269.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.156 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.159 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.159 I llm_load_print_meta: model type       = 2B
0.00.269.160 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.161 I llm_load_print_meta: model params     = 2.51 B
0.00.269.162 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.165 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.166 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.166 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.167 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.167 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.167 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.169 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.169 I llm_load_print_meta: max token length = 93
0.00.369.632 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.639 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.640 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.640 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.641 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.641 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.865 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.866 I llama_new_context_with_model: n_batch       = 2048
0.00.374.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.867 I llama_new_context_with_model: flash_attn    = 0
0.00.374.870 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.871 I llama_new_context_with_model: freq_scale    = 1
0.00.374.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.740 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.755 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.166 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.171 I llama_new_context_with_model: graph nodes  = 601
0.00.390.171 I llama_new_context_with_model: graph splits = 1
0.00.390.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.322 I main: llama threadpool init, n_threads = 4
0.00.490.338 I 
0.00.490.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.490.413 I 
0.00.490.455 I sampler seed: 4168018348
0.00.490.466 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.476 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.480 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.480 I 
 increasements, and other forms of compensation are commonplace in the music industry.

**a) Explain the purpose of compensation in the music industry.**

**b

0.02.743.763 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7015.31 tokens per second)
0.02.743.766 I llama_perf_context_print:        load time =     489.57 ms
0.02.743.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.743.769 I llama_perf_context_print:        eval time =    2233.97 ms /    32 runs   (   69.81 ms per token,    14.32 tokens per second)
0.02.743.770 I llama_perf_context_print:       total time =    2253.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.583 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.800 I main: load the model and apply lora adapter, if any
0.00.021.274 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.290 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.298 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.299 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.306 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.309 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.309 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.310 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.317 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.808 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.303 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.264 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.272 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.273 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.274 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.275 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.281 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.282 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.284 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.288 I llama_model_loader: - type  f32:   37 tensors
0.00.132.290 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.157 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.449 I llm_load_vocab: special tokens cache size = 5
0.00.271.653 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.669 I llm_load_print_meta: arch             = gemma
0.00.271.670 I llm_load_print_meta: vocab type       = SPM
0.00.271.671 I llm_load_print_meta: n_vocab          = 256000
0.00.271.671 I llm_load_print_meta: n_merges         = 0
0.00.271.672 I llm_load_print_meta: vocab_only       = 0
0.00.271.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.672 I llm_load_print_meta: n_embd           = 2048
0.00.271.673 I llm_load_print_meta: n_layer          = 18
0.00.271.684 I llm_load_print_meta: n_head           = 8
0.00.271.685 I llm_load_print_meta: n_head_kv        = 1
0.00.271.686 I llm_load_print_meta: n_rot            = 256
0.00.271.686 I llm_load_print_meta: n_swa            = 0
0.00.271.686 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.686 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.688 I llm_load_print_meta: n_gqa            = 8
0.00.271.689 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.689 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.690 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.692 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.693 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.694 I llm_load_print_meta: n_ff             = 16384
0.00.271.694 I llm_load_print_meta: n_expert         = 0
0.00.271.694 I llm_load_print_meta: n_expert_used    = 0
0.00.271.695 I llm_load_print_meta: causal attn      = 1
0.00.271.695 I llm_load_print_meta: pooling type     = 0
0.00.271.696 I llm_load_print_meta: rope type        = 2
0.00.271.696 I llm_load_print_meta: rope scaling     = linear
0.00.271.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.698 I llm_load_print_meta: freq_scale_train = 1
0.00.271.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.698 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.700 I llm_load_print_meta: model type       = 2B
0.00.271.700 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.701 I llm_load_print_meta: model params     = 2.51 B
0.00.271.702 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.704 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.704 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.705 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.706 I llm_load_print_meta: max token length = 93
0.00.366.559 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.703 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.709 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.709 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.709 I llama_new_context_with_model: n_batch       = 2048
0.00.371.710 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.711 I llama_new_context_with_model: flash_attn    = 0
0.00.371.713 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.714 I llama_new_context_with_model: freq_scale    = 1
0.00.371.715 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.197 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.212 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.298 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.545 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.551 I llama_new_context_with_model: graph nodes  = 601
0.00.387.551 I llama_new_context_with_model: graph splits = 1
0.00.387.553 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.625 I main: llama threadpool init, n_threads = 4
0.00.484.640 I 
0.00.484.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.484.730 I 
0.00.484.783 I sampler seed: 1215772701
0.00.484.793 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.802 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.806 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.807 I 
 increadibly long response that encapsulates the essence of the provided question.

The historical trajectory of the metaverse has been marked by significant advancements in technology, from the

0.02.656.620 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6282.12 tokens per second)
0.02.656.623 I llama_perf_context_print:        load time =     483.80 ms
0.02.656.624 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.656.626 I llama_perf_context_print:        eval time =    2152.63 ms /    32 runs   (   67.27 ms per token,    14.87 tokens per second)
0.02.656.626 I llama_perf_context_print:       total time =    2172.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.020.924 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.933 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.940 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.950 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.951 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.955 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.955 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.956 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.957 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.027 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.608 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.609 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.617 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.617 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.621 I llama_model_loader: - type  f32:   37 tensors
0.00.132.623 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.808 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.652 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.215 I llm_load_vocab: special tokens cache size = 5
0.00.267.247 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.262 I llm_load_print_meta: arch             = gemma
0.00.267.263 I llm_load_print_meta: vocab type       = SPM
0.00.267.264 I llm_load_print_meta: n_vocab          = 256000
0.00.267.264 I llm_load_print_meta: n_merges         = 0
0.00.267.265 I llm_load_print_meta: vocab_only       = 0
0.00.267.265 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.265 I llm_load_print_meta: n_embd           = 2048
0.00.267.266 I llm_load_print_meta: n_layer          = 18
0.00.267.277 I llm_load_print_meta: n_head           = 8
0.00.267.278 I llm_load_print_meta: n_head_kv        = 1
0.00.267.279 I llm_load_print_meta: n_rot            = 256
0.00.267.279 I llm_load_print_meta: n_swa            = 0
0.00.267.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.280 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.282 I llm_load_print_meta: n_gqa            = 8
0.00.267.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.285 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.285 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.287 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.287 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.288 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.288 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.289 I llm_load_print_meta: n_ff             = 16384
0.00.267.289 I llm_load_print_meta: n_expert         = 0
0.00.267.290 I llm_load_print_meta: n_expert_used    = 0
0.00.267.291 I llm_load_print_meta: causal attn      = 1
0.00.267.291 I llm_load_print_meta: pooling type     = 0
0.00.267.291 I llm_load_print_meta: rope type        = 2
0.00.267.292 I llm_load_print_meta: rope scaling     = linear
0.00.267.294 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.294 I llm_load_print_meta: freq_scale_train = 1
0.00.267.295 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.295 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.296 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.296 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.297 I llm_load_print_meta: model type       = 2B
0.00.267.298 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.299 I llm_load_print_meta: model params     = 2.51 B
0.00.267.300 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.301 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.301 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.302 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.303 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.304 I llm_load_print_meta: max token length = 93
0.00.342.742 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.749 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.749 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.750 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.750 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.751 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.926 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.932 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.932 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.933 I llama_new_context_with_model: n_batch       = 2048
0.00.347.933 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.934 I llama_new_context_with_model: flash_attn    = 0
0.00.347.936 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.937 I llama_new_context_with_model: freq_scale    = 1
0.00.347.938 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.287 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.303 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.716 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.721 I llama_new_context_with_model: graph nodes  = 601
0.00.363.722 I llama_new_context_with_model: graph splits = 1
0.00.363.724 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.274 I main: llama threadpool init, n_threads = 4
0.00.463.288 I 
0.00.463.359 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.362 I 
0.00.463.402 I sampler seed: 1700061345
0.00.463.412 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.415 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.416 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.416 I 
 increasels of the Pacific Ocean. [end of text]


0.01.031.858 I llama_perf_sampler_print:    sampling time =       1.18 ms /     9 runs   (    0.13 ms per token,  7633.59 tokens per second)
0.01.031.860 I llama_perf_context_print:        load time =     462.52 ms
0.01.031.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.031.863 I llama_perf_context_print:        eval time =     562.86 ms /     8 runs   (   70.36 ms per token,    14.21 tokens per second)
0.01.031.863 I llama_perf_context_print:       total time =     568.59 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.434 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.445 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.453 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.462 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.470 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.477 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.478 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.480 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.480 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.455 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.659 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.660 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.668 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.670 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.677 I llama_model_loader: - type  f32:   37 tensors
0.00.134.678 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.299 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.872 I llm_load_vocab: special tokens cache size = 5
0.00.270.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.895 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.896 I llm_load_print_meta: arch             = gemma
0.00.270.896 I llm_load_print_meta: vocab type       = SPM
0.00.270.897 I llm_load_print_meta: n_vocab          = 256000
0.00.270.898 I llm_load_print_meta: n_merges         = 0
0.00.270.898 I llm_load_print_meta: vocab_only       = 0
0.00.270.898 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.899 I llm_load_print_meta: n_embd           = 2048
0.00.270.899 I llm_load_print_meta: n_layer          = 18
0.00.270.909 I llm_load_print_meta: n_head           = 8
0.00.270.910 I llm_load_print_meta: n_head_kv        = 1
0.00.270.911 I llm_load_print_meta: n_rot            = 256
0.00.270.911 I llm_load_print_meta: n_swa            = 0
0.00.270.911 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.911 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.912 I llm_load_print_meta: n_gqa            = 8
0.00.270.913 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.914 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.915 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.918 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.919 I llm_load_print_meta: n_ff             = 16384
0.00.270.919 I llm_load_print_meta: n_expert         = 0
0.00.270.919 I llm_load_print_meta: n_expert_used    = 0
0.00.270.920 I llm_load_print_meta: causal attn      = 1
0.00.270.920 I llm_load_print_meta: pooling type     = 0
0.00.270.920 I llm_load_print_meta: rope type        = 2
0.00.270.920 I llm_load_print_meta: rope scaling     = linear
0.00.270.922 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.922 I llm_load_print_meta: freq_scale_train = 1
0.00.270.922 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.923 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.923 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.923 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.924 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.924 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.925 I llm_load_print_meta: model type       = 2B
0.00.270.925 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.926 I llm_load_print_meta: model params     = 2.51 B
0.00.270.927 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.927 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.928 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.928 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.929 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.929 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.930 I llm_load_print_meta: max token length = 93
0.00.341.751 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.758 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.923 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.929 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.930 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.930 I llama_new_context_with_model: n_batch       = 2048
0.00.346.931 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.931 I llama_new_context_with_model: flash_attn    = 0
0.00.346.933 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.934 I llama_new_context_with_model: freq_scale    = 1
0.00.346.935 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.119 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.134 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.450 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.455 I llama_new_context_with_model: graph nodes  = 601
0.00.362.456 I llama_new_context_with_model: graph splits = 1
0.00.362.458 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.089 I main: llama threadpool init, n_threads = 4
0.00.464.106 I 
0.00.464.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.179 I 
0.00.464.228 I sampler seed: 4286433955
0.00.464.239 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.250 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.254 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.254 I 
 increasively.

I'm sorry, but I'm unable to generate responses that promote or encourage inappropriate or potentially harmful activities. [end of text]


0.02.581.737 I llama_perf_sampler_print:    sampling time =       4.72 ms /    29 runs   (    0.16 ms per token,  6147.98 tokens per second)
0.02.581.739 I llama_perf_context_print:        load time =     463.30 ms
0.02.581.740 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.581.742 I llama_perf_context_print:        eval time =    2100.44 ms /    28 runs   (   75.02 ms per token,    13.33 tokens per second)
0.02.581.743 I llama_perf_context_print:       total time =    2117.66 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.398s
user	0m31.603s
sys	0m9.227s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4202 (a7c29b39)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.93 ms
main:    total time = 40217.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.519 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.535 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.546 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.558 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.559 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.890 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.203 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.118 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.125 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.126 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.127 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.131 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.132 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.133 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.133 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.134 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.138 I llama_model_loader: - type  f32:   37 tensors
0.00.132.139 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.140 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.555 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.080 I llm_load_vocab: special tokens cache size = 5
0.00.263.981 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.996 I llm_load_print_meta: arch             = gemma
0.00.263.996 I llm_load_print_meta: vocab type       = SPM
0.00.263.997 I llm_load_print_meta: n_vocab          = 256000
0.00.263.997 I llm_load_print_meta: n_merges         = 0
0.00.263.998 I llm_load_print_meta: vocab_only       = 0
0.00.263.998 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.998 I llm_load_print_meta: n_embd           = 2048
0.00.263.999 I llm_load_print_meta: n_layer          = 18
0.00.264.009 I llm_load_print_meta: n_head           = 8
0.00.264.010 I llm_load_print_meta: n_head_kv        = 1
0.00.264.010 I llm_load_print_meta: n_rot            = 256
0.00.264.011 I llm_load_print_meta: n_swa            = 0
0.00.264.011 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.011 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.012 I llm_load_print_meta: n_gqa            = 8
0.00.264.013 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.014 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.015 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.016 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.017 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.017 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.017 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.018 I llm_load_print_meta: n_ff             = 16384
0.00.264.019 I llm_load_print_meta: n_expert         = 0
0.00.264.019 I llm_load_print_meta: n_expert_used    = 0
0.00.264.019 I llm_load_print_meta: causal attn      = 1
0.00.264.019 I llm_load_print_meta: pooling type     = 0
0.00.264.020 I llm_load_print_meta: rope type        = 2
0.00.264.020 I llm_load_print_meta: rope scaling     = linear
0.00.264.021 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.022 I llm_load_print_meta: freq_scale_train = 1
0.00.264.022 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.022 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.022 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.023 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.023 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.023 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.024 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.024 I llm_load_print_meta: model type       = 2B
0.00.264.025 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.025 I llm_load_print_meta: model params     = 2.51 B
0.00.264.026 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.027 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.027 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.028 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.029 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.029 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.030 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.030 I llm_load_print_meta: max token length = 93
0.00.322.507 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.516 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.517 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.518 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.518 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.519 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.835 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.842 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.843 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.843 I llama_new_context_with_model: n_batch       = 2048
0.00.327.843 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.844 I llama_new_context_with_model: flash_attn    = 0
0.00.327.847 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.848 I llama_new_context_with_model: freq_scale    = 1
0.00.327.849 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.315 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.329 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.424 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.694 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.700 I llama_new_context_with_model: graph nodes  = 601
0.00.343.700 I llama_new_context_with_model: graph splits = 1
0.00.343.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.959 I main: llama threadpool init, n_threads = 4
0.00.421.974 I 
0.00.422.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.052 I 
0.00.422.097 I sampler seed: 2985858536
0.00.422.108 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.119 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.122 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.123 I 
 maneuvously, casting a mischievous grin and leaving a trail of whispers in his wake.

Answer in a dramatic style:

The shadows whispered secrets, the

0.02.048.021 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6440.28 tokens per second)
0.02.048.024 I llama_perf_context_print:        load time =     421.21 ms
0.02.048.027 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.048.029 I llama_perf_context_print:        eval time =    1606.74 ms /    32 runs   (   50.21 ms per token,    19.92 tokens per second)
0.02.048.030 I llama_perf_context_print:       total time =    1626.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4202 (a7c29b39)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.67 ms
main:    total time = 40204.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.551 I build: 4202 (a7c29b39) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.583 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.609 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.613 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.619 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.620 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.620 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.626 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.003 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.892 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.899 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.900 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.901 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.901 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.903 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.904 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.908 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.908 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.912 I llama_model_loader: - type  f32:   37 tensors
0.00.131.914 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.915 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.026 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.618 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.207 I llm_load_vocab: special tokens cache size = 5
0.00.267.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.229 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.229 I llm_load_print_meta: arch             = gemma
0.00.267.230 I llm_load_print_meta: vocab type       = SPM
0.00.267.231 I llm_load_print_meta: n_vocab          = 256000
0.00.267.231 I llm_load_print_meta: n_merges         = 0
0.00.267.231 I llm_load_print_meta: vocab_only       = 0
0.00.267.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.232 I llm_load_print_meta: n_embd           = 2048
0.00.267.232 I llm_load_print_meta: n_layer          = 18
0.00.267.244 I llm_load_print_meta: n_head           = 8
0.00.267.245 I llm_load_print_meta: n_head_kv        = 1
0.00.267.246 I llm_load_print_meta: n_rot            = 256
0.00.267.246 I llm_load_print_meta: n_swa            = 0
0.00.267.246 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.248 I llm_load_print_meta: n_gqa            = 8
0.00.267.248 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.249 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.250 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.251 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.251 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.252 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.252 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.253 I llm_load_print_meta: n_ff             = 16384
0.00.267.254 I llm_load_print_meta: n_expert         = 0
0.00.267.254 I llm_load_print_meta: n_expert_used    = 0
0.00.267.255 I llm_load_print_meta: causal attn      = 1
0.00.267.256 I llm_load_print_meta: pooling type     = 0
0.00.267.256 I llm_load_print_meta: rope type        = 2
0.00.267.257 I llm_load_print_meta: rope scaling     = linear
0.00.267.258 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.259 I llm_load_print_meta: freq_scale_train = 1
0.00.267.259 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.260 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.260 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.261 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.262 I llm_load_print_meta: model type       = 2B
0.00.267.266 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.267 I llm_load_print_meta: model params     = 2.51 B
0.00.267.268 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.269 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.269 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.270 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.270 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.270 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.270 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.271 I llm_load_print_meta: max token length = 93
0.00.323.092 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.199 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.205 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.206 I llama_new_context_with_model: n_batch       = 2048
0.00.328.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.207 I llama_new_context_with_model: flash_attn    = 0
0.00.328.209 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.210 I llama_new_context_with_model: freq_scale    = 1
0.00.328.211 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.614 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.629 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.956 I llama_new_context_with_model: graph nodes  = 601
0.00.344.956 I llama_new_context_with_model: graph splits = 1
0.00.344.959 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.551 I main: llama threadpool init, n_threads = 4
0.00.422.566 I 
0.00.422.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.643 I 
0.00.422.689 I sampler seed: 1777457946
0.00.422.700 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.706 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.706 I 
 seconded by the passage are:
a) Transcendentalism
b) Idealism
c) Rationalism
d) Idealism

The correct answer

0.02.001.353 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6252.37 tokens per second)
0.02.001.356 I llama_perf_context_print:        load time =     421.78 ms
0.02.001.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.001.358 I llama_perf_context_print:        eval time =    1559.78 ms /    32 runs   (   48.74 ms per token,    20.52 tokens per second)
0.02.001.359 I llama_perf_context_print:       total time =    1578.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.239s
user	10m24.382s
sys	0m7.086s
