+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.140 I main: load the model and apply lora adapter, if any
0.00.023.886 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.899 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.996 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.010 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.023 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.024 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.039 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.703 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.081 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.651 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.670 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.672 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.681 I llama_model_loader: - type  f32:   37 tensors
0.00.269.684 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.816 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.123 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.165 I llm_load_vocab: special tokens cache size = 5
0.00.616.574 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.654 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.655 I llm_load_print_meta: arch             = gemma
0.00.616.656 I llm_load_print_meta: vocab type       = SPM
0.00.616.656 I llm_load_print_meta: n_vocab          = 256000
0.00.616.658 I llm_load_print_meta: n_merges         = 0
0.00.616.659 I llm_load_print_meta: vocab_only       = 0
0.00.616.659 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.660 I llm_load_print_meta: n_embd           = 2048
0.00.616.660 I llm_load_print_meta: n_layer          = 18
0.00.616.723 I llm_load_print_meta: n_head           = 8
0.00.616.730 I llm_load_print_meta: n_head_kv        = 1
0.00.616.731 I llm_load_print_meta: n_rot            = 256
0.00.616.731 I llm_load_print_meta: n_swa            = 0
0.00.616.732 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.738 I llm_load_print_meta: n_gqa            = 8
0.00.616.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.752 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.752 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.758 I llm_load_print_meta: n_ff             = 16384
0.00.616.759 I llm_load_print_meta: n_expert         = 0
0.00.616.759 I llm_load_print_meta: n_expert_used    = 0
0.00.616.760 I llm_load_print_meta: causal attn      = 1
0.00.616.760 I llm_load_print_meta: pooling type     = 0
0.00.616.761 I llm_load_print_meta: rope type        = 2
0.00.616.762 I llm_load_print_meta: rope scaling     = linear
0.00.616.763 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.765 I llm_load_print_meta: freq_scale_train = 1
0.00.616.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.765 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.766 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.785 I llm_load_print_meta: model type       = 2B
0.00.616.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.787 I llm_load_print_meta: model params     = 2.51 B
0.00.616.796 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.830 I llm_load_print_meta: max token length = 93
0.00.719.550 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.719.564 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.719.565 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.719.566 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.719.567 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.719.567 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.725.854 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.864 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.864 I llama_new_context_with_model: n_batch       = 2048
0.00.725.865 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.865 I llama_new_context_with_model: flash_attn    = 0
0.00.725.870 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.870 I llama_new_context_with_model: freq_scale    = 1
0.00.725.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.478 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.518 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.228 I llama_new_context_with_model: graph nodes  = 601
0.00.746.228 I llama_new_context_with_model: graph splits = 1
0.00.746.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.659 I main: llama threadpool init, n_threads = 4
0.01.352.670 I 
0.01.352.776 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.779 I 
0.01.353.008 I sampler seed: 1125888885
0.01.353.020 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.026 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.030 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.030 I 
 increamically, then meander along the shoreline, a fleeting shadow.

What is the poem describing?

The poem is describing a sunset.

The sunset is

0.14.826.922 I llama_perf_sampler_print:    sampling time =      48.29 ms /    33 runs   (    1.46 ms per token,   683.36 tokens per second)
0.14.826.925 I llama_perf_context_print:        load time =    1351.42 ms
0.14.826.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.826.948 I llama_perf_context_print:        eval time =   13383.67 ms /    32 runs   (  418.24 ms per token,     2.39 tokens per second)
0.14.826.950 I llama_perf_context_print:       total time =   13474.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.001.113 I main: load the model and apply lora adapter, if any
0.00.023.572 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.690 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.699 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.700 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.717 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.936 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.939 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.941 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.948 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.960 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.965 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.988 I llama_model_loader: - type  f32:   37 tensors
0.00.269.993 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.556 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.852 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.924 I llm_load_vocab: special tokens cache size = 5
0.00.613.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.631 I llm_load_print_meta: arch             = gemma
0.00.613.632 I llm_load_print_meta: vocab type       = SPM
0.00.613.633 I llm_load_print_meta: n_vocab          = 256000
0.00.613.635 I llm_load_print_meta: n_merges         = 0
0.00.613.636 I llm_load_print_meta: vocab_only       = 0
0.00.613.636 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.637 I llm_load_print_meta: n_embd           = 2048
0.00.613.637 I llm_load_print_meta: n_layer          = 18
0.00.613.700 I llm_load_print_meta: n_head           = 8
0.00.613.710 I llm_load_print_meta: n_head_kv        = 1
0.00.613.712 I llm_load_print_meta: n_rot            = 256
0.00.613.713 I llm_load_print_meta: n_swa            = 0
0.00.613.713 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.714 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.719 I llm_load_print_meta: n_gqa            = 8
0.00.613.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.729 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.741 I llm_load_print_meta: n_ff             = 16384
0.00.613.742 I llm_load_print_meta: n_expert         = 0
0.00.613.742 I llm_load_print_meta: n_expert_used    = 0
0.00.613.745 I llm_load_print_meta: causal attn      = 1
0.00.613.745 I llm_load_print_meta: pooling type     = 0
0.00.613.745 I llm_load_print_meta: rope type        = 2
0.00.613.746 I llm_load_print_meta: rope scaling     = linear
0.00.613.747 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.748 I llm_load_print_meta: freq_scale_train = 1
0.00.613.749 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.749 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.750 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.750 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.751 I llm_load_print_meta: model type       = 2B
0.00.613.752 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.753 I llm_load_print_meta: model params     = 2.51 B
0.00.613.761 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.791 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.793 I llm_load_print_meta: max token length = 93
0.00.710.388 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.212 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.220 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.221 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.221 I llama_new_context_with_model: n_batch       = 2048
0.00.716.221 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.222 I llama_new_context_with_model: flash_attn    = 0
0.00.716.224 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.225 I llama_new_context_with_model: freq_scale    = 1
0.00.716.226 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.594 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.635 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.294 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.299 I llama_new_context_with_model: graph nodes  = 601
0.00.736.299 I llama_new_context_with_model: graph splits = 1
0.00.736.324 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.384.888 I main: llama threadpool init, n_threads = 4
0.01.384.901 I 
0.01.385.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.385.009 I 
0.01.385.237 I sampler seed: 2357547752
0.01.385.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.385.257 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.385.260 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.385.260 I 
 increasities on the field of science.

The term "scientific skepticism" is often used to describe the critical evaluation of scientific claims and theories. However, skepticism

0.14.857.482 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.64 tokens per second)
0.14.857.485 I llama_perf_context_print:        load time =    1383.68 ms
0.14.857.501 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.502 I llama_perf_context_print:        eval time =   13383.04 ms /    32 runs   (  418.22 ms per token,     2.39 tokens per second)
0.14.857.503 I llama_perf_context_print:       total time =   13472.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.709 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.001.166 I main: load the model and apply lora adapter, if any
0.00.023.936 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.050 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.063 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.071 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.073 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.078 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.091 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.803 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.414 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.154 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.167 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.168 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.169 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.179 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.182 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.193 I llama_model_loader: - type  f32:   37 tensors
0.00.270.210 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.824 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.060 I llm_load_vocab: special tokens cache size = 5
0.00.627.578 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.648 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.649 I llm_load_print_meta: arch             = gemma
0.00.627.649 I llm_load_print_meta: vocab type       = SPM
0.00.627.651 I llm_load_print_meta: n_vocab          = 256000
0.00.627.653 I llm_load_print_meta: n_merges         = 0
0.00.627.653 I llm_load_print_meta: vocab_only       = 0
0.00.627.654 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.654 I llm_load_print_meta: n_embd           = 2048
0.00.627.654 I llm_load_print_meta: n_layer          = 18
0.00.627.720 I llm_load_print_meta: n_head           = 8
0.00.627.727 I llm_load_print_meta: n_head_kv        = 1
0.00.627.728 I llm_load_print_meta: n_rot            = 256
0.00.627.728 I llm_load_print_meta: n_swa            = 0
0.00.627.729 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.729 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.734 I llm_load_print_meta: n_gqa            = 8
0.00.627.738 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.744 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.745 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.746 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.758 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.759 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.765 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.770 I llm_load_print_meta: n_ff             = 16384
0.00.627.771 I llm_load_print_meta: n_expert         = 0
0.00.627.771 I llm_load_print_meta: n_expert_used    = 0
0.00.627.772 I llm_load_print_meta: causal attn      = 1
0.00.627.772 I llm_load_print_meta: pooling type     = 0
0.00.627.772 I llm_load_print_meta: rope type        = 2
0.00.627.776 I llm_load_print_meta: rope scaling     = linear
0.00.627.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.778 I llm_load_print_meta: freq_scale_train = 1
0.00.627.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.781 I llm_load_print_meta: model type       = 2B
0.00.627.782 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.783 I llm_load_print_meta: model params     = 2.51 B
0.00.627.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.806 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.817 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.818 I llm_load_print_meta: max token length = 93
0.00.719.071 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.719.081 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.082 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.719.083 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.719.084 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.085 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.725.135 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.144 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.145 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.145 I llama_new_context_with_model: n_batch       = 2048
0.00.725.146 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.146 I llama_new_context_with_model: flash_attn    = 0
0.00.725.150 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.151 I llama_new_context_with_model: freq_scale    = 1
0.00.725.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.084 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.123 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.252 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.830 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.835 I llama_new_context_with_model: graph nodes  = 601
0.00.745.835 I llama_new_context_with_model: graph splits = 1
0.00.745.859 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.337 I main: llama threadpool init, n_threads = 4
0.01.357.350 I 
0.01.357.457 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.461 I 
0.01.357.689 I sampler seed: 1652765915
0.01.357.701 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.707 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.711 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.711 I 
 increasities.

I am unable to answer the question as it contains sexually suggestive and inappropriate language. [end of text]


0.10.257.044 I llama_perf_sampler_print:    sampling time =      31.87 ms /    22 runs   (    1.45 ms per token,   690.39 tokens per second)
0.10.257.046 I llama_perf_context_print:        load time =    1356.06 ms
0.10.257.048 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.257.049 I llama_perf_context_print:        eval time =    8840.12 ms /    21 runs   (  420.96 ms per token,     2.38 tokens per second)
0.10.257.073 I llama_perf_context_print:       total time =    8899.72 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.001.145 I main: load the model and apply lora adapter, if any
0.00.023.622 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.738 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.740 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.744 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.746 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.749 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.750 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.751 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.759 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.763 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.932 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.727 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.731 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.734 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.735 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.739 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.741 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.742 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.744 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.753 I llama_model_loader: - type  f32:   37 tensors
0.00.268.755 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.513 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.496 I llm_load_vocab: special tokens cache size = 5
0.00.636.114 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.183 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.184 I llm_load_print_meta: arch             = gemma
0.00.636.185 I llm_load_print_meta: vocab type       = SPM
0.00.636.186 I llm_load_print_meta: n_vocab          = 256000
0.00.636.188 I llm_load_print_meta: n_merges         = 0
0.00.636.189 I llm_load_print_meta: vocab_only       = 0
0.00.636.190 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.190 I llm_load_print_meta: n_embd           = 2048
0.00.636.190 I llm_load_print_meta: n_layer          = 18
0.00.636.253 I llm_load_print_meta: n_head           = 8
0.00.636.276 I llm_load_print_meta: n_head_kv        = 1
0.00.636.277 I llm_load_print_meta: n_rot            = 256
0.00.636.277 I llm_load_print_meta: n_swa            = 0
0.00.636.278 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.278 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.283 I llm_load_print_meta: n_gqa            = 8
0.00.636.287 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.311 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.312 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.313 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.319 I llm_load_print_meta: n_ff             = 16384
0.00.636.320 I llm_load_print_meta: n_expert         = 0
0.00.636.321 I llm_load_print_meta: n_expert_used    = 0
0.00.636.321 I llm_load_print_meta: causal attn      = 1
0.00.636.322 I llm_load_print_meta: pooling type     = 0
0.00.636.331 I llm_load_print_meta: rope type        = 2
0.00.636.332 I llm_load_print_meta: rope scaling     = linear
0.00.636.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.335 I llm_load_print_meta: freq_scale_train = 1
0.00.636.335 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.336 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.336 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.337 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.337 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.337 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.342 I llm_load_print_meta: model type       = 2B
0.00.636.344 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.352 I llm_load_print_meta: model params     = 2.51 B
0.00.636.362 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.364 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.365 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.365 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.366 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.367 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.376 I llm_load_print_meta: max token length = 93
0.00.709.043 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.709.050 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.714.762 I llama_new_context_with_model: n_seq_max     = 1
0.00.714.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.714.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.714.770 I llama_new_context_with_model: n_batch       = 2048
0.00.714.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.714.771 I llama_new_context_with_model: flash_attn    = 0
0.00.714.774 I llama_new_context_with_model: freq_base     = 10000.0
0.00.714.774 I llama_new_context_with_model: freq_scale    = 1
0.00.714.775 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.165 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.205 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.731.332 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.895 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.733.899 I llama_new_context_with_model: graph nodes  = 601
0.00.733.899 I llama_new_context_with_model: graph splits = 1
0.00.733.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.385.892 I main: llama threadpool init, n_threads = 4
0.01.385.904 I 
0.01.386.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.018 I 
0.01.386.246 I sampler seed: 3459086125
0.01.386.257 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.386.265 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.386.266 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.386.266 I 
 increasities, 
and the allure of the forbidden fruit.

**Answer:** Temptation

Temptation is the overarching theme that pervades the passage.

0.14.867.701 I llama_perf_sampler_print:    sampling time =      48.03 ms /    33 runs   (    1.46 ms per token,   687.11 tokens per second)
0.14.867.705 I llama_perf_context_print:        load time =    1384.64 ms
0.14.867.717 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.867.720 I llama_perf_context_print:        eval time =   13391.59 ms /    32 runs   (  418.49 ms per token,     2.39 tokens per second)
0.14.867.721 I llama_perf_context_print:       total time =   13481.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.532s
user	3m30.401s
sys	0m9.513s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4048 (a71d81cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198583.53 ms
main:    total time = 198583.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.001.126 I main: load the model and apply lora adapter, if any
0.00.023.718 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.730 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.839 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.840 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.845 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.849 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.862 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.871 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.873 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.363 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.372 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.373 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.374 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.375 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.377 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.378 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.382 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.384 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.385 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.386 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.394 I llama_model_loader: - type  f32:   37 tensors
0.00.269.397 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.397 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.269 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.790 I llm_load_vocab: special tokens cache size = 5
0.00.634.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.318 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.320 I llm_load_print_meta: arch             = gemma
0.00.634.320 I llm_load_print_meta: vocab type       = SPM
0.00.634.321 I llm_load_print_meta: n_vocab          = 256000
0.00.634.324 I llm_load_print_meta: n_merges         = 0
0.00.634.324 I llm_load_print_meta: vocab_only       = 0
0.00.634.325 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.325 I llm_load_print_meta: n_embd           = 2048
0.00.634.325 I llm_load_print_meta: n_layer          = 18
0.00.634.390 I llm_load_print_meta: n_head           = 8
0.00.634.397 I llm_load_print_meta: n_head_kv        = 1
0.00.634.398 I llm_load_print_meta: n_rot            = 256
0.00.634.398 I llm_load_print_meta: n_swa            = 0
0.00.634.399 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.409 I llm_load_print_meta: n_gqa            = 8
0.00.634.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.422 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.427 I llm_load_print_meta: n_ff             = 16384
0.00.634.429 I llm_load_print_meta: n_expert         = 0
0.00.634.429 I llm_load_print_meta: n_expert_used    = 0
0.00.634.430 I llm_load_print_meta: causal attn      = 1
0.00.634.430 I llm_load_print_meta: pooling type     = 0
0.00.634.431 I llm_load_print_meta: rope type        = 2
0.00.634.431 I llm_load_print_meta: rope scaling     = linear
0.00.634.432 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.433 I llm_load_print_meta: freq_scale_train = 1
0.00.634.434 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.434 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.435 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.435 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.436 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.436 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.437 I llm_load_print_meta: model type       = 2B
0.00.634.439 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.634.439 I llm_load_print_meta: model params     = 2.51 B
0.00.634.449 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.634.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.460 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.461 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.465 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.473 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.474 I llm_load_print_meta: max token length = 93
0.00.696.821 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.696.829 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.696.830 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.696.831 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.696.831 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.696.832 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.702.791 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.799 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.801 I llama_new_context_with_model: n_batch       = 2048
0.00.702.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.802 I llama_new_context_with_model: flash_attn    = 0
0.00.702.806 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.807 I llama_new_context_with_model: freq_scale    = 1
0.00.702.808 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.364 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.403 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.087 I llama_new_context_with_model: graph nodes  = 601
0.00.722.087 I llama_new_context_with_model: graph splits = 1
0.00.722.110 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.293.054 I main: llama threadpool init, n_threads = 4
0.01.293.065 I 
0.01.293.171 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.293.175 I 
0.01.293.403 I sampler seed: 3570506890
0.01.293.416 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.293.423 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.293.426 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.293.426 I 
 increasities, and the evolution of the concept of love.

## Love Across Time: An Exploration of its Evolution

Love has been a cornerstone of human experience

0.12.217.953 I llama_perf_sampler_print:    sampling time =      48.13 ms /    33 runs   (    1.46 ms per token,   685.64 tokens per second)
0.12.217.957 I llama_perf_context_print:        load time =    1291.83 ms
0.12.217.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.971 I llama_perf_context_print:        eval time =   10835.94 ms /    32 runs   (  338.62 ms per token,     2.95 tokens per second)
0.12.217.973 I llama_perf_context_print:       total time =   10924.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4048 (a71d81cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198786.39 ms
main:    total time = 198786.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4048 (a71d81cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.116 I main: load the model and apply lora adapter, if any
0.00.023.529 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.634 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.649 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.660 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.662 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.663 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.672 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.675 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.676 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.895 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.226 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.847 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.894 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.908 I llama_model_loader: - type  f32:   37 tensors
0.00.271.911 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.912 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.433 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.142 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.146 I llm_load_vocab: special tokens cache size = 5
0.00.637.815 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.886 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.887 I llm_load_print_meta: arch             = gemma
0.00.637.888 I llm_load_print_meta: vocab type       = SPM
0.00.637.889 I llm_load_print_meta: n_vocab          = 256000
0.00.637.892 I llm_load_print_meta: n_merges         = 0
0.00.637.892 I llm_load_print_meta: vocab_only       = 0
0.00.637.892 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.893 I llm_load_print_meta: n_embd           = 2048
0.00.637.893 I llm_load_print_meta: n_layer          = 18
0.00.637.959 I llm_load_print_meta: n_head           = 8
0.00.637.966 I llm_load_print_meta: n_head_kv        = 1
0.00.637.967 I llm_load_print_meta: n_rot            = 256
0.00.637.967 I llm_load_print_meta: n_swa            = 0
0.00.637.968 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.968 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.973 I llm_load_print_meta: n_gqa            = 8
0.00.637.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.983 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.984 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.986 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.987 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.988 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.005 I llm_load_print_meta: n_ff             = 16384
0.00.638.006 I llm_load_print_meta: n_expert         = 0
0.00.638.006 I llm_load_print_meta: n_expert_used    = 0
0.00.638.022 I llm_load_print_meta: causal attn      = 1
0.00.638.023 I llm_load_print_meta: pooling type     = 0
0.00.638.023 I llm_load_print_meta: rope type        = 2
0.00.638.028 I llm_load_print_meta: rope scaling     = linear
0.00.638.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.035 I llm_load_print_meta: freq_scale_train = 1
0.00.638.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.045 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.045 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.046 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.047 I llm_load_print_meta: model type       = 2B
0.00.638.048 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.638.049 I llm_load_print_meta: model params     = 2.51 B
0.00.638.060 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.638.061 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.062 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.071 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.072 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.073 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.081 I llm_load_print_meta: max token length = 93
0.00.696.657 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.702.649 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.659 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.660 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.660 I llama_new_context_with_model: n_batch       = 2048
0.00.702.661 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.662 I llama_new_context_with_model: flash_attn    = 0
0.00.702.665 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.666 I llama_new_context_with_model: freq_scale    = 1
0.00.702.667 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.485 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.197 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.201 I llama_new_context_with_model: graph nodes  = 601
0.00.723.201 I llama_new_context_with_model: graph splits = 1
0.00.723.226 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.987 I main: llama threadpool init, n_threads = 4
0.01.297.001 I 
0.01.297.114 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.118 I 
0.01.297.358 I sampler seed: 2779431270
0.01.297.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.378 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.381 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.381 I 
 seconally. [end of text]


0.02.663.523 I llama_perf_sampler_print:    sampling time =       6.09 ms /     5 runs   (    1.22 ms per token,   820.61 tokens per second)
0.02.663.525 I llama_perf_context_print:        load time =    1295.78 ms
0.02.663.527 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.663.528 I llama_perf_context_print:        eval time =    1353.64 ms /     4 runs   (  338.41 ms per token,     2.96 tokens per second)
0.02.663.542 I llama_perf_context_print:       total time =    1366.55 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m55.190s
user	49m34.077s
sys	0m6.445s
