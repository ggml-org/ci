+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.762 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.773 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.866 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.879 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.881 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.888 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.894 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.898 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.906 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.117 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.809 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.499 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.513 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.515 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.516 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.517 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.519 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.520 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.524 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.527 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.528 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.530 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.539 I llama_model_loader: - type  f32:   37 tensors
0.00.353.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.910 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.909 I llm_load_vocab: special tokens cache size = 5
0.00.850.521 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.605 I llm_load_print_meta: arch             = gemma
0.00.850.606 I llm_load_print_meta: vocab type       = SPM
0.00.850.607 I llm_load_print_meta: n_vocab          = 256000
0.00.850.610 I llm_load_print_meta: n_merges         = 0
0.00.850.610 I llm_load_print_meta: vocab_only       = 0
0.00.850.610 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.611 I llm_load_print_meta: n_embd           = 2048
0.00.850.611 I llm_load_print_meta: n_layer          = 18
0.00.850.688 I llm_load_print_meta: n_head           = 8
0.00.850.695 I llm_load_print_meta: n_head_kv        = 1
0.00.850.695 I llm_load_print_meta: n_rot            = 256
0.00.850.696 I llm_load_print_meta: n_swa            = 0
0.00.850.697 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.698 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.703 I llm_load_print_meta: n_gqa            = 8
0.00.850.708 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.712 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.714 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.715 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.715 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.722 I llm_load_print_meta: n_ff             = 16384
0.00.850.722 I llm_load_print_meta: n_expert         = 0
0.00.850.723 I llm_load_print_meta: n_expert_used    = 0
0.00.850.724 I llm_load_print_meta: causal attn      = 1
0.00.850.725 I llm_load_print_meta: pooling type     = 0
0.00.850.725 I llm_load_print_meta: rope type        = 2
0.00.850.725 I llm_load_print_meta: rope scaling     = linear
0.00.850.727 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.728 I llm_load_print_meta: freq_scale_train = 1
0.00.850.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.729 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.730 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.730 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.731 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.732 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.735 I llm_load_print_meta: model type       = 2B
0.00.850.737 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.738 I llm_load_print_meta: model params     = 2.51 B
0.00.850.739 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.740 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.742 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.743 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.744 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.750 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.751 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.752 I llm_load_print_meta: max token length = 93
0.00.952.924 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.952.935 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.952.937 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.952.938 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.952.938 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.952.939 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.959.217 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.227 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.228 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.228 I llama_new_context_with_model: n_batch       = 2048
0.00.959.229 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.229 I llama_new_context_with_model: flash_attn    = 0
0.00.959.233 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.234 I llama_new_context_with_model: freq_scale    = 1
0.00.959.235 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.340 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.975.120 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.164 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.964 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.968 I llama_new_context_with_model: graph nodes  = 601
0.00.977.969 I llama_new_context_with_model: graph splits = 1
0.00.977.995 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.998 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.593.219 I main: llama threadpool init, n_threads = 4
0.01.593.237 I 
0.01.593.355 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.593.359 I 
0.01.593.595 I sampler seed: 2092998537
0.01.593.608 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.618 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.621 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.622 I 
 increasities that can cause emotional distress and physical harm.

**Answer the question using the provided context.**

The provided text does not contain any information regarding the

0.15.178.048 I llama_perf_sampler_print:    sampling time =      49.90 ms /    33 runs   (    1.51 ms per token,   661.28 tokens per second)
0.15.178.052 I llama_perf_context_print:        load time =    1592.26 ms
0.15.178.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.178.076 I llama_perf_context_print:        eval time =   13492.26 ms /    32 runs   (  421.63 ms per token,     2.37 tokens per second)
0.15.178.078 I llama_perf_context_print:       total time =   13584.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.695 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.000.918 I main: load the model and apply lora adapter, if any
0.00.023.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.852 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.872 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.911 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.913 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.923 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.929 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.935 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.936 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.349.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.644 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.655 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.658 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.660 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.661 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.663 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.667 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.671 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.373.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.681 I llama_model_loader: - type  f32:   37 tensors
0.00.373.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.610.899 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.717 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.716 I llm_load_vocab: special tokens cache size = 5
0.00.889.788 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.889.863 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.889.867 I llm_load_print_meta: arch             = gemma
0.00.889.868 I llm_load_print_meta: vocab type       = SPM
0.00.889.868 I llm_load_print_meta: n_vocab          = 256000
0.00.889.871 I llm_load_print_meta: n_merges         = 0
0.00.889.871 I llm_load_print_meta: vocab_only       = 0
0.00.889.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.889.872 I llm_load_print_meta: n_embd           = 2048
0.00.889.873 I llm_load_print_meta: n_layer          = 18
0.00.889.947 I llm_load_print_meta: n_head           = 8
0.00.889.955 I llm_load_print_meta: n_head_kv        = 1
0.00.889.955 I llm_load_print_meta: n_rot            = 256
0.00.889.956 I llm_load_print_meta: n_swa            = 0
0.00.889.956 I llm_load_print_meta: n_embd_head_k    = 256
0.00.889.956 I llm_load_print_meta: n_embd_head_v    = 256
0.00.889.961 I llm_load_print_meta: n_gqa            = 8
0.00.889.966 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.889.971 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.889.972 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.889.974 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.889.974 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.889.975 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.889.975 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.889.980 I llm_load_print_meta: n_ff             = 16384
0.00.889.980 I llm_load_print_meta: n_expert         = 0
0.00.889.981 I llm_load_print_meta: n_expert_used    = 0
0.00.889.981 I llm_load_print_meta: causal attn      = 1
0.00.889.981 I llm_load_print_meta: pooling type     = 0
0.00.889.982 I llm_load_print_meta: rope type        = 2
0.00.889.982 I llm_load_print_meta: rope scaling     = linear
0.00.889.984 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.889.985 I llm_load_print_meta: freq_scale_train = 1
0.00.889.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.889.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.889.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.889.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.890.015 I llm_load_print_meta: ssm_d_state      = 0
0.00.890.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.890.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.890.020 I llm_load_print_meta: model type       = 2B
0.00.890.022 I llm_load_print_meta: model ftype      = Q8_0
0.00.890.023 I llm_load_print_meta: model params     = 2.51 B
0.00.890.024 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.890.024 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.890.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.890.026 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.890.027 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.890.027 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.890.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.890.029 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.890.036 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.890.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.890.038 I llm_load_print_meta: max token length = 93
0.00.985.896 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.992.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.992.177 I llama_new_context_with_model: n_ctx         = 4096
0.00.992.178 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.992.178 I llama_new_context_with_model: n_batch       = 2048
0.00.992.179 I llama_new_context_with_model: n_ubatch      = 512
0.00.992.179 I llama_new_context_with_model: flash_attn    = 0
0.00.992.183 I llama_new_context_with_model: freq_base     = 10000.0
0.00.992.183 I llama_new_context_with_model: freq_scale    = 1
0.00.992.184 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.992.288 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.007.838 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.007.883 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.008.003 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.010.674 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.010.678 I llama_new_context_with_model: graph nodes  = 601
0.01.010.679 I llama_new_context_with_model: graph splits = 1
0.01.010.702 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.010.706 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.621.870 I main: llama threadpool init, n_threads = 4
0.01.621.888 I 
0.01.622.026 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.622.031 I 
0.01.622.272 I sampler seed: 2865803327
0.01.622.287 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.622.299 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.622.301 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.622.301 I 
 increasities with a touch of modern flair! [end of text]


0.05.924.253 I llama_perf_sampler_print:    sampling time =      15.76 ms /    11 runs   (    1.43 ms per token,   697.79 tokens per second)
0.05.924.275 I llama_perf_context_print:        load time =    1620.83 ms
0.05.924.288 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.924.290 I llama_perf_context_print:        eval time =    4272.62 ms /    10 runs   (  427.26 ms per token,     2.34 tokens per second)
0.05.924.290 I llama_perf_context_print:       total time =    4302.39 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.024.134 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.147 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.257 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.288 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.291 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.294 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.296 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.326 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.336 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.022 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.048 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.049 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.051 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.059 I llama_model_loader: - type  f32:   37 tensors
0.00.354.062 I llama_model_loader: - type q8_0:  127 tensors
0.00.607.003 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.677.597 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.678.638 I llm_load_vocab: special tokens cache size = 5
0.00.866.767 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.866.845 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.866.853 I llm_load_print_meta: arch             = gemma
0.00.866.854 I llm_load_print_meta: vocab type       = SPM
0.00.866.855 I llm_load_print_meta: n_vocab          = 256000
0.00.866.858 I llm_load_print_meta: n_merges         = 0
0.00.866.859 I llm_load_print_meta: vocab_only       = 0
0.00.866.860 I llm_load_print_meta: n_ctx_train      = 8192
0.00.866.861 I llm_load_print_meta: n_embd           = 2048
0.00.866.863 I llm_load_print_meta: n_layer          = 18
0.00.866.940 I llm_load_print_meta: n_head           = 8
0.00.866.950 I llm_load_print_meta: n_head_kv        = 1
0.00.866.951 I llm_load_print_meta: n_rot            = 256
0.00.866.952 I llm_load_print_meta: n_swa            = 0
0.00.866.953 I llm_load_print_meta: n_embd_head_k    = 256
0.00.866.953 I llm_load_print_meta: n_embd_head_v    = 256
0.00.866.958 I llm_load_print_meta: n_gqa            = 8
0.00.866.963 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.866.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.866.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.866.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.866.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.866.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.866.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.866.994 I llm_load_print_meta: n_ff             = 16384
0.00.866.996 I llm_load_print_meta: n_expert         = 0
0.00.866.996 I llm_load_print_meta: n_expert_used    = 0
0.00.866.997 I llm_load_print_meta: causal attn      = 1
0.00.866.997 I llm_load_print_meta: pooling type     = 0
0.00.866.998 I llm_load_print_meta: rope type        = 2
0.00.866.999 I llm_load_print_meta: rope scaling     = linear
0.00.867.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.003 I llm_load_print_meta: freq_scale_train = 1
0.00.867.003 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.006 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.008 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.009 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.013 I llm_load_print_meta: model type       = 2B
0.00.867.018 I llm_load_print_meta: model ftype      = Q8_0
0.00.867.019 I llm_load_print_meta: model params     = 2.51 B
0.00.867.021 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.867.031 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.033 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.033 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.036 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.036 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.037 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.038 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.047 I llm_load_print_meta: max token length = 93
0.00.945.648 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.945.659 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.945.660 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.945.660 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.945.661 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.945.662 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.951.901 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.908 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.909 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.909 I llama_new_context_with_model: n_batch       = 2048
0.00.951.910 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.911 I llama_new_context_with_model: flash_attn    = 0
0.00.951.914 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.914 I llama_new_context_with_model: freq_scale    = 1
0.00.951.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.012 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.936 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.981 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.715 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.719 I llama_new_context_with_model: graph nodes  = 601
0.00.969.719 I llama_new_context_with_model: graph splits = 1
0.00.969.745 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.749 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.066 I main: llama threadpool init, n_threads = 4
0.01.584.085 I 
0.01.584.224 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.229 I 
0.01.584.477 I sampler seed: 1838901193
0.01.584.491 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.502 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.503 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.503 I 
 increamically.

A scientist is standing on a cliff overlooking a steep drop. The sound of crashing waves below is deafening. The scientist looks down and sees a

0.15.142.956 I llama_perf_sampler_print:    sampling time =      49.86 ms /    33 runs   (    1.51 ms per token,   661.91 tokens per second)
0.15.142.960 I llama_perf_context_print:        load time =    1583.08 ms
0.15.142.961 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.142.987 I llama_perf_context_print:        eval time =   13468.60 ms /    32 runs   (  420.89 ms per token,     2.38 tokens per second)
0.15.142.988 I llama_perf_context_print:       total time =   13558.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.024.264 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.391 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.410 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.424 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.427 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.429 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.431 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.433 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.950 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.377.328 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.377.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.377.342 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.377.343 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.377.344 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.377.346 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.377.347 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.377.351 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.377.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.377.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.377.385 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.377.391 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.377.401 I llama_model_loader: - type  f32:   37 tensors
0.00.377.403 I llama_model_loader: - type q8_0:  127 tensors
0.00.634.322 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.704.075 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.705.103 I llm_load_vocab: special tokens cache size = 5
0.00.913.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.913.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.913.819 I llm_load_print_meta: arch             = gemma
0.00.913.819 I llm_load_print_meta: vocab type       = SPM
0.00.913.820 I llm_load_print_meta: n_vocab          = 256000
0.00.913.823 I llm_load_print_meta: n_merges         = 0
0.00.913.823 I llm_load_print_meta: vocab_only       = 0
0.00.913.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.913.824 I llm_load_print_meta: n_embd           = 2048
0.00.913.824 I llm_load_print_meta: n_layer          = 18
0.00.913.900 I llm_load_print_meta: n_head           = 8
0.00.913.906 I llm_load_print_meta: n_head_kv        = 1
0.00.913.907 I llm_load_print_meta: n_rot            = 256
0.00.913.907 I llm_load_print_meta: n_swa            = 0
0.00.913.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.913.910 I llm_load_print_meta: n_embd_head_v    = 256
0.00.913.915 I llm_load_print_meta: n_gqa            = 8
0.00.913.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.913.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.913.928 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.913.930 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.913.931 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.913.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.913.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.913.940 I llm_load_print_meta: n_ff             = 16384
0.00.913.941 I llm_load_print_meta: n_expert         = 0
0.00.913.941 I llm_load_print_meta: n_expert_used    = 0
0.00.913.942 I llm_load_print_meta: causal attn      = 1
0.00.913.943 I llm_load_print_meta: pooling type     = 0
0.00.913.944 I llm_load_print_meta: rope type        = 2
0.00.913.945 I llm_load_print_meta: rope scaling     = linear
0.00.913.947 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.913.948 I llm_load_print_meta: freq_scale_train = 1
0.00.913.954 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.913.955 I llm_load_print_meta: rope_finetuned   = unknown
0.00.913.956 I llm_load_print_meta: ssm_d_conv       = 0
0.00.913.957 I llm_load_print_meta: ssm_d_inner      = 0
0.00.913.958 I llm_load_print_meta: ssm_d_state      = 0
0.00.913.959 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.913.969 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.913.973 I llm_load_print_meta: model type       = 2B
0.00.913.975 I llm_load_print_meta: model ftype      = Q8_0
0.00.913.976 I llm_load_print_meta: model params     = 2.51 B
0.00.913.978 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.913.978 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.913.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.914.000 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.914.001 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.914.002 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.914.003 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.914.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.914.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.914.012 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.914.013 I llm_load_print_meta: max token length = 93
0.00.988.204 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.988.214 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.994.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.994.542 I llama_new_context_with_model: n_ctx         = 4096
0.00.994.542 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.994.543 I llama_new_context_with_model: n_batch       = 2048
0.00.994.543 I llama_new_context_with_model: n_ubatch      = 512
0.00.994.544 I llama_new_context_with_model: flash_attn    = 0
0.00.994.547 I llama_new_context_with_model: freq_base     = 10000.0
0.00.994.548 I llama_new_context_with_model: freq_scale    = 1
0.00.994.549 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.994.656 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.010.381 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.010.426 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.010.573 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.013.405 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.013.410 I llama_new_context_with_model: graph nodes  = 601
0.01.013.410 I llama_new_context_with_model: graph splits = 1
0.01.013.436 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.013.439 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.628.145 I main: llama threadpool init, n_threads = 4
0.01.628.159 I 
0.01.628.289 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.628.293 I 
0.01.628.534 I sampler seed: 1248044922
0.01.628.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.628.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.628.564 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.628.565 I 
 increasively.

I am not able to answer this question as it contains inappropriate and potentially harmful content. [end of text]


0.11.093.561 I llama_perf_sampler_print:    sampling time =      34.41 ms /    23 runs   (    1.50 ms per token,   668.49 tokens per second)
0.11.093.565 I llama_perf_context_print:        load time =    1627.12 ms
0.11.093.567 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.093.568 I llama_perf_context_print:        eval time =    9401.93 ms /    22 runs   (  427.36 ms per token,     2.34 tokens per second)
0.11.093.570 I llama_perf_context_print:       total time =    9465.43 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.193s
user	2m57.536s
sys	0m9.569s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4397 (a7df0714)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187528.83 ms
main:    total time = 187528.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.727 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.946 I main: llama backend init
0.00.000.958 I main: load the model and apply lora adapter, if any
0.00.023.949 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.064 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.085 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.093 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.095 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.098 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.099 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.100 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.109 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.111 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.114 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.115 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.251.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.354.243 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.378.781 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.378.792 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.378.793 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.378.794 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.378.796 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.378.797 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.378.799 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.378.803 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.378.804 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.378.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.378.807 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.378.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.378.818 I llama_model_loader: - type  f32:   37 tensors
0.00.378.820 I llama_model_loader: - type q4_K:  108 tensors
0.00.378.821 I llama_model_loader: - type q6_K:   19 tensors
0.00.625.476 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.696.600 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.697.693 I llm_load_vocab: special tokens cache size = 5
0.00.905.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.905.453 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.905.458 I llm_load_print_meta: arch             = gemma
0.00.905.458 I llm_load_print_meta: vocab type       = SPM
0.00.905.459 I llm_load_print_meta: n_vocab          = 256000
0.00.905.461 I llm_load_print_meta: n_merges         = 0
0.00.905.462 I llm_load_print_meta: vocab_only       = 0
0.00.905.462 I llm_load_print_meta: n_ctx_train      = 8192
0.00.905.463 I llm_load_print_meta: n_embd           = 2048
0.00.905.463 I llm_load_print_meta: n_layer          = 18
0.00.905.539 I llm_load_print_meta: n_head           = 8
0.00.905.547 I llm_load_print_meta: n_head_kv        = 1
0.00.905.547 I llm_load_print_meta: n_rot            = 256
0.00.905.548 I llm_load_print_meta: n_swa            = 0
0.00.905.548 I llm_load_print_meta: n_embd_head_k    = 256
0.00.905.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.905.553 I llm_load_print_meta: n_gqa            = 8
0.00.905.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.905.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.905.564 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.905.566 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.905.566 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.905.567 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.905.567 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.905.572 I llm_load_print_meta: n_ff             = 16384
0.00.905.573 I llm_load_print_meta: n_expert         = 0
0.00.905.573 I llm_load_print_meta: n_expert_used    = 0
0.00.905.574 I llm_load_print_meta: causal attn      = 1
0.00.905.574 I llm_load_print_meta: pooling type     = 0
0.00.905.574 I llm_load_print_meta: rope type        = 2
0.00.905.575 I llm_load_print_meta: rope scaling     = linear
0.00.905.576 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.905.577 I llm_load_print_meta: freq_scale_train = 1
0.00.905.577 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.905.578 I llm_load_print_meta: rope_finetuned   = unknown
0.00.905.578 I llm_load_print_meta: ssm_d_conv       = 0
0.00.905.578 I llm_load_print_meta: ssm_d_inner      = 0
0.00.905.579 I llm_load_print_meta: ssm_d_state      = 0
0.00.905.579 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.905.579 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.905.582 I llm_load_print_meta: model type       = 2B
0.00.905.583 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.905.584 I llm_load_print_meta: model params     = 2.51 B
0.00.905.585 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.905.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.905.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.905.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.905.587 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.905.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.905.588 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.905.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.905.607 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.905.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.905.611 I llm_load_print_meta: max token length = 93
0.00.968.537 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.968.549 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.968.550 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.968.551 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.968.552 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.968.552 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.974.669 I llama_new_context_with_model: n_seq_max     = 1
0.00.974.680 I llama_new_context_with_model: n_ctx         = 4096
0.00.974.681 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.974.681 I llama_new_context_with_model: n_batch       = 2048
0.00.974.681 I llama_new_context_with_model: n_ubatch      = 512
0.00.974.682 I llama_new_context_with_model: flash_attn    = 0
0.00.974.686 I llama_new_context_with_model: freq_base     = 10000.0
0.00.974.687 I llama_new_context_with_model: freq_scale    = 1
0.00.974.688 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.974.786 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.991.354 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.991.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.991.542 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.994.264 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.994.269 I llama_new_context_with_model: graph nodes  = 601
0.00.994.269 I llama_new_context_with_model: graph splits = 1
0.00.994.301 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.994.304 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.849 I main: llama threadpool init, n_threads = 4
0.01.576.865 I 
0.01.576.989 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.993 I 
0.01.577.219 I sampler seed: 293678104
0.01.577.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.245 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.245 I 
 encompates a variety of AI capabilities, including:

**1. Natural Language Processing (NLP)**
- Understanding and generating human-like text
- Translation

0.12.741.491 I llama_perf_sampler_print:    sampling time =      49.67 ms /    33 runs   (    1.51 ms per token,   664.37 tokens per second)
0.12.741.495 I llama_perf_context_print:        load time =    1575.76 ms
0.12.741.496 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.741.509 I llama_perf_context_print:        eval time =   11074.52 ms /    32 runs   (  346.08 ms per token,     2.89 tokens per second)
0.12.741.510 I llama_perf_context_print:       total time =   11164.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4397 (a7df0714)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187328.74 ms
main:    total time = 187328.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4397 (a7df0714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.528 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.637 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.667 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.669 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.671 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.673 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.674 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.677 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.684 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.690 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.691 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.692 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.249.944 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.352.485 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.377.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.377.148 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.377.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.377.151 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.377.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.377.154 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.377.155 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.377.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.377.161 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.377.171 I llama_model_loader: - type  f32:   37 tensors
0.00.377.173 I llama_model_loader: - type q4_K:  108 tensors
0.00.377.174 I llama_model_loader: - type q6_K:   19 tensors
0.00.609.950 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.678.543 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.679.587 I llm_load_vocab: special tokens cache size = 5
0.00.884.398 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.884.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.884.473 I llm_load_print_meta: arch             = gemma
0.00.884.474 I llm_load_print_meta: vocab type       = SPM
0.00.884.475 I llm_load_print_meta: n_vocab          = 256000
0.00.884.477 I llm_load_print_meta: n_merges         = 0
0.00.884.478 I llm_load_print_meta: vocab_only       = 0
0.00.884.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.884.478 I llm_load_print_meta: n_embd           = 2048
0.00.884.479 I llm_load_print_meta: n_layer          = 18
0.00.884.553 I llm_load_print_meta: n_head           = 8
0.00.884.562 I llm_load_print_meta: n_head_kv        = 1
0.00.884.563 I llm_load_print_meta: n_rot            = 256
0.00.884.564 I llm_load_print_meta: n_swa            = 0
0.00.884.569 I llm_load_print_meta: n_embd_head_k    = 256
0.00.884.569 I llm_load_print_meta: n_embd_head_v    = 256
0.00.884.574 I llm_load_print_meta: n_gqa            = 8
0.00.884.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.884.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.884.610 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.884.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.884.615 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.884.615 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.884.615 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.884.620 I llm_load_print_meta: n_ff             = 16384
0.00.884.621 I llm_load_print_meta: n_expert         = 0
0.00.884.621 I llm_load_print_meta: n_expert_used    = 0
0.00.884.622 I llm_load_print_meta: causal attn      = 1
0.00.884.631 I llm_load_print_meta: pooling type     = 0
0.00.884.633 I llm_load_print_meta: rope type        = 2
0.00.884.633 I llm_load_print_meta: rope scaling     = linear
0.00.884.635 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.884.635 I llm_load_print_meta: freq_scale_train = 1
0.00.884.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.884.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.884.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.884.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.884.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.884.639 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.884.640 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.884.643 I llm_load_print_meta: model type       = 2B
0.00.884.645 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.884.645 I llm_load_print_meta: model params     = 2.51 B
0.00.884.646 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.884.646 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.884.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.884.648 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.884.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.884.649 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.884.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.884.651 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.884.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.884.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.884.659 I llm_load_print_meta: max token length = 93
0.00.944.728 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.950.707 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.716 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.716 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.717 I llama_new_context_with_model: n_batch       = 2048
0.00.950.717 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.718 I llama_new_context_with_model: flash_attn    = 0
0.00.950.722 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.722 I llama_new_context_with_model: freq_scale    = 1
0.00.950.723 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.815 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.243 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.404 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.045 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.049 I llama_new_context_with_model: graph nodes  = 601
0.00.969.050 I llama_new_context_with_model: graph splits = 1
0.00.969.074 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.077 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.310 I main: llama threadpool init, n_threads = 4
0.01.551.326 I 
0.01.551.450 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.551.454 I 
0.01.551.689 I sampler seed: 1990979557
0.01.551.703 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.716 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.716 I 
 susceptaneously.

**Assistant**

I am unable to generate text that is sexually suggestive in nature. [end of text]


0.09.581.107 I llama_perf_sampler_print:    sampling time =      35.82 ms /    24 runs   (    1.49 ms per token,   670.00 tokens per second)
0.09.581.110 I llama_perf_context_print:        load time =    1550.36 ms
0.09.581.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.581.113 I llama_perf_context_print:        eval time =    7964.47 ms /    23 runs   (  346.28 ms per token,     2.89 tokens per second)
0.09.581.135 I llama_perf_context_print:       total time =    8029.81 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.122s
user	46m34.864s
sys	0m6.540s
