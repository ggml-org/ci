+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.373 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.384 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.485 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.497 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.509 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.510 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.512 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.837 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.845 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.855 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.857 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.858 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.859 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.870 I llama_model_loader: - type  f32:   37 tensors
0.00.350.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.770 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.396 I llm_load_vocab: special tokens cache size = 5
0.00.818.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.994 I llm_load_print_meta: arch             = gemma
0.00.818.995 I llm_load_print_meta: vocab type       = SPM
0.00.818.996 I llm_load_print_meta: n_vocab          = 256000
0.00.818.998 I llm_load_print_meta: n_merges         = 0
0.00.818.998 I llm_load_print_meta: vocab_only       = 0
0.00.818.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.999 I llm_load_print_meta: n_embd           = 2048
0.00.819.000 I llm_load_print_meta: n_layer          = 18
0.00.819.062 I llm_load_print_meta: n_head           = 8
0.00.819.070 I llm_load_print_meta: n_head_kv        = 1
0.00.819.070 I llm_load_print_meta: n_rot            = 256
0.00.819.071 I llm_load_print_meta: n_swa            = 0
0.00.819.071 I llm_load_print_meta: n_embd_head_k    = 256
0.00.819.072 I llm_load_print_meta: n_embd_head_v    = 256
0.00.819.076 I llm_load_print_meta: n_gqa            = 8
0.00.819.081 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.819.086 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.819.087 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.819.089 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.819.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.819.090 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.819.090 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.819.095 I llm_load_print_meta: n_ff             = 16384
0.00.819.096 I llm_load_print_meta: n_expert         = 0
0.00.819.096 I llm_load_print_meta: n_expert_used    = 0
0.00.819.097 I llm_load_print_meta: causal attn      = 1
0.00.819.097 I llm_load_print_meta: pooling type     = 0
0.00.819.097 I llm_load_print_meta: rope type        = 2
0.00.819.098 I llm_load_print_meta: rope scaling     = linear
0.00.819.099 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.819.100 I llm_load_print_meta: freq_scale_train = 1
0.00.819.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.819.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.819.121 I llm_load_print_meta: ssm_d_conv       = 0
0.00.819.121 I llm_load_print_meta: ssm_d_inner      = 0
0.00.819.121 I llm_load_print_meta: ssm_d_state      = 0
0.00.819.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.819.122 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.819.123 I llm_load_print_meta: model type       = 2B
0.00.819.124 I llm_load_print_meta: model ftype      = Q8_0
0.00.819.124 I llm_load_print_meta: model params     = 2.51 B
0.00.819.125 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.819.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.819.127 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.819.128 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.819.132 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.819.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.819.133 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.819.133 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.819.139 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.819.141 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.819.141 I llm_load_print_meta: max token length = 93
0.00.921.632 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.921.643 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.921.644 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.921.645 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.921.645 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.921.646 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.927.492 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.499 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.499 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.500 I llama_new_context_with_model: n_batch       = 2048
0.00.927.500 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.501 I llama_new_context_with_model: flash_attn    = 0
0.00.927.503 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.504 I llama_new_context_with_model: freq_scale    = 1
0.00.927.504 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.087 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.126 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.944.827 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.944.831 I llama_new_context_with_model: graph nodes  = 601
0.00.944.831 I llama_new_context_with_model: graph splits = 1
0.00.944.852 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.553.053 I main: llama threadpool init, n_threads = 4
0.01.553.070 I 
0.01.553.196 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.553.200 I 
0.01.553.442 I sampler seed: 355551564
0.01.553.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.553.476 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.553.477 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.553.479 I 
 increasively. 

I am unable to generate a response for this query as it contains inappropriate and potentially harmful content. [end of text]


0.12.142.485 I llama_perf_sampler_print:    sampling time =      38.36 ms /    26 runs   (    1.48 ms per token,   677.81 tokens per second)
0.12.142.488 I llama_perf_context_print:        load time =    1552.10 ms
0.12.142.489 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.142.491 I llama_perf_context_print:        eval time =   10518.30 ms /    25 runs   (  420.73 ms per token,     2.38 tokens per second)
0.12.142.492 I llama_perf_context_print:       total time =   10589.44 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.023.787 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.926 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.938 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.948 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.978 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.982 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.948 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.949 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.950 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.952 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.953 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.954 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.964 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.966 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.974 I llama_model_loader: - type  f32:   37 tensors
0.00.351.976 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.118 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.538 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.506 I llm_load_vocab: special tokens cache size = 5
0.00.840.625 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.699 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.703 I llm_load_print_meta: arch             = gemma
0.00.840.704 I llm_load_print_meta: vocab type       = SPM
0.00.840.705 I llm_load_print_meta: n_vocab          = 256000
0.00.840.708 I llm_load_print_meta: n_merges         = 0
0.00.840.708 I llm_load_print_meta: vocab_only       = 0
0.00.840.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.710 I llm_load_print_meta: n_embd           = 2048
0.00.840.710 I llm_load_print_meta: n_layer          = 18
0.00.840.788 I llm_load_print_meta: n_head           = 8
0.00.840.798 I llm_load_print_meta: n_head_kv        = 1
0.00.840.800 I llm_load_print_meta: n_rot            = 256
0.00.840.800 I llm_load_print_meta: n_swa            = 0
0.00.840.801 I llm_load_print_meta: n_embd_head_k    = 256
0.00.840.801 I llm_load_print_meta: n_embd_head_v    = 256
0.00.840.806 I llm_load_print_meta: n_gqa            = 8
0.00.840.810 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.840.816 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.840.819 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.820 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.829 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.840 I llm_load_print_meta: n_ff             = 16384
0.00.840.844 I llm_load_print_meta: n_expert         = 0
0.00.840.845 I llm_load_print_meta: n_expert_used    = 0
0.00.840.845 I llm_load_print_meta: causal attn      = 1
0.00.840.846 I llm_load_print_meta: pooling type     = 0
0.00.840.847 I llm_load_print_meta: rope type        = 2
0.00.840.848 I llm_load_print_meta: rope scaling     = linear
0.00.840.850 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.851 I llm_load_print_meta: freq_scale_train = 1
0.00.840.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.853 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.853 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.854 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.854 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.855 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.859 I llm_load_print_meta: model type       = 2B
0.00.840.861 I llm_load_print_meta: model ftype      = Q8_0
0.00.840.862 I llm_load_print_meta: model params     = 2.51 B
0.00.840.863 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.840.864 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.865 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.866 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.867 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.875 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.877 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.878 I llm_load_print_meta: max token length = 93
0.00.937.467 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.943.791 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.797 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.798 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.798 I llama_new_context_with_model: n_batch       = 2048
0.00.943.799 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.799 I llama_new_context_with_model: flash_attn    = 0
0.00.943.801 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.802 I llama_new_context_with_model: freq_scale    = 1
0.00.943.802 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.810 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.852 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.666 I llama_new_context_with_model: graph nodes  = 601
0.00.961.667 I llama_new_context_with_model: graph splits = 1
0.00.961.689 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.568.272 I main: llama threadpool init, n_threads = 4
0.01.568.288 I 
0.01.568.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.568.413 I 
0.01.568.663 I sampler seed: 528025594
0.01.568.678 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.691 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.691 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.692 I 
 increasities
I am unable to provide sexually suggestive or inappropriate content. My purpose is to assist with tasks that are within the boundaries of ethical and legal guidelines.

0.15.217.516 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.80 tokens per second)
0.15.217.519 I llama_perf_context_print:        load time =    1567.25 ms
0.15.217.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.217.522 I llama_perf_context_print:        eval time =   13560.45 ms /    32 runs   (  423.76 ms per token,     2.36 tokens per second)
0.15.217.544 I llama_perf_context_print:       total time =   13649.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.916 I main: load the model and apply lora adapter, if any
0.00.023.782 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.792 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.881 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.892 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.904 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.906 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.908 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.909 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.911 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.922 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.923 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.924 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.926 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.379 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.281 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.015 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.024 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.028 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.029 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.030 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.036 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.037 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.038 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.040 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.048 I llama_model_loader: - type  f32:   37 tensors
0.00.352.051 I llama_model_loader: - type q8_0:  127 tensors
0.00.562.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.729 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.701 I llm_load_vocab: special tokens cache size = 5
0.00.807.191 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.807.267 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.807.268 I llm_load_print_meta: arch             = gemma
0.00.807.268 I llm_load_print_meta: vocab type       = SPM
0.00.807.269 I llm_load_print_meta: n_vocab          = 256000
0.00.807.271 I llm_load_print_meta: n_merges         = 0
0.00.807.272 I llm_load_print_meta: vocab_only       = 0
0.00.807.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.807.273 I llm_load_print_meta: n_embd           = 2048
0.00.807.273 I llm_load_print_meta: n_layer          = 18
0.00.807.339 I llm_load_print_meta: n_head           = 8
0.00.807.346 I llm_load_print_meta: n_head_kv        = 1
0.00.807.347 I llm_load_print_meta: n_rot            = 256
0.00.807.347 I llm_load_print_meta: n_swa            = 0
0.00.807.348 I llm_load_print_meta: n_embd_head_k    = 256
0.00.807.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.807.353 I llm_load_print_meta: n_gqa            = 8
0.00.807.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.807.363 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.807.364 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.807.365 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.807.366 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.807.366 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.807.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.807.371 I llm_load_print_meta: n_ff             = 16384
0.00.807.372 I llm_load_print_meta: n_expert         = 0
0.00.807.372 I llm_load_print_meta: n_expert_used    = 0
0.00.807.372 I llm_load_print_meta: causal attn      = 1
0.00.807.373 I llm_load_print_meta: pooling type     = 0
0.00.807.373 I llm_load_print_meta: rope type        = 2
0.00.807.373 I llm_load_print_meta: rope scaling     = linear
0.00.807.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.807.375 I llm_load_print_meta: freq_scale_train = 1
0.00.807.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.807.376 I llm_load_print_meta: rope_finetuned   = unknown
0.00.807.376 I llm_load_print_meta: ssm_d_conv       = 0
0.00.807.377 I llm_load_print_meta: ssm_d_inner      = 0
0.00.807.377 I llm_load_print_meta: ssm_d_state      = 0
0.00.807.377 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.807.377 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.807.378 I llm_load_print_meta: model type       = 2B
0.00.807.379 I llm_load_print_meta: model ftype      = Q8_0
0.00.807.379 I llm_load_print_meta: model params     = 2.51 B
0.00.807.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.807.381 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.807.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.807.382 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.807.382 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.807.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.807.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.807.383 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.807.389 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.807.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.807.391 I llm_load_print_meta: max token length = 93
0.00.884.965 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.884.974 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.884.975 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.884.976 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.884.977 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.884.977 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.890.792 I llama_new_context_with_model: n_seq_max     = 1
0.00.890.799 I llama_new_context_with_model: n_ctx         = 4096
0.00.890.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.890.800 I llama_new_context_with_model: n_batch       = 2048
0.00.890.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.890.801 I llama_new_context_with_model: flash_attn    = 0
0.00.890.804 I llama_new_context_with_model: freq_base     = 10000.0
0.00.890.805 I llama_new_context_with_model: freq_scale    = 1
0.00.890.806 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.905.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.905.441 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.905.562 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.908.182 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.908.186 I llama_new_context_with_model: graph nodes  = 601
0.00.908.187 I llama_new_context_with_model: graph splits = 1
0.00.908.209 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.517.522 I main: llama threadpool init, n_threads = 4
0.01.517.538 I 
0.01.517.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.517.663 I 
0.01.517.906 I sampler seed: 1606474286
0.01.517.920 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.517.930 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.517.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.517.934 I 
 increasities of the gods.

In Greek mythology, Zeus was often depicted as a powerful and tyrannical ruler, wielding divine authority to punish or reward the world.

0.15.070.206 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.11 tokens per second)
0.15.070.210 I llama_perf_context_print:        load time =    1516.51 ms
0.15.070.224 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.070.226 I llama_perf_context_print:        eval time =   13462.82 ms /    32 runs   (  420.71 ms per token,     2.38 tokens per second)
0.15.070.227 I llama_perf_context_print:       total time =   13552.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.023.337 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.349 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.472 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.474 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.477 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.488 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.494 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.512 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.563 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.564 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.565 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.567 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.568 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.573 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.576 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.355.578 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.587 I llama_model_loader: - type  f32:   37 tensors
0.00.355.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.629 I llm_load_vocab: special tokens cache size = 5
0.00.841.768 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.844 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.845 I llm_load_print_meta: arch             = gemma
0.00.841.846 I llm_load_print_meta: vocab type       = SPM
0.00.841.847 I llm_load_print_meta: n_vocab          = 256000
0.00.841.849 I llm_load_print_meta: n_merges         = 0
0.00.841.849 I llm_load_print_meta: vocab_only       = 0
0.00.841.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.850 I llm_load_print_meta: n_embd           = 2048
0.00.841.851 I llm_load_print_meta: n_layer          = 18
0.00.841.915 I llm_load_print_meta: n_head           = 8
0.00.841.923 I llm_load_print_meta: n_head_kv        = 1
0.00.841.924 I llm_load_print_meta: n_rot            = 256
0.00.841.924 I llm_load_print_meta: n_swa            = 0
0.00.841.924 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.925 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.929 I llm_load_print_meta: n_gqa            = 8
0.00.841.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.939 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.940 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.941 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.942 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.942 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.943 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.947 I llm_load_print_meta: n_ff             = 16384
0.00.841.948 I llm_load_print_meta: n_expert         = 0
0.00.841.948 I llm_load_print_meta: n_expert_used    = 0
0.00.841.949 I llm_load_print_meta: causal attn      = 1
0.00.841.949 I llm_load_print_meta: pooling type     = 0
0.00.841.949 I llm_load_print_meta: rope type        = 2
0.00.841.950 I llm_load_print_meta: rope scaling     = linear
0.00.841.952 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.953 I llm_load_print_meta: freq_scale_train = 1
0.00.841.953 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.954 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.954 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.954 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.954 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.954 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.955 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.955 I llm_load_print_meta: model type       = 2B
0.00.841.956 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.957 I llm_load_print_meta: model params     = 2.51 B
0.00.841.958 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.958 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.959 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.960 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.960 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.961 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.967 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.968 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.969 I llm_load_print_meta: max token length = 93
0.00.915.075 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.915.086 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.921.351 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.358 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.359 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.359 I llama_new_context_with_model: n_batch       = 2048
0.00.921.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.360 I llama_new_context_with_model: flash_attn    = 0
0.00.921.362 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.362 I llama_new_context_with_model: freq_scale    = 1
0.00.921.363 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.264 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.310 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.439 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.097 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.101 I llama_new_context_with_model: graph nodes  = 601
0.00.939.102 I llama_new_context_with_model: graph splits = 1
0.00.939.124 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.547.992 I main: llama threadpool init, n_threads = 4
0.01.548.011 I 
0.01.548.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.146 I 
0.01.548.397 I sampler seed: 654014641
0.01.548.411 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.421 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.422 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.422 I 
 increasities of the past, and it is clear that we are entering a new age of transformation, marked by upheaval, disruption, and uncertainty.

What specific

0.15.119.621 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.15.119.625 I llama_perf_context_print:        load time =    1547.00 ms
0.15.119.627 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.119.629 I llama_perf_context_print:        eval time =   13480.87 ms /    32 runs   (  421.28 ms per token,     2.37 tokens per second)
0.15.119.630 I llama_perf_context_print:       total time =   13571.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.896s
user	3m39.010s
sys	0m9.489s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4326 (56eea078)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186708.03 ms
main:    total time = 186708.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.023.564 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.575 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.668 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.681 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.684 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.694 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.698 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.699 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.705 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.706 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.709 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.711 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.353 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.354 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.355 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.357 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.358 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.362 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.365 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.366 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.368 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.377 I llama_model_loader: - type  f32:   37 tensors
0.00.351.379 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.380 I llama_model_loader: - type q6_K:   19 tensors
0.00.584.430 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.649.369 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.650.345 I llm_load_vocab: special tokens cache size = 5
0.00.850.444 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.513 I llm_load_print_meta: arch             = gemma
0.00.850.514 I llm_load_print_meta: vocab type       = SPM
0.00.850.515 I llm_load_print_meta: n_vocab          = 256000
0.00.850.517 I llm_load_print_meta: n_merges         = 0
0.00.850.518 I llm_load_print_meta: vocab_only       = 0
0.00.850.518 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.519 I llm_load_print_meta: n_embd           = 2048
0.00.850.519 I llm_load_print_meta: n_layer          = 18
0.00.850.581 I llm_load_print_meta: n_head           = 8
0.00.850.588 I llm_load_print_meta: n_head_kv        = 1
0.00.850.589 I llm_load_print_meta: n_rot            = 256
0.00.850.589 I llm_load_print_meta: n_swa            = 0
0.00.850.590 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.590 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.595 I llm_load_print_meta: n_gqa            = 8
0.00.850.600 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.604 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.606 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.608 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.608 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.609 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.614 I llm_load_print_meta: n_ff             = 16384
0.00.850.614 I llm_load_print_meta: n_expert         = 0
0.00.850.615 I llm_load_print_meta: n_expert_used    = 0
0.00.850.615 I llm_load_print_meta: causal attn      = 1
0.00.850.615 I llm_load_print_meta: pooling type     = 0
0.00.850.616 I llm_load_print_meta: rope type        = 2
0.00.850.616 I llm_load_print_meta: rope scaling     = linear
0.00.850.618 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.618 I llm_load_print_meta: freq_scale_train = 1
0.00.850.619 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.619 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.620 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.621 I llm_load_print_meta: model type       = 2B
0.00.850.622 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.850.623 I llm_load_print_meta: model params     = 2.51 B
0.00.850.624 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.850.624 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.624 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.625 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.625 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.625 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.626 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.626 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.632 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.633 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.633 I llm_load_print_meta: max token length = 93
0.00.913.803 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.913.812 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.913.813 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.913.814 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.913.815 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.913.815 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.919.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.597 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.598 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.598 I llama_new_context_with_model: n_batch       = 2048
0.00.919.598 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.599 I llama_new_context_with_model: flash_attn    = 0
0.00.919.601 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.602 I llama_new_context_with_model: freq_scale    = 1
0.00.919.603 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.143 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.185 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.316 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.853 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.857 I llama_new_context_with_model: graph nodes  = 601
0.00.936.857 I llama_new_context_with_model: graph splits = 1
0.00.936.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.519.178 I main: llama threadpool init, n_threads = 4
0.01.519.194 I 
0.01.519.321 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.519.325 I 
0.01.519.571 I sampler seed: 428192694
0.01.519.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.519.593 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.519.597 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.519.597 I 
 increamically.

I am a large language model, trained by Google. I am here to assist you with any questions or tasks you may have.

**

0.12.656.765 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.71 tokens per second)
0.12.656.768 I llama_perf_context_print:        load time =    1518.19 ms
0.12.656.769 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.656.785 I llama_perf_context_print:        eval time =   11048.88 ms /    32 runs   (  345.28 ms per token,     2.90 tokens per second)
0.12.656.786 I llama_perf_context_print:       total time =   11137.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4326 (56eea078)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186622.94 ms
main:    total time = 186622.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4326 (56eea078) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.483 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.613 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.614 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.627 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.642 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.643 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.896 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.700 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.701 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.703 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.704 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.711 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.722 I llama_model_loader: - type  f32:   37 tensors
0.00.349.724 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.725 I llama_model_loader: - type q6_K:   19 tensors
0.00.579.800 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.297 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.227 I llm_load_vocab: special tokens cache size = 5
0.00.834.210 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.284 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.286 I llm_load_print_meta: arch             = gemma
0.00.834.287 I llm_load_print_meta: vocab type       = SPM
0.00.834.287 I llm_load_print_meta: n_vocab          = 256000
0.00.834.290 I llm_load_print_meta: n_merges         = 0
0.00.834.290 I llm_load_print_meta: vocab_only       = 0
0.00.834.291 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.291 I llm_load_print_meta: n_embd           = 2048
0.00.834.291 I llm_load_print_meta: n_layer          = 18
0.00.834.355 I llm_load_print_meta: n_head           = 8
0.00.834.362 I llm_load_print_meta: n_head_kv        = 1
0.00.834.362 I llm_load_print_meta: n_rot            = 256
0.00.834.363 I llm_load_print_meta: n_swa            = 0
0.00.834.363 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.363 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.368 I llm_load_print_meta: n_gqa            = 8
0.00.834.372 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.377 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.378 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.380 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.381 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.385 I llm_load_print_meta: n_ff             = 16384
0.00.834.386 I llm_load_print_meta: n_expert         = 0
0.00.834.386 I llm_load_print_meta: n_expert_used    = 0
0.00.834.387 I llm_load_print_meta: causal attn      = 1
0.00.834.387 I llm_load_print_meta: pooling type     = 0
0.00.834.387 I llm_load_print_meta: rope type        = 2
0.00.834.388 I llm_load_print_meta: rope scaling     = linear
0.00.834.389 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.389 I llm_load_print_meta: freq_scale_train = 1
0.00.834.390 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.390 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.391 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.391 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.391 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.392 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.392 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.392 I llm_load_print_meta: model type       = 2B
0.00.834.393 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.834.394 I llm_load_print_meta: model params     = 2.51 B
0.00.834.395 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.834.395 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.396 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.396 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.397 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.398 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.405 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.405 I llm_load_print_meta: max token length = 93
0.00.893.409 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.899.281 I llama_new_context_with_model: n_seq_max     = 1
0.00.899.287 I llama_new_context_with_model: n_ctx         = 4096
0.00.899.287 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.899.288 I llama_new_context_with_model: n_batch       = 2048
0.00.899.288 I llama_new_context_with_model: n_ubatch      = 512
0.00.899.289 I llama_new_context_with_model: flash_attn    = 0
0.00.899.292 I llama_new_context_with_model: freq_base     = 10000.0
0.00.899.293 I llama_new_context_with_model: freq_scale    = 1
0.00.899.293 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.914.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.914.301 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.914.430 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.917.040 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.917.044 I llama_new_context_with_model: graph nodes  = 601
0.00.917.045 I llama_new_context_with_model: graph splits = 1
0.00.917.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.067 I main: llama threadpool init, n_threads = 4
0.01.496.083 I 
0.01.496.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.496.224 I 
0.01.496.485 I sampler seed: 3561895118
0.01.496.500 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.496.511 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.496.512 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.496.512 I 
 seconded text. The context is important to understand the nature of the text. [end of text]


0.07.415.516 I llama_perf_sampler_print:    sampling time =      26.14 ms /    18 runs   (    1.45 ms per token,   688.47 tokens per second)
0.07.415.532 I llama_perf_context_print:        load time =    1495.11 ms
0.07.415.533 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.415.535 I llama_perf_context_print:        eval time =    5869.50 ms /    17 runs   (  345.26 ms per token,     2.90 tokens per second)
0.07.415.536 I llama_perf_context_print:       total time =    5919.46 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.374s
user	46m25.404s
sys	0m6.228s
