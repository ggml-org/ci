+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.638 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.772 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.994 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.081 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.093 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.094 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.099 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.102 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.108 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.115 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.119 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.120 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.121 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.796 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.997 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.006 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.007 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.008 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.009 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.010 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.011 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.015 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.015 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.016 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.017 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.018 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.026 I llama_model_loader: - type  f32:   37 tensors
0.00.195.031 I llama_model_loader: - type q8_0:  127 tensors
0.00.328.025 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.349.894 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.350.890 I llm_load_vocab: special tokens cache size = 5
0.00.408.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.408.078 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.408.079 I llm_load_print_meta: arch             = gemma
0.00.408.080 I llm_load_print_meta: vocab type       = SPM
0.00.408.081 I llm_load_print_meta: n_vocab          = 256000
0.00.408.083 I llm_load_print_meta: n_merges         = 0
0.00.408.084 I llm_load_print_meta: vocab_only       = 0
0.00.408.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.408.085 I llm_load_print_meta: n_embd           = 2048
0.00.408.085 I llm_load_print_meta: n_layer          = 18
0.00.408.147 I llm_load_print_meta: n_head           = 8
0.00.408.154 I llm_load_print_meta: n_head_kv        = 1
0.00.408.154 I llm_load_print_meta: n_rot            = 256
0.00.408.155 I llm_load_print_meta: n_swa            = 0
0.00.408.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.408.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.408.162 I llm_load_print_meta: n_gqa            = 8
0.00.408.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.408.171 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.408.172 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.408.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.408.185 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.408.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.408.186 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.408.192 I llm_load_print_meta: n_ff             = 16384
0.00.408.193 I llm_load_print_meta: n_expert         = 0
0.00.408.194 I llm_load_print_meta: n_expert_used    = 0
0.00.408.194 I llm_load_print_meta: causal attn      = 1
0.00.408.194 I llm_load_print_meta: pooling type     = 0
0.00.408.195 I llm_load_print_meta: rope type        = 2
0.00.408.199 I llm_load_print_meta: rope scaling     = linear
0.00.408.201 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.408.214 I llm_load_print_meta: freq_scale_train = 1
0.00.408.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.408.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.408.225 I llm_load_print_meta: ssm_d_conv       = 0
0.00.408.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.408.226 I llm_load_print_meta: ssm_d_state      = 0
0.00.408.226 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.408.234 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.408.243 I llm_load_print_meta: model type       = 2B
0.00.408.245 I llm_load_print_meta: model ftype      = Q8_0
0.00.408.245 I llm_load_print_meta: model params     = 2.51 B
0.00.408.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.408.246 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.408.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.408.247 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.408.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.408.255 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.408.256 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.408.256 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.408.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.408.264 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.408.264 I llm_load_print_meta: max token length = 93
0.00.408.431 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.509.162 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.509.171 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.509.172 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.509.172 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.509.173 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.509.174 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.514.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.514.791 I llama_new_context_with_model: n_batch    = 2048
0.00.514.791 I llama_new_context_with_model: n_ubatch   = 512
0.00.514.792 I llama_new_context_with_model: flash_attn = 0
0.00.514.794 I llama_new_context_with_model: freq_base  = 10000.0
0.00.514.795 I llama_new_context_with_model: freq_scale = 1
0.00.543.382 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.543.423 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.543.539 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.544.947 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.544.953 I llama_new_context_with_model: graph nodes  = 601
0.00.544.953 I llama_new_context_with_model: graph splits = 1
0.00.544.969 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.157.248 I main: llama threadpool init, n_threads = 4
0.01.157.259 I 
0.01.157.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.157.352 I 
0.01.157.510 I sampler seed: 3579483619
0.01.157.521 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.157.527 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.157.529 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.157.529 I 
 increasels, a mischievous gnome with a penchant for pranks.

**Part 1: The Pranking Spree**

The mischievous gnome, Zork, found

0.14.717.559 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.15 tokens per second)
0.14.717.561 I llama_perf_context_print:        load time =    1154.37 ms
0.14.717.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.717.578 I llama_perf_context_print:        eval time =   13478.35 ms /    32 runs   (  421.20 ms per token,     2.37 tokens per second)
0.14.717.579 I llama_perf_context_print:       total time =   13560.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.614 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.026.586 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.707 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.716 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.717 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.718 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.733 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.428 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.730 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.732 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.195.733 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.740 I llama_model_loader: - type  f32:   37 tensors
0.00.195.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.333.587 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.364.401 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.365.454 I llm_load_vocab: special tokens cache size = 5
0.00.422.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.422.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.422.803 I llm_load_print_meta: arch             = gemma
0.00.422.803 I llm_load_print_meta: vocab type       = SPM
0.00.422.804 I llm_load_print_meta: n_vocab          = 256000
0.00.422.807 I llm_load_print_meta: n_merges         = 0
0.00.422.808 I llm_load_print_meta: vocab_only       = 0
0.00.422.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.422.808 I llm_load_print_meta: n_embd           = 2048
0.00.422.809 I llm_load_print_meta: n_layer          = 18
0.00.422.874 I llm_load_print_meta: n_head           = 8
0.00.422.881 I llm_load_print_meta: n_head_kv        = 1
0.00.422.881 I llm_load_print_meta: n_rot            = 256
0.00.422.882 I llm_load_print_meta: n_swa            = 0
0.00.422.882 I llm_load_print_meta: n_embd_head_k    = 256
0.00.422.883 I llm_load_print_meta: n_embd_head_v    = 256
0.00.422.887 I llm_load_print_meta: n_gqa            = 8
0.00.422.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.422.896 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.422.897 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.422.898 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.422.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.422.899 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.422.900 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.422.905 I llm_load_print_meta: n_ff             = 16384
0.00.422.905 I llm_load_print_meta: n_expert         = 0
0.00.422.906 I llm_load_print_meta: n_expert_used    = 0
0.00.422.906 I llm_load_print_meta: causal attn      = 1
0.00.422.907 I llm_load_print_meta: pooling type     = 0
0.00.422.907 I llm_load_print_meta: rope type        = 2
0.00.422.908 I llm_load_print_meta: rope scaling     = linear
0.00.422.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.422.909 I llm_load_print_meta: freq_scale_train = 1
0.00.422.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.422.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.422.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.422.912 I llm_load_print_meta: ssm_d_inner      = 0
0.00.422.920 I llm_load_print_meta: ssm_d_state      = 0
0.00.422.920 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.422.921 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.422.929 I llm_load_print_meta: model type       = 2B
0.00.422.930 I llm_load_print_meta: model ftype      = Q8_0
0.00.422.931 I llm_load_print_meta: model params     = 2.51 B
0.00.422.932 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.422.932 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.422.934 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.422.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.422.934 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.422.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.422.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.422.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.422.942 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.422.943 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.422.943 I llm_load_print_meta: max token length = 93
0.00.423.117 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.518.731 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.524.440 I llama_new_context_with_model: n_ctx      = 8192
0.00.524.447 I llama_new_context_with_model: n_batch    = 2048
0.00.524.448 I llama_new_context_with_model: n_ubatch   = 512
0.00.524.448 I llama_new_context_with_model: flash_attn = 0
0.00.524.451 I llama_new_context_with_model: freq_base  = 10000.0
0.00.524.451 I llama_new_context_with_model: freq_scale = 1
0.00.553.934 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.553.982 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.554.110 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.555.515 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.555.523 I llama_new_context_with_model: graph nodes  = 601
0.00.555.524 I llama_new_context_with_model: graph splits = 1
0.00.555.541 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.198.783 I main: llama threadpool init, n_threads = 4
0.01.198.794 I 
0.01.198.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.198.899 I 
0.01.199.075 I sampler seed: 2124173356
0.01.199.086 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.199.091 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.199.092 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.199.092 I 
 increabling and falling for each other.

These two people have been through a lot, from heartbreak and loss to betrayal and disillusionment. But through it all

0.14.754.575 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.49 tokens per second)
0.14.754.579 I llama_perf_context_print:        load time =    1195.89 ms
0.14.754.580 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.754.583 I llama_perf_context_print:        eval time =   13472.61 ms /    32 runs   (  421.02 ms per token,     2.38 tokens per second)
0.14.754.584 I llama_perf_context_print:       total time =   13555.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.637 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.848 I main: load the model and apply lora adapter, if any
0.00.025.167 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.348 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.456 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.457 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.465 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.467 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.468 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.469 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.478 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.479 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.481 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.482 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.485 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.118 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.050 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.339 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.346 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.347 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.348 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.348 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.349 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.357 I llama_model_loader: - type  f32:   37 tensors
0.00.195.361 I llama_model_loader: - type q8_0:  127 tensors
0.00.336.587 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.363.030 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.364.082 I llm_load_vocab: special tokens cache size = 5
0.00.421.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.421.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.421.289 I llm_load_print_meta: arch             = gemma
0.00.421.290 I llm_load_print_meta: vocab type       = SPM
0.00.421.290 I llm_load_print_meta: n_vocab          = 256000
0.00.421.292 I llm_load_print_meta: n_merges         = 0
0.00.421.293 I llm_load_print_meta: vocab_only       = 0
0.00.421.294 I llm_load_print_meta: n_ctx_train      = 8192
0.00.421.294 I llm_load_print_meta: n_embd           = 2048
0.00.421.294 I llm_load_print_meta: n_layer          = 18
0.00.421.359 I llm_load_print_meta: n_head           = 8
0.00.421.365 I llm_load_print_meta: n_head_kv        = 1
0.00.421.366 I llm_load_print_meta: n_rot            = 256
0.00.421.366 I llm_load_print_meta: n_swa            = 0
0.00.421.367 I llm_load_print_meta: n_embd_head_k    = 256
0.00.421.367 I llm_load_print_meta: n_embd_head_v    = 256
0.00.421.371 I llm_load_print_meta: n_gqa            = 8
0.00.421.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.421.380 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.421.381 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.421.383 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.421.383 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.421.384 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.421.385 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.421.389 I llm_load_print_meta: n_ff             = 16384
0.00.421.390 I llm_load_print_meta: n_expert         = 0
0.00.421.390 I llm_load_print_meta: n_expert_used    = 0
0.00.421.391 I llm_load_print_meta: causal attn      = 1
0.00.421.391 I llm_load_print_meta: pooling type     = 0
0.00.421.391 I llm_load_print_meta: rope type        = 2
0.00.421.392 I llm_load_print_meta: rope scaling     = linear
0.00.421.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.421.394 I llm_load_print_meta: freq_scale_train = 1
0.00.421.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.421.394 I llm_load_print_meta: rope_finetuned   = unknown
0.00.421.395 I llm_load_print_meta: ssm_d_conv       = 0
0.00.421.395 I llm_load_print_meta: ssm_d_inner      = 0
0.00.421.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.421.397 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.421.403 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.421.413 I llm_load_print_meta: model type       = 2B
0.00.421.413 I llm_load_print_meta: model ftype      = Q8_0
0.00.421.414 I llm_load_print_meta: model params     = 2.51 B
0.00.421.415 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.421.415 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.421.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.421.416 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.421.417 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.421.417 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.421.418 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.421.419 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.421.425 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.421.426 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.421.426 I llm_load_print_meta: max token length = 93
0.00.421.591 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.497.641 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.497.650 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.497.651 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.497.651 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.497.652 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.497.653 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.503.442 I llama_new_context_with_model: n_ctx      = 8192
0.00.503.449 I llama_new_context_with_model: n_batch    = 2048
0.00.503.450 I llama_new_context_with_model: n_ubatch   = 512
0.00.503.450 I llama_new_context_with_model: flash_attn = 0
0.00.503.453 I llama_new_context_with_model: freq_base  = 10000.0
0.00.503.454 I llama_new_context_with_model: freq_scale = 1
0.00.532.137 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.532.183 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.532.304 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.533.735 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.533.743 I llama_new_context_with_model: graph nodes  = 601
0.00.533.744 I llama_new_context_with_model: graph splits = 1
0.00.533.762 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.145.152 I main: llama threadpool init, n_threads = 4
0.01.145.164 I 
0.01.145.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.145.271 I 
0.01.145.450 I sampler seed: 2699165228
0.01.145.462 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.145.468 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.145.468 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.145.469 I 
 increasities, but you need to be able to identify the one that is most likely to happen based on historical data and current trends.

I am unable to

0.14.681.985 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.17 tokens per second)
0.14.681.989 I llama_perf_context_print:        load time =    1142.21 ms
0.14.681.991 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.681.993 I llama_perf_context_print:        eval time =   13455.70 ms /    32 runs   (  420.49 ms per token,     2.38 tokens per second)
0.14.681.994 I llama_perf_context_print:       total time =   13536.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.643 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.871 I main: load the model and apply lora adapter, if any
0.00.024.825 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.041 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.160 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.164 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.165 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.166 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.168 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.169 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.192 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.196 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.199 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.762 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.771 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.779 I llama_model_loader: - type  f32:   37 tensors
0.00.194.784 I llama_model_loader: - type q8_0:  127 tensors
0.00.336.403 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.358.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.359.958 I llm_load_vocab: special tokens cache size = 5
0.00.416.766 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.416.822 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.416.824 I llm_load_print_meta: arch             = gemma
0.00.416.824 I llm_load_print_meta: vocab type       = SPM
0.00.416.825 I llm_load_print_meta: n_vocab          = 256000
0.00.416.828 I llm_load_print_meta: n_merges         = 0
0.00.416.828 I llm_load_print_meta: vocab_only       = 0
0.00.416.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.416.829 I llm_load_print_meta: n_embd           = 2048
0.00.416.829 I llm_load_print_meta: n_layer          = 18
0.00.416.892 I llm_load_print_meta: n_head           = 8
0.00.416.899 I llm_load_print_meta: n_head_kv        = 1
0.00.416.899 I llm_load_print_meta: n_rot            = 256
0.00.416.900 I llm_load_print_meta: n_swa            = 0
0.00.416.902 I llm_load_print_meta: n_embd_head_k    = 256
0.00.416.902 I llm_load_print_meta: n_embd_head_v    = 256
0.00.416.917 I llm_load_print_meta: n_gqa            = 8
0.00.416.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.416.930 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.416.931 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.416.933 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.416.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.416.949 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.416.949 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.416.955 I llm_load_print_meta: n_ff             = 16384
0.00.416.964 I llm_load_print_meta: n_expert         = 0
0.00.416.966 I llm_load_print_meta: n_expert_used    = 0
0.00.416.966 I llm_load_print_meta: causal attn      = 1
0.00.416.966 I llm_load_print_meta: pooling type     = 0
0.00.416.967 I llm_load_print_meta: rope type        = 2
0.00.416.967 I llm_load_print_meta: rope scaling     = linear
0.00.416.968 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.416.969 I llm_load_print_meta: freq_scale_train = 1
0.00.416.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.416.977 I llm_load_print_meta: rope_finetuned   = unknown
0.00.416.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.416.986 I llm_load_print_meta: ssm_d_inner      = 0
0.00.416.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.416.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.416.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.416.997 I llm_load_print_meta: model type       = 2B
0.00.416.998 I llm_load_print_meta: model ftype      = Q8_0
0.00.416.999 I llm_load_print_meta: model params     = 2.51 B
0.00.417.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.417.000 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.417.000 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.417.001 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.417.001 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.417.002 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.417.002 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.417.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.417.010 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.417.011 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.417.011 I llm_load_print_meta: max token length = 93
0.00.417.185 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.488.418 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.488.428 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.494.145 I llama_new_context_with_model: n_ctx      = 8192
0.00.494.151 I llama_new_context_with_model: n_batch    = 2048
0.00.494.151 I llama_new_context_with_model: n_ubatch   = 512
0.00.494.152 I llama_new_context_with_model: flash_attn = 0
0.00.494.154 I llama_new_context_with_model: freq_base  = 10000.0
0.00.494.155 I llama_new_context_with_model: freq_scale = 1
0.00.522.907 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.522.949 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.523.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.524.449 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.524.456 I llama_new_context_with_model: graph nodes  = 601
0.00.524.457 I llama_new_context_with_model: graph splits = 1
0.00.524.475 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.136.743 I main: llama threadpool init, n_threads = 4
0.01.136.754 I 
0.01.136.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.136.856 I 
0.01.137.038 I sampler seed: 2050276499
0.01.137.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.137.053 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.137.054 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.137.055 I 
 increasities, the bane of the soul, and a festering wound on the tapestry of life.

What is the text about?

The text is a

0.14.814.153 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.60 tokens per second)
0.14.814.156 I llama_perf_context_print:        load time =    1133.76 ms
0.14.814.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.814.159 I llama_perf_context_print:        eval time =   13595.67 ms /    32 runs   (  424.86 ms per token,     2.35 tokens per second)
0.14.814.183 I llama_perf_context_print:       total time =   13677.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.046s
user	3m49.186s
sys	0m9.449s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3869 (56399714)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200098.08 ms
main:    total time = 200098.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.622 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.667 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.926 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.946 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.947 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.948 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.955 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.956 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.199.892 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.212.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.212.149 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.212.150 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.212.151 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.212.152 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.212.153 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.212.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.212.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.212.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.212.158 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.212.159 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.212.160 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.212.167 I llama_model_loader: - type  f32:   37 tensors
0.00.212.170 I llama_model_loader: - type q4_K:  108 tensors
0.00.212.171 I llama_model_loader: - type q6_K:   19 tensors
0.00.345.164 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.367.049 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.368.039 I llm_load_vocab: special tokens cache size = 5
0.00.425.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.425.059 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.425.060 I llm_load_print_meta: arch             = gemma
0.00.425.061 I llm_load_print_meta: vocab type       = SPM
0.00.425.061 I llm_load_print_meta: n_vocab          = 256000
0.00.425.064 I llm_load_print_meta: n_merges         = 0
0.00.425.065 I llm_load_print_meta: vocab_only       = 0
0.00.425.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.425.066 I llm_load_print_meta: n_embd           = 2048
0.00.425.066 I llm_load_print_meta: n_layer          = 18
0.00.425.131 I llm_load_print_meta: n_head           = 8
0.00.425.137 I llm_load_print_meta: n_head_kv        = 1
0.00.425.137 I llm_load_print_meta: n_rot            = 256
0.00.425.138 I llm_load_print_meta: n_swa            = 0
0.00.425.138 I llm_load_print_meta: n_embd_head_k    = 256
0.00.425.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.425.143 I llm_load_print_meta: n_gqa            = 8
0.00.425.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.425.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.425.154 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.425.156 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.425.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.425.157 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.425.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.425.163 I llm_load_print_meta: n_ff             = 16384
0.00.425.163 I llm_load_print_meta: n_expert         = 0
0.00.425.168 I llm_load_print_meta: n_expert_used    = 0
0.00.425.168 I llm_load_print_meta: causal attn      = 1
0.00.425.168 I llm_load_print_meta: pooling type     = 0
0.00.425.169 I llm_load_print_meta: rope type        = 2
0.00.425.170 I llm_load_print_meta: rope scaling     = linear
0.00.425.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.425.183 I llm_load_print_meta: freq_scale_train = 1
0.00.425.183 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.425.184 I llm_load_print_meta: rope_finetuned   = unknown
0.00.425.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.425.188 I llm_load_print_meta: ssm_d_inner      = 0
0.00.425.188 I llm_load_print_meta: ssm_d_state      = 0
0.00.425.188 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.425.189 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.425.197 I llm_load_print_meta: model type       = 2B
0.00.425.199 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.425.199 I llm_load_print_meta: model params     = 2.51 B
0.00.425.201 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.425.201 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.425.202 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.425.202 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.425.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.425.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.425.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.425.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.425.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.425.213 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.425.214 I llm_load_print_meta: max token length = 93
0.00.425.379 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.485.867 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.485.877 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.485.878 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.485.878 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.485.879 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.485.880 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.491.445 I llama_new_context_with_model: n_ctx      = 8192
0.00.491.452 I llama_new_context_with_model: n_batch    = 2048
0.00.491.453 I llama_new_context_with_model: n_ubatch   = 512
0.00.491.453 I llama_new_context_with_model: flash_attn = 0
0.00.491.456 I llama_new_context_with_model: freq_base  = 10000.0
0.00.491.457 I llama_new_context_with_model: freq_scale = 1
0.00.520.257 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.520.300 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.520.410 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.521.821 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.521.826 I llama_new_context_with_model: graph nodes  = 601
0.00.521.827 I llama_new_context_with_model: graph splits = 1
0.00.521.842 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.099.908 I main: llama threadpool init, n_threads = 4
0.01.099.918 I 
0.01.100.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.100.009 I 
0.01.100.166 I sampler seed: 3347150461
0.01.100.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.100.180 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.100.181 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.100.181 I 
 fufillingly, the clouds parted, revealing the majestic phoenix soaring high above.

The phoenix, a symbol of rebirth and transformation, symbolized hope and renewal in

0.12.068.823 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.31 tokens per second)
0.12.068.836 I llama_perf_context_print:        load time =    1097.02 ms
0.12.068.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.068.841 I llama_perf_context_print:        eval time =   10887.06 ms /    32 runs   (  340.22 ms per token,     2.94 tokens per second)
0.12.068.842 I llama_perf_context_print:       total time =   10968.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3869 (56399714)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199769.83 ms
main:    total time = 199769.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.613 I build: 3869 (56399714) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.768 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.870 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.889 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.897 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.898 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.906 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.848 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.891 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.146 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.163 I llama_model_loader: - type  f32:   37 tensors
0.00.194.167 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.167 I llama_model_loader: - type q6_K:   19 tensors
0.00.329.565 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.351.273 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.352.261 I llm_load_vocab: special tokens cache size = 5
0.00.409.315 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.409.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.370 I llm_load_print_meta: arch             = gemma
0.00.409.370 I llm_load_print_meta: vocab type       = SPM
0.00.409.371 I llm_load_print_meta: n_vocab          = 256000
0.00.409.373 I llm_load_print_meta: n_merges         = 0
0.00.409.374 I llm_load_print_meta: vocab_only       = 0
0.00.409.374 I llm_load_print_meta: n_ctx_train      = 8192
0.00.409.383 I llm_load_print_meta: n_embd           = 2048
0.00.409.384 I llm_load_print_meta: n_layer          = 18
0.00.409.445 I llm_load_print_meta: n_head           = 8
0.00.409.452 I llm_load_print_meta: n_head_kv        = 1
0.00.409.453 I llm_load_print_meta: n_rot            = 256
0.00.409.454 I llm_load_print_meta: n_swa            = 0
0.00.409.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.409.455 I llm_load_print_meta: n_embd_head_v    = 256
0.00.409.459 I llm_load_print_meta: n_gqa            = 8
0.00.409.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.409.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.409.469 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.409.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.409.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.409.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.409.477 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.409.482 I llm_load_print_meta: n_ff             = 16384
0.00.409.483 I llm_load_print_meta: n_expert         = 0
0.00.409.483 I llm_load_print_meta: n_expert_used    = 0
0.00.409.484 I llm_load_print_meta: causal attn      = 1
0.00.409.484 I llm_load_print_meta: pooling type     = 0
0.00.409.493 I llm_load_print_meta: rope type        = 2
0.00.409.497 I llm_load_print_meta: rope scaling     = linear
0.00.409.499 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.409.499 I llm_load_print_meta: freq_scale_train = 1
0.00.409.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.409.500 I llm_load_print_meta: rope_finetuned   = unknown
0.00.409.501 I llm_load_print_meta: ssm_d_conv       = 0
0.00.409.501 I llm_load_print_meta: ssm_d_inner      = 0
0.00.409.502 I llm_load_print_meta: ssm_d_state      = 0
0.00.409.502 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.409.502 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.409.511 I llm_load_print_meta: model type       = 2B
0.00.409.512 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.409.513 I llm_load_print_meta: model params     = 2.51 B
0.00.409.514 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.409.514 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.409.515 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.409.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.409.516 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.409.516 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.409.517 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.409.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.409.524 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.409.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.409.525 I llm_load_print_meta: max token length = 93
0.00.409.692 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.467.232 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.472.725 I llama_new_context_with_model: n_ctx      = 8192
0.00.472.732 I llama_new_context_with_model: n_batch    = 2048
0.00.472.732 I llama_new_context_with_model: n_ubatch   = 512
0.00.472.733 I llama_new_context_with_model: flash_attn = 0
0.00.472.735 I llama_new_context_with_model: freq_base  = 10000.0
0.00.472.736 I llama_new_context_with_model: freq_scale = 1
0.00.501.693 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.501.737 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.501.852 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.503.199 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.503.205 I llama_new_context_with_model: graph nodes  = 601
0.00.503.205 I llama_new_context_with_model: graph splits = 1
0.00.503.221 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.080.525 I main: llama threadpool init, n_threads = 4
0.01.080.536 I 
0.01.080.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.080.636 I 
0.01.080.794 I sampler seed: 1034042404
0.01.080.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.080.809 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.080.809 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.080.810 I 
 seconally, and explain why it is important to consider this aspect.

**Answer:**

**Contemporality is of paramount importance when analyzing information and decision

0.11.967.588 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.84 tokens per second)
0.11.967.604 I llama_perf_context_print:        load time =    1077.64 ms
0.11.967.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.967.607 I llama_perf_context_print:        eval time =   10805.53 ms /    32 runs   (  337.67 ms per token,     2.96 tokens per second)
0.11.967.608 I llama_perf_context_print:       total time =   10887.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.852s
user	50m9.599s
sys	0m6.279s
