+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.643 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.024.679 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.965 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.967 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.970 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.972 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.984 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.985 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.986 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.985 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.286 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.293 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.295 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.298 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.302 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.303 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.304 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.305 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.200.306 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.314 I llama_model_loader: - type  f32:   37 tensors
0.00.200.319 I llama_model_loader: - type q8_0:  127 tensors
0.00.490.383 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.435 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.440 I llm_load_vocab: special tokens cache size = 5
0.00.576.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.953 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.954 I llm_load_print_meta: arch             = gemma
0.00.576.954 I llm_load_print_meta: vocab type       = SPM
0.00.576.955 I llm_load_print_meta: n_vocab          = 256000
0.00.576.957 I llm_load_print_meta: n_merges         = 0
0.00.576.957 I llm_load_print_meta: vocab_only       = 0
0.00.576.958 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.958 I llm_load_print_meta: n_embd           = 2048
0.00.576.958 I llm_load_print_meta: n_layer          = 18
0.00.576.993 I llm_load_print_meta: n_head           = 8
0.00.577.000 I llm_load_print_meta: n_head_kv        = 1
0.00.577.000 I llm_load_print_meta: n_rot            = 256
0.00.577.001 I llm_load_print_meta: n_swa            = 0
0.00.577.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.577.001 I llm_load_print_meta: n_embd_head_v    = 256
0.00.577.006 I llm_load_print_meta: n_gqa            = 8
0.00.577.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.577.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.577.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.577.018 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.577.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.577.019 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.577.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.577.024 I llm_load_print_meta: n_ff             = 16384
0.00.577.024 I llm_load_print_meta: n_expert         = 0
0.00.577.024 I llm_load_print_meta: n_expert_used    = 0
0.00.577.025 I llm_load_print_meta: causal attn      = 1
0.00.577.025 I llm_load_print_meta: pooling type     = 0
0.00.577.025 I llm_load_print_meta: rope type        = 2
0.00.577.026 I llm_load_print_meta: rope scaling     = linear
0.00.577.027 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.577.028 I llm_load_print_meta: freq_scale_train = 1
0.00.577.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.577.030 I llm_load_print_meta: rope_finetuned   = unknown
0.00.577.039 I llm_load_print_meta: ssm_d_conv       = 0
0.00.577.040 I llm_load_print_meta: ssm_d_inner      = 0
0.00.577.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.577.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.577.041 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.577.054 I llm_load_print_meta: model type       = 2B
0.00.577.055 I llm_load_print_meta: model ftype      = Q8_0
0.00.577.056 I llm_load_print_meta: model params     = 2.51 B
0.00.577.057 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.577.058 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.577.058 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.577.067 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.577.068 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.577.068 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.577.069 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.577.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.577.076 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.577.078 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.577.078 I llm_load_print_meta: max token length = 93
0.00.577.259 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.975 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.676.984 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.676.985 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.676.985 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.676.986 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.676.987 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.682.539 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.546 I llama_new_context_with_model: n_batch    = 2048
0.00.682.546 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.547 I llama_new_context_with_model: flash_attn = 0
0.00.682.549 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.550 I llama_new_context_with_model: freq_scale = 1
0.00.711.933 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.974 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.713.467 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.473 I llama_new_context_with_model: graph nodes  = 601
0.00.713.473 I llama_new_context_with_model: graph splits = 1
0.00.713.489 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.057 I main: llama threadpool init, n_threads = 4
0.01.325.069 I 
0.01.325.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.170 I 
0.01.325.333 I sampler seed: 3510593391
0.01.325.344 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.348 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.349 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.349 I 
 increasities, a young woman named Anya steps into the unknown, seeking her own identity in a world that seems determined to hide the truth.

**Themes:**

0.14.878.085 I llama_perf_sampler_print:    sampling time =      48.12 ms /    33 runs   (    1.46 ms per token,   685.83 tokens per second)
0.14.878.088 I llama_perf_context_print:        load time =    1322.17 ms
0.14.878.108 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.878.110 I llama_perf_context_print:        eval time =   13471.98 ms /    32 runs   (  421.00 ms per token,     2.38 tokens per second)
0.14.878.111 I llama_perf_context_print:       total time =   13553.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.645 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.840 I main: load the model and apply lora adapter, if any
0.00.024.997 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.100 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.115 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.117 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.127 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.128 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.129 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.132 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.141 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.146 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.148 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.340 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.670 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.940 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.952 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.953 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.955 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.958 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.973 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.977 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.979 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.992 I llama_model_loader: - type  f32:   37 tensors
0.00.197.997 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.911 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.353 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.368 I llm_load_vocab: special tokens cache size = 5
0.00.556.549 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.607 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.608 I llm_load_print_meta: arch             = gemma
0.00.556.609 I llm_load_print_meta: vocab type       = SPM
0.00.556.610 I llm_load_print_meta: n_vocab          = 256000
0.00.556.612 I llm_load_print_meta: n_merges         = 0
0.00.556.612 I llm_load_print_meta: vocab_only       = 0
0.00.556.613 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.613 I llm_load_print_meta: n_embd           = 2048
0.00.556.613 I llm_load_print_meta: n_layer          = 18
0.00.556.647 I llm_load_print_meta: n_head           = 8
0.00.556.653 I llm_load_print_meta: n_head_kv        = 1
0.00.556.654 I llm_load_print_meta: n_rot            = 256
0.00.556.654 I llm_load_print_meta: n_swa            = 0
0.00.556.655 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.655 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.659 I llm_load_print_meta: n_gqa            = 8
0.00.556.664 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.669 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.671 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.672 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.672 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.672 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.677 I llm_load_print_meta: n_ff             = 16384
0.00.556.678 I llm_load_print_meta: n_expert         = 0
0.00.556.678 I llm_load_print_meta: n_expert_used    = 0
0.00.556.679 I llm_load_print_meta: causal attn      = 1
0.00.556.679 I llm_load_print_meta: pooling type     = 0
0.00.556.679 I llm_load_print_meta: rope type        = 2
0.00.556.680 I llm_load_print_meta: rope scaling     = linear
0.00.556.681 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.682 I llm_load_print_meta: freq_scale_train = 1
0.00.556.682 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.682 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.682 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.683 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.683 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.683 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.684 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.685 I llm_load_print_meta: model type       = 2B
0.00.556.699 I llm_load_print_meta: model ftype      = Q8_0
0.00.556.700 I llm_load_print_meta: model params     = 2.51 B
0.00.556.700 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.556.701 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.702 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.702 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.704 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.711 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.556.713 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.556.713 I llm_load_print_meta: max token length = 93
0.00.556.906 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.617 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.657.395 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.402 I llama_new_context_with_model: n_batch    = 2048
0.00.657.402 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.403 I llama_new_context_with_model: flash_attn = 0
0.00.657.405 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.406 I llama_new_context_with_model: freq_scale = 1
0.00.686.447 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.489 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.954 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.961 I llama_new_context_with_model: graph nodes  = 601
0.00.687.962 I llama_new_context_with_model: graph splits = 1
0.00.687.983 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.322 I main: llama threadpool init, n_threads = 4
0.01.297.333 I 
0.01.297.436 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.440 I 
0.01.297.606 I sampler seed: 591935951
0.01.297.616 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.621 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.621 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.622 I 
 increasities?

I do not have access to real-time information, therefore I am unable to provide an answer. For the most accurate and up-to

0.14.879.044 I llama_perf_sampler_print:    sampling time =      47.56 ms /    33 runs   (    1.44 ms per token,   693.86 tokens per second)
0.14.879.070 I llama_perf_context_print:        load time =    1294.39 ms
0.14.879.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.075 I llama_perf_context_print:        eval time =   13501.54 ms /    32 runs   (  421.92 ms per token,     2.37 tokens per second)
0.14.879.076 I llama_perf_context_print:       total time =   13581.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.634 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.821 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.009 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.102 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.113 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.115 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.120 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.129 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.138 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.146 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.147 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.602 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.189.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.201.640 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.201.647 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.201.648 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.201.649 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.201.650 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.201.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.201.652 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.201.656 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.201.657 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.201.658 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.201.658 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.201.660 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.201.667 I llama_model_loader: - type  f32:   37 tensors
0.00.201.671 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.120 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.385 I llm_load_vocab: special tokens cache size = 5
0.00.569.786 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.569.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.569.843 I llm_load_print_meta: arch             = gemma
0.00.569.844 I llm_load_print_meta: vocab type       = SPM
0.00.569.845 I llm_load_print_meta: n_vocab          = 256000
0.00.569.847 I llm_load_print_meta: n_merges         = 0
0.00.569.847 I llm_load_print_meta: vocab_only       = 0
0.00.569.848 I llm_load_print_meta: n_ctx_train      = 8192
0.00.569.848 I llm_load_print_meta: n_embd           = 2048
0.00.569.849 I llm_load_print_meta: n_layer          = 18
0.00.569.883 I llm_load_print_meta: n_head           = 8
0.00.569.890 I llm_load_print_meta: n_head_kv        = 1
0.00.569.891 I llm_load_print_meta: n_rot            = 256
0.00.569.891 I llm_load_print_meta: n_swa            = 0
0.00.569.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.569.892 I llm_load_print_meta: n_embd_head_v    = 256
0.00.569.897 I llm_load_print_meta: n_gqa            = 8
0.00.569.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.569.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.569.907 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.569.908 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.569.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.569.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.569.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.569.914 I llm_load_print_meta: n_ff             = 16384
0.00.569.915 I llm_load_print_meta: n_expert         = 0
0.00.569.915 I llm_load_print_meta: n_expert_used    = 0
0.00.569.916 I llm_load_print_meta: causal attn      = 1
0.00.569.916 I llm_load_print_meta: pooling type     = 0
0.00.569.916 I llm_load_print_meta: rope type        = 2
0.00.569.917 I llm_load_print_meta: rope scaling     = linear
0.00.569.918 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.569.919 I llm_load_print_meta: freq_scale_train = 1
0.00.569.919 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.569.919 I llm_load_print_meta: rope_finetuned   = unknown
0.00.569.920 I llm_load_print_meta: ssm_d_conv       = 0
0.00.569.920 I llm_load_print_meta: ssm_d_inner      = 0
0.00.569.920 I llm_load_print_meta: ssm_d_state      = 0
0.00.569.921 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.569.921 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.569.946 I llm_load_print_meta: model type       = 2B
0.00.569.948 I llm_load_print_meta: model ftype      = Q8_0
0.00.569.950 I llm_load_print_meta: model params     = 2.51 B
0.00.569.958 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.569.962 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.569.964 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.569.974 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.569.975 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.569.976 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.569.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.569.981 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.569.988 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.569.990 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.569.991 I llm_load_print_meta: max token length = 93
0.00.570.183 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.582 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.646.591 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.646.592 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.646.593 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.646.593 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.646.594 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.652.419 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.426 I llama_new_context_with_model: n_batch    = 2048
0.00.652.426 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.427 I llama_new_context_with_model: flash_attn = 0
0.00.652.429 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.430 I llama_new_context_with_model: freq_scale = 1
0.00.682.717 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.760 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.684.306 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.684.313 I llama_new_context_with_model: graph nodes  = 601
0.00.684.314 I llama_new_context_with_model: graph splits = 1
0.00.684.333 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.560 I main: llama threadpool init, n_threads = 4
0.01.296.572 I 
0.01.296.676 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.680 I 
0.01.296.852 I sampler seed: 62301486
0.01.296.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.870 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.296.870 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.871 I 
 increamically.

I am a large language model, trained by Google. I am capable of generating human-quality text in response to a wide range of prompts

0.14.818.712 I llama_perf_sampler_print:    sampling time =      47.37 ms /    33 runs   (    1.44 ms per token,   696.66 tokens per second)
0.14.818.715 I llama_perf_context_print:        load time =    1293.68 ms
0.14.818.717 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.818.720 I llama_perf_context_print:        eval time =   13442.08 ms /    32 runs   (  420.07 ms per token,     2.38 tokens per second)
0.14.818.721 I llama_perf_context_print:       total time =   13522.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.658 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.628 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.811 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.896 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.907 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.908 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.912 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.915 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.916 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.917 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.918 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.924 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.925 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.927 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.928 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.928 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.769 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.777 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.778 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.779 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.780 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.785 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.786 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.787 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.788 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.789 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.797 I llama_model_loader: - type  f32:   37 tensors
0.00.198.801 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.677 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.642 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.672 I llm_load_vocab: special tokens cache size = 5
0.00.570.065 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.570.124 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.570.125 I llm_load_print_meta: arch             = gemma
0.00.570.126 I llm_load_print_meta: vocab type       = SPM
0.00.570.126 I llm_load_print_meta: n_vocab          = 256000
0.00.570.129 I llm_load_print_meta: n_merges         = 0
0.00.570.129 I llm_load_print_meta: vocab_only       = 0
0.00.570.130 I llm_load_print_meta: n_ctx_train      = 8192
0.00.570.130 I llm_load_print_meta: n_embd           = 2048
0.00.570.130 I llm_load_print_meta: n_layer          = 18
0.00.570.165 I llm_load_print_meta: n_head           = 8
0.00.570.172 I llm_load_print_meta: n_head_kv        = 1
0.00.570.172 I llm_load_print_meta: n_rot            = 256
0.00.570.173 I llm_load_print_meta: n_swa            = 0
0.00.570.173 I llm_load_print_meta: n_embd_head_k    = 256
0.00.570.173 I llm_load_print_meta: n_embd_head_v    = 256
0.00.570.178 I llm_load_print_meta: n_gqa            = 8
0.00.570.183 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.570.187 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.570.188 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.570.190 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.570.190 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.570.191 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.570.191 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.570.196 I llm_load_print_meta: n_ff             = 16384
0.00.570.196 I llm_load_print_meta: n_expert         = 0
0.00.570.197 I llm_load_print_meta: n_expert_used    = 0
0.00.570.197 I llm_load_print_meta: causal attn      = 1
0.00.570.198 I llm_load_print_meta: pooling type     = 0
0.00.570.199 I llm_load_print_meta: rope type        = 2
0.00.570.199 I llm_load_print_meta: rope scaling     = linear
0.00.570.200 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.570.202 I llm_load_print_meta: freq_scale_train = 1
0.00.570.202 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.570.203 I llm_load_print_meta: rope_finetuned   = unknown
0.00.570.203 I llm_load_print_meta: ssm_d_conv       = 0
0.00.570.203 I llm_load_print_meta: ssm_d_inner      = 0
0.00.570.203 I llm_load_print_meta: ssm_d_state      = 0
0.00.570.204 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.570.204 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.570.205 I llm_load_print_meta: model type       = 2B
0.00.570.206 I llm_load_print_meta: model ftype      = Q8_0
0.00.570.207 I llm_load_print_meta: model params     = 2.51 B
0.00.570.208 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.570.208 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.570.209 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.570.209 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.570.209 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.570.209 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.570.211 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.570.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.570.217 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.570.218 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.570.219 I llm_load_print_meta: max token length = 93
0.00.570.392 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.643.309 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.643.319 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.648.895 I llama_new_context_with_model: n_ctx      = 8192
0.00.648.902 I llama_new_context_with_model: n_batch    = 2048
0.00.648.902 I llama_new_context_with_model: n_ubatch   = 512
0.00.648.903 I llama_new_context_with_model: flash_attn = 0
0.00.648.905 I llama_new_context_with_model: freq_base  = 10000.0
0.00.648.906 I llama_new_context_with_model: freq_scale = 1
0.00.678.361 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.678.406 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.678.515 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.679.916 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.922 I llama_new_context_with_model: graph nodes  = 601
0.00.679.922 I llama_new_context_with_model: graph splits = 1
0.00.679.940 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.668 I main: llama threadpool init, n_threads = 4
0.01.294.679 I 
0.01.294.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.774 I 
0.01.294.936 I sampler seed: 2180304163
0.01.294.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.952 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.954 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.954 I 
 increasels, and other playful creatures in a lush forest.

The sun peeked over the emerald canopy, casting golden rays upon the verdant leaves and sparkling

0.14.857.333 I llama_perf_sampler_print:    sampling time =      47.92 ms /    33 runs   (    1.45 ms per token,   688.59 tokens per second)
0.14.857.337 I llama_perf_context_print:        load time =    1291.79 ms
0.14.857.339 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.341 I llama_perf_context_print:        eval time =   13481.72 ms /    32 runs   (  421.30 ms per token,     2.37 tokens per second)
0.14.857.343 I llama_perf_context_print:       total time =   13562.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.653s
user	3m49.268s
sys	0m9.462s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3841 (5685eb13)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200916.44 ms
main:    total time = 200916.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.646 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
0.00.025.115 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.401 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.414 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.416 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.420 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.423 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.424 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.425 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.426 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.426 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.433 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.434 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.436 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.437 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.071 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.814 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.003 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.006 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.008 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.199.009 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.017 I llama_model_loader: - type  f32:   37 tensors
0.00.199.020 I llama_model_loader: - type q4_K:  108 tensors
0.00.199.021 I llama_model_loader: - type q6_K:   19 tensors
0.00.492.562 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.518 I llm_load_vocab: special tokens cache size = 5
0.00.580.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.580.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.580.267 I llm_load_print_meta: arch             = gemma
0.00.580.268 I llm_load_print_meta: vocab type       = SPM
0.00.580.268 I llm_load_print_meta: n_vocab          = 256000
0.00.580.271 I llm_load_print_meta: n_merges         = 0
0.00.580.271 I llm_load_print_meta: vocab_only       = 0
0.00.580.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.580.272 I llm_load_print_meta: n_embd           = 2048
0.00.580.272 I llm_load_print_meta: n_layer          = 18
0.00.580.306 I llm_load_print_meta: n_head           = 8
0.00.580.313 I llm_load_print_meta: n_head_kv        = 1
0.00.580.314 I llm_load_print_meta: n_rot            = 256
0.00.580.314 I llm_load_print_meta: n_swa            = 0
0.00.580.315 I llm_load_print_meta: n_embd_head_k    = 256
0.00.580.315 I llm_load_print_meta: n_embd_head_v    = 256
0.00.580.319 I llm_load_print_meta: n_gqa            = 8
0.00.580.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.580.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.580.346 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.580.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.580.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.580.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.580.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.580.353 I llm_load_print_meta: n_ff             = 16384
0.00.580.358 I llm_load_print_meta: n_expert         = 0
0.00.580.359 I llm_load_print_meta: n_expert_used    = 0
0.00.580.373 I llm_load_print_meta: causal attn      = 1
0.00.580.373 I llm_load_print_meta: pooling type     = 0
0.00.580.374 I llm_load_print_meta: rope type        = 2
0.00.580.375 I llm_load_print_meta: rope scaling     = linear
0.00.580.376 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.580.377 I llm_load_print_meta: freq_scale_train = 1
0.00.580.377 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.580.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.580.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.580.378 I llm_load_print_meta: ssm_d_inner      = 0
0.00.580.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.580.380 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.580.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.580.381 I llm_load_print_meta: model type       = 2B
0.00.580.382 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.580.382 I llm_load_print_meta: model params     = 2.51 B
0.00.580.387 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.580.388 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.580.388 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.580.389 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.580.389 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.580.390 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.580.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.580.391 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.580.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.580.398 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.580.398 I llm_load_print_meta: max token length = 93
0.00.580.582 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.914 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.640.926 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.640.927 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.640.927 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.640.928 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.640.929 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.646.537 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.545 I llama_new_context_with_model: n_batch    = 2048
0.00.646.546 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.547 I llama_new_context_with_model: flash_attn = 0
0.00.646.549 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.550 I llama_new_context_with_model: freq_scale = 1
0.00.676.821 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.676.865 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.988 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.441 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.447 I llama_new_context_with_model: graph nodes  = 601
0.00.678.448 I llama_new_context_with_model: graph splits = 1
0.00.678.464 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.314 I main: llama threadpool init, n_threads = 4
0.01.260.325 I 
0.01.260.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.420 I 
0.01.260.580 I sampler seed: 1256213211
0.01.260.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.598 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.598 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.599 I 
 seconal.com, which is a news aggregator website, uses an algorithm to rank stories based on their relevance to the current user's interests. However

0.12.168.735 I llama_perf_sampler_print:    sampling time =      47.64 ms /    33 runs   (    1.44 ms per token,   692.70 tokens per second)
0.12.168.739 I llama_perf_context_print:        load time =    1257.39 ms
0.12.168.740 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.168.754 I llama_perf_context_print:        eval time =   10827.68 ms /    32 runs   (  338.37 ms per token,     2.96 tokens per second)
0.12.168.756 I llama_perf_context_print:       total time =   10908.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3841 (5685eb13)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200287.24 ms
main:    total time = 200287.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.626 I build: 3841 (5685eb13) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.774 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.877 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.899 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.358 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.553 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.570 I llama_model_loader: - type  f32:   37 tensors
0.00.197.575 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.575 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.550 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.835 I llm_load_vocab: special tokens cache size = 5
0.00.557.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.789 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.790 I llm_load_print_meta: arch             = gemma
0.00.557.790 I llm_load_print_meta: vocab type       = SPM
0.00.557.791 I llm_load_print_meta: n_vocab          = 256000
0.00.557.794 I llm_load_print_meta: n_merges         = 0
0.00.557.794 I llm_load_print_meta: vocab_only       = 0
0.00.557.795 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.795 I llm_load_print_meta: n_embd           = 2048
0.00.557.796 I llm_load_print_meta: n_layer          = 18
0.00.557.827 I llm_load_print_meta: n_head           = 8
0.00.557.834 I llm_load_print_meta: n_head_kv        = 1
0.00.557.834 I llm_load_print_meta: n_rot            = 256
0.00.557.834 I llm_load_print_meta: n_swa            = 0
0.00.557.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.860 I llm_load_print_meta: n_gqa            = 8
0.00.557.867 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.872 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.881 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.883 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.888 I llm_load_print_meta: n_ff             = 16384
0.00.557.889 I llm_load_print_meta: n_expert         = 0
0.00.557.890 I llm_load_print_meta: n_expert_used    = 0
0.00.557.890 I llm_load_print_meta: causal attn      = 1
0.00.557.891 I llm_load_print_meta: pooling type     = 0
0.00.557.891 I llm_load_print_meta: rope type        = 2
0.00.557.895 I llm_load_print_meta: rope scaling     = linear
0.00.557.896 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.898 I llm_load_print_meta: freq_scale_train = 1
0.00.557.898 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.899 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.899 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.899 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.916 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.917 I llm_load_print_meta: model type       = 2B
0.00.557.918 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.557.918 I llm_load_print_meta: model params     = 2.51 B
0.00.557.919 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.557.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.921 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.923 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.929 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.931 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.932 I llm_load_print_meta: max token length = 93
0.00.558.108 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.615.500 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.620.969 I llama_new_context_with_model: n_ctx      = 8192
0.00.620.977 I llama_new_context_with_model: n_batch    = 2048
0.00.620.977 I llama_new_context_with_model: n_ubatch   = 512
0.00.620.978 I llama_new_context_with_model: flash_attn = 0
0.00.620.980 I llama_new_context_with_model: freq_base  = 10000.0
0.00.620.981 I llama_new_context_with_model: freq_scale = 1
0.00.650.092 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.650.136 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.650.245 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.651.618 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.651.624 I llama_new_context_with_model: graph nodes  = 601
0.00.651.624 I llama_new_context_with_model: graph splits = 1
0.00.651.640 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.229.833 I main: llama threadpool init, n_threads = 4
0.01.229.843 I 
0.01.229.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.229.936 I 
0.01.230.094 I sampler seed: 1829046339
0.01.230.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.230.110 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.230.110 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.230.111 I 
 seconally. The question is:

Write a script for a television program called "Science Tonight" where you interview a scientist about the latest advancements in artificial intelligence

0.12.194.699 I llama_perf_sampler_print:    sampling time =      47.61 ms /    33 runs   (    1.44 ms per token,   693.20 tokens per second)
0.12.194.712 I llama_perf_context_print:        load time =    1226.97 ms
0.12.194.714 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.194.717 I llama_perf_context_print:        eval time =   10884.70 ms /    32 runs   (  340.15 ms per token,     2.94 tokens per second)
0.12.194.718 I llama_perf_context_print:       total time =   10964.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m8.488s
user	50m27.966s
sys	0m6.550s
