+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.031.374 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.588 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.683 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.694 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.696 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.701 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.702 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.704 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.705 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.714 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.716 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.729 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.731 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.732 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.733 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.962 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.551 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.002 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.003 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.004 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.005 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.006 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.007 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.011 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.012 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.013 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.014 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.015 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.023 I llama_model_loader: - type  f32:   37 tensors
0.00.274.028 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.191 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.791 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.829 I llm_load_vocab: special tokens cache size = 5
0.00.614.386 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.455 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.456 I llm_load_print_meta: arch             = gemma
0.00.614.457 I llm_load_print_meta: vocab type       = SPM
0.00.614.457 I llm_load_print_meta: n_vocab          = 256000
0.00.614.460 I llm_load_print_meta: n_merges         = 0
0.00.614.460 I llm_load_print_meta: vocab_only       = 0
0.00.614.461 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.461 I llm_load_print_meta: n_embd           = 2048
0.00.614.461 I llm_load_print_meta: n_layer          = 18
0.00.614.525 I llm_load_print_meta: n_head           = 8
0.00.614.532 I llm_load_print_meta: n_head_kv        = 1
0.00.614.533 I llm_load_print_meta: n_rot            = 256
0.00.614.533 I llm_load_print_meta: n_swa            = 0
0.00.614.534 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.534 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.539 I llm_load_print_meta: n_gqa            = 8
0.00.614.544 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.549 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.550 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.552 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.552 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.552 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.553 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.558 I llm_load_print_meta: n_ff             = 16384
0.00.614.559 I llm_load_print_meta: n_expert         = 0
0.00.614.559 I llm_load_print_meta: n_expert_used    = 0
0.00.614.559 I llm_load_print_meta: causal attn      = 1
0.00.614.560 I llm_load_print_meta: pooling type     = 0
0.00.614.560 I llm_load_print_meta: rope type        = 2
0.00.614.561 I llm_load_print_meta: rope scaling     = linear
0.00.614.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.564 I llm_load_print_meta: freq_scale_train = 1
0.00.614.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.569 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.569 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.572 I llm_load_print_meta: model type       = 2B
0.00.614.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.574 I llm_load_print_meta: model params     = 2.51 B
0.00.614.575 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.576 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.577 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.585 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.587 I llm_load_print_meta: max token length = 93
0.00.724.676 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.724.688 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.724.689 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.724.689 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.724.690 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.724.690 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.730.453 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.460 I llama_new_context_with_model: n_batch    = 2048
0.00.730.460 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.461 I llama_new_context_with_model: flash_attn = 0
0.00.730.464 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.465 I llama_new_context_with_model: freq_scale = 1
0.00.761.654 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.761.693 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.761.807 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.951 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.956 I llama_new_context_with_model: graph nodes  = 601
0.00.764.956 I llama_new_context_with_model: graph splits = 1
0.00.764.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.301 I main: llama threadpool init, n_threads = 4
0.01.375.316 I 
0.01.375.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.431 I 
0.01.375.664 I sampler seed: 974442751
0.01.375.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.684 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.375.685 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.686 I 
 increasities, and other forms of flattery to gain the attention and favor of a potential employer.

**Answer:**

While flattery may be appropriate in certain situations

0.14.930.864 I llama_perf_sampler_print:    sampling time =      47.83 ms /    33 runs   (    1.45 ms per token,   689.91 tokens per second)
0.14.930.867 I llama_perf_context_print:        load time =    1372.41 ms
0.14.930.882 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.884 I llama_perf_context_print:        eval time =   13462.24 ms /    32 runs   (  420.69 ms per token,     2.38 tokens per second)
0.14.930.885 I llama_perf_context_print:       total time =   13555.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.024.847 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.972 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.978 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.987 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.000 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.005 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.717 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.631 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.076 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.077 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.078 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.087 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.088 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.089 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.098 I llama_model_loader: - type  f32:   37 tensors
0.00.267.102 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.590 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.451 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.487 I llm_load_vocab: special tokens cache size = 5
0.00.604.397 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.470 I llm_load_print_meta: arch             = gemma
0.00.604.471 I llm_load_print_meta: vocab type       = SPM
0.00.604.472 I llm_load_print_meta: n_vocab          = 256000
0.00.604.474 I llm_load_print_meta: n_merges         = 0
0.00.604.475 I llm_load_print_meta: vocab_only       = 0
0.00.604.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.476 I llm_load_print_meta: n_embd           = 2048
0.00.604.476 I llm_load_print_meta: n_layer          = 18
0.00.604.543 I llm_load_print_meta: n_head           = 8
0.00.604.553 I llm_load_print_meta: n_head_kv        = 1
0.00.604.555 I llm_load_print_meta: n_rot            = 256
0.00.604.555 I llm_load_print_meta: n_swa            = 0
0.00.604.557 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.565 I llm_load_print_meta: n_gqa            = 8
0.00.604.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.582 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.589 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.590 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.597 I llm_load_print_meta: n_ff             = 16384
0.00.604.601 I llm_load_print_meta: n_expert         = 0
0.00.604.602 I llm_load_print_meta: n_expert_used    = 0
0.00.604.602 I llm_load_print_meta: causal attn      = 1
0.00.604.603 I llm_load_print_meta: pooling type     = 0
0.00.604.604 I llm_load_print_meta: rope type        = 2
0.00.604.604 I llm_load_print_meta: rope scaling     = linear
0.00.604.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.608 I llm_load_print_meta: freq_scale_train = 1
0.00.604.624 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.626 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.626 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.627 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.628 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.628 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.630 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.631 I llm_load_print_meta: model type       = 2B
0.00.604.635 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.637 I llm_load_print_meta: model params     = 2.51 B
0.00.604.638 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.639 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.640 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.641 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.642 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.657 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.658 I llm_load_print_meta: max token length = 93
0.00.703.070 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.709.040 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.049 I llama_new_context_with_model: n_batch    = 2048
0.00.709.049 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.050 I llama_new_context_with_model: flash_attn = 0
0.00.709.053 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.055 I llama_new_context_with_model: freq_scale = 1
0.00.739.796 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.836 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.151 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.155 I llama_new_context_with_model: graph nodes  = 601
0.00.743.155 I llama_new_context_with_model: graph splits = 1
0.00.743.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.387.727 I main: llama threadpool init, n_threads = 4
0.01.387.738 I 
0.01.387.855 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.387.859 I 
0.01.388.097 I sampler seed: 2520003904
0.01.388.109 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.388.116 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.388.117 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.388.117 I 
 increasities and the impact on children

I. Introduction

**a. Contextualizing the issue**
- Definition of child abuse
- Prevalence and impact

0.14.850.438 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.14 tokens per second)
0.14.850.441 I llama_perf_context_print:        load time =    1384.83 ms
0.14.850.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.850.470 I llama_perf_context_print:        eval time =   13368.44 ms /    32 runs   (  417.76 ms per token,     2.39 tokens per second)
0.14.850.471 I llama_perf_context_print:       total time =   13462.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.554 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.751 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.854 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.856 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.860 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.863 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.865 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.866 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.879 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.880 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.881 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.882 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.143 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.158 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.163 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.165 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.166 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.167 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.168 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.187 I llama_model_loader: - type  f32:   37 tensors
0.00.266.192 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.131 I llm_load_vocab: special tokens cache size = 5
0.00.601.218 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.283 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.284 I llm_load_print_meta: arch             = gemma
0.00.601.285 I llm_load_print_meta: vocab type       = SPM
0.00.601.286 I llm_load_print_meta: n_vocab          = 256000
0.00.601.289 I llm_load_print_meta: n_merges         = 0
0.00.601.290 I llm_load_print_meta: vocab_only       = 0
0.00.601.290 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.290 I llm_load_print_meta: n_embd           = 2048
0.00.601.291 I llm_load_print_meta: n_layer          = 18
0.00.601.354 I llm_load_print_meta: n_head           = 8
0.00.601.362 I llm_load_print_meta: n_head_kv        = 1
0.00.601.372 I llm_load_print_meta: n_rot            = 256
0.00.601.373 I llm_load_print_meta: n_swa            = 0
0.00.601.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.383 I llm_load_print_meta: n_gqa            = 8
0.00.601.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.393 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.394 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.396 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.397 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.402 I llm_load_print_meta: n_ff             = 16384
0.00.601.404 I llm_load_print_meta: n_expert         = 0
0.00.601.404 I llm_load_print_meta: n_expert_used    = 0
0.00.601.405 I llm_load_print_meta: causal attn      = 1
0.00.601.419 I llm_load_print_meta: pooling type     = 0
0.00.601.420 I llm_load_print_meta: rope type        = 2
0.00.601.421 I llm_load_print_meta: rope scaling     = linear
0.00.601.422 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.423 I llm_load_print_meta: freq_scale_train = 1
0.00.601.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.424 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.424 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.424 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.425 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.425 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.425 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.427 I llm_load_print_meta: model type       = 2B
0.00.601.428 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.428 I llm_load_print_meta: model params     = 2.51 B
0.00.601.429 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.431 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.432 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.433 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.433 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.440 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.442 I llm_load_print_meta: max token length = 93
0.00.699.196 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.699.206 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.699.207 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.699.208 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.699.209 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.699.210 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.704.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.841 I llama_new_context_with_model: n_batch    = 2048
0.00.704.841 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.842 I llama_new_context_with_model: flash_attn = 0
0.00.704.844 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.845 I llama_new_context_with_model: freq_scale = 1
0.00.734.242 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.282 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.397 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.514 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.737.519 I llama_new_context_with_model: graph nodes  = 601
0.00.737.519 I llama_new_context_with_model: graph splits = 1
0.00.737.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.528 I main: llama threadpool init, n_threads = 4
0.01.348.540 I 
0.01.348.645 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.649 I 
0.01.348.879 I sampler seed: 2482546050
0.01.348.891 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.909 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.913 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.913 I 
 increamically.

I'm sorry, but I cannot generate a response that contains inappropriate or sexually suggestive content. My purpose is to assist with tasks and questions

0.14.983.367 I llama_perf_sampler_print:    sampling time =      48.21 ms /    33 runs   (    1.46 ms per token,   684.56 tokens per second)
0.14.983.372 I llama_perf_context_print:        load time =    1345.63 ms
0.14.983.374 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.983.376 I llama_perf_context_print:        eval time =   13539.57 ms /    32 runs   (  423.11 ms per token,     2.36 tokens per second)
0.14.983.378 I llama_perf_context_print:       total time =   13634.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.494 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.783 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.795 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.799 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.801 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.804 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.805 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.806 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.807 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.817 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.818 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.819 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.820 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.821 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.009 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.502 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.511 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.512 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.515 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.516 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.518 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.526 I llama_model_loader: - type  f32:   37 tensors
0.00.266.530 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.724 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.670 I llm_load_vocab: special tokens cache size = 5
0.00.609.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.793 I llm_load_print_meta: arch             = gemma
0.00.609.794 I llm_load_print_meta: vocab type       = SPM
0.00.609.794 I llm_load_print_meta: n_vocab          = 256000
0.00.609.796 I llm_load_print_meta: n_merges         = 0
0.00.609.797 I llm_load_print_meta: vocab_only       = 0
0.00.609.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.798 I llm_load_print_meta: n_embd           = 2048
0.00.609.798 I llm_load_print_meta: n_layer          = 18
0.00.609.863 I llm_load_print_meta: n_head           = 8
0.00.609.869 I llm_load_print_meta: n_head_kv        = 1
0.00.609.870 I llm_load_print_meta: n_rot            = 256
0.00.609.871 I llm_load_print_meta: n_swa            = 0
0.00.609.871 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.872 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.876 I llm_load_print_meta: n_gqa            = 8
0.00.609.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.886 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.889 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.889 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.889 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.890 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.895 I llm_load_print_meta: n_ff             = 16384
0.00.609.895 I llm_load_print_meta: n_expert         = 0
0.00.609.896 I llm_load_print_meta: n_expert_used    = 0
0.00.609.896 I llm_load_print_meta: causal attn      = 1
0.00.609.896 I llm_load_print_meta: pooling type     = 0
0.00.609.897 I llm_load_print_meta: rope type        = 2
0.00.609.897 I llm_load_print_meta: rope scaling     = linear
0.00.609.899 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.900 I llm_load_print_meta: freq_scale_train = 1
0.00.609.900 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.900 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.901 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.901 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.902 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.902 I llm_load_print_meta: model type       = 2B
0.00.609.903 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.904 I llm_load_print_meta: model params     = 2.51 B
0.00.609.905 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.906 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.906 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.907 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.908 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.908 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.909 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.910 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.916 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.918 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.918 I llm_load_print_meta: max token length = 93
0.00.701.090 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.701.101 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.706.750 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.758 I llama_new_context_with_model: n_batch    = 2048
0.00.706.759 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.759 I llama_new_context_with_model: flash_attn = 0
0.00.706.761 I llama_new_context_with_model: freq_base  = 10000.0
0.00.706.762 I llama_new_context_with_model: freq_scale = 1
0.00.736.489 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.529 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.644 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.817 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.822 I llama_new_context_with_model: graph nodes  = 601
0.00.739.823 I llama_new_context_with_model: graph splits = 1
0.00.739.840 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.021 I main: llama threadpool init, n_threads = 4
0.01.350.034 I 
0.01.350.140 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.144 I 
0.01.350.381 I sampler seed: 443588622
0.01.350.393 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.400 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.401 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.401 I 
 increasities.

I cannot provide sexually suggestive or inappropriate content. [end of text]


0.07.256.502 I llama_perf_sampler_print:    sampling time =      21.00 ms /    15 runs   (    1.40 ms per token,   714.46 tokens per second)
0.07.256.505 I llama_perf_context_print:        load time =    1347.16 ms
0.07.256.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.256.522 I llama_perf_context_print:        eval time =    5863.16 ms /    14 runs   (  418.80 ms per token,     2.39 tokens per second)
0.07.256.523 I llama_perf_context_print:       total time =    5906.49 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.397s
user	3m19.005s
sys	0m9.817s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3992 (79a2bc04)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199963.34 ms
main:    total time = 199963.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.025.194 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.412 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.527 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.529 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.534 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.537 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.538 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.539 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.541 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.542 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.556 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.558 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.559 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.119 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.151 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.161 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.162 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.163 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.164 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.165 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.168 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.170 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.171 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.181 I llama_model_loader: - type  f32:   37 tensors
0.00.267.185 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.186 I llama_model_loader: - type q6_K:   19 tensors
0.00.435.096 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.657 I llm_load_vocab: special tokens cache size = 5
0.00.594.801 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.874 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.875 I llm_load_print_meta: arch             = gemma
0.00.594.876 I llm_load_print_meta: vocab type       = SPM
0.00.594.876 I llm_load_print_meta: n_vocab          = 256000
0.00.594.879 I llm_load_print_meta: n_merges         = 0
0.00.594.879 I llm_load_print_meta: vocab_only       = 0
0.00.594.880 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.880 I llm_load_print_meta: n_embd           = 2048
0.00.594.881 I llm_load_print_meta: n_layer          = 18
0.00.594.943 I llm_load_print_meta: n_head           = 8
0.00.594.950 I llm_load_print_meta: n_head_kv        = 1
0.00.594.951 I llm_load_print_meta: n_rot            = 256
0.00.594.951 I llm_load_print_meta: n_swa            = 0
0.00.594.952 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.952 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.956 I llm_load_print_meta: n_gqa            = 8
0.00.594.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.966 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.968 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.969 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.970 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.970 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.976 I llm_load_print_meta: n_ff             = 16384
0.00.594.976 I llm_load_print_meta: n_expert         = 0
0.00.594.977 I llm_load_print_meta: n_expert_used    = 0
0.00.594.977 I llm_load_print_meta: causal attn      = 1
0.00.594.977 I llm_load_print_meta: pooling type     = 0
0.00.594.978 I llm_load_print_meta: rope type        = 2
0.00.594.978 I llm_load_print_meta: rope scaling     = linear
0.00.594.980 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.980 I llm_load_print_meta: freq_scale_train = 1
0.00.594.981 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.981 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.981 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.982 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.982 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.982 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.983 I llm_load_print_meta: model type       = 2B
0.00.594.984 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.985 I llm_load_print_meta: model params     = 2.51 B
0.00.594.985 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.002 I llm_load_print_meta: max token length = 93
0.00.657.635 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.657.646 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.657.647 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.657.648 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.657.649 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.657.649 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.663.320 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.327 I llama_new_context_with_model: n_batch    = 2048
0.00.663.328 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.328 I llama_new_context_with_model: flash_attn = 0
0.00.663.331 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.331 I llama_new_context_with_model: freq_scale = 1
0.00.692.885 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.925 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.041 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.696.117 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.696.122 I llama_new_context_with_model: graph nodes  = 601
0.00.696.123 I llama_new_context_with_model: graph splits = 1
0.00.696.138 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.731 I main: llama threadpool init, n_threads = 4
0.01.271.745 I 
0.01.271.855 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.859 I 
0.01.272.088 I sampler seed: 4156547890
0.01.272.101 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.272.109 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.109 I 
 maneuvously! [end of text]


0.02.966.680 I llama_perf_sampler_print:    sampling time =       7.67 ms /     6 runs   (    1.28 ms per token,   782.27 tokens per second)
0.02.966.684 I llama_perf_context_print:        load time =    1268.80 ms
0.02.966.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.966.688 I llama_perf_context_print:        eval time =    1678.61 ms /     5 runs   (  335.72 ms per token,     2.98 tokens per second)
0.02.966.689 I llama_perf_context_print:       total time =    1694.96 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3992 (79a2bc04)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200255.80 ms
main:    total time = 200255.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.734 I build: 3992 (79a2bc04) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.002.892 I main: load the model and apply lora adapter, if any
0.00.024.991 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.087 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.107 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.108 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.109 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.113 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.288 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.103 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.112 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.113 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.115 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.121 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.129 I llama_model_loader: - type  f32:   37 tensors
0.00.266.134 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.134 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.193 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.217 I llm_load_vocab: special tokens cache size = 5
0.00.609.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.949 I llm_load_print_meta: arch             = gemma
0.00.609.950 I llm_load_print_meta: vocab type       = SPM
0.00.609.951 I llm_load_print_meta: n_vocab          = 256000
0.00.609.953 I llm_load_print_meta: n_merges         = 0
0.00.609.954 I llm_load_print_meta: vocab_only       = 0
0.00.609.954 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.955 I llm_load_print_meta: n_embd           = 2048
0.00.609.955 I llm_load_print_meta: n_layer          = 18
0.00.610.021 I llm_load_print_meta: n_head           = 8
0.00.610.028 I llm_load_print_meta: n_head_kv        = 1
0.00.610.028 I llm_load_print_meta: n_rot            = 256
0.00.610.029 I llm_load_print_meta: n_swa            = 0
0.00.610.029 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.035 I llm_load_print_meta: n_gqa            = 8
0.00.610.039 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.045 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.046 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.047 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.048 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.048 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.049 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.054 I llm_load_print_meta: n_ff             = 16384
0.00.610.054 I llm_load_print_meta: n_expert         = 0
0.00.610.056 I llm_load_print_meta: n_expert_used    = 0
0.00.610.057 I llm_load_print_meta: causal attn      = 1
0.00.610.057 I llm_load_print_meta: pooling type     = 0
0.00.610.057 I llm_load_print_meta: rope type        = 2
0.00.610.059 I llm_load_print_meta: rope scaling     = linear
0.00.610.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.061 I llm_load_print_meta: freq_scale_train = 1
0.00.610.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.062 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.063 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.063 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.064 I llm_load_print_meta: model type       = 2B
0.00.610.065 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.610.066 I llm_load_print_meta: model params     = 2.51 B
0.00.610.067 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.610.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.069 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.070 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.070 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.072 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.078 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.079 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.080 I llm_load_print_meta: max token length = 93
0.00.671.443 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.677.054 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.061 I llama_new_context_with_model: n_batch    = 2048
0.00.677.061 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.062 I llama_new_context_with_model: flash_attn = 0
0.00.677.064 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.065 I llama_new_context_with_model: freq_scale = 1
0.00.706.551 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.589 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.706 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.754 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.758 I llama_new_context_with_model: graph nodes  = 601
0.00.709.758 I llama_new_context_with_model: graph splits = 1
0.00.709.774 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.681 I main: llama threadpool init, n_threads = 4
0.01.284.695 I 
0.01.284.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.810 I 
0.01.285.043 I sampler seed: 4273423125
0.01.285.056 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.064 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.064 I 
 seconally, while the other person is asleep.

This is a common practice among many cultures, including my own. However, it is important to be aware

0.12.173.741 I llama_perf_sampler_print:    sampling time =      47.74 ms /    33 runs   (    1.45 ms per token,   691.27 tokens per second)
0.12.173.756 I llama_perf_context_print:        load time =    1281.69 ms
0.12.173.758 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.173.760 I llama_perf_context_print:        eval time =   10796.30 ms /    32 runs   (  337.38 ms per token,     2.96 tokens per second)
0.12.173.762 I llama_perf_context_print:       total time =   10889.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m58.298s
user	49m42.276s
sys	0m6.465s
