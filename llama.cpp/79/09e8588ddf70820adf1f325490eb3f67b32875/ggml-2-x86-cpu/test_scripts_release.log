+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.762 I main: load the model and apply lora adapter, if any
0.00.021.406 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.416 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.439 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.442 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.448 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.998 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.027 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.969 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.976 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.979 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.982 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.982 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.985 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.990 I llama_model_loader: - type  f32:   37 tensors
0.00.131.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.054 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.759 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.307 I llm_load_vocab: special tokens cache size = 5
0.00.272.866 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.883 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.884 I llm_load_print_meta: arch             = gemma
0.00.272.884 I llm_load_print_meta: vocab type       = SPM
0.00.272.885 I llm_load_print_meta: n_vocab          = 256000
0.00.272.885 I llm_load_print_meta: n_merges         = 0
0.00.272.885 I llm_load_print_meta: vocab_only       = 0
0.00.272.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.886 I llm_load_print_meta: n_embd           = 2048
0.00.272.886 I llm_load_print_meta: n_layer          = 18
0.00.272.898 I llm_load_print_meta: n_head           = 8
0.00.272.899 I llm_load_print_meta: n_head_kv        = 1
0.00.272.900 I llm_load_print_meta: n_rot            = 256
0.00.272.900 I llm_load_print_meta: n_swa            = 0
0.00.272.900 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.900 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.901 I llm_load_print_meta: n_gqa            = 8
0.00.272.903 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.904 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.906 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.906 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.907 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.908 I llm_load_print_meta: n_ff             = 16384
0.00.272.908 I llm_load_print_meta: n_expert         = 0
0.00.272.909 I llm_load_print_meta: n_expert_used    = 0
0.00.272.909 I llm_load_print_meta: causal attn      = 1
0.00.272.909 I llm_load_print_meta: pooling type     = 0
0.00.272.909 I llm_load_print_meta: rope type        = 2
0.00.272.910 I llm_load_print_meta: rope scaling     = linear
0.00.272.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.912 I llm_load_print_meta: freq_scale_train = 1
0.00.272.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.914 I llm_load_print_meta: model type       = 2B
0.00.272.914 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.915 I llm_load_print_meta: model params     = 2.51 B
0.00.272.916 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.917 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.918 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.919 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.919 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.920 I llm_load_print_meta: max token length = 93
0.00.374.717 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.722 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.722 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.723 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.724 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.725 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.130 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.137 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.138 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.138 I llama_new_context_with_model: n_batch       = 2048
0.00.380.139 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.139 I llama_new_context_with_model: flash_attn    = 0
0.00.380.142 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.142 I llama_new_context_with_model: freq_scale    = 1
0.00.380.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.164 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.394.909 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.921 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.320 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.327 I llama_new_context_with_model: graph nodes  = 601
0.00.396.327 I llama_new_context_with_model: graph splits = 1
0.00.396.330 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.041 I main: llama threadpool init, n_threads = 4
0.00.481.056 I 
0.00.481.129 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.133 I 
0.00.481.174 I sampler seed: 2017460669
0.00.481.186 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.197 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.201 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.201 I 
 increasities. [end of text]


0.00.767.443 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6944.44 tokens per second)
0.00.767.446 I llama_perf_context_print:        load time =     480.26 ms
0.00.767.447 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.767.449 I llama_perf_context_print:        eval time =     283.00 ms /     4 runs   (   70.75 ms per token,    14.13 tokens per second)
0.00.767.450 I llama_perf_context_print:       total time =     286.41 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.561 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.006 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.021 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.043 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.050 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.453 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.701 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.701 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.702 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.702 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.703 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.704 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.707 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.707 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.708 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.709 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.710 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.714 I llama_model_loader: - type  f32:   37 tensors
0.00.131.714 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.226 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.518 I llm_load_vocab: special tokens cache size = 5
0.00.275.008 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.026 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.027 I llm_load_print_meta: arch             = gemma
0.00.275.027 I llm_load_print_meta: vocab type       = SPM
0.00.275.028 I llm_load_print_meta: n_vocab          = 256000
0.00.275.029 I llm_load_print_meta: n_merges         = 0
0.00.275.029 I llm_load_print_meta: vocab_only       = 0
0.00.275.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.030 I llm_load_print_meta: n_embd           = 2048
0.00.275.030 I llm_load_print_meta: n_layer          = 18
0.00.275.043 I llm_load_print_meta: n_head           = 8
0.00.275.044 I llm_load_print_meta: n_head_kv        = 1
0.00.275.044 I llm_load_print_meta: n_rot            = 256
0.00.275.045 I llm_load_print_meta: n_swa            = 0
0.00.275.045 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.045 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.046 I llm_load_print_meta: n_gqa            = 8
0.00.275.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.052 I llm_load_print_meta: n_ff             = 16384
0.00.275.052 I llm_load_print_meta: n_expert         = 0
0.00.275.053 I llm_load_print_meta: n_expert_used    = 0
0.00.275.053 I llm_load_print_meta: causal attn      = 1
0.00.275.053 I llm_load_print_meta: pooling type     = 0
0.00.275.054 I llm_load_print_meta: rope type        = 2
0.00.275.054 I llm_load_print_meta: rope scaling     = linear
0.00.275.055 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.056 I llm_load_print_meta: freq_scale_train = 1
0.00.275.056 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.057 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.057 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.058 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.058 I llm_load_print_meta: model type       = 2B
0.00.275.059 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.060 I llm_load_print_meta: model params     = 2.51 B
0.00.275.061 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.061 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.062 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.062 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.063 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.063 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.064 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.064 I llm_load_print_meta: max token length = 93
0.00.369.161 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.374.314 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.320 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.321 I llama_new_context_with_model: n_batch       = 2048
0.00.374.321 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.322 I llama_new_context_with_model: flash_attn    = 0
0.00.374.324 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.325 I llama_new_context_with_model: freq_scale    = 1
0.00.374.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.348 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.389.870 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.885 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.987 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.255 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.261 I llama_new_context_with_model: graph nodes  = 601
0.00.391.262 I llama_new_context_with_model: graph splits = 1
0.00.391.264 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.470 I main: llama threadpool init, n_threads = 4
0.00.473.487 I 
0.00.473.563 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.566 I 
0.00.473.610 I sampler seed: 2455497729
0.00.473.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.625 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.625 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.625 I 
 increably. I'm unable to access the content of the document, so I cannot provide you with the requested information. [end of text]


0.02.261.920 I llama_perf_sampler_print:    sampling time =       4.40 ms /    27 runs   (    0.16 ms per token,  6130.79 tokens per second)
0.02.261.923 I llama_perf_context_print:        load time =     472.69 ms
0.02.261.924 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.261.925 I llama_perf_context_print:        eval time =    1772.49 ms /    26 runs   (   68.17 ms per token,    14.67 tokens per second)
0.02.261.926 I llama_perf_context_print:       total time =    1788.46 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.175 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.358 I main: llama backend init
0.00.000.364 I main: load the model and apply lora adapter, if any
0.00.022.453 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.463 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.479 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.487 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.488 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.493 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.320 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.226 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.234 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.235 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.235 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.237 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.238 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.238 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.239 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.240 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.243 I llama_model_loader: - type  f32:   37 tensors
0.00.133.244 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.912 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.339 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.914 I llm_load_vocab: special tokens cache size = 5
0.00.277.257 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.273 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.273 I llm_load_print_meta: arch             = gemma
0.00.277.274 I llm_load_print_meta: vocab type       = SPM
0.00.277.275 I llm_load_print_meta: n_vocab          = 256000
0.00.277.275 I llm_load_print_meta: n_merges         = 0
0.00.277.276 I llm_load_print_meta: vocab_only       = 0
0.00.277.276 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.277 I llm_load_print_meta: n_embd           = 2048
0.00.277.277 I llm_load_print_meta: n_layer          = 18
0.00.277.289 I llm_load_print_meta: n_head           = 8
0.00.277.290 I llm_load_print_meta: n_head_kv        = 1
0.00.277.290 I llm_load_print_meta: n_rot            = 256
0.00.277.291 I llm_load_print_meta: n_swa            = 0
0.00.277.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.292 I llm_load_print_meta: n_gqa            = 8
0.00.277.293 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.294 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.296 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.296 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.297 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.297 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.298 I llm_load_print_meta: n_ff             = 16384
0.00.277.298 I llm_load_print_meta: n_expert         = 0
0.00.277.299 I llm_load_print_meta: n_expert_used    = 0
0.00.277.299 I llm_load_print_meta: causal attn      = 1
0.00.277.299 I llm_load_print_meta: pooling type     = 0
0.00.277.299 I llm_load_print_meta: rope type        = 2
0.00.277.300 I llm_load_print_meta: rope scaling     = linear
0.00.277.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.303 I llm_load_print_meta: freq_scale_train = 1
0.00.277.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.305 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.306 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.307 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.307 I llm_load_print_meta: model type       = 2B
0.00.277.308 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.309 I llm_load_print_meta: model params     = 2.51 B
0.00.277.311 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.312 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.312 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.313 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.313 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.314 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.314 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.315 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.315 I llm_load_print_meta: max token length = 93
0.00.369.673 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.369.680 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.369.681 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.369.682 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.369.683 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.369.683 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.374.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.887 I llama_new_context_with_model: n_batch       = 2048
0.00.374.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.888 I llama_new_context_with_model: flash_attn    = 0
0.00.374.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.892 I llama_new_context_with_model: freq_scale    = 1
0.00.374.893 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.915 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.390.131 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.144 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.240 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.494 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.501 I llama_new_context_with_model: graph nodes  = 601
0.00.391.501 I llama_new_context_with_model: graph splits = 1
0.00.391.503 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.503 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.977 I main: llama threadpool init, n_threads = 4
0.00.480.994 I 
0.00.481.071 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.075 I 
0.00.481.122 I sampler seed: 798930511
0.00.481.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.145 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.149 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.149 I 
 maneuvously.

I am unable to answer this question as it contains sexually suggestive language and themes that are not appropriate for me to discuss. [end of text]


0.02.610.397 I llama_perf_sampler_print:    sampling time =       5.29 ms /    31 runs   (    0.17 ms per token,  5854.58 tokens per second)
0.02.610.400 I llama_perf_context_print:        load time =     480.60 ms
0.02.610.401 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.610.402 I llama_perf_context_print:        eval time =    2110.93 ms /    30 runs   (   70.36 ms per token,    14.21 tokens per second)
0.02.610.403 I llama_perf_context_print:       total time =    2129.43 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.020.905 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.913 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.930 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.938 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.939 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.940 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.946 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.483 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.562 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.569 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.570 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.570 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.571 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.572 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.572 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.575 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.576 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.577 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.578 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.579 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.583 I llama_model_loader: - type  f32:   37 tensors
0.00.131.585 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.933 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.318 I llm_load_vocab: special tokens cache size = 5
0.00.269.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.659 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.659 I llm_load_print_meta: arch             = gemma
0.00.269.660 I llm_load_print_meta: vocab type       = SPM
0.00.269.660 I llm_load_print_meta: n_vocab          = 256000
0.00.269.661 I llm_load_print_meta: n_merges         = 0
0.00.269.661 I llm_load_print_meta: vocab_only       = 0
0.00.269.661 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.662 I llm_load_print_meta: n_embd           = 2048
0.00.269.662 I llm_load_print_meta: n_layer          = 18
0.00.269.673 I llm_load_print_meta: n_head           = 8
0.00.269.674 I llm_load_print_meta: n_head_kv        = 1
0.00.269.674 I llm_load_print_meta: n_rot            = 256
0.00.269.675 I llm_load_print_meta: n_swa            = 0
0.00.269.675 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.675 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.676 I llm_load_print_meta: n_gqa            = 8
0.00.269.677 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.680 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.681 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.682 I llm_load_print_meta: n_ff             = 16384
0.00.269.682 I llm_load_print_meta: n_expert         = 0
0.00.269.683 I llm_load_print_meta: n_expert_used    = 0
0.00.269.683 I llm_load_print_meta: causal attn      = 1
0.00.269.683 I llm_load_print_meta: pooling type     = 0
0.00.269.683 I llm_load_print_meta: rope type        = 2
0.00.269.684 I llm_load_print_meta: rope scaling     = linear
0.00.269.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.686 I llm_load_print_meta: freq_scale_train = 1
0.00.269.686 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.687 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.687 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.687 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.688 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.688 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.688 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.689 I llm_load_print_meta: model type       = 2B
0.00.269.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.690 I llm_load_print_meta: model params     = 2.51 B
0.00.269.691 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.691 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.692 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.693 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.693 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.694 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.694 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.694 I llm_load_print_meta: max token length = 93
0.00.341.046 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.050 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.336 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.343 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.343 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.344 I llama_new_context_with_model: n_batch       = 2048
0.00.346.344 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.345 I llama_new_context_with_model: flash_attn    = 0
0.00.346.347 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.347 I llama_new_context_with_model: freq_scale    = 1
0.00.346.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.367 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.360.858 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.871 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.175 I llama_new_context_with_model: graph nodes  = 601
0.00.362.175 I llama_new_context_with_model: graph splits = 1
0.00.362.177 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.836 I main: llama threadpool init, n_threads = 4
0.00.450.853 I 
0.00.450.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.927 I 
0.00.450.969 I sampler seed: 3863553698
0.00.450.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.991 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.994 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.995 I 
 increasities, but she knew that a true love wasn't built on fleeting passion. She needed a foundation of trust and respect, and she found it in

0.02.879.004 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5939.52 tokens per second)
0.02.879.007 I llama_perf_context_print:        load time =     450.06 ms
0.02.879.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.879.010 I llama_perf_context_print:        eval time =    2408.29 ms /    32 runs   (   75.26 ms per token,    13.29 tokens per second)
0.02.879.012 I llama_perf_context_print:       total time =    2428.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.009s
user	0m29.343s
sys	0m9.458s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4359 (7909e858)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40371.77 ms
main:    total time = 40371.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.596 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.773 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.785 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.790 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.791 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.794 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.795 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.796 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.796 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.797 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.797 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.801 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.802 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.803 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.587 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.381 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.284 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.285 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.286 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.287 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.288 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.291 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.293 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.294 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.295 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.298 I llama_model_loader: - type  f32:   37 tensors
0.00.132.299 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.300 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.893 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.540 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.013 I llm_load_vocab: special tokens cache size = 5
0.00.265.376 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.391 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.392 I llm_load_print_meta: arch             = gemma
0.00.265.392 I llm_load_print_meta: vocab type       = SPM
0.00.265.393 I llm_load_print_meta: n_vocab          = 256000
0.00.265.393 I llm_load_print_meta: n_merges         = 0
0.00.265.394 I llm_load_print_meta: vocab_only       = 0
0.00.265.394 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.395 I llm_load_print_meta: n_embd           = 2048
0.00.265.395 I llm_load_print_meta: n_layer          = 18
0.00.265.406 I llm_load_print_meta: n_head           = 8
0.00.265.407 I llm_load_print_meta: n_head_kv        = 1
0.00.265.408 I llm_load_print_meta: n_rot            = 256
0.00.265.409 I llm_load_print_meta: n_swa            = 0
0.00.265.409 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.411 I llm_load_print_meta: n_gqa            = 8
0.00.265.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.414 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.417 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.419 I llm_load_print_meta: n_ff             = 16384
0.00.265.419 I llm_load_print_meta: n_expert         = 0
0.00.265.419 I llm_load_print_meta: n_expert_used    = 0
0.00.265.420 I llm_load_print_meta: causal attn      = 1
0.00.265.421 I llm_load_print_meta: pooling type     = 0
0.00.265.421 I llm_load_print_meta: rope type        = 2
0.00.265.422 I llm_load_print_meta: rope scaling     = linear
0.00.265.423 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.424 I llm_load_print_meta: freq_scale_train = 1
0.00.265.424 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.425 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.425 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.425 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.426 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.426 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.427 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.428 I llm_load_print_meta: model type       = 2B
0.00.265.428 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.429 I llm_load_print_meta: model params     = 2.51 B
0.00.265.430 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.431 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.432 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.432 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.433 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.433 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.436 I llm_load_print_meta: max token length = 93
0.00.326.042 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.048 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.049 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.049 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.050 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.051 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.150 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.156 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.157 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.157 I llama_new_context_with_model: n_batch       = 2048
0.00.331.157 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.158 I llama_new_context_with_model: flash_attn    = 0
0.00.331.160 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.161 I llama_new_context_with_model: freq_scale    = 1
0.00.331.162 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.181 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.345.516 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.852 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.859 I llama_new_context_with_model: graph nodes  = 601
0.00.346.859 I llama_new_context_with_model: graph splits = 1
0.00.346.862 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.912 I main: llama threadpool init, n_threads = 4
0.00.422.928 I 
0.00.423.004 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.007 I 
0.00.423.049 I sampler seed: 1782259132
0.00.423.060 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.062 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.072 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.075 I 
 increasities, and other forms of flattery.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.01.532.383 I llama_perf_sampler_print:    sampling time =       3.89 ms /    23 runs   (    0.17 ms per token,  5911.08 tokens per second)
0.01.532.386 I llama_perf_context_print:        load time =     422.10 ms
0.01.532.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.532.389 I llama_perf_context_print:        eval time =    1095.84 ms /    22 runs   (   49.81 ms per token,    20.08 tokens per second)
0.01.532.389 I llama_perf_context_print:       total time =    1109.48 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4359 (7909e858)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40212.75 ms
main:    total time = 40212.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.558 I build: 4359 (7909e858) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.518 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.547 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.555 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.556 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.556 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.557 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.557 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.563 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.564 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.565 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.567 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.960 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.209 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.210 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.211 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.212 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.213 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.216 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.221 I llama_model_loader: - type  f32:   37 tensors
0.00.132.222 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.223 I llama_model_loader: - type q6_K:   19 tensors
0.00.225.778 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.283 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.804 I llm_load_vocab: special tokens cache size = 5
0.00.293.469 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.490 I llm_load_print_meta: arch             = gemma
0.00.293.491 I llm_load_print_meta: vocab type       = SPM
0.00.293.492 I llm_load_print_meta: n_vocab          = 256000
0.00.293.492 I llm_load_print_meta: n_merges         = 0
0.00.293.493 I llm_load_print_meta: vocab_only       = 0
0.00.293.493 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.493 I llm_load_print_meta: n_embd           = 2048
0.00.293.494 I llm_load_print_meta: n_layer          = 18
0.00.293.506 I llm_load_print_meta: n_head           = 8
0.00.293.507 I llm_load_print_meta: n_head_kv        = 1
0.00.293.508 I llm_load_print_meta: n_rot            = 256
0.00.293.508 I llm_load_print_meta: n_swa            = 0
0.00.293.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.509 I llm_load_print_meta: n_gqa            = 8
0.00.293.510 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.511 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.512 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.514 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.514 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.515 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.516 I llm_load_print_meta: n_ff             = 16384
0.00.293.516 I llm_load_print_meta: n_expert         = 0
0.00.293.517 I llm_load_print_meta: n_expert_used    = 0
0.00.293.517 I llm_load_print_meta: causal attn      = 1
0.00.293.517 I llm_load_print_meta: pooling type     = 0
0.00.293.518 I llm_load_print_meta: rope type        = 2
0.00.293.518 I llm_load_print_meta: rope scaling     = linear
0.00.293.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.520 I llm_load_print_meta: freq_scale_train = 1
0.00.293.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.522 I llm_load_print_meta: model type       = 2B
0.00.293.523 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.293.524 I llm_load_print_meta: model params     = 2.51 B
0.00.293.525 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.293.526 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.529 I llm_load_print_meta: max token length = 93
0.00.352.781 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.357.954 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.960 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.961 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.961 I llama_new_context_with_model: n_batch       = 2048
0.00.357.962 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.962 I llama_new_context_with_model: flash_attn    = 0
0.00.357.965 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.966 I llama_new_context_with_model: freq_scale    = 1
0.00.357.967 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.987 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.372.753 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.767 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.097 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.103 I llama_new_context_with_model: graph nodes  = 601
0.00.374.103 I llama_new_context_with_model: graph splits = 1
0.00.374.105 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.106 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.436 I main: llama threadpool init, n_threads = 4
0.00.448.453 I 
0.00.448.526 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.529 I 
0.00.448.572 I sampler seed: 3020614630
0.00.448.582 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.597 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.597 I 
 increasities and make the requested corrections.

**Original Text:**

> The quick brown fox jumped over the lazy dog.

**Corrections:**

>

0.02.034.512 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6005.46 tokens per second)
0.02.034.515 I llama_perf_context_print:        load time =     447.66 ms
0.02.034.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.519 I llama_perf_context_print:        eval time =    1566.69 ms /    32 runs   (   48.96 ms per token,    20.43 tokens per second)
0.02.034.520 I llama_perf_context_print:       total time =    1586.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.919s
user	10m22.027s
sys	0m6.944s
