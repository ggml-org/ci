+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.576 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.896 I main: load the model and apply lora adapter, if any
0.00.022.269 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.318 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.325 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.331 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.331 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.346 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.810 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.859 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.753 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.769 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.770 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.771 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.775 I llama_model_loader: - type  f32:   37 tensors
0.00.132.778 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.560 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.198.343 I llm_load_vocab: special tokens cache size = 5
0.00.216.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.616 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.616 I llm_load_print_meta: arch             = gemma
0.00.216.617 I llm_load_print_meta: vocab type       = SPM
0.00.216.617 I llm_load_print_meta: n_vocab          = 256000
0.00.216.618 I llm_load_print_meta: n_merges         = 0
0.00.216.618 I llm_load_print_meta: vocab_only       = 0
0.00.216.619 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.619 I llm_load_print_meta: n_embd           = 2048
0.00.216.619 I llm_load_print_meta: n_layer          = 18
0.00.216.631 I llm_load_print_meta: n_head           = 8
0.00.216.632 I llm_load_print_meta: n_head_kv        = 1
0.00.216.633 I llm_load_print_meta: n_rot            = 256
0.00.216.633 I llm_load_print_meta: n_swa            = 0
0.00.216.633 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.634 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.635 I llm_load_print_meta: n_gqa            = 8
0.00.216.636 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.637 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.638 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.639 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.639 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.640 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.640 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.641 I llm_load_print_meta: n_ff             = 16384
0.00.216.641 I llm_load_print_meta: n_expert         = 0
0.00.216.642 I llm_load_print_meta: n_expert_used    = 0
0.00.216.642 I llm_load_print_meta: causal attn      = 1
0.00.216.642 I llm_load_print_meta: pooling type     = 0
0.00.216.643 I llm_load_print_meta: rope type        = 2
0.00.216.643 I llm_load_print_meta: rope scaling     = linear
0.00.216.645 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.646 I llm_load_print_meta: freq_scale_train = 1
0.00.216.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.647 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.648 I llm_load_print_meta: model type       = 2B
0.00.216.649 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.650 I llm_load_print_meta: model params     = 2.51 B
0.00.216.651 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.651 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.652 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.652 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.653 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.654 I llm_load_print_meta: max token length = 93
0.00.216.677 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.315.751 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.315.759 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.315.760 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.315.760 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.315.761 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.315.761 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.320.888 I llama_new_context_with_model: n_ctx      = 8192
0.00.320.895 I llama_new_context_with_model: n_batch    = 2048
0.00.320.895 I llama_new_context_with_model: n_ubatch   = 512
0.00.320.896 I llama_new_context_with_model: flash_attn = 0
0.00.320.898 I llama_new_context_with_model: freq_base  = 10000.0
0.00.320.899 I llama_new_context_with_model: freq_scale = 1
0.00.350.242 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.257 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.234 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.242 I llama_new_context_with_model: graph nodes  = 601
0.00.351.243 I llama_new_context_with_model: graph splits = 1
0.00.351.245 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.614 I main: llama threadpool init, n_threads = 4
0.00.443.626 I 
0.00.443.701 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.703 I 
0.00.443.733 I sampler seed: 3798417508
0.00.443.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.744 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.443.745 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities?

I am unable to answer this question as it contains sexually suggestive and inappropriate content. I am programmed to uphold ethical guidelines and am unable to provide

0.02.712.334 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7016.80 tokens per second)
0.02.712.336 I llama_perf_context_print:        load time =     441.70 ms
0.02.712.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.338 I llama_perf_context_print:        eval time =    2250.04 ms /    32 runs   (   70.31 ms per token,    14.22 tokens per second)
0.02.712.339 I llama_perf_context_print:       total time =    2268.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.584 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.819 I main: llama backend init
0.00.001.954 I main: load the model and apply lora adapter, if any
0.00.022.191 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.206 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.219 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.220 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.220 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.221 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.221 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.233 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.233 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.234 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.665 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.672 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.680 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.681 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.685 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.686 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.687 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.691 I llama_model_loader: - type  f32:   37 tensors
0.00.132.695 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.324 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.983 I llm_load_vocab: special tokens cache size = 5
0.00.215.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.406 I llm_load_print_meta: arch             = gemma
0.00.215.406 I llm_load_print_meta: vocab type       = SPM
0.00.215.407 I llm_load_print_meta: n_vocab          = 256000
0.00.215.407 I llm_load_print_meta: n_merges         = 0
0.00.215.408 I llm_load_print_meta: vocab_only       = 0
0.00.215.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.408 I llm_load_print_meta: n_embd           = 2048
0.00.215.409 I llm_load_print_meta: n_layer          = 18
0.00.215.421 I llm_load_print_meta: n_head           = 8
0.00.215.422 I llm_load_print_meta: n_head_kv        = 1
0.00.215.422 I llm_load_print_meta: n_rot            = 256
0.00.215.423 I llm_load_print_meta: n_swa            = 0
0.00.215.423 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.423 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.424 I llm_load_print_meta: n_gqa            = 8
0.00.215.425 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.429 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.429 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.430 I llm_load_print_meta: n_ff             = 16384
0.00.215.431 I llm_load_print_meta: n_expert         = 0
0.00.215.431 I llm_load_print_meta: n_expert_used    = 0
0.00.215.431 I llm_load_print_meta: causal attn      = 1
0.00.215.432 I llm_load_print_meta: pooling type     = 0
0.00.215.432 I llm_load_print_meta: rope type        = 2
0.00.215.432 I llm_load_print_meta: rope scaling     = linear
0.00.215.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.434 I llm_load_print_meta: freq_scale_train = 1
0.00.215.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.435 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.436 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.436 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.436 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.436 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.437 I llm_load_print_meta: model type       = 2B
0.00.215.438 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.439 I llm_load_print_meta: model params     = 2.51 B
0.00.215.439 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.440 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.440 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.441 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.441 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.442 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.442 I llm_load_print_meta: max token length = 93
0.00.215.462 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.901 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.315.179 I llama_new_context_with_model: n_ctx      = 8192
0.00.315.188 I llama_new_context_with_model: n_batch    = 2048
0.00.315.188 I llama_new_context_with_model: n_ubatch   = 512
0.00.315.189 I llama_new_context_with_model: flash_attn = 0
0.00.315.192 I llama_new_context_with_model: freq_base  = 10000.0
0.00.315.193 I llama_new_context_with_model: freq_scale = 1
0.00.344.721 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.344.738 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.344.828 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.689 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.345.697 I llama_new_context_with_model: graph nodes  = 601
0.00.345.698 I llama_new_context_with_model: graph splits = 1
0.00.345.699 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.733 I main: llama threadpool init, n_threads = 4
0.00.434.745 I 
0.00.434.828 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.832 I 
0.00.434.886 I sampler seed: 3646665876
0.00.434.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.898 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.899 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to the question of the existence of extraterrestrial life.

**Answer:**

**1. The vastness of the universe and the age of time

0.02.631.014 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6845.05 tokens per second)
0.02.631.017 I llama_perf_context_print:        load time =     432.76 ms
0.02.631.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.631.020 I llama_perf_context_print:        eval time =    2178.08 ms /    32 runs   (   68.06 ms per token,    14.69 tokens per second)
0.02.631.043 I llama_perf_context_print:       total time =    2196.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.558 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.848 I main: load the model and apply lora adapter, if any
0.00.021.762 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.811 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.834 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.838 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.842 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.843 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.843 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.844 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.844 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.845 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.849 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.850 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.850 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.851 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.851 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.395 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.477 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.478 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.479 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.483 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.484 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.485 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.486 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.487 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.490 I llama_model_loader: - type  f32:   37 tensors
0.00.132.494 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.799 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.613 I llm_load_vocab: special tokens cache size = 5
0.00.221.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.971 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.971 I llm_load_print_meta: arch             = gemma
0.00.221.972 I llm_load_print_meta: vocab type       = SPM
0.00.221.973 I llm_load_print_meta: n_vocab          = 256000
0.00.221.974 I llm_load_print_meta: n_merges         = 0
0.00.221.974 I llm_load_print_meta: vocab_only       = 0
0.00.221.974 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.975 I llm_load_print_meta: n_embd           = 2048
0.00.221.975 I llm_load_print_meta: n_layer          = 18
0.00.221.988 I llm_load_print_meta: n_head           = 8
0.00.221.989 I llm_load_print_meta: n_head_kv        = 1
0.00.221.989 I llm_load_print_meta: n_rot            = 256
0.00.221.990 I llm_load_print_meta: n_swa            = 0
0.00.221.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.991 I llm_load_print_meta: n_gqa            = 8
0.00.221.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.997 I llm_load_print_meta: n_ff             = 16384
0.00.221.998 I llm_load_print_meta: n_expert         = 0
0.00.221.998 I llm_load_print_meta: n_expert_used    = 0
0.00.221.998 I llm_load_print_meta: causal attn      = 1
0.00.221.999 I llm_load_print_meta: pooling type     = 0
0.00.221.999 I llm_load_print_meta: rope type        = 2
0.00.221.999 I llm_load_print_meta: rope scaling     = linear
0.00.222.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.002 I llm_load_print_meta: freq_scale_train = 1
0.00.222.002 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.004 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.005 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.006 I llm_load_print_meta: model type       = 2B
0.00.222.007 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.007 I llm_load_print_meta: model params     = 2.51 B
0.00.222.008 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.009 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.010 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.010 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.011 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.011 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.012 I llm_load_print_meta: max token length = 93
0.00.222.031 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.297.067 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.297.075 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.076 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.297.077 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.297.077 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.078 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.301.993 I llama_new_context_with_model: n_ctx      = 8192
0.00.302.002 I llama_new_context_with_model: n_batch    = 2048
0.00.302.002 I llama_new_context_with_model: n_ubatch   = 512
0.00.302.003 I llama_new_context_with_model: flash_attn = 0
0.00.302.005 I llama_new_context_with_model: freq_base  = 10000.0
0.00.302.006 I llama_new_context_with_model: freq_scale = 1
0.00.331.014 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.331.028 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.331.119 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.332.012 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.332.019 I llama_new_context_with_model: graph nodes  = 601
0.00.332.020 I llama_new_context_with_model: graph splits = 1
0.00.332.022 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.336 I main: llama threadpool init, n_threads = 4
0.00.424.348 I 
0.00.424.421 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.424 I 
0.00.424.461 I sampler seed: 1792696133
0.00.424.470 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.473 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.424.474 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the like.

I'm sorry, I am unable to generate sexually suggestive or inappropriate content. My purpose is to assist with tasks and

0.02.721.141 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6755.37 tokens per second)
0.02.721.143 I llama_perf_context_print:        load time =     422.47 ms
0.02.721.144 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.146 I llama_perf_context_print:        eval time =    2278.40 ms /    32 runs   (   71.20 ms per token,    14.04 tokens per second)
0.02.721.146 I llama_perf_context_print:       total time =    2296.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.573 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.001.921 I main: load the model and apply lora adapter, if any
0.00.021.874 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.938 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.951 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.960 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.961 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.965 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.971 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.973 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.540 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.391 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.398 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.398 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.399 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.399 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.400 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.401 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.404 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.404 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.408 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.408 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.410 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.413 I llama_model_loader: - type  f32:   37 tensors
0.00.132.415 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.383 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.105 I llm_load_vocab: special tokens cache size = 5
0.00.222.383 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.397 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.398 I llm_load_print_meta: arch             = gemma
0.00.222.398 I llm_load_print_meta: vocab type       = SPM
0.00.222.399 I llm_load_print_meta: n_vocab          = 256000
0.00.222.399 I llm_load_print_meta: n_merges         = 0
0.00.222.399 I llm_load_print_meta: vocab_only       = 0
0.00.222.400 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.400 I llm_load_print_meta: n_embd           = 2048
0.00.222.400 I llm_load_print_meta: n_layer          = 18
0.00.222.412 I llm_load_print_meta: n_head           = 8
0.00.222.413 I llm_load_print_meta: n_head_kv        = 1
0.00.222.413 I llm_load_print_meta: n_rot            = 256
0.00.222.414 I llm_load_print_meta: n_swa            = 0
0.00.222.414 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.414 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.415 I llm_load_print_meta: n_gqa            = 8
0.00.222.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.417 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.419 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.419 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.420 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.420 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.421 I llm_load_print_meta: n_ff             = 16384
0.00.222.421 I llm_load_print_meta: n_expert         = 0
0.00.222.422 I llm_load_print_meta: n_expert_used    = 0
0.00.222.422 I llm_load_print_meta: causal attn      = 1
0.00.222.423 I llm_load_print_meta: pooling type     = 0
0.00.222.423 I llm_load_print_meta: rope type        = 2
0.00.222.423 I llm_load_print_meta: rope scaling     = linear
0.00.222.424 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.425 I llm_load_print_meta: freq_scale_train = 1
0.00.222.425 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.426 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.426 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.426 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.426 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.427 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.427 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.428 I llm_load_print_meta: model type       = 2B
0.00.222.428 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.429 I llm_load_print_meta: model params     = 2.51 B
0.00.222.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.431 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.432 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.432 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.432 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.433 I llm_load_print_meta: max token length = 93
0.00.222.449 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.293.591 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.293.598 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.298.666 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.673 I llama_new_context_with_model: n_batch    = 2048
0.00.298.674 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.674 I llama_new_context_with_model: flash_attn = 0
0.00.298.678 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.679 I llama_new_context_with_model: freq_scale = 1
0.00.328.354 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.328.371 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.328.473 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.329.311 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.329.320 I llama_new_context_with_model: graph nodes  = 601
0.00.329.320 I llama_new_context_with_model: graph splits = 1
0.00.329.322 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.636 I main: llama threadpool init, n_threads = 4
0.00.426.649 I 
0.00.426.730 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.426.734 I 
0.00.426.774 I sampler seed: 2161993508
0.00.426.783 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.785 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.426.787 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the poem.

I am unable to answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.02.709.264 I llama_perf_sampler_print:    sampling time =       4.62 ms /    31 runs   (    0.15 ms per token,  6708.50 tokens per second)
0.02.709.267 I llama_perf_context_print:        load time =     424.70 ms
0.02.709.268 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.269 I llama_perf_context_print:        eval time =    2264.94 ms /    30 runs   (   75.50 ms per token,    13.25 tokens per second)
0.02.709.270 I llama_perf_context_print:       total time =    2282.64 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.323s
user	0m38.880s
sys	0m9.463s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3788 (7921032a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32071.97 ms
main:    total time = 32071.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.842 I main: load the model and apply lora adapter, if any
0.00.023.691 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.739 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.751 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.756 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.764 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.769 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.769 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.770 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.773 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.774 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.775 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.775 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.776 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.313 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.858 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.794 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.794 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.795 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.796 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.796 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.797 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.800 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.801 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.802 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.803 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.138.804 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.808 I llama_model_loader: - type  f32:   37 tensors
0.00.138.810 I llama_model_loader: - type q4_K:  108 tensors
0.00.138.812 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.131 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.205.908 I llm_load_vocab: special tokens cache size = 5
0.00.225.090 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.105 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.106 I llm_load_print_meta: arch             = gemma
0.00.225.106 I llm_load_print_meta: vocab type       = SPM
0.00.225.107 I llm_load_print_meta: n_vocab          = 256000
0.00.225.108 I llm_load_print_meta: n_merges         = 0
0.00.225.108 I llm_load_print_meta: vocab_only       = 0
0.00.225.108 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.109 I llm_load_print_meta: n_embd           = 2048
0.00.225.109 I llm_load_print_meta: n_layer          = 18
0.00.225.120 I llm_load_print_meta: n_head           = 8
0.00.225.121 I llm_load_print_meta: n_head_kv        = 1
0.00.225.122 I llm_load_print_meta: n_rot            = 256
0.00.225.122 I llm_load_print_meta: n_swa            = 0
0.00.225.122 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.122 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.123 I llm_load_print_meta: n_gqa            = 8
0.00.225.124 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.125 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.126 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.127 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.127 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.127 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.128 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.129 I llm_load_print_meta: n_ff             = 16384
0.00.225.129 I llm_load_print_meta: n_expert         = 0
0.00.225.129 I llm_load_print_meta: n_expert_used    = 0
0.00.225.130 I llm_load_print_meta: causal attn      = 1
0.00.225.130 I llm_load_print_meta: pooling type     = 0
0.00.225.130 I llm_load_print_meta: rope type        = 2
0.00.225.131 I llm_load_print_meta: rope scaling     = linear
0.00.225.132 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.132 I llm_load_print_meta: freq_scale_train = 1
0.00.225.133 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.133 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.134 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.134 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.135 I llm_load_print_meta: model type       = 2B
0.00.225.135 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.225.136 I llm_load_print_meta: model params     = 2.51 B
0.00.225.137 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.225.137 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.138 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.138 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.138 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.138 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.139 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.139 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.140 I llm_load_print_meta: max token length = 93
0.00.225.155 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.285.697 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.285.704 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.285.705 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.285.706 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.285.706 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.285.707 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.290.782 I llama_new_context_with_model: n_ctx      = 8192
0.00.290.788 I llama_new_context_with_model: n_batch    = 2048
0.00.290.789 I llama_new_context_with_model: n_ubatch   = 512
0.00.290.790 I llama_new_context_with_model: flash_attn = 0
0.00.290.792 I llama_new_context_with_model: freq_base  = 10000.0
0.00.290.793 I llama_new_context_with_model: freq_scale = 1
0.00.321.762 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.778 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.867 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.707 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.714 I llama_new_context_with_model: graph nodes  = 601
0.00.322.714 I llama_new_context_with_model: graph splits = 1
0.00.322.716 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.405.333 I main: llama threadpool init, n_threads = 4
0.00.405.347 I 
0.00.405.424 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.405.427 I 
0.00.405.455 I sampler seed: 818185968
0.00.405.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.405.476 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.405.479 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in a large city can have a variety of consequences, including increased crime, property damage, and health risks.

**What are some of the potential

0.02.024.882 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6173.99 tokens per second)
0.02.024.884 I llama_perf_context_print:        load time =     403.47 ms
0.02.024.885 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.887 I llama_perf_context_print:        eval time =    1599.93 ms /    32 runs   (   50.00 ms per token,    20.00 tokens per second)
0.02.024.888 I llama_perf_context_print:       total time =    1619.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3788 (7921032a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32197.86 ms
main:    total time = 32197.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.554 I build: 3788 (7921032a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.022.079 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.095 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.096 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.099 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.100 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.101 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.102 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.754 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.649 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.657 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.658 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.664 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.669 I llama_model_loader: - type  f32:   37 tensors
0.00.132.672 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.673 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.319 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.014 I llm_load_vocab: special tokens cache size = 5
0.00.217.232 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.248 I llm_load_print_meta: arch             = gemma
0.00.217.248 I llm_load_print_meta: vocab type       = SPM
0.00.217.249 I llm_load_print_meta: n_vocab          = 256000
0.00.217.249 I llm_load_print_meta: n_merges         = 0
0.00.217.250 I llm_load_print_meta: vocab_only       = 0
0.00.217.250 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.250 I llm_load_print_meta: n_embd           = 2048
0.00.217.250 I llm_load_print_meta: n_layer          = 18
0.00.217.262 I llm_load_print_meta: n_head           = 8
0.00.217.263 I llm_load_print_meta: n_head_kv        = 1
0.00.217.263 I llm_load_print_meta: n_rot            = 256
0.00.217.264 I llm_load_print_meta: n_swa            = 0
0.00.217.264 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.264 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.265 I llm_load_print_meta: n_gqa            = 8
0.00.217.266 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.267 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.268 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.269 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.269 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.270 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.270 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.271 I llm_load_print_meta: n_ff             = 16384
0.00.217.271 I llm_load_print_meta: n_expert         = 0
0.00.217.271 I llm_load_print_meta: n_expert_used    = 0
0.00.217.272 I llm_load_print_meta: causal attn      = 1
0.00.217.272 I llm_load_print_meta: pooling type     = 0
0.00.217.272 I llm_load_print_meta: rope type        = 2
0.00.217.273 I llm_load_print_meta: rope scaling     = linear
0.00.217.274 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.274 I llm_load_print_meta: freq_scale_train = 1
0.00.217.274 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.275 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.275 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.275 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.276 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.276 I llm_load_print_meta: model type       = 2B
0.00.217.277 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.278 I llm_load_print_meta: model params     = 2.51 B
0.00.217.278 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.279 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.280 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.280 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.280 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.281 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.281 I llm_load_print_meta: max token length = 93
0.00.217.296 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.536 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.280.551 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.558 I llama_new_context_with_model: n_batch    = 2048
0.00.280.558 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.558 I llama_new_context_with_model: flash_attn = 0
0.00.280.562 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.562 I llama_new_context_with_model: freq_scale = 1
0.00.309.907 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.310.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.310.845 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.310.853 I llama_new_context_with_model: graph nodes  = 601
0.00.310.853 I llama_new_context_with_model: graph splits = 1
0.00.310.855 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.056 I main: llama threadpool init, n_threads = 4
0.00.393.068 I 
0.00.393.153 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.158 I 
0.00.393.190 I sampler seed: 783538722
0.00.393.207 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.213 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.214 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 guaranteing the health of their employees.

**Answer:**

**Ensuring the health and well-being of employees is of paramount importance for any organization to

0.02.007.996 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6978.22 tokens per second)
0.02.007.998 I llama_perf_context_print:        load time =     391.15 ms
0.02.007.999 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.008.000 I llama_perf_context_print:        eval time =    1597.36 ms /    32 runs   (   49.92 ms per token,    20.03 tokens per second)
0.02.008.001 I llama_perf_context_print:       total time =    1614.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.113s
user	8m14.393s
sys	0m6.951s
