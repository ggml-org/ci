+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.672 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.682 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.690 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.699 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.703 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.707 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.708 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.709 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.709 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.710 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.710 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.714 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.715 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.842 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.577 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.560 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.568 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.569 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.570 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.571 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.574 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.576 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.576 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.577 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.581 I llama_model_loader: - type  f32:   37 tensors
0.00.133.582 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.484 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.118 I llm_load_vocab: special tokens cache size = 5
0.00.283.622 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.643 I llm_load_print_meta: arch             = gemma
0.00.283.643 I llm_load_print_meta: vocab type       = SPM
0.00.283.644 I llm_load_print_meta: n_vocab          = 256000
0.00.283.644 I llm_load_print_meta: n_merges         = 0
0.00.283.645 I llm_load_print_meta: vocab_only       = 0
0.00.283.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.646 I llm_load_print_meta: n_embd           = 2048
0.00.283.646 I llm_load_print_meta: n_layer          = 18
0.00.283.660 I llm_load_print_meta: n_head           = 8
0.00.283.661 I llm_load_print_meta: n_head_kv        = 1
0.00.283.662 I llm_load_print_meta: n_rot            = 256
0.00.283.662 I llm_load_print_meta: n_swa            = 0
0.00.283.662 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.663 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.664 I llm_load_print_meta: n_gqa            = 8
0.00.283.665 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.669 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.670 I llm_load_print_meta: n_ff             = 16384
0.00.283.670 I llm_load_print_meta: n_expert         = 0
0.00.283.670 I llm_load_print_meta: n_expert_used    = 0
0.00.283.671 I llm_load_print_meta: causal attn      = 1
0.00.283.671 I llm_load_print_meta: pooling type     = 0
0.00.283.671 I llm_load_print_meta: rope type        = 2
0.00.283.672 I llm_load_print_meta: rope scaling     = linear
0.00.283.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.674 I llm_load_print_meta: freq_scale_train = 1
0.00.283.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.676 I llm_load_print_meta: model type       = 2B
0.00.283.677 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.678 I llm_load_print_meta: model params     = 2.51 B
0.00.283.679 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.682 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.683 I llm_load_print_meta: max token length = 93
0.00.385.316 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.385.323 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.385.324 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.385.325 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.385.325 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.385.326 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.390.554 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.561 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.562 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.562 I llama_new_context_with_model: n_batch       = 2048
0.00.390.562 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.563 I llama_new_context_with_model: flash_attn    = 0
0.00.390.566 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.567 I llama_new_context_with_model: freq_scale    = 1
0.00.390.568 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.405.158 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.405.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.405.264 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.563 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.406.569 I llama_new_context_with_model: graph nodes  = 601
0.00.406.569 I llama_new_context_with_model: graph splits = 1
0.00.406.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.941 I main: llama threadpool init, n_threads = 4
0.00.492.957 I 
0.00.493.033 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.493.036 I 
0.00.493.080 I sampler seed: 4293529760
0.00.493.091 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.106 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.106 I 
 increasities, a young woman named Anya, and her friend, a man named Dimitri, decide to embark on a journey to find the legendary phoenix.

The

0.02.775.454 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7045.26 tokens per second)
0.02.775.457 I llama_perf_context_print:        load time =     492.14 ms
0.02.775.458 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.775.460 I llama_perf_context_print:        eval time =    2263.70 ms /    32 runs   (   70.74 ms per token,    14.14 tokens per second)
0.02.775.460 I llama_perf_context_print:       total time =    2282.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.577 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.359 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.376 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.377 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.378 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.385 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.304 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.143 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.057 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.064 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.065 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.065 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.066 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.067 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.068 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.071 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.071 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.072 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.073 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.075 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.078 I llama_model_loader: - type  f32:   37 tensors
0.00.133.079 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.222 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.783 I llm_load_vocab: special tokens cache size = 5
0.00.281.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.975 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.976 I llm_load_print_meta: arch             = gemma
0.00.281.976 I llm_load_print_meta: vocab type       = SPM
0.00.281.977 I llm_load_print_meta: n_vocab          = 256000
0.00.281.978 I llm_load_print_meta: n_merges         = 0
0.00.281.978 I llm_load_print_meta: vocab_only       = 0
0.00.281.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.978 I llm_load_print_meta: n_embd           = 2048
0.00.281.979 I llm_load_print_meta: n_layer          = 18
0.00.281.990 I llm_load_print_meta: n_head           = 8
0.00.281.991 I llm_load_print_meta: n_head_kv        = 1
0.00.281.991 I llm_load_print_meta: n_rot            = 256
0.00.281.992 I llm_load_print_meta: n_swa            = 0
0.00.281.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.993 I llm_load_print_meta: n_gqa            = 8
0.00.281.994 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.995 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.996 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.998 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.998 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.998 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.999 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.000 I llm_load_print_meta: n_ff             = 16384
0.00.282.000 I llm_load_print_meta: n_expert         = 0
0.00.282.000 I llm_load_print_meta: n_expert_used    = 0
0.00.282.001 I llm_load_print_meta: causal attn      = 1
0.00.282.001 I llm_load_print_meta: pooling type     = 0
0.00.282.001 I llm_load_print_meta: rope type        = 2
0.00.282.002 I llm_load_print_meta: rope scaling     = linear
0.00.282.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.004 I llm_load_print_meta: freq_scale_train = 1
0.00.282.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.005 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.006 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.007 I llm_load_print_meta: model type       = 2B
0.00.282.007 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.008 I llm_load_print_meta: model params     = 2.51 B
0.00.282.009 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.009 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.010 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.011 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.011 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.012 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.013 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.013 I llm_load_print_meta: max token length = 93
0.00.376.507 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.772 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.773 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.773 I llama_new_context_with_model: n_batch       = 2048
0.00.381.774 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.774 I llama_new_context_with_model: flash_attn    = 0
0.00.381.777 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.778 I llama_new_context_with_model: freq_scale    = 1
0.00.381.779 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.764 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.776 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.138 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.144 I llama_new_context_with_model: graph nodes  = 601
0.00.398.145 I llama_new_context_with_model: graph splits = 1
0.00.398.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.520 I main: llama threadpool init, n_threads = 4
0.00.481.535 I 
0.00.481.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.481.614 I 
0.00.481.656 I sampler seed: 9701674
0.00.481.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.671 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.671 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.672 I 
 increasities and complexities into the design of an AI-powered language learning platform.

**1. Natural Language Processing (NLP) and Machine Learning:**



0.02.710.029 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6455.40 tokens per second)
0.02.710.031 I llama_perf_context_print:        load time =     480.72 ms
0.02.710.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.034 I llama_perf_context_print:        eval time =    2208.36 ms /    32 runs   (   69.01 ms per token,    14.49 tokens per second)
0.02.710.035 I llama_perf_context_print:       total time =    2228.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.461 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.473 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.490 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.496 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.497 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.499 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.499 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.500 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.506 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.506 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.124 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.687 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.623 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.632 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.632 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.633 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.633 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.634 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.638 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.638 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.640 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.645 I llama_model_loader: - type  f32:   37 tensors
0.00.133.645 I llama_model_loader: - type q8_0:  127 tensors
0.00.231.678 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.282.357 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.283.083 I llm_load_vocab: special tokens cache size = 5
0.00.304.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.304.222 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.304.223 I llm_load_print_meta: arch             = gemma
0.00.304.223 I llm_load_print_meta: vocab type       = SPM
0.00.304.224 I llm_load_print_meta: n_vocab          = 256000
0.00.304.224 I llm_load_print_meta: n_merges         = 0
0.00.304.225 I llm_load_print_meta: vocab_only       = 0
0.00.304.225 I llm_load_print_meta: n_ctx_train      = 8192
0.00.304.225 I llm_load_print_meta: n_embd           = 2048
0.00.304.225 I llm_load_print_meta: n_layer          = 18
0.00.304.238 I llm_load_print_meta: n_head           = 8
0.00.304.239 I llm_load_print_meta: n_head_kv        = 1
0.00.304.239 I llm_load_print_meta: n_rot            = 256
0.00.304.240 I llm_load_print_meta: n_swa            = 0
0.00.304.240 I llm_load_print_meta: n_embd_head_k    = 256
0.00.304.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.304.241 I llm_load_print_meta: n_gqa            = 8
0.00.304.242 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.304.244 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.304.244 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.304.246 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.304.246 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.304.246 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.304.247 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.304.248 I llm_load_print_meta: n_ff             = 16384
0.00.304.248 I llm_load_print_meta: n_expert         = 0
0.00.304.248 I llm_load_print_meta: n_expert_used    = 0
0.00.304.248 I llm_load_print_meta: causal attn      = 1
0.00.304.249 I llm_load_print_meta: pooling type     = 0
0.00.304.249 I llm_load_print_meta: rope type        = 2
0.00.304.249 I llm_load_print_meta: rope scaling     = linear
0.00.304.251 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.304.252 I llm_load_print_meta: freq_scale_train = 1
0.00.304.252 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.304.252 I llm_load_print_meta: rope_finetuned   = unknown
0.00.304.253 I llm_load_print_meta: ssm_d_conv       = 0
0.00.304.253 I llm_load_print_meta: ssm_d_inner      = 0
0.00.304.253 I llm_load_print_meta: ssm_d_state      = 0
0.00.304.253 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.304.254 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.304.254 I llm_load_print_meta: model type       = 2B
0.00.304.255 I llm_load_print_meta: model ftype      = Q8_0
0.00.304.255 I llm_load_print_meta: model params     = 2.51 B
0.00.304.256 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.304.257 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.304.257 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.304.257 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.304.258 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.304.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.304.258 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.304.259 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.304.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.304.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.304.260 I llm_load_print_meta: max token length = 93
0.00.380.390 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.380.397 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.380.398 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.380.399 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.380.399 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.380.400 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.385.563 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.569 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.570 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.570 I llama_new_context_with_model: n_batch       = 2048
0.00.385.570 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.571 I llama_new_context_with_model: flash_attn    = 0
0.00.385.574 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.575 I llama_new_context_with_model: freq_scale    = 1
0.00.385.575 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.401.036 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.049 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.143 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.390 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.396 I llama_new_context_with_model: graph nodes  = 601
0.00.402.396 I llama_new_context_with_model: graph splits = 1
0.00.402.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.149 I main: llama threadpool init, n_threads = 4
0.00.490.164 I 
0.00.490.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.490.243 I 
0.00.490.291 I sampler seed: 785097057
0.00.490.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.318 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.321 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.321 I 
 increadibly! [end of text]


0.00.781.193 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8389.26 tokens per second)
0.00.781.195 I llama_perf_context_print:        load time =     489.36 ms
0.00.781.197 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.781.198 I llama_perf_context_print:        eval time =     287.51 ms /     4 runs   (   71.88 ms per token,    13.91 tokens per second)
0.00.781.199 I llama_perf_context_print:       total time =     291.05 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.554 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.259 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.278 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.283 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.285 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.290 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.291 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.300 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.301 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.302 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.303 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.304 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.286 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.852 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.853 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.853 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.854 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.854 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.856 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.858 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.860 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.865 I llama_model_loader: - type  f32:   37 tensors
0.00.132.866 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.975 I llm_load_vocab: special tokens cache size = 5
0.00.282.398 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.418 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.418 I llm_load_print_meta: arch             = gemma
0.00.282.419 I llm_load_print_meta: vocab type       = SPM
0.00.282.420 I llm_load_print_meta: n_vocab          = 256000
0.00.282.420 I llm_load_print_meta: n_merges         = 0
0.00.282.420 I llm_load_print_meta: vocab_only       = 0
0.00.282.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.421 I llm_load_print_meta: n_embd           = 2048
0.00.282.421 I llm_load_print_meta: n_layer          = 18
0.00.282.433 I llm_load_print_meta: n_head           = 8
0.00.282.434 I llm_load_print_meta: n_head_kv        = 1
0.00.282.435 I llm_load_print_meta: n_rot            = 256
0.00.282.435 I llm_load_print_meta: n_swa            = 0
0.00.282.435 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.436 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.436 I llm_load_print_meta: n_gqa            = 8
0.00.282.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.439 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.441 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.441 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.442 I llm_load_print_meta: n_ff             = 16384
0.00.282.442 I llm_load_print_meta: n_expert         = 0
0.00.282.443 I llm_load_print_meta: n_expert_used    = 0
0.00.282.443 I llm_load_print_meta: causal attn      = 1
0.00.282.443 I llm_load_print_meta: pooling type     = 0
0.00.282.443 I llm_load_print_meta: rope type        = 2
0.00.282.444 I llm_load_print_meta: rope scaling     = linear
0.00.282.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.446 I llm_load_print_meta: freq_scale_train = 1
0.00.282.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.447 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.448 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.448 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.448 I llm_load_print_meta: model type       = 2B
0.00.282.449 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.450 I llm_load_print_meta: model params     = 2.51 B
0.00.282.451 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.451 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.452 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.453 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.453 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.453 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.454 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.454 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.456 I llm_load_print_meta: max token length = 93
0.00.353.605 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.353.613 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.358.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.779 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.780 I llama_new_context_with_model: n_batch       = 2048
0.00.358.780 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.781 I llama_new_context_with_model: flash_attn    = 0
0.00.358.785 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.785 I llama_new_context_with_model: freq_scale    = 1
0.00.358.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.535 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.550 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.986 I llama_new_context_with_model: graph nodes  = 601
0.00.374.987 I llama_new_context_with_model: graph splits = 1
0.00.374.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.935 I main: llama threadpool init, n_threads = 4
0.00.470.952 I 
0.00.471.028 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.031 I 
0.00.471.076 I sampler seed: 3136184214
0.00.471.086 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.095 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.095 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.096 I 
 seconded commas in the paragraph.

The _____ of the company has grown significantly over the years, and its revenues have increased by an average of 15

0.02.929.240 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6099.82 tokens per second)
0.02.929.243 I llama_perf_context_print:        load time =     470.15 ms
0.02.929.244 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.929.246 I llama_perf_context_print:        eval time =    2437.73 ms /    32 runs   (   76.18 ms per token,    13.13 tokens per second)
0.02.929.247 I llama_perf_context_print:       total time =    2458.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.856s
user	0m32.012s
sys	0m9.562s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4188 (30ec3983)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40245.26 ms
main:    total time = 40245.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.563 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.021.110 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.129 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.141 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.146 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.147 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.148 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.148 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.153 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.154 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.155 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.155 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.901 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.472 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.479 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.479 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.481 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.489 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.490 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.495 I llama_model_loader: - type  f32:   37 tensors
0.00.132.495 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.496 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.958 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.786 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.569 I llm_load_vocab: special tokens cache size = 5
0.00.293.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.987 I llm_load_print_meta: arch             = gemma
0.00.293.988 I llm_load_print_meta: vocab type       = SPM
0.00.293.989 I llm_load_print_meta: n_vocab          = 256000
0.00.293.989 I llm_load_print_meta: n_merges         = 0
0.00.293.990 I llm_load_print_meta: vocab_only       = 0
0.00.293.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.991 I llm_load_print_meta: n_embd           = 2048
0.00.293.992 I llm_load_print_meta: n_layer          = 18
0.00.294.004 I llm_load_print_meta: n_head           = 8
0.00.294.005 I llm_load_print_meta: n_head_kv        = 1
0.00.294.006 I llm_load_print_meta: n_rot            = 256
0.00.294.006 I llm_load_print_meta: n_swa            = 0
0.00.294.006 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.007 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.008 I llm_load_print_meta: n_gqa            = 8
0.00.294.009 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.010 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.012 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.012 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.013 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.013 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.014 I llm_load_print_meta: n_ff             = 16384
0.00.294.014 I llm_load_print_meta: n_expert         = 0
0.00.294.015 I llm_load_print_meta: n_expert_used    = 0
0.00.294.015 I llm_load_print_meta: causal attn      = 1
0.00.294.015 I llm_load_print_meta: pooling type     = 0
0.00.294.016 I llm_load_print_meta: rope type        = 2
0.00.294.016 I llm_load_print_meta: rope scaling     = linear
0.00.294.018 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.018 I llm_load_print_meta: freq_scale_train = 1
0.00.294.019 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.019 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.019 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.020 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.020 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.020 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.020 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.021 I llm_load_print_meta: model type       = 2B
0.00.294.022 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.294.023 I llm_load_print_meta: model params     = 2.51 B
0.00.294.024 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.294.025 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.025 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.026 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.026 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.027 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.027 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.028 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.028 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.028 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.029 I llm_load_print_meta: max token length = 93
0.00.352.991 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.353.001 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.353.002 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.353.002 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.353.003 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.353.003 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.358.242 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.249 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.249 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.249 I llama_new_context_with_model: n_batch       = 2048
0.00.358.250 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.250 I llama_new_context_with_model: flash_attn    = 0
0.00.358.253 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.254 I llama_new_context_with_model: freq_scale    = 1
0.00.358.255 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.166 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.171 I llama_new_context_with_model: graph nodes  = 601
0.00.374.172 I llama_new_context_with_model: graph splits = 1
0.00.374.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.131 I main: llama threadpool init, n_threads = 4
0.00.450.147 I 
0.00.450.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.225 I 
0.00.450.270 I sampler seed: 3386996169
0.00.450.284 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.288 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.289 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.290 I 
 increasities in his novel, _The Name of the Rose_.

**Answer:**
I am unable to provide an answer as the provided context does not contain

0.02.114.581 I llama_perf_sampler_print:    sampling time =       5.52 ms /    33 runs   (    0.17 ms per token,  5977.18 tokens per second)
0.02.114.584 I llama_perf_context_print:        load time =     449.33 ms
0.02.114.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.114.587 I llama_perf_context_print:        eval time =    1644.75 ms /    32 runs   (   51.40 ms per token,    19.46 tokens per second)
0.02.114.588 I llama_perf_context_print:       total time =    1664.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4188 (30ec3983)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.64 ms
main:    total time = 40223.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.174 I build: 4188 (30ec3983) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.021.080 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.109 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.113 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.114 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.114 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.115 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.116 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.121 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.122 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.124 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.421 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.321 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.329 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.330 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.336 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.340 I llama_model_loader: - type  f32:   37 tensors
0.00.131.342 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.343 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.876 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.828 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.472 I llm_load_vocab: special tokens cache size = 5
0.00.291.798 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.818 I llm_load_print_meta: arch             = gemma
0.00.291.819 I llm_load_print_meta: vocab type       = SPM
0.00.291.820 I llm_load_print_meta: n_vocab          = 256000
0.00.291.820 I llm_load_print_meta: n_merges         = 0
0.00.291.821 I llm_load_print_meta: vocab_only       = 0
0.00.291.821 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.821 I llm_load_print_meta: n_embd           = 2048
0.00.291.822 I llm_load_print_meta: n_layer          = 18
0.00.291.834 I llm_load_print_meta: n_head           = 8
0.00.291.835 I llm_load_print_meta: n_head_kv        = 1
0.00.291.836 I llm_load_print_meta: n_rot            = 256
0.00.291.836 I llm_load_print_meta: n_swa            = 0
0.00.291.836 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.836 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.837 I llm_load_print_meta: n_gqa            = 8
0.00.291.838 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.839 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.840 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.842 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.844 I llm_load_print_meta: n_ff             = 16384
0.00.291.844 I llm_load_print_meta: n_expert         = 0
0.00.291.844 I llm_load_print_meta: n_expert_used    = 0
0.00.291.844 I llm_load_print_meta: causal attn      = 1
0.00.291.845 I llm_load_print_meta: pooling type     = 0
0.00.291.845 I llm_load_print_meta: rope type        = 2
0.00.291.845 I llm_load_print_meta: rope scaling     = linear
0.00.291.847 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.848 I llm_load_print_meta: freq_scale_train = 1
0.00.291.848 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.848 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.849 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.849 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.849 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.849 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.850 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.850 I llm_load_print_meta: model type       = 2B
0.00.291.851 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.852 I llm_load_print_meta: model params     = 2.51 B
0.00.291.852 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.853 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.854 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.855 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.856 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.856 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.857 I llm_load_print_meta: max token length = 93
0.00.347.516 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.352.595 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.602 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.602 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.603 I llama_new_context_with_model: n_batch       = 2048
0.00.352.603 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.604 I llama_new_context_with_model: flash_attn    = 0
0.00.352.606 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.607 I llama_new_context_with_model: freq_scale    = 1
0.00.352.608 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.292 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.305 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.617 I llama_new_context_with_model: graph nodes  = 601
0.00.368.618 I llama_new_context_with_model: graph splits = 1
0.00.368.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.503 I main: llama threadpool init, n_threads = 4
0.00.443.518 I 
0.00.443.592 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.595 I 
0.00.443.639 I sampler seed: 3638151467
0.00.443.650 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.662 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.665 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.665 I 
 seconally. I am unable to hear you. [end of text]


0.00.993.267 I llama_perf_sampler_print:    sampling time =       1.75 ms /    12 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.00.993.270 I llama_perf_context_print:        load time =     443.11 ms
0.00.993.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.993.273 I llama_perf_context_print:        eval time =     542.27 ms /    11 runs   (   49.30 ms per token,    20.29 tokens per second)
0.00.993.274 I llama_perf_context_print:       total time =     549.77 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.409s
user	10m21.191s
sys	0m7.013s
