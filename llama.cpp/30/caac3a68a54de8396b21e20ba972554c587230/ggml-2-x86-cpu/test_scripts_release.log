+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.245 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.254 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.263 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.268 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.274 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.275 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.282 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.283 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.284 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.114 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.274 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.280 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.281 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.281 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.285 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.285 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.286 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.287 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.287 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.291 I llama_model_loader: - type  f32:   37 tensors
0.00.131.292 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.245 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.718 I llm_load_vocab: special tokens cache size = 5
0.00.266.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.540 I llm_load_print_meta: arch             = gemma
0.00.266.541 I llm_load_print_meta: vocab type       = SPM
0.00.266.541 I llm_load_print_meta: n_vocab          = 256000
0.00.266.541 I llm_load_print_meta: n_merges         = 0
0.00.266.542 I llm_load_print_meta: vocab_only       = 0
0.00.266.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.543 I llm_load_print_meta: n_embd           = 2048
0.00.266.543 I llm_load_print_meta: n_layer          = 18
0.00.266.554 I llm_load_print_meta: n_head           = 8
0.00.266.555 I llm_load_print_meta: n_head_kv        = 1
0.00.266.555 I llm_load_print_meta: n_rot            = 256
0.00.266.555 I llm_load_print_meta: n_swa            = 0
0.00.266.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.557 I llm_load_print_meta: n_gqa            = 8
0.00.266.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.559 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.561 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.561 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.562 I llm_load_print_meta: n_ff             = 16384
0.00.266.563 I llm_load_print_meta: n_expert         = 0
0.00.266.563 I llm_load_print_meta: n_expert_used    = 0
0.00.266.564 I llm_load_print_meta: causal attn      = 1
0.00.266.564 I llm_load_print_meta: pooling type     = 0
0.00.266.564 I llm_load_print_meta: rope type        = 2
0.00.266.565 I llm_load_print_meta: rope scaling     = linear
0.00.266.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.566 I llm_load_print_meta: freq_scale_train = 1
0.00.266.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.568 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.568 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.568 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.569 I llm_load_print_meta: model type       = 2B
0.00.266.569 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.570 I llm_load_print_meta: model params     = 2.51 B
0.00.266.571 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.572 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.573 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.574 I llm_load_print_meta: max token length = 93
0.00.368.243 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.252 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.253 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.253 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.254 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.255 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.576 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.582 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.583 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.583 I llama_new_context_with_model: n_batch       = 2048
0.00.373.583 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.584 I llama_new_context_with_model: flash_attn    = 0
0.00.373.587 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.588 I llama_new_context_with_model: freq_scale    = 1
0.00.373.589 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.608 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.891 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.903 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.992 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.249 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.255 I llama_new_context_with_model: graph nodes  = 601
0.00.389.255 I llama_new_context_with_model: graph splits = 1
0.00.389.258 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.419 I main: llama threadpool init, n_threads = 4
0.00.474.434 I 
0.00.474.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.513 I 
0.00.474.554 I sampler seed: 4007467157
0.00.474.565 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.575 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.575 I 
 increasities in the city streets and parks. [end of text]


0.01.181.030 I llama_perf_sampler_print:    sampling time =       1.61 ms /    11 runs   (    0.15 ms per token,  6836.54 tokens per second)
0.01.181.032 I llama_perf_context_print:        load time =     473.67 ms
0.01.181.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.181.035 I llama_perf_context_print:        eval time =     699.66 ms /    10 runs   (   69.97 ms per token,    14.29 tokens per second)
0.01.181.035 I llama_perf_context_print:       total time =     706.62 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.518 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.712 I main: load the model and apply lora adapter, if any
0.00.020.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.942 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.952 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.959 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.959 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.960 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.961 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.968 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.969 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.972 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.314 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.051 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.845 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.845 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.846 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.846 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.847 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.850 I llama_model_loader: - type  f32:   37 tensors
0.00.129.850 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.771 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.784 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.369 I llm_load_vocab: special tokens cache size = 5
0.00.269.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.381 I llm_load_print_meta: arch             = gemma
0.00.269.381 I llm_load_print_meta: vocab type       = SPM
0.00.269.382 I llm_load_print_meta: n_vocab          = 256000
0.00.269.382 I llm_load_print_meta: n_merges         = 0
0.00.269.382 I llm_load_print_meta: vocab_only       = 0
0.00.269.383 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.383 I llm_load_print_meta: n_embd           = 2048
0.00.269.383 I llm_load_print_meta: n_layer          = 18
0.00.269.395 I llm_load_print_meta: n_head           = 8
0.00.269.396 I llm_load_print_meta: n_head_kv        = 1
0.00.269.396 I llm_load_print_meta: n_rot            = 256
0.00.269.397 I llm_load_print_meta: n_swa            = 0
0.00.269.397 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.397 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.398 I llm_load_print_meta: n_gqa            = 8
0.00.269.399 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.400 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.401 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.403 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.403 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.403 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.404 I llm_load_print_meta: n_ff             = 16384
0.00.269.404 I llm_load_print_meta: n_expert         = 0
0.00.269.405 I llm_load_print_meta: n_expert_used    = 0
0.00.269.405 I llm_load_print_meta: causal attn      = 1
0.00.269.405 I llm_load_print_meta: pooling type     = 0
0.00.269.406 I llm_load_print_meta: rope type        = 2
0.00.269.406 I llm_load_print_meta: rope scaling     = linear
0.00.269.407 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.408 I llm_load_print_meta: freq_scale_train = 1
0.00.269.408 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.409 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.409 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.409 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.410 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.410 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.410 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.411 I llm_load_print_meta: model type       = 2B
0.00.269.411 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.412 I llm_load_print_meta: model params     = 2.51 B
0.00.269.413 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.413 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.413 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.414 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.414 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.415 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.415 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.415 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.416 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.416 I llm_load_print_meta: max token length = 93
0.00.366.135 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.364 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.370 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.371 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.371 I llama_new_context_with_model: n_batch       = 2048
0.00.371.372 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.372 I llama_new_context_with_model: flash_attn    = 0
0.00.371.374 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.375 I llama_new_context_with_model: freq_scale    = 1
0.00.371.376 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.399 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.804 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.914 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.172 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.179 I llama_new_context_with_model: graph nodes  = 601
0.00.387.179 I llama_new_context_with_model: graph splits = 1
0.00.387.181 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.182 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.820 I main: llama threadpool init, n_threads = 4
0.00.469.836 I 
0.00.469.908 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.912 I 
0.00.469.952 I sampler seed: 2699559432
0.00.469.962 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.968 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.968 I 
 increasities is a powerful and versatile language model with the potential to revolutionize how we interact with technology and information.

**Capabilities:**

* Text generation and

0.02.660.358 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7027.26 tokens per second)
0.02.660.360 I llama_perf_context_print:        load time =     469.09 ms
0.02.660.361 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.660.363 I llama_perf_context_print:        eval time =    2171.18 ms /    32 runs   (   67.85 ms per token,    14.74 tokens per second)
0.02.660.363 I llama_perf_context_print:       total time =    2190.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.582 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.076 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.084 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.092 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.107 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.108 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.114 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.116 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.116 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.511 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.896 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.722 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.728 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.730 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.730 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.731 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.732 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.734 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.735 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.735 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.736 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.738 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.741 I llama_model_loader: - type  f32:   37 tensors
0.00.134.742 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.697 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.900 I llm_load_vocab: special tokens cache size = 5
0.00.272.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.148 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.148 I llm_load_print_meta: arch             = gemma
0.00.272.149 I llm_load_print_meta: vocab type       = SPM
0.00.272.150 I llm_load_print_meta: n_vocab          = 256000
0.00.272.151 I llm_load_print_meta: n_merges         = 0
0.00.272.151 I llm_load_print_meta: vocab_only       = 0
0.00.272.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.152 I llm_load_print_meta: n_embd           = 2048
0.00.272.152 I llm_load_print_meta: n_layer          = 18
0.00.272.167 I llm_load_print_meta: n_head           = 8
0.00.272.168 I llm_load_print_meta: n_head_kv        = 1
0.00.272.169 I llm_load_print_meta: n_rot            = 256
0.00.272.169 I llm_load_print_meta: n_swa            = 0
0.00.272.170 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.170 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.172 I llm_load_print_meta: n_gqa            = 8
0.00.272.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.176 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.179 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.179 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.182 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.183 I llm_load_print_meta: n_ff             = 16384
0.00.272.184 I llm_load_print_meta: n_expert         = 0
0.00.272.184 I llm_load_print_meta: n_expert_used    = 0
0.00.272.185 I llm_load_print_meta: causal attn      = 1
0.00.272.185 I llm_load_print_meta: pooling type     = 0
0.00.272.186 I llm_load_print_meta: rope type        = 2
0.00.272.186 I llm_load_print_meta: rope scaling     = linear
0.00.272.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.190 I llm_load_print_meta: freq_scale_train = 1
0.00.272.193 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.194 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.194 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.195 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.195 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.196 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.197 I llm_load_print_meta: model type       = 2B
0.00.272.197 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.199 I llm_load_print_meta: model params     = 2.51 B
0.00.272.200 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.201 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.202 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.202 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.203 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.203 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.204 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.204 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.206 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.206 I llm_load_print_meta: max token length = 93
0.00.353.827 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.833 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.834 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.834 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.835 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.836 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.930 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.937 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.937 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.938 I llama_new_context_with_model: n_batch       = 2048
0.00.358.938 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.939 I llama_new_context_with_model: flash_attn    = 0
0.00.358.941 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.942 I llama_new_context_with_model: freq_scale    = 1
0.00.358.943 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.961 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.373.448 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.465 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.270 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.278 I llama_new_context_with_model: graph nodes  = 601
0.00.375.279 I llama_new_context_with_model: graph splits = 1
0.00.375.281 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.838 I main: llama threadpool init, n_threads = 4
0.00.462.855 I 
0.00.462.934 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.937 I 
0.00.462.980 I sampler seed: 218466328
0.00.462.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.001 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.003 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.003 I 
 increasities, and other romantic entanglements that defy societal norms and expectations.

**Answer:**

Within the realm of unconventional relationships and personal choices, love

0.02.711.354 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6823.82 tokens per second)
0.02.711.357 I llama_perf_context_print:        load time =     462.03 ms
0.02.711.359 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.361 I llama_perf_context_print:        eval time =    2230.11 ms /    32 runs   (   69.69 ms per token,    14.35 tokens per second)
0.02.711.362 I llama_perf_context_print:       total time =    2248.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.172 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.365 I main: load the model and apply lora adapter, if any
0.00.020.542 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.552 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.563 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.569 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.572 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.575 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.577 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.579 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.583 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.583 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.584 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.584 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.585 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.989 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.808 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.810 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.811 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.812 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.814 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.815 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.816 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.819 I llama_model_loader: - type  f32:   37 tensors
0.00.133.820 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.279 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.416 I llm_load_vocab: special tokens cache size = 5
0.00.272.345 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.360 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.361 I llm_load_print_meta: arch             = gemma
0.00.272.362 I llm_load_print_meta: vocab type       = SPM
0.00.272.362 I llm_load_print_meta: n_vocab          = 256000
0.00.272.363 I llm_load_print_meta: n_merges         = 0
0.00.272.363 I llm_load_print_meta: vocab_only       = 0
0.00.272.363 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.363 I llm_load_print_meta: n_embd           = 2048
0.00.272.364 I llm_load_print_meta: n_layer          = 18
0.00.272.373 I llm_load_print_meta: n_head           = 8
0.00.272.374 I llm_load_print_meta: n_head_kv        = 1
0.00.272.375 I llm_load_print_meta: n_rot            = 256
0.00.272.375 I llm_load_print_meta: n_swa            = 0
0.00.272.375 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.376 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.376 I llm_load_print_meta: n_gqa            = 8
0.00.272.377 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.381 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.381 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.381 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.382 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.382 I llm_load_print_meta: n_ff             = 16384
0.00.272.383 I llm_load_print_meta: n_expert         = 0
0.00.272.383 I llm_load_print_meta: n_expert_used    = 0
0.00.272.384 I llm_load_print_meta: causal attn      = 1
0.00.272.384 I llm_load_print_meta: pooling type     = 0
0.00.272.384 I llm_load_print_meta: rope type        = 2
0.00.272.385 I llm_load_print_meta: rope scaling     = linear
0.00.272.386 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.386 I llm_load_print_meta: freq_scale_train = 1
0.00.272.387 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.387 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.387 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.388 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.389 I llm_load_print_meta: model type       = 2B
0.00.272.390 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.391 I llm_load_print_meta: model params     = 2.51 B
0.00.272.392 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.393 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.393 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.394 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.394 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.394 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.395 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.395 I llm_load_print_meta: max token length = 93
0.00.346.666 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.674 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.352.871 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.878 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.878 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.879 I llama_new_context_with_model: n_batch       = 2048
0.00.352.879 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.880 I llama_new_context_with_model: flash_attn    = 0
0.00.352.882 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.883 I llama_new_context_with_model: freq_scale    = 1
0.00.352.884 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.903 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.367.237 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.252 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.600 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.606 I llama_new_context_with_model: graph nodes  = 601
0.00.368.606 I llama_new_context_with_model: graph splits = 1
0.00.368.608 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.609 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.534 I main: llama threadpool init, n_threads = 4
0.00.455.549 I 
0.00.455.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.624 I 
0.00.455.664 I sampler seed: 754393280
0.00.455.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.677 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.679 I 
 increasities of the form 

$$u_{n+1} = u_n^2 + au_n$$

for some real constants a and

0.02.892.664 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6319.42 tokens per second)
0.02.892.666 I llama_perf_context_print:        load time =     455.15 ms
0.02.892.667 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.892.668 I llama_perf_context_print:        eval time =    2417.46 ms /    32 runs   (   75.55 ms per token,    13.24 tokens per second)
0.02.892.669 I llama_perf_context_print:       total time =    2437.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.201s
user	0m33.180s
sys	0m9.372s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4388 (30caac3a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40235.87 ms
main:    total time = 40235.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.013 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.034 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.042 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.043 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.045 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.046 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.047 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.048 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.048 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.049 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.052 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.053 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.055 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.538 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.539 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.540 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.548 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.549 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.550 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.553 I llama_model_loader: - type  f32:   37 tensors
0.00.130.555 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.555 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.929 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.452 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.112 I llm_load_vocab: special tokens cache size = 5
0.00.281.241 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.260 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.260 I llm_load_print_meta: arch             = gemma
0.00.281.261 I llm_load_print_meta: vocab type       = SPM
0.00.281.261 I llm_load_print_meta: n_vocab          = 256000
0.00.281.262 I llm_load_print_meta: n_merges         = 0
0.00.281.262 I llm_load_print_meta: vocab_only       = 0
0.00.281.262 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.263 I llm_load_print_meta: n_embd           = 2048
0.00.281.263 I llm_load_print_meta: n_layer          = 18
0.00.281.275 I llm_load_print_meta: n_head           = 8
0.00.281.276 I llm_load_print_meta: n_head_kv        = 1
0.00.281.276 I llm_load_print_meta: n_rot            = 256
0.00.281.277 I llm_load_print_meta: n_swa            = 0
0.00.281.277 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.277 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.278 I llm_load_print_meta: n_gqa            = 8
0.00.281.279 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.284 I llm_load_print_meta: n_ff             = 16384
0.00.281.284 I llm_load_print_meta: n_expert         = 0
0.00.281.285 I llm_load_print_meta: n_expert_used    = 0
0.00.281.285 I llm_load_print_meta: causal attn      = 1
0.00.281.285 I llm_load_print_meta: pooling type     = 0
0.00.281.286 I llm_load_print_meta: rope type        = 2
0.00.281.286 I llm_load_print_meta: rope scaling     = linear
0.00.281.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.288 I llm_load_print_meta: freq_scale_train = 1
0.00.281.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.288 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.289 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.289 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.289 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.289 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.290 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.290 I llm_load_print_meta: model type       = 2B
0.00.281.291 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.291 I llm_load_print_meta: model params     = 2.51 B
0.00.281.292 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.293 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.293 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.293 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.294 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.295 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.296 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.296 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.297 I llm_load_print_meta: max token length = 93
0.00.342.540 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.342.545 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.342.546 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.342.546 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.342.547 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.342.548 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.347.527 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.533 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.533 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.533 I llama_new_context_with_model: n_batch       = 2048
0.00.347.534 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.534 I llama_new_context_with_model: flash_attn    = 0
0.00.347.536 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.537 I llama_new_context_with_model: freq_scale    = 1
0.00.347.538 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.557 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.687 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.701 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.792 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.122 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.127 I llama_new_context_with_model: graph nodes  = 601
0.00.363.127 I llama_new_context_with_model: graph splits = 1
0.00.363.130 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.228 I main: llama threadpool init, n_threads = 4
0.00.438.244 I 
0.00.438.319 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.438.322 I 
0.00.438.364 I sampler seed: 64231334
0.00.438.374 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.396 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.396 I 
 seconded

**I'm sorry, I'm not supposed to generate responses that are sexually suggestive in nature.**

I am unable to provide sexually suggestive

0.02.036.273 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6399.07 tokens per second)
0.02.036.275 I llama_perf_context_print:        load time =     437.47 ms
0.02.036.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.036.277 I llama_perf_context_print:        eval time =    1579.48 ms /    32 runs   (   49.36 ms per token,    20.26 tokens per second)
0.02.036.278 I llama_perf_context_print:       total time =    1598.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4388 (30caac3a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40214.57 ms
main:    total time = 40214.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.545 I build: 4388 (30caac3a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.108 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.126 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.135 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.143 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.143 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.147 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.147 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.148 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.148 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.149 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.179 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.981 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.987 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.988 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.991 I llama_model_loader: - type  f32:   37 tensors
0.00.129.992 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.993 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.255 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.034 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.495 I llm_load_vocab: special tokens cache size = 5
0.00.262.183 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.197 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.198 I llm_load_print_meta: arch             = gemma
0.00.262.198 I llm_load_print_meta: vocab type       = SPM
0.00.262.199 I llm_load_print_meta: n_vocab          = 256000
0.00.262.199 I llm_load_print_meta: n_merges         = 0
0.00.262.200 I llm_load_print_meta: vocab_only       = 0
0.00.262.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.200 I llm_load_print_meta: n_embd           = 2048
0.00.262.200 I llm_load_print_meta: n_layer          = 18
0.00.262.212 I llm_load_print_meta: n_head           = 8
0.00.262.213 I llm_load_print_meta: n_head_kv        = 1
0.00.262.213 I llm_load_print_meta: n_rot            = 256
0.00.262.214 I llm_load_print_meta: n_swa            = 0
0.00.262.214 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.214 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.215 I llm_load_print_meta: n_gqa            = 8
0.00.262.216 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.217 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.218 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.219 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.220 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.220 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.221 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.222 I llm_load_print_meta: n_ff             = 16384
0.00.262.222 I llm_load_print_meta: n_expert         = 0
0.00.262.223 I llm_load_print_meta: n_expert_used    = 0
0.00.262.223 I llm_load_print_meta: causal attn      = 1
0.00.262.223 I llm_load_print_meta: pooling type     = 0
0.00.262.223 I llm_load_print_meta: rope type        = 2
0.00.262.224 I llm_load_print_meta: rope scaling     = linear
0.00.262.225 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.226 I llm_load_print_meta: freq_scale_train = 1
0.00.262.226 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.227 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.227 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.227 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.227 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.228 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.228 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.229 I llm_load_print_meta: model type       = 2B
0.00.262.229 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.230 I llm_load_print_meta: model params     = 2.51 B
0.00.262.231 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.233 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.233 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.234 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.234 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.235 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.235 I llm_load_print_meta: max token length = 93
0.00.319.983 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.065 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.071 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.071 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.071 I llama_new_context_with_model: n_batch       = 2048
0.00.325.072 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.072 I llama_new_context_with_model: flash_attn    = 0
0.00.325.074 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.075 I llama_new_context_with_model: freq_scale    = 1
0.00.325.076 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.325.095 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.339.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.515 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.605 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.852 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.857 I llama_new_context_with_model: graph nodes  = 601
0.00.340.858 I llama_new_context_with_model: graph splits = 1
0.00.340.860 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.340.860 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.140 I main: llama threadpool init, n_threads = 4
0.00.415.156 I 
0.00.415.232 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.415.235 I 
0.00.415.277 I sampler seed: 4114505946
0.00.415.288 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.291 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.292 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.292 I 
 increasities. [end of text]


0.00.610.402 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7974.48 tokens per second)
0.00.610.404 I llama_perf_context_print:        load time =     414.37 ms
0.00.610.405 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.610.406 I llama_perf_context_print:        eval time =     191.76 ms /     4 runs   (   47.94 ms per token,    20.86 tokens per second)
0.00.610.407 I llama_perf_context_print:       total time =     195.27 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.849s
user	10m18.840s
sys	0m6.792s
