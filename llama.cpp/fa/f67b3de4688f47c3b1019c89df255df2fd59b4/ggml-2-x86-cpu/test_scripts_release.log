+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.461 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.657 I main: llama backend init
0.00.001.742 I main: load the model and apply lora adapter, if any
0.00.021.975 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.036 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.042 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.586 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.575 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.553 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.554 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.555 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.559 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.562 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.566 I llama_model_loader: - type  f32:   37 tensors
0.00.132.569 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.600 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.332 I llm_load_vocab: special tokens cache size = 5
0.00.221.829 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.844 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.844 I llm_load_print_meta: arch             = gemma
0.00.221.845 I llm_load_print_meta: vocab type       = SPM
0.00.221.845 I llm_load_print_meta: n_vocab          = 256000
0.00.221.846 I llm_load_print_meta: n_merges         = 0
0.00.221.846 I llm_load_print_meta: vocab_only       = 0
0.00.221.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.847 I llm_load_print_meta: n_embd           = 2048
0.00.221.847 I llm_load_print_meta: n_layer          = 18
0.00.221.859 I llm_load_print_meta: n_head           = 8
0.00.221.860 I llm_load_print_meta: n_head_kv        = 1
0.00.221.860 I llm_load_print_meta: n_rot            = 256
0.00.221.861 I llm_load_print_meta: n_swa            = 0
0.00.221.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.861 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.862 I llm_load_print_meta: n_gqa            = 8
0.00.221.863 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.865 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.868 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.869 I llm_load_print_meta: n_ff             = 16384
0.00.221.869 I llm_load_print_meta: n_expert         = 0
0.00.221.870 I llm_load_print_meta: n_expert_used    = 0
0.00.221.870 I llm_load_print_meta: causal attn      = 1
0.00.221.870 I llm_load_print_meta: pooling type     = 0
0.00.221.871 I llm_load_print_meta: rope type        = 2
0.00.221.871 I llm_load_print_meta: rope scaling     = linear
0.00.221.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.873 I llm_load_print_meta: freq_scale_train = 1
0.00.221.873 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.873 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.874 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.874 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.874 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.874 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.875 I llm_load_print_meta: model type       = 2B
0.00.221.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.876 I llm_load_print_meta: model params     = 2.51 B
0.00.221.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.878 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.879 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.880 I llm_load_print_meta: max token length = 93
0.00.221.906 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.317.990 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.317.999 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.317.999 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.318.000 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.318.001 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.318.001 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.323.182 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.189 I llama_new_context_with_model: n_batch    = 2048
0.00.323.190 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.190 I llama_new_context_with_model: flash_attn = 0
0.00.323.192 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.193 I llama_new_context_with_model: freq_scale = 1
0.00.352.496 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.510 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.447 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.456 I llama_new_context_with_model: graph nodes  = 601
0.00.353.457 I llama_new_context_with_model: graph splits = 1
0.00.353.458 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.208 I main: llama threadpool init, n_threads = 4
0.00.446.221 I 
0.00.446.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.298 I 
0.00.446.326 I sampler seed: 2947280578
0.00.446.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.337 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.446.338 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities:

1. **The Great Recession:** A global recession that began in 2008 and had a devastating impact on the global economy.

0.02.685.708 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6776.18 tokens per second)
0.02.685.710 I llama_perf_context_print:        load time =     444.45 ms
0.02.685.712 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.685.713 I llama_perf_context_print:        eval time =    2221.53 ms /    32 runs   (   69.42 ms per token,    14.40 tokens per second)
0.02.685.714 I llama_perf_context_print:       total time =    2239.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.021.740 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.751 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.764 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.767 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.768 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.772 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.773 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.774 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.188 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.195 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.196 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.197 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.198 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.199 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.202 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.203 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.204 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.205 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.208 I llama_model_loader: - type  f32:   37 tensors
0.00.132.211 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.936 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.567 I llm_load_vocab: special tokens cache size = 5
0.00.213.865 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.881 I llm_load_print_meta: arch             = gemma
0.00.213.882 I llm_load_print_meta: vocab type       = SPM
0.00.213.882 I llm_load_print_meta: n_vocab          = 256000
0.00.213.883 I llm_load_print_meta: n_merges         = 0
0.00.213.883 I llm_load_print_meta: vocab_only       = 0
0.00.213.883 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.884 I llm_load_print_meta: n_embd           = 2048
0.00.213.884 I llm_load_print_meta: n_layer          = 18
0.00.213.895 I llm_load_print_meta: n_head           = 8
0.00.213.896 I llm_load_print_meta: n_head_kv        = 1
0.00.213.897 I llm_load_print_meta: n_rot            = 256
0.00.213.897 I llm_load_print_meta: n_swa            = 0
0.00.213.897 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.898 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.898 I llm_load_print_meta: n_gqa            = 8
0.00.213.899 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.900 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.901 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.903 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.903 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.904 I llm_load_print_meta: n_ff             = 16384
0.00.213.905 I llm_load_print_meta: n_expert         = 0
0.00.213.905 I llm_load_print_meta: n_expert_used    = 0
0.00.213.905 I llm_load_print_meta: causal attn      = 1
0.00.213.906 I llm_load_print_meta: pooling type     = 0
0.00.213.906 I llm_load_print_meta: rope type        = 2
0.00.213.906 I llm_load_print_meta: rope scaling     = linear
0.00.213.907 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.908 I llm_load_print_meta: freq_scale_train = 1
0.00.213.908 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.909 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.909 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.909 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.910 I llm_load_print_meta: model type       = 2B
0.00.213.911 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.912 I llm_load_print_meta: model params     = 2.51 B
0.00.213.913 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.913 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.914 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.914 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.915 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.915 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.915 I llm_load_print_meta: max token length = 93
0.00.213.939 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.428 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.383 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.390 I llama_new_context_with_model: n_batch    = 2048
0.00.314.390 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.391 I llama_new_context_with_model: flash_attn = 0
0.00.314.393 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.394 I llama_new_context_with_model: freq_scale = 1
0.00.343.754 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.770 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.863 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.702 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.709 I llama_new_context_with_model: graph nodes  = 601
0.00.344.710 I llama_new_context_with_model: graph splits = 1
0.00.344.711 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.922 I main: llama threadpool init, n_threads = 4
0.00.433.934 I 
0.00.434.030 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.033 I 
0.00.434.061 I sampler seed: 216741822
0.00.434.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.072 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.434.072 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamentalism.

I'm not sure what you're trying to ask. Could you please be more specific? [end of text]


0.02.203.914 I llama_perf_sampler_print:    sampling time =       3.88 ms /    27 runs   (    0.14 ms per token,  6951.60 tokens per second)
0.02.203.916 I llama_perf_context_print:        load time =     432.05 ms
0.02.203.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.203.919 I llama_perf_context_print:        eval time =    1755.25 ms /    26 runs   (   67.51 ms per token,    14.81 tokens per second)
0.02.203.919 I llama_perf_context_print:       total time =    1770.00 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.515 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.703 I main: llama backend init
0.00.001.801 I main: load the model and apply lora adapter, if any
0.00.021.621 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.679 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.680 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.685 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.686 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.688 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.692 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.694 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.695 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.810 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.547 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.547 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.548 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.549 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.550 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.552 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.553 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.554 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.554 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.559 I llama_model_loader: - type  f32:   37 tensors
0.00.131.561 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.603 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.264 I llm_load_vocab: special tokens cache size = 5
0.00.214.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.609 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.609 I llm_load_print_meta: arch             = gemma
0.00.214.610 I llm_load_print_meta: vocab type       = SPM
0.00.214.611 I llm_load_print_meta: n_vocab          = 256000
0.00.214.611 I llm_load_print_meta: n_merges         = 0
0.00.214.611 I llm_load_print_meta: vocab_only       = 0
0.00.214.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.612 I llm_load_print_meta: n_embd           = 2048
0.00.214.612 I llm_load_print_meta: n_layer          = 18
0.00.214.624 I llm_load_print_meta: n_head           = 8
0.00.214.625 I llm_load_print_meta: n_head_kv        = 1
0.00.214.625 I llm_load_print_meta: n_rot            = 256
0.00.214.626 I llm_load_print_meta: n_swa            = 0
0.00.214.626 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.626 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.627 I llm_load_print_meta: n_gqa            = 8
0.00.214.628 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.629 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.630 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.634 I llm_load_print_meta: n_ff             = 16384
0.00.214.634 I llm_load_print_meta: n_expert         = 0
0.00.214.634 I llm_load_print_meta: n_expert_used    = 0
0.00.214.635 I llm_load_print_meta: causal attn      = 1
0.00.214.635 I llm_load_print_meta: pooling type     = 0
0.00.214.635 I llm_load_print_meta: rope type        = 2
0.00.214.636 I llm_load_print_meta: rope scaling     = linear
0.00.214.637 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.638 I llm_load_print_meta: freq_scale_train = 1
0.00.214.638 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.638 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.638 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.639 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.639 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.639 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.640 I llm_load_print_meta: model type       = 2B
0.00.214.641 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.642 I llm_load_print_meta: model params     = 2.51 B
0.00.214.642 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.643 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.644 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.644 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.645 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.645 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.645 I llm_load_print_meta: max token length = 93
0.00.214.661 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.670 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.290.677 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.678 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.290.678 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.290.679 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.290.679 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.295.592 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.598 I llama_new_context_with_model: n_batch    = 2048
0.00.295.598 I llama_new_context_with_model: n_ubatch   = 512
0.00.295.599 I llama_new_context_with_model: flash_attn = 0
0.00.295.601 I llama_new_context_with_model: freq_base  = 10000.0
0.00.295.602 I llama_new_context_with_model: freq_scale = 1
0.00.324.125 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.140 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.161 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.170 I llama_new_context_with_model: graph nodes  = 601
0.00.325.170 I llama_new_context_with_model: graph splits = 1
0.00.325.172 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.536 I main: llama threadpool init, n_threads = 4
0.00.418.548 I 
0.00.418.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.626 I 
0.00.418.657 I sampler seed: 1547453265
0.00.418.668 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.670 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.671 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively to a maximum height of 100 feet.

a) What is the time it takes for the structure to reach its maximum height?


0.02.701.172 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7075.47 tokens per second)
0.02.701.174 I llama_perf_context_print:        load time =     416.72 ms
0.02.701.175 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.701.176 I llama_perf_context_print:        eval time =    2264.97 ms /    32 runs   (   70.78 ms per token,    14.13 tokens per second)
0.02.701.177 I llama_perf_context_print:       total time =    2282.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.908 I main: load the model and apply lora adapter, if any
0.00.021.969 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.046 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.051 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.053 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.054 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.061 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.062 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.064 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.064 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.424 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.768 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.768 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.775 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.778 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.779 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.783 I llama_model_loader: - type  f32:   37 tensors
0.00.131.787 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.764 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.378 I llm_load_vocab: special tokens cache size = 5
0.00.213.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.676 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.677 I llm_load_print_meta: arch             = gemma
0.00.213.677 I llm_load_print_meta: vocab type       = SPM
0.00.213.678 I llm_load_print_meta: n_vocab          = 256000
0.00.213.679 I llm_load_print_meta: n_merges         = 0
0.00.213.679 I llm_load_print_meta: vocab_only       = 0
0.00.213.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.680 I llm_load_print_meta: n_embd           = 2048
0.00.213.680 I llm_load_print_meta: n_layer          = 18
0.00.213.692 I llm_load_print_meta: n_head           = 8
0.00.213.693 I llm_load_print_meta: n_head_kv        = 1
0.00.213.693 I llm_load_print_meta: n_rot            = 256
0.00.213.693 I llm_load_print_meta: n_swa            = 0
0.00.213.694 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.695 I llm_load_print_meta: n_gqa            = 8
0.00.213.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.716 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.718 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.723 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.724 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.726 I llm_load_print_meta: n_ff             = 16384
0.00.213.727 I llm_load_print_meta: n_expert         = 0
0.00.213.727 I llm_load_print_meta: n_expert_used    = 0
0.00.213.728 I llm_load_print_meta: causal attn      = 1
0.00.213.728 I llm_load_print_meta: pooling type     = 0
0.00.213.728 I llm_load_print_meta: rope type        = 2
0.00.213.729 I llm_load_print_meta: rope scaling     = linear
0.00.213.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.732 I llm_load_print_meta: freq_scale_train = 1
0.00.213.732 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.733 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.735 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.736 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.736 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.738 I llm_load_print_meta: model type       = 2B
0.00.213.738 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.740 I llm_load_print_meta: model params     = 2.51 B
0.00.213.741 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.755 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.756 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.759 I llm_load_print_meta: max token length = 93
0.00.213.786 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.283.630 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.283.637 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.288.560 I llama_new_context_with_model: n_ctx      = 8192
0.00.288.567 I llama_new_context_with_model: n_batch    = 2048
0.00.288.567 I llama_new_context_with_model: n_ubatch   = 512
0.00.288.568 I llama_new_context_with_model: flash_attn = 0
0.00.288.570 I llama_new_context_with_model: freq_base  = 10000.0
0.00.288.570 I llama_new_context_with_model: freq_scale = 1
0.00.317.293 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.317.307 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.317.405 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.318.246 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.318.253 I llama_new_context_with_model: graph nodes  = 601
0.00.318.254 I llama_new_context_with_model: graph splits = 1
0.00.318.255 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.908 I main: llama threadpool init, n_threads = 4
0.00.411.921 I 
0.00.412.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.412.009 I 
0.00.412.040 I sampler seed: 1661222373
0.00.412.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.412.064 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.412.065 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly.

I have a question about a specific word or phrase. I would like you to help me understand it and provide context.

Please provide the

0.02.850.997 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6618.53 tokens per second)
0.02.851.000 I llama_perf_context_print:        load time =     409.98 ms
0.02.851.001 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.851.005 I llama_perf_context_print:        eval time =    2420.00 ms /    32 runs   (   75.63 ms per token,    13.22 tokens per second)
0.02.851.007 I llama_perf_context_print:       total time =    2439.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.927s
user	0m37.620s
sys	0m9.365s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3780 (faf67b3d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31982.22 ms
main:    total time = 31982.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.897 I main: load the model and apply lora adapter, if any
0.00.022.012 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.075 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.083 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.090 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.091 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.097 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.098 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.099 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.023 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.920 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.762 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.768 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.768 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.771 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.775 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.777 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.778 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.781 I llama_model_loader: - type  f32:   37 tensors
0.00.132.784 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.784 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.836 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.491 I llm_load_vocab: special tokens cache size = 5
0.00.215.835 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.848 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.849 I llm_load_print_meta: arch             = gemma
0.00.215.849 I llm_load_print_meta: vocab type       = SPM
0.00.215.850 I llm_load_print_meta: n_vocab          = 256000
0.00.215.851 I llm_load_print_meta: n_merges         = 0
0.00.215.851 I llm_load_print_meta: vocab_only       = 0
0.00.215.851 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.851 I llm_load_print_meta: n_embd           = 2048
0.00.215.852 I llm_load_print_meta: n_layer          = 18
0.00.215.864 I llm_load_print_meta: n_head           = 8
0.00.215.865 I llm_load_print_meta: n_head_kv        = 1
0.00.215.865 I llm_load_print_meta: n_rot            = 256
0.00.215.865 I llm_load_print_meta: n_swa            = 0
0.00.215.866 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.866 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.867 I llm_load_print_meta: n_gqa            = 8
0.00.215.868 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.871 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.871 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.872 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.872 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.873 I llm_load_print_meta: n_ff             = 16384
0.00.215.873 I llm_load_print_meta: n_expert         = 0
0.00.215.874 I llm_load_print_meta: n_expert_used    = 0
0.00.215.874 I llm_load_print_meta: causal attn      = 1
0.00.215.874 I llm_load_print_meta: pooling type     = 0
0.00.215.875 I llm_load_print_meta: rope type        = 2
0.00.215.875 I llm_load_print_meta: rope scaling     = linear
0.00.215.877 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.877 I llm_load_print_meta: freq_scale_train = 1
0.00.215.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.878 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.879 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.880 I llm_load_print_meta: model type       = 2B
0.00.215.881 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.882 I llm_load_print_meta: model params     = 2.51 B
0.00.215.883 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.883 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.884 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.884 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.885 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.885 I llm_load_print_meta: max token length = 93
0.00.215.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.267 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.275.273 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.275.274 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.275.275 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.275.275 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.275.276 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.280.277 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.283 I llama_new_context_with_model: n_batch    = 2048
0.00.280.284 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.284 I llama_new_context_with_model: flash_attn = 0
0.00.280.286 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.287 I llama_new_context_with_model: freq_scale = 1
0.00.309.325 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.309.341 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.427 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.310.278 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.310.285 I llama_new_context_with_model: graph nodes  = 601
0.00.310.285 I llama_new_context_with_model: graph splits = 1
0.00.310.287 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.562 I main: llama threadpool init, n_threads = 4
0.00.391.574 I 
0.00.391.646 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.649 I 
0.00.391.688 I sampler seed: 223737937
0.00.391.696 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.699 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.700 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically!

I'm not sure if I should use "incredibly" or "exceedingly" in this context. Both seem like they could

0.02.009.526 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6837.96 tokens per second)
0.02.009.529 I llama_perf_context_print:        load time =     389.65 ms
0.02.009.530 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.532 I llama_perf_context_print:        eval time =    1600.07 ms /    32 runs   (   50.00 ms per token,    20.00 tokens per second)
0.02.009.532 I llama_perf_context_print:       total time =    1617.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3780 (faf67b3d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32058.69 ms
main:    total time = 32058.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.538 I build: 3780 (faf67b3d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.806 I main: load the model and apply lora adapter, if any
0.00.021.970 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.984 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.992 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.996 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.997 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.999 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.002 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.003 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.004 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.004 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.939 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.940 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.942 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.945 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.946 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.950 I llama_model_loader: - type  f32:   37 tensors
0.00.132.952 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.953 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.642 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.333 I llm_load_vocab: special tokens cache size = 5
0.00.214.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.611 I llm_load_print_meta: arch             = gemma
0.00.214.611 I llm_load_print_meta: vocab type       = SPM
0.00.214.612 I llm_load_print_meta: n_vocab          = 256000
0.00.214.613 I llm_load_print_meta: n_merges         = 0
0.00.214.613 I llm_load_print_meta: vocab_only       = 0
0.00.214.613 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.614 I llm_load_print_meta: n_embd           = 2048
0.00.214.614 I llm_load_print_meta: n_layer          = 18
0.00.214.625 I llm_load_print_meta: n_head           = 8
0.00.214.626 I llm_load_print_meta: n_head_kv        = 1
0.00.214.626 I llm_load_print_meta: n_rot            = 256
0.00.214.627 I llm_load_print_meta: n_swa            = 0
0.00.214.627 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.628 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.630 I llm_load_print_meta: n_gqa            = 8
0.00.214.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.632 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.633 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.635 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.637 I llm_load_print_meta: n_ff             = 16384
0.00.214.637 I llm_load_print_meta: n_expert         = 0
0.00.214.638 I llm_load_print_meta: n_expert_used    = 0
0.00.214.639 I llm_load_print_meta: causal attn      = 1
0.00.214.640 I llm_load_print_meta: pooling type     = 0
0.00.214.640 I llm_load_print_meta: rope type        = 2
0.00.214.641 I llm_load_print_meta: rope scaling     = linear
0.00.214.643 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.644 I llm_load_print_meta: freq_scale_train = 1
0.00.214.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.646 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.647 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.647 I llm_load_print_meta: model type       = 2B
0.00.214.648 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.214.649 I llm_load_print_meta: model params     = 2.51 B
0.00.214.650 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.214.651 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.652 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.656 I llm_load_print_meta: max token length = 93
0.00.214.675 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.271.306 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.276.408 I llama_new_context_with_model: n_ctx      = 8192
0.00.276.415 I llama_new_context_with_model: n_batch    = 2048
0.00.276.415 I llama_new_context_with_model: n_ubatch   = 512
0.00.276.416 I llama_new_context_with_model: flash_attn = 0
0.00.276.419 I llama_new_context_with_model: freq_base  = 10000.0
0.00.276.420 I llama_new_context_with_model: freq_scale = 1
0.00.305.830 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.305.847 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.305.949 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.786 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.794 I llama_new_context_with_model: graph nodes  = 601
0.00.306.794 I llama_new_context_with_model: graph splits = 1
0.00.306.796 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.387.774 I main: llama threadpool init, n_threads = 4
0.00.387.786 I 
0.00.387.862 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.387.866 I 
0.00.387.916 I sampler seed: 1103799156
0.00.387.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.387.928 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.387.928 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRE 18-30-1500

**Specifications:**

* Operating Voltage: 110V +/- 5%


0.02.003.845 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6550.22 tokens per second)
0.02.003.847 I llama_perf_context_print:        load time =     385.95 ms
0.02.003.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.003.850 I llama_perf_context_print:        eval time =    1597.60 ms /    32 runs   (   49.92 ms per token,    20.03 tokens per second)
0.02.003.850 I llama_perf_context_print:       total time =    1616.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.186s
user	8m14.307s
sys	0m7.203s
