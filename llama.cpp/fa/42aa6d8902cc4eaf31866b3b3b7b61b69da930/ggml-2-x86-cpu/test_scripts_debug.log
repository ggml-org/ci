+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.661 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.588 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.790 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.886 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.890 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.910 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.912 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.923 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.928 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.242 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.178 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.182 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.184 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.188 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.189 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.191 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.192 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.200 I llama_model_loader: - type  f32:   37 tensors
0.00.269.204 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.262 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.463.063 I llm_load_vocab: special tokens cache size = 5
0.00.560.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.724 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.725 I llm_load_print_meta: arch             = gemma
0.00.560.726 I llm_load_print_meta: vocab type       = SPM
0.00.560.726 I llm_load_print_meta: n_vocab          = 256000
0.00.560.729 I llm_load_print_meta: n_merges         = 0
0.00.560.729 I llm_load_print_meta: vocab_only       = 0
0.00.560.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.730 I llm_load_print_meta: n_embd           = 2048
0.00.560.730 I llm_load_print_meta: n_layer          = 18
0.00.560.792 I llm_load_print_meta: n_head           = 8
0.00.560.799 I llm_load_print_meta: n_head_kv        = 1
0.00.560.800 I llm_load_print_meta: n_rot            = 256
0.00.560.800 I llm_load_print_meta: n_swa            = 0
0.00.560.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.801 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.807 I llm_load_print_meta: n_gqa            = 8
0.00.560.812 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.817 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.818 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.819 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.820 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.820 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.821 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.826 I llm_load_print_meta: n_ff             = 16384
0.00.560.826 I llm_load_print_meta: n_expert         = 0
0.00.560.826 I llm_load_print_meta: n_expert_used    = 0
0.00.560.827 I llm_load_print_meta: causal attn      = 1
0.00.560.827 I llm_load_print_meta: pooling type     = 0
0.00.560.839 I llm_load_print_meta: rope type        = 2
0.00.560.841 I llm_load_print_meta: rope scaling     = linear
0.00.560.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.843 I llm_load_print_meta: freq_scale_train = 1
0.00.560.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.846 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.847 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.848 I llm_load_print_meta: model type       = 2B
0.00.560.849 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.850 I llm_load_print_meta: model params     = 2.51 B
0.00.560.851 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.852 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.852 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.856 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.857 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.857 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.560.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.560.865 I llm_load_print_meta: max token length = 93
0.00.561.036 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.330 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.661.339 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.661.340 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.661.340 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.661.341 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.661.342 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.667.189 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.196 I llama_new_context_with_model: n_batch    = 2048
0.00.667.197 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.197 I llama_new_context_with_model: flash_attn = 0
0.00.667.200 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.201 I llama_new_context_with_model: freq_scale = 1
0.00.695.884 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.695.926 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.516 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.523 I llama_new_context_with_model: graph nodes  = 601
0.00.697.524 I llama_new_context_with_model: graph splits = 1
0.00.697.544 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.349 I main: llama threadpool init, n_threads = 4
0.01.308.362 I 
0.01.308.467 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.471 I 
0.01.308.652 I sampler seed: 3600442637
0.01.308.663 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.671 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.308.672 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.672 I 
 maneuvled.

I believe this is a misspelling of "unpleasant".

The correct spelling is "unpleasant". [end of text]


0.12.748.801 I llama_perf_sampler_print:    sampling time =      40.24 ms /    28 runs   (    1.44 ms per token,   695.86 tokens per second)
0.12.748.805 I llama_perf_context_print:        load time =    1305.35 ms
0.12.748.816 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.748.819 I llama_perf_context_print:        eval time =   11371.09 ms /    27 runs   (  421.15 ms per token,     2.37 tokens per second)
0.12.748.820 I llama_perf_context_print:       total time =   11440.46 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.648 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.808 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.896 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.909 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.910 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.915 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.919 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.920 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.921 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.922 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.930 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.931 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.932 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.520 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.678 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.686 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.687 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.689 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.690 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.691 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.692 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.696 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.697 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.698 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.700 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.701 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.709 I llama_model_loader: - type  f32:   37 tensors
0.00.269.713 I llama_model_loader: - type q8_0:  127 tensors
0.00.422.054 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.447.118 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.448.202 I llm_load_vocab: special tokens cache size = 5
0.00.544.101 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.159 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.161 I llm_load_print_meta: arch             = gemma
0.00.544.161 I llm_load_print_meta: vocab type       = SPM
0.00.544.162 I llm_load_print_meta: n_vocab          = 256000
0.00.544.164 I llm_load_print_meta: n_merges         = 0
0.00.544.165 I llm_load_print_meta: vocab_only       = 0
0.00.544.165 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.166 I llm_load_print_meta: n_embd           = 2048
0.00.544.166 I llm_load_print_meta: n_layer          = 18
0.00.544.231 I llm_load_print_meta: n_head           = 8
0.00.544.238 I llm_load_print_meta: n_head_kv        = 1
0.00.544.238 I llm_load_print_meta: n_rot            = 256
0.00.544.239 I llm_load_print_meta: n_swa            = 0
0.00.544.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.245 I llm_load_print_meta: n_gqa            = 8
0.00.544.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.254 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.255 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.256 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.257 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.257 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.258 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.262 I llm_load_print_meta: n_ff             = 16384
0.00.544.263 I llm_load_print_meta: n_expert         = 0
0.00.544.263 I llm_load_print_meta: n_expert_used    = 0
0.00.544.263 I llm_load_print_meta: causal attn      = 1
0.00.544.264 I llm_load_print_meta: pooling type     = 0
0.00.544.264 I llm_load_print_meta: rope type        = 2
0.00.544.265 I llm_load_print_meta: rope scaling     = linear
0.00.544.266 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.266 I llm_load_print_meta: freq_scale_train = 1
0.00.544.266 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.267 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.267 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.268 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.268 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.269 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.269 I llm_load_print_meta: model type       = 2B
0.00.544.270 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.271 I llm_load_print_meta: model params     = 2.51 B
0.00.544.272 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.272 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.273 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.273 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.274 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.300 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.302 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.308 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.544.318 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.544.319 I llm_load_print_meta: max token length = 93
0.00.544.486 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.384 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.646.015 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.022 I llama_new_context_with_model: n_batch    = 2048
0.00.646.022 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.023 I llama_new_context_with_model: flash_attn = 0
0.00.646.025 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.026 I llama_new_context_with_model: freq_scale = 1
0.00.676.063 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.676.106 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.220 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.677.624 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.629 I llama_new_context_with_model: graph nodes  = 601
0.00.677.630 I llama_new_context_with_model: graph splits = 1
0.00.677.645 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.129 I main: llama threadpool init, n_threads = 4
0.01.288.142 I 
0.01.288.250 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.254 I 
0.01.288.417 I sampler seed: 558301547
0.01.288.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.434 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.288.434 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.435 I 
 increasities
**Assistant**

I am unable to provide information or engage in conversations related to sexually suggestive or inappropriate topics. My purpose is to assist with tasks

0.14.807.147 I llama_perf_sampler_print:    sampling time =      48.89 ms /    33 runs   (    1.48 ms per token,   675.04 tokens per second)
0.14.807.150 I llama_perf_context_print:        load time =    1285.13 ms
0.14.807.151 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.807.153 I llama_perf_context_print:        eval time =   13435.83 ms /    32 runs   (  419.87 ms per token,     2.38 tokens per second)
0.14.807.154 I llama_perf_context_print:       total time =   13519.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.635 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.625 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.851 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.943 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.960 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.967 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.983 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.986 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.728 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.257 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.724 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.725 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.729 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.730 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.733 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.734 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.736 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.736 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.738 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.746 I llama_model_loader: - type  f32:   37 tensors
0.00.269.750 I llama_model_loader: - type q8_0:  127 tensors
0.00.423.374 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.445.960 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.446.996 I llm_load_vocab: special tokens cache size = 5
0.00.543.436 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.543.499 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.543.500 I llm_load_print_meta: arch             = gemma
0.00.543.501 I llm_load_print_meta: vocab type       = SPM
0.00.543.502 I llm_load_print_meta: n_vocab          = 256000
0.00.543.504 I llm_load_print_meta: n_merges         = 0
0.00.543.504 I llm_load_print_meta: vocab_only       = 0
0.00.543.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.505 I llm_load_print_meta: n_embd           = 2048
0.00.543.505 I llm_load_print_meta: n_layer          = 18
0.00.543.569 I llm_load_print_meta: n_head           = 8
0.00.543.576 I llm_load_print_meta: n_head_kv        = 1
0.00.543.577 I llm_load_print_meta: n_rot            = 256
0.00.543.577 I llm_load_print_meta: n_swa            = 0
0.00.543.578 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.583 I llm_load_print_meta: n_gqa            = 8
0.00.543.588 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.596 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.597 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.597 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.604 I llm_load_print_meta: n_ff             = 16384
0.00.543.605 I llm_load_print_meta: n_expert         = 0
0.00.543.605 I llm_load_print_meta: n_expert_used    = 0
0.00.543.606 I llm_load_print_meta: causal attn      = 1
0.00.543.606 I llm_load_print_meta: pooling type     = 0
0.00.543.607 I llm_load_print_meta: rope type        = 2
0.00.543.612 I llm_load_print_meta: rope scaling     = linear
0.00.543.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.614 I llm_load_print_meta: freq_scale_train = 1
0.00.543.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.614 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.618 I llm_load_print_meta: model type       = 2B
0.00.543.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.543.619 I llm_load_print_meta: model params     = 2.51 B
0.00.543.622 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.543.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.638 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.639 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.639 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.640 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.641 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.543.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.543.648 I llm_load_print_meta: max token length = 93
0.00.543.828 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.557 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.620.568 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.569 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.620.570 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.620.571 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.571 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.626.424 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.430 I llama_new_context_with_model: n_batch    = 2048
0.00.626.431 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.432 I llama_new_context_with_model: flash_attn = 0
0.00.626.434 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.435 I llama_new_context_with_model: freq_scale = 1
0.00.656.699 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.742 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.252 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.260 I llama_new_context_with_model: graph nodes  = 601
0.00.658.260 I llama_new_context_with_model: graph splits = 1
0.00.658.279 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.850 I main: llama threadpool init, n_threads = 4
0.01.271.864 I 
0.01.271.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.972 I 
0.01.272.137 I sampler seed: 3787143149
0.01.272.149 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.155 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.159 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.159 I 
 increasities, 
and a burning desire to reach the stars. [end of text]


0.07.627.312 I llama_perf_sampler_print:    sampling time =      22.67 ms /    16 runs   (    1.42 ms per token,   705.84 tokens per second)
0.07.627.316 I llama_perf_context_print:        load time =    1268.83 ms
0.07.627.318 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.627.320 I llama_perf_context_print:        eval time =    6316.28 ms /    15 runs   (  421.09 ms per token,     2.37 tokens per second)
0.07.627.321 I llama_perf_context_print:       total time =    6355.47 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.664 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.002.881 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.826 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.134 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.145 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.146 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.150 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.164 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.174 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.928 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.433 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.441 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.442 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.443 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.444 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.446 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.447 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.450 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.453 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.453 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.454 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.463 I llama_model_loader: - type  f32:   37 tensors
0.00.270.468 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.984 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.450.086 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.451.099 I llm_load_vocab: special tokens cache size = 5
0.00.546.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.546.817 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.546.818 I llm_load_print_meta: arch             = gemma
0.00.546.819 I llm_load_print_meta: vocab type       = SPM
0.00.546.820 I llm_load_print_meta: n_vocab          = 256000
0.00.546.823 I llm_load_print_meta: n_merges         = 0
0.00.546.823 I llm_load_print_meta: vocab_only       = 0
0.00.546.823 I llm_load_print_meta: n_ctx_train      = 8192
0.00.546.824 I llm_load_print_meta: n_embd           = 2048
0.00.546.824 I llm_load_print_meta: n_layer          = 18
0.00.546.887 I llm_load_print_meta: n_head           = 8
0.00.546.894 I llm_load_print_meta: n_head_kv        = 1
0.00.546.894 I llm_load_print_meta: n_rot            = 256
0.00.546.895 I llm_load_print_meta: n_swa            = 0
0.00.546.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.546.897 I llm_load_print_meta: n_embd_head_v    = 256
0.00.546.901 I llm_load_print_meta: n_gqa            = 8
0.00.546.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.546.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.546.912 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.546.914 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.546.915 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.546.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.546.916 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.546.921 I llm_load_print_meta: n_ff             = 16384
0.00.546.922 I llm_load_print_meta: n_expert         = 0
0.00.546.923 I llm_load_print_meta: n_expert_used    = 0
0.00.546.932 I llm_load_print_meta: causal attn      = 1
0.00.546.932 I llm_load_print_meta: pooling type     = 0
0.00.546.932 I llm_load_print_meta: rope type        = 2
0.00.546.933 I llm_load_print_meta: rope scaling     = linear
0.00.546.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.546.935 I llm_load_print_meta: freq_scale_train = 1
0.00.546.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.546.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.546.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.546.939 I llm_load_print_meta: ssm_d_inner      = 0
0.00.546.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.546.940 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.546.940 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.546.941 I llm_load_print_meta: model type       = 2B
0.00.546.941 I llm_load_print_meta: model ftype      = Q8_0
0.00.546.942 I llm_load_print_meta: model params     = 2.51 B
0.00.546.943 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.546.943 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.546.944 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.546.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.546.944 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.546.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.546.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.546.946 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.546.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.546.954 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.546.956 I llm_load_print_meta: max token length = 93
0.00.547.137 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.618.258 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.618.268 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.624.139 I llama_new_context_with_model: n_ctx      = 8192
0.00.624.145 I llama_new_context_with_model: n_batch    = 2048
0.00.624.146 I llama_new_context_with_model: n_ubatch   = 512
0.00.624.146 I llama_new_context_with_model: flash_attn = 0
0.00.624.149 I llama_new_context_with_model: freq_base  = 10000.0
0.00.624.150 I llama_new_context_with_model: freq_scale = 1
0.00.654.414 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.654.458 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.654.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.029 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.036 I llama_new_context_with_model: graph nodes  = 601
0.00.656.037 I llama_new_context_with_model: graph splits = 1
0.00.656.055 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.763 I main: llama threadpool init, n_threads = 4
0.01.268.775 I 
0.01.268.891 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.897 I 
0.01.269.064 I sampler seed: 4219305492
0.01.269.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.083 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.085 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.269.085 I 
 increasively. [end of text]


0.02.967.153 I llama_perf_sampler_print:    sampling time =       6.03 ms /     5 runs   (    1.21 ms per token,   828.91 tokens per second)
0.02.967.157 I llama_perf_context_print:        load time =    1265.67 ms
0.02.967.159 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.967.160 I llama_perf_context_print:        eval time =    1686.85 ms /     4 runs   (  421.71 ms per token,     2.37 tokens per second)
0.02.967.161 I llama_perf_context_print:       total time =    1698.40 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.666s
user	2m24.430s
sys	0m9.381s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3897 (fa42aa6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 202054.37 ms
main:    total time = 202054.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.630 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.053 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.330 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.351 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.352 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.359 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.368 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.372 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.530 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.489 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.901 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.908 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.909 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.910 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.911 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.918 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.919 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.920 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.921 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.922 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.930 I llama_model_loader: - type  f32:   37 tensors
0.00.269.935 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.936 I llama_model_loader: - type q6_K:   19 tensors
0.00.423.554 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.446.109 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.447.101 I llm_load_vocab: special tokens cache size = 5
0.00.551.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.312 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.314 I llm_load_print_meta: arch             = gemma
0.00.551.314 I llm_load_print_meta: vocab type       = SPM
0.00.551.315 I llm_load_print_meta: n_vocab          = 256000
0.00.551.318 I llm_load_print_meta: n_merges         = 0
0.00.551.318 I llm_load_print_meta: vocab_only       = 0
0.00.551.319 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.319 I llm_load_print_meta: n_embd           = 2048
0.00.551.319 I llm_load_print_meta: n_layer          = 18
0.00.551.383 I llm_load_print_meta: n_head           = 8
0.00.551.390 I llm_load_print_meta: n_head_kv        = 1
0.00.551.391 I llm_load_print_meta: n_rot            = 256
0.00.551.391 I llm_load_print_meta: n_swa            = 0
0.00.551.391 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.392 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.398 I llm_load_print_meta: n_gqa            = 8
0.00.551.402 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.409 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.411 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.421 I llm_load_print_meta: n_ff             = 16384
0.00.551.423 I llm_load_print_meta: n_expert         = 0
0.00.551.423 I llm_load_print_meta: n_expert_used    = 0
0.00.551.424 I llm_load_print_meta: causal attn      = 1
0.00.551.424 I llm_load_print_meta: pooling type     = 0
0.00.551.427 I llm_load_print_meta: rope type        = 2
0.00.551.428 I llm_load_print_meta: rope scaling     = linear
0.00.551.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.430 I llm_load_print_meta: freq_scale_train = 1
0.00.551.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.431 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.431 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.432 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.432 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.434 I llm_load_print_meta: model type       = 2B
0.00.551.435 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.551.453 I llm_load_print_meta: model params     = 2.51 B
0.00.551.454 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.551.463 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.468 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.474 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.551.475 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.551.476 I llm_load_print_meta: max token length = 93
0.00.551.640 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.613.043 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.613.053 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.613.054 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.613.055 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.613.056 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.613.056 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.618.625 I llama_new_context_with_model: n_ctx      = 8192
0.00.618.633 I llama_new_context_with_model: n_batch    = 2048
0.00.618.633 I llama_new_context_with_model: n_ubatch   = 512
0.00.618.634 I llama_new_context_with_model: flash_attn = 0
0.00.618.636 I llama_new_context_with_model: freq_base  = 10000.0
0.00.618.637 I llama_new_context_with_model: freq_scale = 1
0.00.647.300 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.647.346 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.647.481 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.648.869 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.648.875 I llama_new_context_with_model: graph nodes  = 601
0.00.648.876 I llama_new_context_with_model: graph splits = 1
0.00.648.892 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.228.163 I main: llama threadpool init, n_threads = 4
0.01.228.176 I 
0.01.228.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.228.285 I 
0.01.228.453 I sampler seed: 2172837350
0.01.228.464 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.228.470 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.228.471 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.228.471 I 
 increasities in your neighborhood.
It's important to use respectful and sensitive language when discussing this topic.

I cannot provide information that may be disturbing or

0.12.188.830 I llama_perf_sampler_print:    sampling time =      47.76 ms /    33 runs   (    1.45 ms per token,   690.91 tokens per second)
0.12.188.833 I llama_perf_context_print:        load time =    1225.19 ms
0.12.188.835 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.188.849 I llama_perf_context_print:        eval time =   10880.65 ms /    32 runs   (  340.02 ms per token,     2.94 tokens per second)
0.12.188.850 I llama_perf_context_print:       total time =   10960.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3897 (fa42aa6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199521.80 ms
main:    total time = 199521.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.701 I build: 3897 (fa42aa6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.026.846 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.943 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.957 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.959 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.965 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.966 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.970 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.132 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.926 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.371 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.386 I llama_model_loader: - type  f32:   37 tensors
0.00.271.390 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.390 I llama_model_loader: - type q6_K:   19 tensors
0.00.427.150 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.449.456 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.450.446 I llm_load_vocab: special tokens cache size = 5
0.00.547.929 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.547.986 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.547.990 I llm_load_print_meta: arch             = gemma
0.00.547.991 I llm_load_print_meta: vocab type       = SPM
0.00.547.992 I llm_load_print_meta: n_vocab          = 256000
0.00.547.994 I llm_load_print_meta: n_merges         = 0
0.00.547.995 I llm_load_print_meta: vocab_only       = 0
0.00.547.995 I llm_load_print_meta: n_ctx_train      = 8192
0.00.547.996 I llm_load_print_meta: n_embd           = 2048
0.00.547.996 I llm_load_print_meta: n_layer          = 18
0.00.548.065 I llm_load_print_meta: n_head           = 8
0.00.548.074 I llm_load_print_meta: n_head_kv        = 1
0.00.548.075 I llm_load_print_meta: n_rot            = 256
0.00.548.075 I llm_load_print_meta: n_swa            = 0
0.00.548.076 I llm_load_print_meta: n_embd_head_k    = 256
0.00.548.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.548.081 I llm_load_print_meta: n_gqa            = 8
0.00.548.086 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.548.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.548.095 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.548.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.548.097 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.548.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.548.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.548.104 I llm_load_print_meta: n_ff             = 16384
0.00.548.105 I llm_load_print_meta: n_expert         = 0
0.00.548.105 I llm_load_print_meta: n_expert_used    = 0
0.00.548.106 I llm_load_print_meta: causal attn      = 1
0.00.548.109 I llm_load_print_meta: pooling type     = 0
0.00.548.109 I llm_load_print_meta: rope type        = 2
0.00.548.110 I llm_load_print_meta: rope scaling     = linear
0.00.548.111 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.548.112 I llm_load_print_meta: freq_scale_train = 1
0.00.548.112 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.548.113 I llm_load_print_meta: rope_finetuned   = unknown
0.00.548.113 I llm_load_print_meta: ssm_d_conv       = 0
0.00.548.113 I llm_load_print_meta: ssm_d_inner      = 0
0.00.548.114 I llm_load_print_meta: ssm_d_state      = 0
0.00.548.114 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.548.114 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.548.115 I llm_load_print_meta: model type       = 2B
0.00.548.116 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.548.117 I llm_load_print_meta: model params     = 2.51 B
0.00.548.118 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.548.118 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.548.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.548.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.548.120 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.548.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.548.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.548.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.548.128 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.548.130 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.548.131 I llm_load_print_meta: max token length = 93
0.00.548.320 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.607.258 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.612.818 I llama_new_context_with_model: n_ctx      = 8192
0.00.612.825 I llama_new_context_with_model: n_batch    = 2048
0.00.612.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.612.826 I llama_new_context_with_model: flash_attn = 0
0.00.612.829 I llama_new_context_with_model: freq_base  = 10000.0
0.00.612.830 I llama_new_context_with_model: freq_scale = 1
0.00.643.059 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.103 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.643.219 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.644.582 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.644.588 I llama_new_context_with_model: graph nodes  = 601
0.00.644.588 I llama_new_context_with_model: graph splits = 1
0.00.644.605 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.223.861 I main: llama threadpool init, n_threads = 4
0.01.223.872 I 
0.01.223.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.223.981 I 
0.01.224.147 I sampler seed: 2471651831
0.01.224.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.224.163 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.224.164 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.224.165 I 
 seconally. [end of text]


0.02.593.217 I llama_perf_sampler_print:    sampling time =       6.01 ms /     5 runs   (    1.20 ms per token,   831.53 tokens per second)
0.02.593.221 I llama_perf_context_print:        load time =    1220.82 ms
0.02.593.223 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.593.235 I llama_perf_context_print:        eval time =    1357.59 ms /     4 runs   (  339.40 ms per token,     2.95 tokens per second)
0.02.593.236 I llama_perf_context_print:       total time =    1369.37 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m59.201s
user	49m38.980s
sys	0m6.339s
