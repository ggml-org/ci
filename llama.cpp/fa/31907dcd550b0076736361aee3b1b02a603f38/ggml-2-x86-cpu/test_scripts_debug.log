+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.120 I main: load the model and apply lora adapter, if any
0.00.023.887 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.019 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.034 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.043 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.045 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.046 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.048 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.049 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.059 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.061 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.540 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.674 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.829 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.839 I llama_model_loader: - type  f32:   37 tensors
0.00.273.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.845 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.142 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.095 I llm_load_vocab: special tokens cache size = 5
0.00.615.717 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.792 I llm_load_print_meta: arch             = gemma
0.00.615.793 I llm_load_print_meta: vocab type       = SPM
0.00.615.794 I llm_load_print_meta: n_vocab          = 256000
0.00.615.796 I llm_load_print_meta: n_merges         = 0
0.00.615.797 I llm_load_print_meta: vocab_only       = 0
0.00.615.797 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.798 I llm_load_print_meta: n_embd           = 2048
0.00.615.798 I llm_load_print_meta: n_layer          = 18
0.00.615.864 I llm_load_print_meta: n_head           = 8
0.00.615.871 I llm_load_print_meta: n_head_kv        = 1
0.00.615.872 I llm_load_print_meta: n_rot            = 256
0.00.615.873 I llm_load_print_meta: n_swa            = 0
0.00.615.873 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.879 I llm_load_print_meta: n_gqa            = 8
0.00.615.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.919 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.934 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.949 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.963 I llm_load_print_meta: n_ff             = 16384
0.00.615.966 I llm_load_print_meta: n_expert         = 0
0.00.615.967 I llm_load_print_meta: n_expert_used    = 0
0.00.615.967 I llm_load_print_meta: causal attn      = 1
0.00.615.968 I llm_load_print_meta: pooling type     = 0
0.00.615.968 I llm_load_print_meta: rope type        = 2
0.00.615.969 I llm_load_print_meta: rope scaling     = linear
0.00.615.970 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.971 I llm_load_print_meta: freq_scale_train = 1
0.00.615.971 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.972 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.974 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.982 I llm_load_print_meta: model type       = 2B
0.00.615.983 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.985 I llm_load_print_meta: model params     = 2.51 B
0.00.615.994 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.002 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.003 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.011 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.012 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.012 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.012 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.013 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.027 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.031 I llm_load_print_meta: max token length = 93
0.00.718.171 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.718.182 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.718.183 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.718.184 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.718.184 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.718.185 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.085 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.091 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.091 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.092 I llama_new_context_with_model: n_batch       = 2048
0.00.724.092 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.093 I llama_new_context_with_model: flash_attn    = 0
0.00.724.095 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.096 I llama_new_context_with_model: freq_scale    = 1
0.00.724.097 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.740.368 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.740.408 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.740.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.061 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.065 I llama_new_context_with_model: graph nodes  = 601
0.00.743.065 I llama_new_context_with_model: graph splits = 1
0.00.743.089 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.946 I main: llama threadpool init, n_threads = 4
0.01.350.960 I 
0.01.351.074 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.351.078 I 
0.01.351.335 I sampler seed: 902877703
0.01.351.347 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.354 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.355 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.355 I 
 increasities?

I am unable to access the requested text. Please provide me with the text so that I can assist you. [end of text]


0.12.665.690 I llama_perf_sampler_print:    sampling time =      40.55 ms /    28 runs   (    1.45 ms per token,   690.54 tokens per second)
0.12.665.693 I llama_perf_context_print:        load time =    1349.72 ms
0.12.665.694 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.665.696 I llama_perf_context_print:        eval time =   11239.09 ms /    27 runs   (  416.26 ms per token,     2.40 tokens per second)
0.12.665.712 I llama_perf_context_print:       total time =   11314.75 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.001.087 I main: load the model and apply lora adapter, if any
0.00.026.189 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.291 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.308 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.315 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.343 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.353 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.354 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.364 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.365 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.367 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.558 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.720 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.733 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.735 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.736 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.737 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.738 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.739 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.743 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.744 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.745 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.746 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.747 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.758 I llama_model_loader: - type  f32:   37 tensors
0.00.268.760 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.098 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.360 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.439 I llm_load_vocab: special tokens cache size = 5
0.00.635.370 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.443 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.447 I llm_load_print_meta: arch             = gemma
0.00.635.448 I llm_load_print_meta: vocab type       = SPM
0.00.635.449 I llm_load_print_meta: n_vocab          = 256000
0.00.635.451 I llm_load_print_meta: n_merges         = 0
0.00.635.452 I llm_load_print_meta: vocab_only       = 0
0.00.635.452 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.452 I llm_load_print_meta: n_embd           = 2048
0.00.635.453 I llm_load_print_meta: n_layer          = 18
0.00.635.520 I llm_load_print_meta: n_head           = 8
0.00.635.530 I llm_load_print_meta: n_head_kv        = 1
0.00.635.531 I llm_load_print_meta: n_rot            = 256
0.00.635.531 I llm_load_print_meta: n_swa            = 0
0.00.635.531 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.532 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.536 I llm_load_print_meta: n_gqa            = 8
0.00.635.541 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.546 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.547 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.549 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.550 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.551 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.556 I llm_load_print_meta: n_ff             = 16384
0.00.635.557 I llm_load_print_meta: n_expert         = 0
0.00.635.557 I llm_load_print_meta: n_expert_used    = 0
0.00.635.557 I llm_load_print_meta: causal attn      = 1
0.00.635.578 I llm_load_print_meta: pooling type     = 0
0.00.635.578 I llm_load_print_meta: rope type        = 2
0.00.635.579 I llm_load_print_meta: rope scaling     = linear
0.00.635.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.581 I llm_load_print_meta: freq_scale_train = 1
0.00.635.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.582 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.582 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.583 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.584 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.585 I llm_load_print_meta: model type       = 2B
0.00.635.586 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.595 I llm_load_print_meta: model params     = 2.51 B
0.00.635.603 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.603 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.605 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.605 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.606 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.606 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.607 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.607 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.614 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.615 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.623 I llm_load_print_meta: max token length = 93
0.00.731.301 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.737.235 I llama_new_context_with_model: n_seq_max     = 1
0.00.737.243 I llama_new_context_with_model: n_ctx         = 4096
0.00.737.244 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.737.244 I llama_new_context_with_model: n_batch       = 2048
0.00.737.244 I llama_new_context_with_model: n_ubatch      = 512
0.00.737.245 I llama_new_context_with_model: flash_attn    = 0
0.00.737.249 I llama_new_context_with_model: freq_base     = 10000.0
0.00.737.250 I llama_new_context_with_model: freq_scale    = 1
0.00.737.250 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.754.545 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.754.590 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.754.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.757.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.757.223 I llama_new_context_with_model: graph nodes  = 601
0.00.757.224 I llama_new_context_with_model: graph splits = 1
0.00.757.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.637 I main: llama threadpool init, n_threads = 4
0.01.361.651 I 
0.01.361.759 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.763 I 
0.01.361.997 I sampler seed: 1899841041
0.01.362.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.019 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.019 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.020 I 
 increasities, and other romantic entanglements often intertwine with the larger narrative of the novel. How do these elements contribute to the overall impact and significance of

0.15.020.621 I llama_perf_sampler_print:    sampling time =      48.72 ms /    33 runs   (    1.48 ms per token,   677.30 tokens per second)
0.15.020.624 I llama_perf_context_print:        load time =    1360.45 ms
0.15.020.625 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.020.640 I llama_perf_context_print:        eval time =   13568.47 ms /    32 runs   (  424.01 ms per token,     2.36 tokens per second)
0.15.020.642 I llama_perf_context_print:       total time =   13658.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.791 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.010 I main: llama backend init
0.00.001.287 I main: load the model and apply lora adapter, if any
0.00.024.792 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.805 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.902 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.915 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.919 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.939 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.944 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.850 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.865 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.866 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.868 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.870 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.872 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.875 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.876 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.878 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.879 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.880 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.890 I llama_model_loader: - type  f32:   37 tensors
0.00.267.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.472.518 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.802 I llm_load_vocab: special tokens cache size = 5
0.00.640.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.640.242 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.640.243 I llm_load_print_meta: arch             = gemma
0.00.640.244 I llm_load_print_meta: vocab type       = SPM
0.00.640.245 I llm_load_print_meta: n_vocab          = 256000
0.00.640.247 I llm_load_print_meta: n_merges         = 0
0.00.640.248 I llm_load_print_meta: vocab_only       = 0
0.00.640.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.640.249 I llm_load_print_meta: n_embd           = 2048
0.00.640.249 I llm_load_print_meta: n_layer          = 18
0.00.640.315 I llm_load_print_meta: n_head           = 8
0.00.640.322 I llm_load_print_meta: n_head_kv        = 1
0.00.640.323 I llm_load_print_meta: n_rot            = 256
0.00.640.324 I llm_load_print_meta: n_swa            = 0
0.00.640.325 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.325 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.343 I llm_load_print_meta: n_gqa            = 8
0.00.640.353 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.379 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.386 I llm_load_print_meta: n_ff             = 16384
0.00.640.387 I llm_load_print_meta: n_expert         = 0
0.00.640.387 I llm_load_print_meta: n_expert_used    = 0
0.00.640.388 I llm_load_print_meta: causal attn      = 1
0.00.640.389 I llm_load_print_meta: pooling type     = 0
0.00.640.389 I llm_load_print_meta: rope type        = 2
0.00.640.389 I llm_load_print_meta: rope scaling     = linear
0.00.640.391 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.391 I llm_load_print_meta: freq_scale_train = 1
0.00.640.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.396 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.397 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.397 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.398 I llm_load_print_meta: model type       = 2B
0.00.640.399 I llm_load_print_meta: model ftype      = Q8_0
0.00.640.400 I llm_load_print_meta: model params     = 2.51 B
0.00.640.409 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.640.418 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.419 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.419 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.427 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.428 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.437 I llm_load_print_meta: max token length = 93
0.00.727.607 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.727.616 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.727.617 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.727.618 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.727.619 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.727.620 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.733.698 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.704 I llama_new_context_with_model: n_batch       = 2048
0.00.733.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.705 I llama_new_context_with_model: flash_attn    = 0
0.00.733.708 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.709 I llama_new_context_with_model: freq_scale    = 1
0.00.733.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.750.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.750.863 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.750.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.513 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.753.516 I llama_new_context_with_model: graph nodes  = 601
0.00.753.516 I llama_new_context_with_model: graph splits = 1
0.00.753.540 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.913 I main: llama threadpool init, n_threads = 4
0.01.360.928 I 
0.01.361.054 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.059 I 
0.01.361.297 I sampler seed: 260837001
0.01.361.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.316 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.320 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.321 I 
 increasels. [end of text]


0.03.049.489 I llama_perf_sampler_print:    sampling time =       6.15 ms /     5 runs   (    1.23 ms per token,   813.01 tokens per second)
0.03.049.492 I llama_perf_context_print:        load time =    1359.50 ms
0.03.049.494 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.049.495 I llama_perf_context_print:        eval time =    1675.41 ms /     4 runs   (  418.85 ms per token,     2.39 tokens per second)
0.03.049.497 I llama_perf_context_print:       total time =    1688.59 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.001.163 I main: load the model and apply lora adapter, if any
0.00.023.940 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.082 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.099 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.112 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.119 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.121 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.123 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.755 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.476 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.490 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.492 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.493 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.499 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.500 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.501 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.502 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.503 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.513 I llama_model_loader: - type  f32:   37 tensors
0.00.266.515 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.255 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.216 I llm_load_vocab: special tokens cache size = 5
0.00.632.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.049 I llm_load_print_meta: arch             = gemma
0.00.633.050 I llm_load_print_meta: vocab type       = SPM
0.00.633.051 I llm_load_print_meta: n_vocab          = 256000
0.00.633.053 I llm_load_print_meta: n_merges         = 0
0.00.633.054 I llm_load_print_meta: vocab_only       = 0
0.00.633.055 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.055 I llm_load_print_meta: n_embd           = 2048
0.00.633.055 I llm_load_print_meta: n_layer          = 18
0.00.633.123 I llm_load_print_meta: n_head           = 8
0.00.633.133 I llm_load_print_meta: n_head_kv        = 1
0.00.633.134 I llm_load_print_meta: n_rot            = 256
0.00.633.134 I llm_load_print_meta: n_swa            = 0
0.00.633.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.136 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.141 I llm_load_print_meta: n_gqa            = 8
0.00.633.146 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.163 I llm_load_print_meta: n_ff             = 16384
0.00.633.164 I llm_load_print_meta: n_expert         = 0
0.00.633.164 I llm_load_print_meta: n_expert_used    = 0
0.00.633.166 I llm_load_print_meta: causal attn      = 1
0.00.633.166 I llm_load_print_meta: pooling type     = 0
0.00.633.167 I llm_load_print_meta: rope type        = 2
0.00.633.168 I llm_load_print_meta: rope scaling     = linear
0.00.633.170 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.171 I llm_load_print_meta: freq_scale_train = 1
0.00.633.172 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.172 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.172 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.173 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.175 I llm_load_print_meta: model type       = 2B
0.00.633.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.633.179 I llm_load_print_meta: model params     = 2.51 B
0.00.633.199 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.633.199 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.201 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.203 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.203 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.210 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.212 I llm_load_print_meta: max token length = 93
0.00.705.369 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.705.376 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.712.180 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.189 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.189 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.190 I llama_new_context_with_model: n_batch       = 2048
0.00.712.190 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.191 I llama_new_context_with_model: flash_attn    = 0
0.00.712.194 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.195 I llama_new_context_with_model: freq_scale    = 1
0.00.712.196 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.131 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.173 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.963 I llama_new_context_with_model: graph nodes  = 601
0.00.731.963 I llama_new_context_with_model: graph splits = 1
0.00.731.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.394 I main: llama threadpool init, n_threads = 4
0.01.341.406 I 
0.01.341.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.535 I 
0.01.341.787 I sampler seed: 3342842173
0.01.341.800 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.811 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.811 I 
 increasities

I'm so sorry, but I cannot provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions within the boundaries of

0.14.733.395 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.26 tokens per second)
0.14.733.398 I llama_perf_context_print:        load time =    1340.10 ms
0.14.733.400 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.733.401 I llama_perf_context_print:        eval time =   13302.57 ms /    32 runs   (  415.71 ms per token,     2.41 tokens per second)
0.14.733.416 I llama_perf_context_print:       total time =   13392.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.500s
user	2m53.014s
sys	0m9.619s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (fa31907d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198534.36 ms
main:    total time = 198534.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.001.121 I main: load the model and apply lora adapter, if any
0.00.023.715 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.727 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.826 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.863 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.864 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.867 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.868 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.464 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.997 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.067 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.068 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.069 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.070 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.072 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.075 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.076 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.078 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.104 I llama_model_loader: - type  f32:   37 tensors
0.00.266.109 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.110 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.891 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.190 I llm_load_vocab: special tokens cache size = 5
0.00.656.215 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.656.283 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.656.284 I llm_load_print_meta: arch             = gemma
0.00.656.285 I llm_load_print_meta: vocab type       = SPM
0.00.656.286 I llm_load_print_meta: n_vocab          = 256000
0.00.656.288 I llm_load_print_meta: n_merges         = 0
0.00.656.289 I llm_load_print_meta: vocab_only       = 0
0.00.656.289 I llm_load_print_meta: n_ctx_train      = 8192
0.00.656.290 I llm_load_print_meta: n_embd           = 2048
0.00.656.290 I llm_load_print_meta: n_layer          = 18
0.00.656.356 I llm_load_print_meta: n_head           = 8
0.00.656.363 I llm_load_print_meta: n_head_kv        = 1
0.00.656.364 I llm_load_print_meta: n_rot            = 256
0.00.656.365 I llm_load_print_meta: n_swa            = 0
0.00.656.365 I llm_load_print_meta: n_embd_head_k    = 256
0.00.656.365 I llm_load_print_meta: n_embd_head_v    = 256
0.00.656.370 I llm_load_print_meta: n_gqa            = 8
0.00.656.374 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.656.379 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.656.380 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.656.382 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.656.383 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.656.383 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.656.383 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.656.388 I llm_load_print_meta: n_ff             = 16384
0.00.656.388 I llm_load_print_meta: n_expert         = 0
0.00.656.390 I llm_load_print_meta: n_expert_used    = 0
0.00.656.391 I llm_load_print_meta: causal attn      = 1
0.00.656.391 I llm_load_print_meta: pooling type     = 0
0.00.656.402 I llm_load_print_meta: rope type        = 2
0.00.656.403 I llm_load_print_meta: rope scaling     = linear
0.00.656.405 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.656.405 I llm_load_print_meta: freq_scale_train = 1
0.00.656.406 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.656.420 I llm_load_print_meta: rope_finetuned   = unknown
0.00.656.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.656.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.656.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.656.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.656.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.656.424 I llm_load_print_meta: model type       = 2B
0.00.656.425 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.656.430 I llm_load_print_meta: model params     = 2.51 B
0.00.656.440 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.656.441 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.656.441 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.656.442 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.656.443 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.656.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.656.444 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.656.445 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.656.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.656.453 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.656.453 I llm_load_print_meta: max token length = 93
0.00.718.737 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.718.745 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.718.746 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.718.746 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.718.747 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.718.748 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.724.693 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.703 I llama_new_context_with_model: n_batch       = 2048
0.00.724.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.704 I llama_new_context_with_model: flash_attn    = 0
0.00.724.708 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.709 I llama_new_context_with_model: freq_scale    = 1
0.00.724.710 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.156 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.204 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.377 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.998 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.003 I llama_new_context_with_model: graph nodes  = 601
0.00.746.003 I llama_new_context_with_model: graph splits = 1
0.00.746.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.974 I main: llama threadpool init, n_threads = 4
0.01.318.986 I 
0.01.319.094 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.098 I 
0.01.319.326 I sampler seed: 939490028
0.01.319.339 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.319.345 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.319.349 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.319.349 I 
 increamically and ask questions. 😅

I am so confused about the whole concept of time travel. It's like a tangled mess of paradoxes and inconsistencies

0.12.261.422 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.85 tokens per second)
0.12.261.426 I llama_perf_context_print:        load time =    1317.76 ms
0.12.261.427 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.261.429 I llama_perf_context_print:        eval time =   10852.42 ms /    32 runs   (  339.14 ms per token,     2.95 tokens per second)
0.12.261.431 I llama_perf_context_print:       total time =   10942.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (fa31907d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198638.42 ms
main:    total time = 198638.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4052 (fa31907d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.001.087 I main: load the model and apply lora adapter, if any
0.00.023.539 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.670 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.685 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.687 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.692 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.693 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.697 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.706 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.707 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.503 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.804 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.226 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.241 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.258 I llama_model_loader: - type  f32:   37 tensors
0.00.272.261 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.261 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.288 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.113 I llm_load_vocab: special tokens cache size = 5
0.00.626.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.882 I llm_load_print_meta: arch             = gemma
0.00.626.883 I llm_load_print_meta: vocab type       = SPM
0.00.626.883 I llm_load_print_meta: n_vocab          = 256000
0.00.626.886 I llm_load_print_meta: n_merges         = 0
0.00.626.886 I llm_load_print_meta: vocab_only       = 0
0.00.626.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.887 I llm_load_print_meta: n_embd           = 2048
0.00.626.888 I llm_load_print_meta: n_layer          = 18
0.00.626.952 I llm_load_print_meta: n_head           = 8
0.00.626.961 I llm_load_print_meta: n_head_kv        = 1
0.00.626.961 I llm_load_print_meta: n_rot            = 256
0.00.626.961 I llm_load_print_meta: n_swa            = 0
0.00.626.962 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.962 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.967 I llm_load_print_meta: n_gqa            = 8
0.00.626.971 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.976 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.977 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.979 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.979 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.980 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.986 I llm_load_print_meta: n_ff             = 16384
0.00.626.987 I llm_load_print_meta: n_expert         = 0
0.00.626.988 I llm_load_print_meta: n_expert_used    = 0
0.00.626.988 I llm_load_print_meta: causal attn      = 1
0.00.626.988 I llm_load_print_meta: pooling type     = 0
0.00.626.989 I llm_load_print_meta: rope type        = 2
0.00.627.001 I llm_load_print_meta: rope scaling     = linear
0.00.627.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.017 I llm_load_print_meta: freq_scale_train = 1
0.00.627.018 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.027 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.028 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.029 I llm_load_print_meta: model type       = 2B
0.00.627.030 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.032 I llm_load_print_meta: model params     = 2.51 B
0.00.627.042 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.042 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.043 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.044 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.045 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.047 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.053 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.054 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.055 I llm_load_print_meta: max token length = 93
0.00.685.858 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.692.403 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.410 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.411 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.411 I llama_new_context_with_model: n_batch       = 2048
0.00.692.411 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.412 I llama_new_context_with_model: flash_attn    = 0
0.00.692.415 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.416 I llama_new_context_with_model: freq_scale    = 1
0.00.692.417 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.577 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.621 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.335 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.340 I llama_new_context_with_model: graph nodes  = 601
0.00.712.340 I llama_new_context_with_model: graph splits = 1
0.00.712.365 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.432 I main: llama threadpool init, n_threads = 4
0.01.284.445 I 
0.01.284.555 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.559 I 
0.01.284.792 I sampler seed: 3422100167
0.01.284.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.811 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.812 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.812 I 
 squared-up fish forms, pulsating with a vibrant blue glow.

These creatures, called Aquariums, are a mesmerizing spectacle, defying the ordinary

0.12.155.508 I llama_perf_sampler_print:    sampling time =      48.45 ms /    33 runs   (    1.47 ms per token,   681.13 tokens per second)
0.12.155.512 I llama_perf_context_print:        load time =    1283.25 ms
0.12.155.539 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.155.542 I llama_perf_context_print:        eval time =   10781.01 ms /    32 runs   (  336.91 ms per token,     2.97 tokens per second)
0.12.155.544 I llama_perf_context_print:       total time =   10871.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.703s
user	50m10.897s
sys	0m6.360s
