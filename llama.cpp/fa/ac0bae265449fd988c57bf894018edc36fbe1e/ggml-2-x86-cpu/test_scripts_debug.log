+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.657 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.612 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.787 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.888 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.899 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.900 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.904 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.906 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.907 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.912 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.919 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.925 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.927 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.206 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.215 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.215 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.216 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.217 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.218 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.219 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.224 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.224 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.233 I llama_model_loader: - type  f32:   37 tensors
0.00.192.236 I llama_model_loader: - type q8_0:  127 tensors
0.00.322.075 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.344.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.345.931 I llm_load_vocab: special tokens cache size = 5
0.00.404.546 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.404.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.404.605 I llm_load_print_meta: arch             = gemma
0.00.404.606 I llm_load_print_meta: vocab type       = SPM
0.00.404.607 I llm_load_print_meta: n_vocab          = 256000
0.00.404.610 I llm_load_print_meta: n_merges         = 0
0.00.404.610 I llm_load_print_meta: vocab_only       = 0
0.00.404.611 I llm_load_print_meta: n_ctx_train      = 8192
0.00.404.611 I llm_load_print_meta: n_embd           = 2048
0.00.404.611 I llm_load_print_meta: n_layer          = 18
0.00.404.674 I llm_load_print_meta: n_head           = 8
0.00.404.680 I llm_load_print_meta: n_head_kv        = 1
0.00.404.682 I llm_load_print_meta: n_rot            = 256
0.00.404.682 I llm_load_print_meta: n_swa            = 0
0.00.404.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.404.683 I llm_load_print_meta: n_embd_head_v    = 256
0.00.404.688 I llm_load_print_meta: n_gqa            = 8
0.00.404.693 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.404.698 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.404.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.404.701 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.404.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.404.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.404.703 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.404.708 I llm_load_print_meta: n_ff             = 16384
0.00.404.709 I llm_load_print_meta: n_expert         = 0
0.00.404.714 I llm_load_print_meta: n_expert_used    = 0
0.00.404.714 I llm_load_print_meta: causal attn      = 1
0.00.404.715 I llm_load_print_meta: pooling type     = 0
0.00.404.715 I llm_load_print_meta: rope type        = 2
0.00.404.719 I llm_load_print_meta: rope scaling     = linear
0.00.404.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.404.722 I llm_load_print_meta: freq_scale_train = 1
0.00.404.722 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.404.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.404.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.404.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.404.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.404.725 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.404.725 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.404.726 I llm_load_print_meta: model type       = 2B
0.00.404.728 I llm_load_print_meta: model ftype      = Q8_0
0.00.404.728 I llm_load_print_meta: model params     = 2.51 B
0.00.404.730 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.404.732 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.404.733 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.404.734 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.404.734 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.404.735 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.404.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.404.737 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.404.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.404.764 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.404.765 I llm_load_print_meta: max token length = 93
0.00.404.955 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.504.819 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.504.831 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.504.832 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.504.833 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.504.834 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.504.834 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.510.658 I llama_new_context_with_model: n_ctx      = 8192
0.00.510.668 I llama_new_context_with_model: n_batch    = 2048
0.00.510.668 I llama_new_context_with_model: n_ubatch   = 512
0.00.510.669 I llama_new_context_with_model: flash_attn = 0
0.00.510.673 I llama_new_context_with_model: freq_base  = 10000.0
0.00.510.674 I llama_new_context_with_model: freq_scale = 1
0.00.540.563 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.540.609 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.540.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.542.118 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.542.127 I llama_new_context_with_model: graph nodes  = 601
0.00.542.127 I llama_new_context_with_model: graph splits = 1
0.00.542.151 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.154.506 I main: llama threadpool init, n_threads = 4
0.01.154.518 I 
0.01.154.617 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.154.622 I 
0.01.154.810 I sampler seed: 4203366349
0.01.154.822 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.154.828 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.154.829 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.154.830 I 
 increasities with the utmost sensitivity and respect. [end of text]


0.05.343.688 I llama_perf_sampler_print:    sampling time =      15.49 ms /    11 runs   (    1.41 ms per token,   710.09 tokens per second)
0.05.343.691 I llama_perf_context_print:        load time =    1151.62 ms
0.05.343.693 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.343.694 I llama_perf_context_print:        eval time =    4161.14 ms /    10 runs   (  416.11 ms per token,     2.40 tokens per second)
0.05.343.695 I llama_perf_context_print:       total time =    4189.19 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.633 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.531 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.633 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.635 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.639 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.642 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.643 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.645 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.645 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.680 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.890 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.898 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.899 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.899 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.906 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.908 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.908 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.192.909 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.918 I llama_model_loader: - type  f32:   37 tensors
0.00.192.921 I llama_model_loader: - type q8_0:  127 tensors
0.00.334.975 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.357.195 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.358.187 I llm_load_vocab: special tokens cache size = 5
0.00.415.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.415.989 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.415.990 I llm_load_print_meta: arch             = gemma
0.00.415.991 I llm_load_print_meta: vocab type       = SPM
0.00.415.991 I llm_load_print_meta: n_vocab          = 256000
0.00.415.993 I llm_load_print_meta: n_merges         = 0
0.00.415.994 I llm_load_print_meta: vocab_only       = 0
0.00.415.994 I llm_load_print_meta: n_ctx_train      = 8192
0.00.415.995 I llm_load_print_meta: n_embd           = 2048
0.00.415.995 I llm_load_print_meta: n_layer          = 18
0.00.416.058 I llm_load_print_meta: n_head           = 8
0.00.416.065 I llm_load_print_meta: n_head_kv        = 1
0.00.416.066 I llm_load_print_meta: n_rot            = 256
0.00.416.067 I llm_load_print_meta: n_swa            = 0
0.00.416.068 I llm_load_print_meta: n_embd_head_k    = 256
0.00.416.068 I llm_load_print_meta: n_embd_head_v    = 256
0.00.416.073 I llm_load_print_meta: n_gqa            = 8
0.00.416.077 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.416.082 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.416.083 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.416.085 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.416.085 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.416.085 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.416.086 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.416.091 I llm_load_print_meta: n_ff             = 16384
0.00.416.092 I llm_load_print_meta: n_expert         = 0
0.00.416.092 I llm_load_print_meta: n_expert_used    = 0
0.00.416.093 I llm_load_print_meta: causal attn      = 1
0.00.416.093 I llm_load_print_meta: pooling type     = 0
0.00.416.094 I llm_load_print_meta: rope type        = 2
0.00.416.094 I llm_load_print_meta: rope scaling     = linear
0.00.416.095 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.416.096 I llm_load_print_meta: freq_scale_train = 1
0.00.416.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.416.097 I llm_load_print_meta: rope_finetuned   = unknown
0.00.416.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.416.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.416.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.416.099 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.416.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.416.100 I llm_load_print_meta: model type       = 2B
0.00.416.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.416.102 I llm_load_print_meta: model params     = 2.51 B
0.00.416.102 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.416.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.416.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.416.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.416.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.416.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.416.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.416.112 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.416.117 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.416.119 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.416.119 I llm_load_print_meta: max token length = 93
0.00.416.290 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.511.419 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.517.024 I llama_new_context_with_model: n_ctx      = 8192
0.00.517.030 I llama_new_context_with_model: n_batch    = 2048
0.00.517.031 I llama_new_context_with_model: n_ubatch   = 512
0.00.517.032 I llama_new_context_with_model: flash_attn = 0
0.00.517.034 I llama_new_context_with_model: freq_base  = 10000.0
0.00.517.035 I llama_new_context_with_model: freq_scale = 1
0.00.546.570 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.546.619 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.546.734 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.548.184 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.548.190 I llama_new_context_with_model: graph nodes  = 601
0.00.548.190 I llama_new_context_with_model: graph splits = 1
0.00.548.206 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.163.252 I main: llama threadpool init, n_threads = 4
0.01.163.265 I 
0.01.163.365 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.163.369 I 
0.01.163.535 I sampler seed: 953410541
0.01.163.545 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.163.549 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.163.550 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.163.553 I 
 increasities. 

What is the meaning of this phrase?

The phrase is a play on words that combines the words "crescendo" and "inc

0.14.866.789 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.40 tokens per second)
0.14.866.792 I llama_perf_context_print:        load time =    1160.41 ms
0.14.866.808 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.866.810 I llama_perf_context_print:        eval time =   13621.35 ms /    32 runs   (  425.67 ms per token,     2.35 tokens per second)
0.14.866.811 I llama_perf_context_print:       total time =   13703.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.620 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.441 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.618 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.700 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.713 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.718 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.719 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.720 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.729 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.732 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.660 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.661 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.192.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.670 I llama_model_loader: - type  f32:   37 tensors
0.00.192.673 I llama_model_loader: - type q8_0:  127 tensors
0.00.342.634 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.364.352 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.365.470 I llm_load_vocab: special tokens cache size = 5
0.00.434.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.434.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.434.765 I llm_load_print_meta: arch             = gemma
0.00.434.766 I llm_load_print_meta: vocab type       = SPM
0.00.434.767 I llm_load_print_meta: n_vocab          = 256000
0.00.434.769 I llm_load_print_meta: n_merges         = 0
0.00.434.769 I llm_load_print_meta: vocab_only       = 0
0.00.434.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.434.770 I llm_load_print_meta: n_embd           = 2048
0.00.434.770 I llm_load_print_meta: n_layer          = 18
0.00.434.833 I llm_load_print_meta: n_head           = 8
0.00.434.840 I llm_load_print_meta: n_head_kv        = 1
0.00.434.841 I llm_load_print_meta: n_rot            = 256
0.00.434.842 I llm_load_print_meta: n_swa            = 0
0.00.434.847 I llm_load_print_meta: n_embd_head_k    = 256
0.00.434.847 I llm_load_print_meta: n_embd_head_v    = 256
0.00.434.868 I llm_load_print_meta: n_gqa            = 8
0.00.434.873 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.434.878 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.434.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.434.881 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.434.881 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.434.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.434.882 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.434.887 I llm_load_print_meta: n_ff             = 16384
0.00.434.888 I llm_load_print_meta: n_expert         = 0
0.00.434.888 I llm_load_print_meta: n_expert_used    = 0
0.00.434.899 I llm_load_print_meta: causal attn      = 1
0.00.434.900 I llm_load_print_meta: pooling type     = 0
0.00.434.901 I llm_load_print_meta: rope type        = 2
0.00.434.901 I llm_load_print_meta: rope scaling     = linear
0.00.434.903 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.434.904 I llm_load_print_meta: freq_scale_train = 1
0.00.434.904 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.434.905 I llm_load_print_meta: rope_finetuned   = unknown
0.00.434.905 I llm_load_print_meta: ssm_d_conv       = 0
0.00.434.906 I llm_load_print_meta: ssm_d_inner      = 0
0.00.434.907 I llm_load_print_meta: ssm_d_state      = 0
0.00.434.907 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.434.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.434.908 I llm_load_print_meta: model type       = 2B
0.00.434.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.434.910 I llm_load_print_meta: model params     = 2.51 B
0.00.434.911 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.434.911 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.434.912 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.434.912 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.434.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.434.913 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.434.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.434.915 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.434.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.434.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.434.922 I llm_load_print_meta: max token length = 93
0.00.435.095 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.511.636 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.511.646 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.511.647 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.511.648 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.511.648 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.511.649 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.517.269 I llama_new_context_with_model: n_ctx      = 8192
0.00.517.275 I llama_new_context_with_model: n_batch    = 2048
0.00.517.275 I llama_new_context_with_model: n_ubatch   = 512
0.00.517.276 I llama_new_context_with_model: flash_attn = 0
0.00.517.278 I llama_new_context_with_model: freq_base  = 10000.0
0.00.517.278 I llama_new_context_with_model: freq_scale = 1
0.00.546.070 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.546.112 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.546.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.547.599 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.547.604 I llama_new_context_with_model: graph nodes  = 601
0.00.547.605 I llama_new_context_with_model: graph splits = 1
0.00.547.621 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.161.128 I main: llama threadpool init, n_threads = 4
0.01.161.140 I 
0.01.161.231 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.161.235 I 
0.01.161.403 I sampler seed: 2125011044
0.01.161.414 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.161.423 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.161.423 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.161.424 I 
 increasities, but the resulting offspring exhibit a severe predisposition toward violence and antisocial behavior.

This scenario raises the question: what are the biological and psychological factors that

0.14.606.346 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.07 tokens per second)
0.14.606.361 I llama_perf_context_print:        load time =    1158.27 ms
0.14.606.363 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.606.364 I llama_perf_context_print:        eval time =   13363.06 ms /    32 runs   (  417.60 ms per token,     2.39 tokens per second)
0.14.606.365 I llama_perf_context_print:       total time =   13445.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.611 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.804 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.738 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.005 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.022 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.023 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.024 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.138 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.670 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.675 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.680 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.683 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.684 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.685 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.685 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.192.687 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.695 I llama_model_loader: - type  f32:   37 tensors
0.00.192.699 I llama_model_loader: - type q8_0:  127 tensors
0.00.330.905 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.352.441 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.353.430 I llm_load_vocab: special tokens cache size = 5
0.00.411.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.411.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.411.852 I llm_load_print_meta: arch             = gemma
0.00.411.853 I llm_load_print_meta: vocab type       = SPM
0.00.411.853 I llm_load_print_meta: n_vocab          = 256000
0.00.411.856 I llm_load_print_meta: n_merges         = 0
0.00.411.856 I llm_load_print_meta: vocab_only       = 0
0.00.411.857 I llm_load_print_meta: n_ctx_train      = 8192
0.00.411.857 I llm_load_print_meta: n_embd           = 2048
0.00.411.857 I llm_load_print_meta: n_layer          = 18
0.00.411.919 I llm_load_print_meta: n_head           = 8
0.00.411.925 I llm_load_print_meta: n_head_kv        = 1
0.00.411.926 I llm_load_print_meta: n_rot            = 256
0.00.411.926 I llm_load_print_meta: n_swa            = 0
0.00.411.927 I llm_load_print_meta: n_embd_head_k    = 256
0.00.411.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.411.931 I llm_load_print_meta: n_gqa            = 8
0.00.411.935 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.411.940 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.411.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.411.945 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.411.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.411.946 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.411.946 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.411.952 I llm_load_print_meta: n_ff             = 16384
0.00.411.953 I llm_load_print_meta: n_expert         = 0
0.00.411.954 I llm_load_print_meta: n_expert_used    = 0
0.00.411.954 I llm_load_print_meta: causal attn      = 1
0.00.411.954 I llm_load_print_meta: pooling type     = 0
0.00.411.955 I llm_load_print_meta: rope type        = 2
0.00.411.955 I llm_load_print_meta: rope scaling     = linear
0.00.411.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.411.957 I llm_load_print_meta: freq_scale_train = 1
0.00.411.973 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.411.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.411.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.411.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.411.980 I llm_load_print_meta: ssm_d_state      = 0
0.00.411.981 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.411.981 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.411.981 I llm_load_print_meta: model type       = 2B
0.00.411.982 I llm_load_print_meta: model ftype      = Q8_0
0.00.411.983 I llm_load_print_meta: model params     = 2.51 B
0.00.411.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.411.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.412.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.412.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.412.012 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.412.013 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.412.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.412.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.412.028 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.412.029 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.412.030 I llm_load_print_meta: max token length = 93
0.00.412.209 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.483.046 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.483.054 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.488.530 I llama_new_context_with_model: n_ctx      = 8192
0.00.488.538 I llama_new_context_with_model: n_batch    = 2048
0.00.488.538 I llama_new_context_with_model: n_ubatch   = 512
0.00.488.538 I llama_new_context_with_model: flash_attn = 0
0.00.488.541 I llama_new_context_with_model: freq_base  = 10000.0
0.00.488.542 I llama_new_context_with_model: freq_scale = 1
0.00.517.818 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.517.861 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.517.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.519.396 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.519.402 I llama_new_context_with_model: graph nodes  = 601
0.00.519.402 I llama_new_context_with_model: graph splits = 1
0.00.519.419 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.132.178 I main: llama threadpool init, n_threads = 4
0.01.132.190 I 
0.01.132.285 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.132.289 I 
0.01.132.460 I sampler seed: 862763996
0.01.132.470 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.132.475 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.132.475 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.132.476 I 
 increasities with the same name. [end of text]


0.04.530.029 I llama_perf_sampler_print:    sampling time =      12.38 ms /     9 runs   (    1.38 ms per token,   726.86 tokens per second)
0.04.530.044 I llama_perf_context_print:        load time =    1129.32 ms
0.04.530.046 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.530.047 I llama_perf_context_print:        eval time =    3375.87 ms /     8 runs   (  421.98 ms per token,     2.37 tokens per second)
0.04.530.048 I llama_perf_context_print:       total time =    3397.86 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.834s
user	2m30.766s
sys	0m9.391s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3841 (faac0bae)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200030.52 ms
main:    total time = 200030.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.631 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.764 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.035 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.047 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.051 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.052 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.053 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.054 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.060 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.064 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.617 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.461 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.507 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.191.508 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.191.509 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.191.509 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.191.510 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.191.511 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.191.514 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.191.515 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.191.516 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.191.516 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.191.517 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.191.526 I llama_model_loader: - type  f32:   37 tensors
0.00.191.531 I llama_model_loader: - type q4_K:  108 tensors
0.00.191.533 I llama_model_loader: - type q6_K:   19 tensors
0.00.325.858 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.353.655 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.354.688 I llm_load_vocab: special tokens cache size = 5
0.00.412.901 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.970 I llm_load_print_meta: arch             = gemma
0.00.412.971 I llm_load_print_meta: vocab type       = SPM
0.00.412.973 I llm_load_print_meta: n_vocab          = 256000
0.00.412.975 I llm_load_print_meta: n_merges         = 0
0.00.412.976 I llm_load_print_meta: vocab_only       = 0
0.00.412.976 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.977 I llm_load_print_meta: n_embd           = 2048
0.00.412.977 I llm_load_print_meta: n_layer          = 18
0.00.413.039 I llm_load_print_meta: n_head           = 8
0.00.413.045 I llm_load_print_meta: n_head_kv        = 1
0.00.413.046 I llm_load_print_meta: n_rot            = 256
0.00.413.046 I llm_load_print_meta: n_swa            = 0
0.00.413.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.413.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.413.051 I llm_load_print_meta: n_gqa            = 8
0.00.413.056 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.413.061 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.413.062 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.413.064 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.413.064 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.413.064 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.413.065 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.413.069 I llm_load_print_meta: n_ff             = 16384
0.00.413.070 I llm_load_print_meta: n_expert         = 0
0.00.413.070 I llm_load_print_meta: n_expert_used    = 0
0.00.413.070 I llm_load_print_meta: causal attn      = 1
0.00.413.072 I llm_load_print_meta: pooling type     = 0
0.00.413.073 I llm_load_print_meta: rope type        = 2
0.00.413.073 I llm_load_print_meta: rope scaling     = linear
0.00.413.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.413.075 I llm_load_print_meta: freq_scale_train = 1
0.00.413.086 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.413.087 I llm_load_print_meta: rope_finetuned   = unknown
0.00.413.088 I llm_load_print_meta: ssm_d_conv       = 0
0.00.413.089 I llm_load_print_meta: ssm_d_inner      = 0
0.00.413.089 I llm_load_print_meta: ssm_d_state      = 0
0.00.413.089 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.413.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.413.090 I llm_load_print_meta: model type       = 2B
0.00.413.092 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.413.092 I llm_load_print_meta: model params     = 2.51 B
0.00.413.104 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.413.111 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.413.112 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.413.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.413.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.413.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.413.117 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.413.118 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.413.124 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.413.125 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.413.126 I llm_load_print_meta: max token length = 93
0.00.413.301 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.474.588 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.474.595 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.474.596 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.474.597 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.474.597 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.474.598 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.480.265 I llama_new_context_with_model: n_ctx      = 8192
0.00.480.274 I llama_new_context_with_model: n_batch    = 2048
0.00.480.275 I llama_new_context_with_model: n_ubatch   = 512
0.00.480.275 I llama_new_context_with_model: flash_attn = 0
0.00.480.278 I llama_new_context_with_model: freq_base  = 10000.0
0.00.480.279 I llama_new_context_with_model: freq_scale = 1
0.00.510.074 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.510.119 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.510.232 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.511.630 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.511.636 I llama_new_context_with_model: graph nodes  = 601
0.00.511.637 I llama_new_context_with_model: graph splits = 1
0.00.511.654 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.095.454 I main: llama threadpool init, n_threads = 4
0.01.095.466 I 
0.01.095.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.095.562 I 
0.01.095.734 I sampler seed: 275208039
0.01.095.745 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.095.749 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.095.750 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.095.751 I 
 increamically that you are so excited to share this news.

I am beyond excited to share this news with you all! I have been working tirelessly on this

0.12.042.411 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.36 tokens per second)
0.12.042.413 I llama_perf_context_print:        load time =    1092.60 ms
0.12.042.415 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.042.428 I llama_perf_context_print:        eval time =   10865.40 ms /    32 runs   (  339.54 ms per token,     2.95 tokens per second)
0.12.042.429 I llama_perf_context_print:       total time =   10946.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3841 (faac0bae)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200127.09 ms
main:    total time = 200127.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.666 I build: 3841 (faac0bae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.024.740 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.856 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.857 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.858 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.865 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.866 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.867 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.868 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.586 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.558 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.565 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.566 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.567 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.581 I llama_model_loader: - type  f32:   37 tensors
0.00.192.585 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.586 I llama_model_loader: - type q6_K:   19 tensors
0.00.331.511 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.354.120 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.355.105 I llm_load_vocab: special tokens cache size = 5
0.00.414.576 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.414.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.414.636 I llm_load_print_meta: arch             = gemma
0.00.414.637 I llm_load_print_meta: vocab type       = SPM
0.00.414.638 I llm_load_print_meta: n_vocab          = 256000
0.00.414.641 I llm_load_print_meta: n_merges         = 0
0.00.414.641 I llm_load_print_meta: vocab_only       = 0
0.00.414.642 I llm_load_print_meta: n_ctx_train      = 8192
0.00.414.642 I llm_load_print_meta: n_embd           = 2048
0.00.414.643 I llm_load_print_meta: n_layer          = 18
0.00.414.705 I llm_load_print_meta: n_head           = 8
0.00.414.713 I llm_load_print_meta: n_head_kv        = 1
0.00.414.713 I llm_load_print_meta: n_rot            = 256
0.00.414.714 I llm_load_print_meta: n_swa            = 0
0.00.414.714 I llm_load_print_meta: n_embd_head_k    = 256
0.00.414.714 I llm_load_print_meta: n_embd_head_v    = 256
0.00.414.718 I llm_load_print_meta: n_gqa            = 8
0.00.414.723 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.414.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.414.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.414.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.414.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.414.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.414.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.414.741 I llm_load_print_meta: n_ff             = 16384
0.00.414.741 I llm_load_print_meta: n_expert         = 0
0.00.414.743 I llm_load_print_meta: n_expert_used    = 0
0.00.414.743 I llm_load_print_meta: causal attn      = 1
0.00.414.743 I llm_load_print_meta: pooling type     = 0
0.00.414.744 I llm_load_print_meta: rope type        = 2
0.00.414.744 I llm_load_print_meta: rope scaling     = linear
0.00.414.745 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.414.746 I llm_load_print_meta: freq_scale_train = 1
0.00.414.746 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.414.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.414.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.414.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.414.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.414.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.414.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.414.761 I llm_load_print_meta: model type       = 2B
0.00.414.762 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.414.763 I llm_load_print_meta: model params     = 2.51 B
0.00.414.764 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.414.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.414.765 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.414.765 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.414.766 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.414.766 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.414.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.414.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.414.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.414.775 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.414.776 I llm_load_print_meta: max token length = 93
0.00.414.951 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.472.624 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.478.150 I llama_new_context_with_model: n_ctx      = 8192
0.00.478.157 I llama_new_context_with_model: n_batch    = 2048
0.00.478.158 I llama_new_context_with_model: n_ubatch   = 512
0.00.478.158 I llama_new_context_with_model: flash_attn = 0
0.00.478.161 I llama_new_context_with_model: freq_base  = 10000.0
0.00.478.162 I llama_new_context_with_model: freq_scale = 1
0.00.507.584 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.507.626 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.507.737 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.509.149 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.509.156 I llama_new_context_with_model: graph nodes  = 601
0.00.509.157 I llama_new_context_with_model: graph splits = 1
0.00.509.174 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.092.024 I main: llama threadpool init, n_threads = 4
0.01.092.037 I 
0.01.092.127 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.092.131 I 
0.01.092.297 I sampler seed: 2794723642
0.01.092.308 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.092.312 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.092.313 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.092.313 I 
 encompassing an extensive array of creative content, from prose to photography, animation, and video games.

**Capabilities:**

* **Content Generation:**
    

0.12.122.081 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.41 tokens per second)
0.12.122.085 I llama_perf_context_print:        load time =    1089.12 ms
0.12.122.086 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.122.103 I llama_perf_context_print:        eval time =   10948.50 ms /    32 runs   (  342.14 ms per token,     2.92 tokens per second)
0.12.122.104 I llama_perf_context_print:       total time =   11030.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.141s
user	50m17.250s
sys	0m6.342s
