+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.710 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.912 I main: llama backend init
0.00.000.920 I main: load the model and apply lora adapter, if any
0.00.023.665 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.680 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.780 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.805 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.807 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.809 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.810 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.842 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.845 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.847 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.848 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.849 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.474 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.489 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.495 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.496 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.498 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.499 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.500 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.508 I llama_model_loader: - type  f32:   37 tensors
0.00.271.511 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.153 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.194 I llm_load_vocab: special tokens cache size = 5
0.00.660.326 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.660.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.660.402 I llm_load_print_meta: arch             = gemma
0.00.660.403 I llm_load_print_meta: vocab type       = SPM
0.00.660.404 I llm_load_print_meta: n_vocab          = 256000
0.00.660.406 I llm_load_print_meta: n_merges         = 0
0.00.660.407 I llm_load_print_meta: vocab_only       = 0
0.00.660.407 I llm_load_print_meta: n_ctx_train      = 8192
0.00.660.408 I llm_load_print_meta: n_embd           = 2048
0.00.660.408 I llm_load_print_meta: n_layer          = 18
0.00.660.471 I llm_load_print_meta: n_head           = 8
0.00.660.478 I llm_load_print_meta: n_head_kv        = 1
0.00.660.478 I llm_load_print_meta: n_rot            = 256
0.00.660.479 I llm_load_print_meta: n_swa            = 0
0.00.660.479 I llm_load_print_meta: n_embd_head_k    = 256
0.00.660.479 I llm_load_print_meta: n_embd_head_v    = 256
0.00.660.498 I llm_load_print_meta: n_gqa            = 8
0.00.660.503 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.660.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.660.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.660.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.660.511 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.660.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.660.512 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.660.522 I llm_load_print_meta: n_ff             = 16384
0.00.660.523 I llm_load_print_meta: n_expert         = 0
0.00.660.540 I llm_load_print_meta: n_expert_used    = 0
0.00.660.541 I llm_load_print_meta: causal attn      = 1
0.00.660.541 I llm_load_print_meta: pooling type     = 0
0.00.660.542 I llm_load_print_meta: rope type        = 2
0.00.660.542 I llm_load_print_meta: rope scaling     = linear
0.00.660.544 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.660.544 I llm_load_print_meta: freq_scale_train = 1
0.00.660.545 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.660.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.660.546 I llm_load_print_meta: ssm_d_conv       = 0
0.00.660.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.660.547 I llm_load_print_meta: ssm_d_state      = 0
0.00.660.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.660.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.660.549 I llm_load_print_meta: model type       = 2B
0.00.660.550 I llm_load_print_meta: model ftype      = Q8_0
0.00.660.551 I llm_load_print_meta: model params     = 2.51 B
0.00.660.561 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.660.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.660.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.660.563 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.660.564 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.660.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.660.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.660.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.660.576 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.660.578 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.660.579 I llm_load_print_meta: max token length = 93
0.00.760.544 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.760.553 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.760.554 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.760.555 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.760.556 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.760.556 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.766.505 I llama_new_context_with_model: n_seq_max     = 1
0.00.766.512 I llama_new_context_with_model: n_ctx         = 4096
0.00.766.513 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.766.513 I llama_new_context_with_model: n_batch       = 2048
0.00.766.514 I llama_new_context_with_model: n_ubatch      = 512
0.00.766.515 I llama_new_context_with_model: flash_attn    = 0
0.00.766.519 I llama_new_context_with_model: freq_base     = 10000.0
0.00.766.520 I llama_new_context_with_model: freq_scale    = 1
0.00.766.520 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.781.748 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.781.790 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.781.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.784.522 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.784.526 I llama_new_context_with_model: graph nodes  = 601
0.00.784.527 I llama_new_context_with_model: graph splits = 1
0.00.784.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.393.487 I main: llama threadpool init, n_threads = 4
0.01.393.502 I 
0.01.393.608 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.393.612 I 
0.01.393.843 I sampler seed: 1057309731
0.01.393.856 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.393.862 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.393.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.393.866 I 
 increasities. [end of text]


0.03.087.900 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.44 tokens per second)
0.03.087.903 I llama_perf_context_print:        load time =    1392.46 ms
0.03.087.904 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.087.922 I llama_perf_context_print:        eval time =    1681.70 ms /     4 runs   (  420.43 ms per token,     2.38 tokens per second)
0.03.087.923 I llama_perf_context_print:       total time =    1694.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.929 I main: llama backend init
0.00.000.938 I main: load the model and apply lora adapter, if any
0.00.024.028 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.139 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.156 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.160 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.169 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.170 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.171 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.172 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.174 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.190 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.192 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.193 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.194 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.375 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.237 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.396 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.416 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.417 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.421 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.423 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.425 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.426 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.436 I llama_model_loader: - type  f32:   37 tensors
0.00.271.439 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.984 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.205 I llm_load_vocab: special tokens cache size = 5
0.00.646.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.825 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.829 I llm_load_print_meta: arch             = gemma
0.00.646.830 I llm_load_print_meta: vocab type       = SPM
0.00.646.831 I llm_load_print_meta: n_vocab          = 256000
0.00.646.834 I llm_load_print_meta: n_merges         = 0
0.00.646.834 I llm_load_print_meta: vocab_only       = 0
0.00.646.835 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.835 I llm_load_print_meta: n_embd           = 2048
0.00.646.835 I llm_load_print_meta: n_layer          = 18
0.00.646.906 I llm_load_print_meta: n_head           = 8
0.00.646.916 I llm_load_print_meta: n_head_kv        = 1
0.00.646.918 I llm_load_print_meta: n_rot            = 256
0.00.646.918 I llm_load_print_meta: n_swa            = 0
0.00.646.919 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.919 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.924 I llm_load_print_meta: n_gqa            = 8
0.00.646.928 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.933 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.937 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.938 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.943 I llm_load_print_meta: n_ff             = 16384
0.00.646.944 I llm_load_print_meta: n_expert         = 0
0.00.646.944 I llm_load_print_meta: n_expert_used    = 0
0.00.646.945 I llm_load_print_meta: causal attn      = 1
0.00.646.961 I llm_load_print_meta: pooling type     = 0
0.00.646.969 I llm_load_print_meta: rope type        = 2
0.00.646.970 I llm_load_print_meta: rope scaling     = linear
0.00.646.978 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.981 I llm_load_print_meta: freq_scale_train = 1
0.00.646.981 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.982 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.982 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.982 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.983 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.983 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.984 I llm_load_print_meta: model type       = 2B
0.00.646.985 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.986 I llm_load_print_meta: model params     = 2.51 B
0.00.646.996 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.999 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.000 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.019 I llm_load_print_meta: max token length = 93
0.00.741.296 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.747.417 I llama_new_context_with_model: n_seq_max     = 1
0.00.747.426 I llama_new_context_with_model: n_ctx         = 4096
0.00.747.427 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.747.427 I llama_new_context_with_model: n_batch       = 2048
0.00.747.427 I llama_new_context_with_model: n_ubatch      = 512
0.00.747.428 I llama_new_context_with_model: flash_attn    = 0
0.00.747.432 I llama_new_context_with_model: freq_base     = 10000.0
0.00.747.433 I llama_new_context_with_model: freq_scale    = 1
0.00.747.434 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.763.574 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.763.621 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.763.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.766.313 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.766.318 I llama_new_context_with_model: graph nodes  = 601
0.00.766.318 I llama_new_context_with_model: graph splits = 1
0.00.766.344 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.381.228 I main: llama threadpool init, n_threads = 4
0.01.381.244 I 
0.01.381.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.381.357 I 
0.01.381.598 I sampler seed: 56512208
0.01.381.611 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.381.621 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.381.621 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.381.622 I 
 increasities in the 19th century, women were confined to the domestic sphere and expected to conform to feminine ideals. This led to a lack of opportunities

0.15.071.639 I llama_perf_sampler_print:    sampling time =      49.81 ms /    33 runs   (    1.51 ms per token,   662.53 tokens per second)
0.15.071.643 I llama_perf_context_print:        load time =    1380.17 ms
0.15.071.657 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.071.659 I llama_perf_context_print:        eval time =   13599.30 ms /    32 runs   (  424.98 ms per token,     2.35 tokens per second)
0.15.071.660 I llama_perf_context_print:       total time =   13690.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.000.913 I main: load the model and apply lora adapter, if any
0.00.023.930 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.039 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.053 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.056 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.065 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.067 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.068 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.081 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.089 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.682 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.841 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.852 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.853 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.854 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.865 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.866 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.886 I llama_model_loader: - type  f32:   37 tensors
0.00.270.890 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.946 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.462 I llm_load_vocab: special tokens cache size = 5
0.00.646.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.191 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.192 I llm_load_print_meta: arch             = gemma
0.00.646.192 I llm_load_print_meta: vocab type       = SPM
0.00.646.194 I llm_load_print_meta: n_vocab          = 256000
0.00.646.196 I llm_load_print_meta: n_merges         = 0
0.00.646.197 I llm_load_print_meta: vocab_only       = 0
0.00.646.197 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.198 I llm_load_print_meta: n_embd           = 2048
0.00.646.198 I llm_load_print_meta: n_layer          = 18
0.00.646.265 I llm_load_print_meta: n_head           = 8
0.00.646.272 I llm_load_print_meta: n_head_kv        = 1
0.00.646.273 I llm_load_print_meta: n_rot            = 256
0.00.646.273 I llm_load_print_meta: n_swa            = 0
0.00.646.274 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.274 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.279 I llm_load_print_meta: n_gqa            = 8
0.00.646.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.304 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.305 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.306 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.308 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.330 I llm_load_print_meta: n_ff             = 16384
0.00.646.331 I llm_load_print_meta: n_expert         = 0
0.00.646.332 I llm_load_print_meta: n_expert_used    = 0
0.00.646.332 I llm_load_print_meta: causal attn      = 1
0.00.646.336 I llm_load_print_meta: pooling type     = 0
0.00.646.341 I llm_load_print_meta: rope type        = 2
0.00.646.341 I llm_load_print_meta: rope scaling     = linear
0.00.646.343 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.343 I llm_load_print_meta: freq_scale_train = 1
0.00.646.353 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.363 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.363 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.364 I llm_load_print_meta: model type       = 2B
0.00.646.367 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.367 I llm_load_print_meta: model params     = 2.51 B
0.00.646.377 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.377 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.378 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.386 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.390 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.390 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.391 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.407 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.407 I llm_load_print_meta: max token length = 93
0.00.721.510 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.721.522 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.721.523 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.721.524 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.721.525 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.721.526 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.727.590 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.599 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.599 I llama_new_context_with_model: n_batch       = 2048
0.00.727.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.601 I llama_new_context_with_model: flash_attn    = 0
0.00.727.604 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.605 I llama_new_context_with_model: freq_scale    = 1
0.00.727.605 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.512 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.555 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.194 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.198 I llama_new_context_with_model: graph nodes  = 601
0.00.746.198 I llama_new_context_with_model: graph splits = 1
0.00.746.222 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.013 I main: llama threadpool init, n_threads = 4
0.01.354.031 I 
0.01.354.139 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.143 I 
0.01.354.381 I sampler seed: 3201126053
0.01.354.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.400 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.404 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.404 I 
 increasities! 😜

I cannot answer this question as it contains sexually suggestive and inappropriate content. My purpose is to assist with questions and tasks that comply with

0.14.799.205 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.38 tokens per second)
0.14.799.208 I llama_perf_context_print:        load time =    1353.00 ms
0.14.799.222 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.799.224 I llama_perf_context_print:        eval time =   13354.62 ms /    32 runs   (  417.33 ms per token,     2.40 tokens per second)
0.14.799.225 I llama_perf_context_print:       total time =   13445.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.906 I main: load the model and apply lora adapter, if any
0.00.023.944 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.956 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.075 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.103 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.118 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.440 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.450 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.452 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.453 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.454 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.455 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.456 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.463 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.464 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.475 I llama_model_loader: - type  f32:   37 tensors
0.00.271.477 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.844 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.761 I llm_load_vocab: special tokens cache size = 5
0.00.651.056 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.651.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.651.130 I llm_load_print_meta: arch             = gemma
0.00.651.130 I llm_load_print_meta: vocab type       = SPM
0.00.651.131 I llm_load_print_meta: n_vocab          = 256000
0.00.651.133 I llm_load_print_meta: n_merges         = 0
0.00.651.134 I llm_load_print_meta: vocab_only       = 0
0.00.651.134 I llm_load_print_meta: n_ctx_train      = 8192
0.00.651.134 I llm_load_print_meta: n_embd           = 2048
0.00.651.135 I llm_load_print_meta: n_layer          = 18
0.00.651.200 I llm_load_print_meta: n_head           = 8
0.00.651.207 I llm_load_print_meta: n_head_kv        = 1
0.00.651.208 I llm_load_print_meta: n_rot            = 256
0.00.651.208 I llm_load_print_meta: n_swa            = 0
0.00.651.209 I llm_load_print_meta: n_embd_head_k    = 256
0.00.651.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.651.214 I llm_load_print_meta: n_gqa            = 8
0.00.651.219 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.651.224 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.651.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.651.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.651.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.651.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.651.227 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.651.232 I llm_load_print_meta: n_ff             = 16384
0.00.651.233 I llm_load_print_meta: n_expert         = 0
0.00.651.233 I llm_load_print_meta: n_expert_used    = 0
0.00.651.233 I llm_load_print_meta: causal attn      = 1
0.00.651.234 I llm_load_print_meta: pooling type     = 0
0.00.651.234 I llm_load_print_meta: rope type        = 2
0.00.651.235 I llm_load_print_meta: rope scaling     = linear
0.00.651.236 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.651.236 I llm_load_print_meta: freq_scale_train = 1
0.00.651.237 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.651.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.651.237 I llm_load_print_meta: ssm_d_conv       = 0
0.00.651.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.651.238 I llm_load_print_meta: ssm_d_state      = 0
0.00.651.238 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.651.238 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.651.239 I llm_load_print_meta: model type       = 2B
0.00.651.240 I llm_load_print_meta: model ftype      = Q8_0
0.00.651.241 I llm_load_print_meta: model params     = 2.51 B
0.00.651.251 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.651.252 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.651.252 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.651.253 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.651.253 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.651.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.651.254 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.651.255 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.651.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.651.263 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.651.263 I llm_load_print_meta: max token length = 93
0.00.724.084 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.724.095 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.730.069 I llama_new_context_with_model: n_seq_max     = 1
0.00.730.076 I llama_new_context_with_model: n_ctx         = 4096
0.00.730.077 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.730.077 I llama_new_context_with_model: n_batch       = 2048
0.00.730.078 I llama_new_context_with_model: n_ubatch      = 512
0.00.730.078 I llama_new_context_with_model: flash_attn    = 0
0.00.730.082 I llama_new_context_with_model: freq_base     = 10000.0
0.00.730.083 I llama_new_context_with_model: freq_scale    = 1
0.00.730.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.746.007 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.746.052 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.746.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.773 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.748.777 I llama_new_context_with_model: graph nodes  = 601
0.00.748.778 I llama_new_context_with_model: graph splits = 1
0.00.748.804 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.717 I main: llama threadpool init, n_threads = 4
0.01.357.734 I 
0.01.357.839 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.843 I 
0.01.358.072 I sampler seed: 4158538323
0.01.358.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.090 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.093 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.094 I 
 increasities, and a few other things.

I am unable to answer this question as it contains sexually suggestive content. I am designed to provide safe and appropriate

0.14.881.593 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.29 tokens per second)
0.14.881.596 I llama_perf_context_print:        load time =    1356.70 ms
0.14.881.598 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.881.599 I llama_perf_context_print:        eval time =   13433.60 ms /    32 runs   (  419.80 ms per token,     2.38 tokens per second)
0.14.881.618 I llama_perf_context_print:       total time =   13523.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.717s
user	3m2.324s
sys	0m9.620s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4137 (9fe0fb06)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186375.92 ms
main:    total time = 186375.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.694 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.933 I main: load the model and apply lora adapter, if any
0.00.023.656 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.668 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.771 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.783 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.792 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.797 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.798 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.799 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.808 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.810 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.819 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.821 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.825 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.782 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.940 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.952 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.955 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.956 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.964 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.975 I llama_model_loader: - type  f32:   37 tensors
0.00.269.977 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.978 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.233 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.021 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.236 I llm_load_vocab: special tokens cache size = 5
0.00.640.723 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.640.799 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.640.803 I llm_load_print_meta: arch             = gemma
0.00.640.804 I llm_load_print_meta: vocab type       = SPM
0.00.640.805 I llm_load_print_meta: n_vocab          = 256000
0.00.640.807 I llm_load_print_meta: n_merges         = 0
0.00.640.808 I llm_load_print_meta: vocab_only       = 0
0.00.640.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.640.809 I llm_load_print_meta: n_embd           = 2048
0.00.640.809 I llm_load_print_meta: n_layer          = 18
0.00.640.874 I llm_load_print_meta: n_head           = 8
0.00.640.884 I llm_load_print_meta: n_head_kv        = 1
0.00.640.885 I llm_load_print_meta: n_rot            = 256
0.00.640.885 I llm_load_print_meta: n_swa            = 0
0.00.640.886 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.887 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.891 I llm_load_print_meta: n_gqa            = 8
0.00.640.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.906 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.908 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.909 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.914 I llm_load_print_meta: n_ff             = 16384
0.00.640.915 I llm_load_print_meta: n_expert         = 0
0.00.640.915 I llm_load_print_meta: n_expert_used    = 0
0.00.640.916 I llm_load_print_meta: causal attn      = 1
0.00.640.916 I llm_load_print_meta: pooling type     = 0
0.00.640.916 I llm_load_print_meta: rope type        = 2
0.00.640.917 I llm_load_print_meta: rope scaling     = linear
0.00.640.918 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.919 I llm_load_print_meta: freq_scale_train = 1
0.00.640.919 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.920 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.920 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.923 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.923 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.923 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.924 I llm_load_print_meta: model type       = 2B
0.00.640.926 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.640.926 I llm_load_print_meta: model params     = 2.51 B
0.00.640.936 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.640.936 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.940 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.941 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.947 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.961 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.962 I llm_load_print_meta: max token length = 93
0.00.702.088 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.702.098 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.702.099 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.702.100 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.702.101 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.702.101 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.708.022 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.031 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.032 I llama_new_context_with_model: n_batch       = 2048
0.00.708.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.033 I llama_new_context_with_model: flash_attn    = 0
0.00.708.036 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.037 I llama_new_context_with_model: freq_scale    = 1
0.00.708.038 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.142 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.184 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.311 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.953 I llama_new_context_with_model: graph nodes  = 601
0.00.726.954 I llama_new_context_with_model: graph splits = 1
0.00.726.978 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.772 I main: llama threadpool init, n_threads = 4
0.01.311.788 I 
0.01.311.895 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.895 I 
0.01.312.124 I sampler seed: 3585610020
0.01.312.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.145 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.312.145 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.146 I 
 squaRED, a young woman with boundless curiosity and a thirst for knowledge, embarks on a journey through the bustling markets of Marrakech.

**Scene:** A

0.12.502.358 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.79 tokens per second)
0.12.502.374 I llama_perf_context_print:        load time =    1310.73 ms
0.12.502.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.502.377 I llama_perf_context_print:        eval time =   11099.20 ms /    32 runs   (  346.85 ms per token,     2.88 tokens per second)
0.12.502.378 I llama_perf_context_print:       total time =   11190.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4137 (9fe0fb06)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186318.22 ms
main:    total time = 186318.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.726 I build: 4137 (9fe0fb06) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.931 I main: llama backend init
0.00.000.950 I main: load the model and apply lora adapter, if any
0.00.023.631 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.760 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.771 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.772 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.774 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.775 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.776 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.778 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.786 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.787 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.801 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.803 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.623 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.841 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.847 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.863 I llama_model_loader: - type  f32:   37 tensors
0.00.274.865 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.866 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.274 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.059 I llm_load_vocab: special tokens cache size = 5
0.00.659.375 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.659.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.659.452 I llm_load_print_meta: arch             = gemma
0.00.659.453 I llm_load_print_meta: vocab type       = SPM
0.00.659.453 I llm_load_print_meta: n_vocab          = 256000
0.00.659.456 I llm_load_print_meta: n_merges         = 0
0.00.659.457 I llm_load_print_meta: vocab_only       = 0
0.00.659.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.659.457 I llm_load_print_meta: n_embd           = 2048
0.00.659.458 I llm_load_print_meta: n_layer          = 18
0.00.659.521 I llm_load_print_meta: n_head           = 8
0.00.659.528 I llm_load_print_meta: n_head_kv        = 1
0.00.659.529 I llm_load_print_meta: n_rot            = 256
0.00.659.529 I llm_load_print_meta: n_swa            = 0
0.00.659.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.659.530 I llm_load_print_meta: n_embd_head_v    = 256
0.00.659.535 I llm_load_print_meta: n_gqa            = 8
0.00.659.539 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.659.544 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.659.545 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.659.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.659.548 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.659.548 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.659.548 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.659.553 I llm_load_print_meta: n_ff             = 16384
0.00.659.554 I llm_load_print_meta: n_expert         = 0
0.00.659.554 I llm_load_print_meta: n_expert_used    = 0
0.00.659.555 I llm_load_print_meta: causal attn      = 1
0.00.659.555 I llm_load_print_meta: pooling type     = 0
0.00.659.556 I llm_load_print_meta: rope type        = 2
0.00.659.557 I llm_load_print_meta: rope scaling     = linear
0.00.659.558 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.659.559 I llm_load_print_meta: freq_scale_train = 1
0.00.659.560 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.659.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.659.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.659.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.659.563 I llm_load_print_meta: ssm_d_state      = 0
0.00.659.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.659.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.659.564 I llm_load_print_meta: model type       = 2B
0.00.659.565 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.659.566 I llm_load_print_meta: model params     = 2.51 B
0.00.659.577 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.659.577 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.659.579 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.659.579 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.659.580 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.659.581 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.659.581 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.659.582 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.659.590 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.659.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.659.592 I llm_load_print_meta: max token length = 93
0.00.715.576 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.721.347 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.355 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.356 I llama_new_context_with_model: n_batch       = 2048
0.00.721.356 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.357 I llama_new_context_with_model: flash_attn    = 0
0.00.721.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.361 I llama_new_context_with_model: freq_scale    = 1
0.00.721.362 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.225 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.271 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.406 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.996 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.000 I llama_new_context_with_model: graph nodes  = 601
0.00.740.001 I llama_new_context_with_model: graph splits = 1
0.00.740.023 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.296 I main: llama threadpool init, n_threads = 4
0.01.327.312 I 
0.01.327.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.427 I 
0.01.327.662 I sampler seed: 928315912
0.01.327.674 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.327.685 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.685 I 
 seconally to the following questions:

**a) What is the definition of an electrochemical cell?**
**b) Explain the basic principle of an electrochemical

0.12.475.399 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.54 tokens per second)
0.12.475.402 I llama_perf_context_print:        load time =    1326.23 ms
0.12.475.403 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.475.405 I llama_perf_context_print:        eval time =   11058.54 ms /    32 runs   (  345.58 ms per token,     2.89 tokens per second)
0.12.475.405 I llama_perf_context_print:       total time =   11148.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.644s
user	46m57.608s
sys	0m6.703s
