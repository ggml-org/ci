+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.176 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.473 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.496 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.497 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.498 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.499 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.500 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.512 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.513 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.561 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.440 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.860 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.861 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.863 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.866 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.869 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.870 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.872 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.873 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.882 I llama_model_loader: - type  f32:   37 tensors
0.00.267.887 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.789 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.443 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.414 I llm_load_vocab: special tokens cache size = 5
0.00.633.974 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.049 I llm_load_print_meta: arch             = gemma
0.00.634.050 I llm_load_print_meta: vocab type       = SPM
0.00.634.050 I llm_load_print_meta: n_vocab          = 256000
0.00.634.053 I llm_load_print_meta: n_merges         = 0
0.00.634.053 I llm_load_print_meta: vocab_only       = 0
0.00.634.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.054 I llm_load_print_meta: n_embd           = 2048
0.00.634.054 I llm_load_print_meta: n_layer          = 18
0.00.634.119 I llm_load_print_meta: n_head           = 8
0.00.634.127 I llm_load_print_meta: n_head_kv        = 1
0.00.634.127 I llm_load_print_meta: n_rot            = 256
0.00.634.128 I llm_load_print_meta: n_swa            = 0
0.00.634.128 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.144 I llm_load_print_meta: n_gqa            = 8
0.00.634.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.157 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.160 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.161 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.161 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.166 I llm_load_print_meta: n_ff             = 16384
0.00.634.167 I llm_load_print_meta: n_expert         = 0
0.00.634.178 I llm_load_print_meta: n_expert_used    = 0
0.00.634.180 I llm_load_print_meta: causal attn      = 1
0.00.634.180 I llm_load_print_meta: pooling type     = 0
0.00.634.181 I llm_load_print_meta: rope type        = 2
0.00.634.181 I llm_load_print_meta: rope scaling     = linear
0.00.634.182 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.183 I llm_load_print_meta: freq_scale_train = 1
0.00.634.184 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.185 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.185 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.185 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.187 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.188 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.188 I llm_load_print_meta: model type       = 2B
0.00.634.190 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.191 I llm_load_print_meta: model params     = 2.51 B
0.00.634.192 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.634.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.193 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.194 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.194 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.201 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.203 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.203 I llm_load_print_meta: max token length = 93
0.00.634.373 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.731.909 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.731.922 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.731.923 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.731.923 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.731.924 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.731.924 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.737.777 I llama_new_context_with_model: n_ctx      = 8192
0.00.737.785 I llama_new_context_with_model: n_batch    = 2048
0.00.737.785 I llama_new_context_with_model: n_ubatch   = 512
0.00.737.786 I llama_new_context_with_model: flash_attn = 0
0.00.737.789 I llama_new_context_with_model: freq_base  = 10000.0
0.00.737.790 I llama_new_context_with_model: freq_scale = 1
0.00.766.549 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.766.594 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.766.710 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.144 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.768.149 I llama_new_context_with_model: graph nodes  = 601
0.00.768.150 I llama_new_context_with_model: graph splits = 1
0.00.768.165 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.762 I main: llama threadpool init, n_threads = 4
0.01.377.775 I 
0.01.377.880 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.880 I 
0.01.378.068 I sampler seed: 391592577
0.01.378.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.091 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.378.092 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.094 I 
 increasities to the narrator and offer a reward.

I am unable to provide sexually suggestive or inappropriate content. [end of text]


0.11.030.778 I llama_perf_sampler_print:    sampling time =      35.52 ms /    24 runs   (    1.48 ms per token,   675.68 tokens per second)
0.11.030.799 I llama_perf_context_print:        load time =    1374.84 ms
0.11.030.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.030.803 I llama_perf_context_print:        eval time =    9591.97 ms /    23 runs   (  417.04 ms per token,     2.40 tokens per second)
0.11.030.804 I llama_perf_context_print:       total time =    9653.02 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.025.027 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.150 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.160 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.162 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.171 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.172 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.174 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.175 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.235 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.895 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.225 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.226 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.228 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.230 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.234 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.236 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.237 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.238 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.239 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.247 I llama_model_loader: - type  f32:   37 tensors
0.00.267.251 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.500 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.091 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.040 I llm_load_vocab: special tokens cache size = 5
0.00.612.973 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.048 I llm_load_print_meta: arch             = gemma
0.00.613.049 I llm_load_print_meta: vocab type       = SPM
0.00.613.050 I llm_load_print_meta: n_vocab          = 256000
0.00.613.053 I llm_load_print_meta: n_merges         = 0
0.00.613.053 I llm_load_print_meta: vocab_only       = 0
0.00.613.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.054 I llm_load_print_meta: n_embd           = 2048
0.00.613.054 I llm_load_print_meta: n_layer          = 18
0.00.613.119 I llm_load_print_meta: n_head           = 8
0.00.613.127 I llm_load_print_meta: n_head_kv        = 1
0.00.613.127 I llm_load_print_meta: n_rot            = 256
0.00.613.128 I llm_load_print_meta: n_swa            = 0
0.00.613.128 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.129 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.133 I llm_load_print_meta: n_gqa            = 8
0.00.613.138 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.143 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.144 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.146 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.146 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.146 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.147 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.152 I llm_load_print_meta: n_ff             = 16384
0.00.613.152 I llm_load_print_meta: n_expert         = 0
0.00.613.154 I llm_load_print_meta: n_expert_used    = 0
0.00.613.154 I llm_load_print_meta: causal attn      = 1
0.00.613.155 I llm_load_print_meta: pooling type     = 0
0.00.613.160 I llm_load_print_meta: rope type        = 2
0.00.613.160 I llm_load_print_meta: rope scaling     = linear
0.00.613.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.162 I llm_load_print_meta: freq_scale_train = 1
0.00.613.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.196 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.204 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.204 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.208 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.209 I llm_load_print_meta: model type       = 2B
0.00.613.210 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.211 I llm_load_print_meta: model params     = 2.51 B
0.00.613.212 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.213 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.213 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.220 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.221 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.222 I llm_load_print_meta: max token length = 93
0.00.613.393 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.044 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.714.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.791 I llama_new_context_with_model: n_batch    = 2048
0.00.714.792 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.792 I llama_new_context_with_model: flash_attn = 0
0.00.714.795 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.796 I llama_new_context_with_model: freq_scale = 1
0.00.744.846 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.891 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.393 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.398 I llama_new_context_with_model: graph nodes  = 601
0.00.746.399 I llama_new_context_with_model: graph splits = 1
0.00.746.413 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.811 I main: llama threadpool init, n_threads = 4
0.01.357.824 I 
0.01.357.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.930 I 
0.01.358.111 I sampler seed: 2029969226
0.01.358.124 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.131 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.358.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.135 I 
 increasities with the protagonist, resulting in escalating tensions and a climax where the protagonist must choose between defending himself and surrendering to the intruder.

This scenario presents several

0.14.970.093 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.27 tokens per second)
0.14.970.097 I llama_perf_context_print:        load time =    1354.90 ms
0.14.970.098 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.970.100 I llama_perf_context_print:        eval time =   13529.91 ms /    32 runs   (  422.81 ms per token,     2.37 tokens per second)
0.14.970.101 I llama_perf_context_print:       total time =   13612.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.975 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.292 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.297 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.298 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.299 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.300 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.309 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.313 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.314 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.437 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.086 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.378 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.389 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.390 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.391 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.392 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.393 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.394 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.397 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.398 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.399 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.400 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.418 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.428 I llama_model_loader: - type  f32:   37 tensors
0.00.268.433 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.481 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.547 I llm_load_vocab: special tokens cache size = 5
0.00.650.757 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.650.832 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.650.833 I llm_load_print_meta: arch             = gemma
0.00.650.833 I llm_load_print_meta: vocab type       = SPM
0.00.650.834 I llm_load_print_meta: n_vocab          = 256000
0.00.650.837 I llm_load_print_meta: n_merges         = 0
0.00.650.837 I llm_load_print_meta: vocab_only       = 0
0.00.650.838 I llm_load_print_meta: n_ctx_train      = 8192
0.00.650.838 I llm_load_print_meta: n_embd           = 2048
0.00.650.839 I llm_load_print_meta: n_layer          = 18
0.00.650.919 I llm_load_print_meta: n_head           = 8
0.00.650.927 I llm_load_print_meta: n_head_kv        = 1
0.00.650.927 I llm_load_print_meta: n_rot            = 256
0.00.650.928 I llm_load_print_meta: n_swa            = 0
0.00.650.928 I llm_load_print_meta: n_embd_head_k    = 256
0.00.650.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.650.933 I llm_load_print_meta: n_gqa            = 8
0.00.650.938 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.650.943 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.650.945 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.650.946 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.650.963 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.650.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.650.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.650.974 I llm_load_print_meta: n_ff             = 16384
0.00.650.975 I llm_load_print_meta: n_expert         = 0
0.00.650.978 I llm_load_print_meta: n_expert_used    = 0
0.00.650.978 I llm_load_print_meta: causal attn      = 1
0.00.650.979 I llm_load_print_meta: pooling type     = 0
0.00.650.979 I llm_load_print_meta: rope type        = 2
0.00.650.980 I llm_load_print_meta: rope scaling     = linear
0.00.650.981 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.650.982 I llm_load_print_meta: freq_scale_train = 1
0.00.650.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.650.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.650.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.650.983 I llm_load_print_meta: ssm_d_inner      = 0
0.00.650.983 I llm_load_print_meta: ssm_d_state      = 0
0.00.650.984 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.650.984 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.650.985 I llm_load_print_meta: model type       = 2B
0.00.650.986 I llm_load_print_meta: model ftype      = Q8_0
0.00.650.987 I llm_load_print_meta: model params     = 2.51 B
0.00.650.988 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.650.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.650.989 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.650.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.650.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.650.991 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.650.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.650.992 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.650.997 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.650.999 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.651.000 I llm_load_print_meta: max token length = 93
0.00.651.171 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.727.652 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.727.667 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.727.668 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.727.669 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.727.669 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.727.670 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.734.414 I llama_new_context_with_model: n_ctx      = 8192
0.00.734.422 I llama_new_context_with_model: n_batch    = 2048
0.00.734.423 I llama_new_context_with_model: n_ubatch   = 512
0.00.734.424 I llama_new_context_with_model: flash_attn = 0
0.00.734.428 I llama_new_context_with_model: freq_base  = 10000.0
0.00.734.429 I llama_new_context_with_model: freq_scale = 1
0.00.765.791 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.765.834 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.765.962 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.511 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.767.516 I llama_new_context_with_model: graph nodes  = 601
0.00.767.517 I llama_new_context_with_model: graph splits = 1
0.00.767.533 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.223 I main: llama threadpool init, n_threads = 4
0.01.378.236 I 
0.01.378.343 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.348 I 
0.01.378.526 I sampler seed: 3150266165
0.01.378.538 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.546 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.378.546 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.547 I 
 maneuvled a beautiful woman with cascading golden hair.

The woman's eyes sparkled like sapphires, and her smile was radiant as the sun.

0.14.764.138 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.18 tokens per second)
0.14.764.153 I llama_perf_context_print:        load time =    1375.32 ms
0.14.764.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.764.157 I llama_perf_context_print:        eval time =   13302.40 ms /    32 runs   (  415.70 ms per token,     2.41 tokens per second)
0.14.764.158 I llama_perf_context_print:       total time =   13385.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.002.869 I main: load the model and apply lora adapter, if any
0.00.025.130 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.480 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.493 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.504 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.505 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.510 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.525 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.529 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.531 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.368 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.397 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.824 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.833 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.834 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.836 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.836 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.839 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.849 I llama_model_loader: - type  f32:   37 tensors
0.00.267.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.470.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.540.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.541.816 I llm_load_vocab: special tokens cache size = 5
0.00.650.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.650.990 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.650.991 I llm_load_print_meta: arch             = gemma
0.00.650.992 I llm_load_print_meta: vocab type       = SPM
0.00.650.993 I llm_load_print_meta: n_vocab          = 256000
0.00.650.995 I llm_load_print_meta: n_merges         = 0
0.00.650.995 I llm_load_print_meta: vocab_only       = 0
0.00.650.996 I llm_load_print_meta: n_ctx_train      = 8192
0.00.650.996 I llm_load_print_meta: n_embd           = 2048
0.00.650.997 I llm_load_print_meta: n_layer          = 18
0.00.651.061 I llm_load_print_meta: n_head           = 8
0.00.651.068 I llm_load_print_meta: n_head_kv        = 1
0.00.651.069 I llm_load_print_meta: n_rot            = 256
0.00.651.069 I llm_load_print_meta: n_swa            = 0
0.00.651.070 I llm_load_print_meta: n_embd_head_k    = 256
0.00.651.070 I llm_load_print_meta: n_embd_head_v    = 256
0.00.651.075 I llm_load_print_meta: n_gqa            = 8
0.00.651.080 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.651.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.651.087 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.651.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.651.089 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.651.090 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.651.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.651.098 I llm_load_print_meta: n_ff             = 16384
0.00.651.100 I llm_load_print_meta: n_expert         = 0
0.00.651.101 I llm_load_print_meta: n_expert_used    = 0
0.00.651.101 I llm_load_print_meta: causal attn      = 1
0.00.651.103 I llm_load_print_meta: pooling type     = 0
0.00.651.103 I llm_load_print_meta: rope type        = 2
0.00.651.104 I llm_load_print_meta: rope scaling     = linear
0.00.651.106 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.651.107 I llm_load_print_meta: freq_scale_train = 1
0.00.651.112 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.651.113 I llm_load_print_meta: rope_finetuned   = unknown
0.00.651.113 I llm_load_print_meta: ssm_d_conv       = 0
0.00.651.122 I llm_load_print_meta: ssm_d_inner      = 0
0.00.651.123 I llm_load_print_meta: ssm_d_state      = 0
0.00.651.123 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.651.125 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.651.125 I llm_load_print_meta: model type       = 2B
0.00.651.127 I llm_load_print_meta: model ftype      = Q8_0
0.00.651.129 I llm_load_print_meta: model params     = 2.51 B
0.00.651.130 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.651.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.651.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.651.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.651.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.651.136 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.651.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.651.138 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.651.145 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.651.147 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.651.148 I llm_load_print_meta: max token length = 93
0.00.651.335 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.722.539 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.722.553 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.728.507 I llama_new_context_with_model: n_ctx      = 8192
0.00.728.515 I llama_new_context_with_model: n_batch    = 2048
0.00.728.516 I llama_new_context_with_model: n_ubatch   = 512
0.00.728.517 I llama_new_context_with_model: flash_attn = 0
0.00.728.520 I llama_new_context_with_model: freq_base  = 10000.0
0.00.728.522 I llama_new_context_with_model: freq_scale = 1
0.00.758.917 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.758.962 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.483 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.760.489 I llama_new_context_with_model: graph nodes  = 601
0.00.760.489 I llama_new_context_with_model: graph splits = 1
0.00.760.505 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.044 I main: llama threadpool init, n_threads = 4
0.01.371.058 I 
0.01.371.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.186 I 
0.01.371.385 I sampler seed: 148739690
0.01.371.396 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.403 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.371.404 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.404 I 
 increasels, and a lone beholder, adrift in the swirling mists of a forgotten world.

**The World of Eldoria**

The world of Eldoria

0.14.926.911 I llama_perf_sampler_print:    sampling time =      49.60 ms /    33 runs   (    1.50 ms per token,   665.27 tokens per second)
0.14.926.928 I llama_perf_context_print:        load time =    1368.07 ms
0.14.926.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.926.932 I llama_perf_context_print:        eval time =   13472.69 ms /    32 runs   (  421.02 ms per token,     2.38 tokens per second)
0.14.926.933 I llama_perf_context_print:       total time =   13555.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.819s
user	3m33.558s
sys	0m9.572s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3936 (9f45fc1e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198161.77 ms
main:    total time = 198161.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.765 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.976 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.093 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.095 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.099 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.103 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.114 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.115 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.964 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.548 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.817 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.827 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.828 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.829 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.830 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.832 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.835 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.836 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.838 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.839 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.840 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.849 I llama_model_loader: - type  f32:   37 tensors
0.00.266.853 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.854 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.805 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.808 I llm_load_vocab: special tokens cache size = 5
0.00.623.007 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.082 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.086 I llm_load_print_meta: arch             = gemma
0.00.623.087 I llm_load_print_meta: vocab type       = SPM
0.00.623.087 I llm_load_print_meta: n_vocab          = 256000
0.00.623.089 I llm_load_print_meta: n_merges         = 0
0.00.623.090 I llm_load_print_meta: vocab_only       = 0
0.00.623.090 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.091 I llm_load_print_meta: n_embd           = 2048
0.00.623.091 I llm_load_print_meta: n_layer          = 18
0.00.623.154 I llm_load_print_meta: n_head           = 8
0.00.623.164 I llm_load_print_meta: n_head_kv        = 1
0.00.623.166 I llm_load_print_meta: n_rot            = 256
0.00.623.167 I llm_load_print_meta: n_swa            = 0
0.00.623.167 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.190 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.198 I llm_load_print_meta: n_gqa            = 8
0.00.623.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.207 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.210 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.211 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.211 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.212 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.216 I llm_load_print_meta: n_ff             = 16384
0.00.623.217 I llm_load_print_meta: n_expert         = 0
0.00.623.217 I llm_load_print_meta: n_expert_used    = 0
0.00.623.218 I llm_load_print_meta: causal attn      = 1
0.00.623.219 I llm_load_print_meta: pooling type     = 0
0.00.623.219 I llm_load_print_meta: rope type        = 2
0.00.623.219 I llm_load_print_meta: rope scaling     = linear
0.00.623.221 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.231 I llm_load_print_meta: freq_scale_train = 1
0.00.623.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.233 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.233 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.233 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.234 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.237 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.237 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.238 I llm_load_print_meta: model type       = 2B
0.00.623.239 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.623.240 I llm_load_print_meta: model params     = 2.51 B
0.00.623.241 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.623.241 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.241 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.242 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.242 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.242 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.243 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.243 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.250 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.251 I llm_load_print_meta: max token length = 93
0.00.623.422 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.135 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.683.148 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.683.149 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.683.150 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.683.150 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.683.151 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.688.934 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.943 I llama_new_context_with_model: n_batch    = 2048
0.00.688.944 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.944 I llama_new_context_with_model: flash_attn = 0
0.00.688.948 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.949 I llama_new_context_with_model: freq_scale = 1
0.00.718.804 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.847 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.363 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.368 I llama_new_context_with_model: graph nodes  = 601
0.00.720.368 I llama_new_context_with_model: graph splits = 1
0.00.720.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.561 I main: llama threadpool init, n_threads = 4
0.01.301.575 I 
0.01.301.683 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.687 I 
0.01.301.872 I sampler seed: 1596112993
0.01.301.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.893 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.301.895 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.895 I 
 effeering in a sentence.

The artist's chaotic brushstrokes and swirling colours create an energetic, expressive symphony that blurs the lines between realism and abstraction

0.12.224.587 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.41 tokens per second)
0.12.224.590 I llama_perf_context_print:        load time =    1298.69 ms
0.12.224.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.224.593 I llama_perf_context_print:        eval time =   10840.59 ms /    32 runs   (  338.77 ms per token,     2.95 tokens per second)
0.12.224.594 I llama_perf_context_print:       total time =   10923.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3936 (9f45fc1e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197974.67 ms
main:    total time = 197974.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3936 (9f45fc1e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.025.114 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.226 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.231 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.232 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.233 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.235 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.251 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.255 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.256 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.257 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.258 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.145 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.499 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.501 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.503 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.504 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.508 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.508 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.518 I llama_model_loader: - type  f32:   37 tensors
0.00.266.522 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.524 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.691 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.181 I llm_load_vocab: special tokens cache size = 5
0.00.614.395 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.470 I llm_load_print_meta: arch             = gemma
0.00.614.471 I llm_load_print_meta: vocab type       = SPM
0.00.614.472 I llm_load_print_meta: n_vocab          = 256000
0.00.614.474 I llm_load_print_meta: n_merges         = 0
0.00.614.475 I llm_load_print_meta: vocab_only       = 0
0.00.614.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.476 I llm_load_print_meta: n_embd           = 2048
0.00.614.476 I llm_load_print_meta: n_layer          = 18
0.00.614.543 I llm_load_print_meta: n_head           = 8
0.00.614.550 I llm_load_print_meta: n_head_kv        = 1
0.00.614.551 I llm_load_print_meta: n_rot            = 256
0.00.614.551 I llm_load_print_meta: n_swa            = 0
0.00.614.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.556 I llm_load_print_meta: n_gqa            = 8
0.00.614.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.567 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.569 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.569 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.569 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.570 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.574 I llm_load_print_meta: n_ff             = 16384
0.00.614.575 I llm_load_print_meta: n_expert         = 0
0.00.614.576 I llm_load_print_meta: n_expert_used    = 0
0.00.614.576 I llm_load_print_meta: causal attn      = 1
0.00.614.576 I llm_load_print_meta: pooling type     = 0
0.00.614.577 I llm_load_print_meta: rope type        = 2
0.00.614.577 I llm_load_print_meta: rope scaling     = linear
0.00.614.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.579 I llm_load_print_meta: freq_scale_train = 1
0.00.614.580 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.580 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.582 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.582 I llm_load_print_meta: model type       = 2B
0.00.614.583 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.584 I llm_load_print_meta: model params     = 2.51 B
0.00.614.584 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.593 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.594 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.595 I llm_load_print_meta: max token length = 93
0.00.614.762 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.890 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.678.615 I llama_new_context_with_model: n_ctx      = 8192
0.00.678.622 I llama_new_context_with_model: n_batch    = 2048
0.00.678.622 I llama_new_context_with_model: n_ubatch   = 512
0.00.678.623 I llama_new_context_with_model: flash_attn = 0
0.00.678.627 I llama_new_context_with_model: freq_base  = 10000.0
0.00.678.628 I llama_new_context_with_model: freq_scale = 1
0.00.710.775 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.820 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.942 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.321 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.327 I llama_new_context_with_model: graph nodes  = 601
0.00.712.327 I llama_new_context_with_model: graph splits = 1
0.00.712.343 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.293.593 I main: llama threadpool init, n_threads = 4
0.01.293.608 I 
0.01.293.720 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.293.723 I 
0.01.293.904 I sampler seed: 1253593290
0.01.293.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.293.922 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.293.923 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.293.923 I 
 increamically.

I'm not sure what I'm doing here.

I feel lost and confused.

I'm not sure what my purpose

0.12.229.057 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.09 tokens per second)
0.12.229.060 I llama_perf_context_print:        load time =    1290.72 ms
0.12.229.061 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.229.063 I llama_perf_context_print:        eval time =   10852.63 ms /    32 runs   (  339.14 ms per token,     2.95 tokens per second)
0.12.229.077 I llama_perf_context_print:       total time =   10935.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.505s
user	49m54.974s
sys	0m6.417s
