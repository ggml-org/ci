+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.864 I main: load the model and apply lora adapter, if any
0.00.023.310 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.408 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.429 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.434 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.446 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.448 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.229 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.932 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.573 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.584 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.586 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.588 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.589 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.590 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.594 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.596 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.597 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.598 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.361.600 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.609 I llama_model_loader: - type  f32:   37 tensors
0.00.361.611 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.025 I llm_load_vocab: special tokens cache size = 5
0.00.844.683 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.759 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.760 I llm_load_print_meta: arch             = gemma
0.00.844.761 I llm_load_print_meta: vocab type       = SPM
0.00.844.761 I llm_load_print_meta: n_vocab          = 256000
0.00.844.764 I llm_load_print_meta: n_merges         = 0
0.00.844.764 I llm_load_print_meta: vocab_only       = 0
0.00.844.765 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.765 I llm_load_print_meta: n_embd           = 2048
0.00.844.766 I llm_load_print_meta: n_layer          = 18
0.00.844.830 I llm_load_print_meta: n_head           = 8
0.00.844.837 I llm_load_print_meta: n_head_kv        = 1
0.00.844.837 I llm_load_print_meta: n_rot            = 256
0.00.844.838 I llm_load_print_meta: n_swa            = 0
0.00.844.838 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.839 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.843 I llm_load_print_meta: n_gqa            = 8
0.00.844.849 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.854 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.855 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.857 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.858 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.861 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.866 I llm_load_print_meta: n_ff             = 16384
0.00.844.866 I llm_load_print_meta: n_expert         = 0
0.00.844.867 I llm_load_print_meta: n_expert_used    = 0
0.00.844.868 I llm_load_print_meta: causal attn      = 1
0.00.844.869 I llm_load_print_meta: pooling type     = 0
0.00.844.869 I llm_load_print_meta: rope type        = 2
0.00.844.870 I llm_load_print_meta: rope scaling     = linear
0.00.844.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.872 I llm_load_print_meta: freq_scale_train = 1
0.00.844.873 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.877 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.878 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.878 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.879 I llm_load_print_meta: model type       = 2B
0.00.844.880 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.880 I llm_load_print_meta: model params     = 2.51 B
0.00.844.881 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.885 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.886 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.887 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.894 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.895 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.896 I llm_load_print_meta: max token length = 93
0.00.946.959 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.946.968 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.946.969 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.946.970 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.946.970 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.946.971 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.952.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.886 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.886 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.887 I llama_new_context_with_model: n_batch       = 2048
0.00.952.887 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.888 I llama_new_context_with_model: flash_attn    = 0
0.00.952.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.892 I llama_new_context_with_model: freq_scale    = 1
0.00.952.892 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.812 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.851 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.581 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.585 I llama_new_context_with_model: graph nodes  = 601
0.00.970.586 I llama_new_context_with_model: graph splits = 1
0.00.970.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.277 I main: llama threadpool init, n_threads = 4
0.01.580.293 I 
0.01.580.408 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.580.412 I 
0.01.580.652 I sampler seed: 585430739
0.01.580.666 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.678 I 
 increably. [end of text]


0.03.274.582 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.70 tokens per second)
0.03.274.585 I llama_perf_context_print:        load time =    1579.32 ms
0.03.274.587 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.274.589 I llama_perf_context_print:        eval time =    1681.58 ms /     4 runs   (  420.39 ms per token,     2.38 tokens per second)
0.03.274.590 I llama_perf_context_print:       total time =    1694.31 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.276 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.385 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.399 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.407 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.412 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.415 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.419 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.429 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.435 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.436 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.506 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.912 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.611 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.629 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.638 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.639 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.640 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.642 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.651 I llama_model_loader: - type  f32:   37 tensors
0.00.361.653 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.467 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.040 I llm_load_vocab: special tokens cache size = 5
0.00.845.418 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.494 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.495 I llm_load_print_meta: arch             = gemma
0.00.845.496 I llm_load_print_meta: vocab type       = SPM
0.00.845.497 I llm_load_print_meta: n_vocab          = 256000
0.00.845.499 I llm_load_print_meta: n_merges         = 0
0.00.845.500 I llm_load_print_meta: vocab_only       = 0
0.00.845.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.501 I llm_load_print_meta: n_embd           = 2048
0.00.845.501 I llm_load_print_meta: n_layer          = 18
0.00.845.566 I llm_load_print_meta: n_head           = 8
0.00.845.573 I llm_load_print_meta: n_head_kv        = 1
0.00.845.574 I llm_load_print_meta: n_rot            = 256
0.00.845.574 I llm_load_print_meta: n_swa            = 0
0.00.845.575 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.575 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.580 I llm_load_print_meta: n_gqa            = 8
0.00.845.584 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.590 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.594 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.595 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.596 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.601 I llm_load_print_meta: n_ff             = 16384
0.00.845.602 I llm_load_print_meta: n_expert         = 0
0.00.845.603 I llm_load_print_meta: n_expert_used    = 0
0.00.845.603 I llm_load_print_meta: causal attn      = 1
0.00.845.604 I llm_load_print_meta: pooling type     = 0
0.00.845.605 I llm_load_print_meta: rope type        = 2
0.00.845.605 I llm_load_print_meta: rope scaling     = linear
0.00.845.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.608 I llm_load_print_meta: freq_scale_train = 1
0.00.845.608 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.609 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.612 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.613 I llm_load_print_meta: model type       = 2B
0.00.845.614 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.614 I llm_load_print_meta: model params     = 2.51 B
0.00.845.626 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.630 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.631 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.632 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.634 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.642 I llm_load_print_meta: max token length = 93
0.00.943.441 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.949.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.949.598 I llama_new_context_with_model: n_ctx         = 4096
0.00.949.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.949.599 I llama_new_context_with_model: n_batch       = 2048
0.00.949.599 I llama_new_context_with_model: n_ubatch      = 512
0.00.949.600 I llama_new_context_with_model: flash_attn    = 0
0.00.949.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.949.604 I llama_new_context_with_model: freq_scale    = 1
0.00.949.604 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.474 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.516 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.300 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.304 I llama_new_context_with_model: graph nodes  = 601
0.00.967.305 I llama_new_context_with_model: graph splits = 1
0.00.967.329 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.699 I main: llama threadpool init, n_threads = 4
0.01.578.717 I 
0.01.578.864 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.578.868 I 
0.01.579.117 I sampler seed: 1458271241
0.01.579.130 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.142 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.143 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.143 I 
 increamentalism, which is a theory in which the effects of a behavior on its outcomes are contingent upon the individual's prior experiences and knowledge. [end of text]


0.14.712.955 I llama_perf_sampler_print:    sampling time =      47.68 ms /    32 runs   (    1.49 ms per token,   671.21 tokens per second)
0.14.712.958 I llama_perf_context_print:        load time =    1577.70 ms
0.14.712.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.712.960 I llama_perf_context_print:        eval time =   13047.12 ms /    31 runs   (  420.87 ms per token,     2.38 tokens per second)
0.14.712.975 I llama_perf_context_print:       total time =   13134.26 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.753 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.982 I main: llama backend init
0.00.000.991 I main: load the model and apply lora adapter, if any
0.00.023.406 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.520 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.522 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.530 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.531 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.533 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.546 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.860 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.040 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.041 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.042 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.044 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.055 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.060 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.365.065 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.365.067 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.365.076 I llama_model_loader: - type  f32:   37 tensors
0.00.365.079 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.452 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.659.801 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.660.925 I llm_load_vocab: special tokens cache size = 5
0.00.850.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.850.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.850.807 I llm_load_print_meta: arch             = gemma
0.00.850.807 I llm_load_print_meta: vocab type       = SPM
0.00.850.808 I llm_load_print_meta: n_vocab          = 256000
0.00.850.811 I llm_load_print_meta: n_merges         = 0
0.00.850.811 I llm_load_print_meta: vocab_only       = 0
0.00.850.812 I llm_load_print_meta: n_ctx_train      = 8192
0.00.850.812 I llm_load_print_meta: n_embd           = 2048
0.00.850.813 I llm_load_print_meta: n_layer          = 18
0.00.850.883 I llm_load_print_meta: n_head           = 8
0.00.850.893 I llm_load_print_meta: n_head_kv        = 1
0.00.850.893 I llm_load_print_meta: n_rot            = 256
0.00.850.895 I llm_load_print_meta: n_swa            = 0
0.00.850.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.850.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.850.900 I llm_load_print_meta: n_gqa            = 8
0.00.850.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.850.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.850.912 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.850.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.850.914 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.850.915 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.850.916 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.850.922 I llm_load_print_meta: n_ff             = 16384
0.00.850.927 I llm_load_print_meta: n_expert         = 0
0.00.850.928 I llm_load_print_meta: n_expert_used    = 0
0.00.850.928 I llm_load_print_meta: causal attn      = 1
0.00.850.929 I llm_load_print_meta: pooling type     = 0
0.00.850.930 I llm_load_print_meta: rope type        = 2
0.00.850.930 I llm_load_print_meta: rope scaling     = linear
0.00.850.932 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.850.934 I llm_load_print_meta: freq_scale_train = 1
0.00.850.934 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.850.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.850.935 I llm_load_print_meta: ssm_d_conv       = 0
0.00.850.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.850.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.850.937 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.850.937 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.850.939 I llm_load_print_meta: model type       = 2B
0.00.850.940 I llm_load_print_meta: model ftype      = Q8_0
0.00.850.940 I llm_load_print_meta: model params     = 2.51 B
0.00.850.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.850.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.850.943 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.850.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.850.945 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.850.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.850.946 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.850.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.850.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.850.954 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.850.954 I llm_load_print_meta: max token length = 93
0.00.931.232 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.931.242 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.931.243 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.931.244 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.931.245 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.931.245 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.937.145 I llama_new_context_with_model: n_seq_max     = 1
0.00.937.153 I llama_new_context_with_model: n_ctx         = 4096
0.00.937.153 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.937.153 I llama_new_context_with_model: n_batch       = 2048
0.00.937.154 I llama_new_context_with_model: n_ubatch      = 512
0.00.937.154 I llama_new_context_with_model: flash_attn    = 0
0.00.937.157 I llama_new_context_with_model: freq_base     = 10000.0
0.00.937.158 I llama_new_context_with_model: freq_scale    = 1
0.00.937.158 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.256 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.952.300 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.952.422 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.050 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.054 I llama_new_context_with_model: graph nodes  = 601
0.00.955.055 I llama_new_context_with_model: graph splits = 1
0.00.955.077 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.566.053 I main: llama threadpool init, n_threads = 4
0.01.566.068 I 
0.01.566.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.566.194 I 
0.01.566.433 I sampler seed: 1925077229
0.01.566.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.566.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.566.459 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.566.459 I 
 increably. It is not possible to know the exact time of arrival of the comet, but astronomers can use various methods to estimate its approximate time of arrival.

0.15.218.404 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.91 tokens per second)
0.15.218.407 I llama_perf_context_print:        load time =    1564.96 ms
0.15.218.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.218.410 I llama_perf_context_print:        eval time =   13562.40 ms /    32 runs   (  423.82 ms per token,     2.36 tokens per second)
0.15.218.411 I llama_perf_context_print:       total time =   13652.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.383 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.392 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.485 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.497 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.499 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.505 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.508 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.509 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.510 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.512 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.513 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.523 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.524 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.525 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.182 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.842 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.852 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.853 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.858 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.859 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.863 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.889 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.890 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.361.892 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.901 I llama_model_loader: - type  f32:   37 tensors
0.00.361.904 I llama_model_loader: - type q8_0:  127 tensors
0.00.604.090 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.526 I llm_load_vocab: special tokens cache size = 5
0.00.885.955 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.886.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.886.028 I llm_load_print_meta: arch             = gemma
0.00.886.029 I llm_load_print_meta: vocab type       = SPM
0.00.886.029 I llm_load_print_meta: n_vocab          = 256000
0.00.886.032 I llm_load_print_meta: n_merges         = 0
0.00.886.032 I llm_load_print_meta: vocab_only       = 0
0.00.886.033 I llm_load_print_meta: n_ctx_train      = 8192
0.00.886.033 I llm_load_print_meta: n_embd           = 2048
0.00.886.033 I llm_load_print_meta: n_layer          = 18
0.00.886.097 I llm_load_print_meta: n_head           = 8
0.00.886.104 I llm_load_print_meta: n_head_kv        = 1
0.00.886.105 I llm_load_print_meta: n_rot            = 256
0.00.886.105 I llm_load_print_meta: n_swa            = 0
0.00.886.106 I llm_load_print_meta: n_embd_head_k    = 256
0.00.886.106 I llm_load_print_meta: n_embd_head_v    = 256
0.00.886.123 I llm_load_print_meta: n_gqa            = 8
0.00.886.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.886.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.886.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.886.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.886.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.886.143 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.886.144 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.886.149 I llm_load_print_meta: n_ff             = 16384
0.00.886.150 I llm_load_print_meta: n_expert         = 0
0.00.886.150 I llm_load_print_meta: n_expert_used    = 0
0.00.886.150 I llm_load_print_meta: causal attn      = 1
0.00.886.151 I llm_load_print_meta: pooling type     = 0
0.00.886.152 I llm_load_print_meta: rope type        = 2
0.00.886.153 I llm_load_print_meta: rope scaling     = linear
0.00.886.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.886.155 I llm_load_print_meta: freq_scale_train = 1
0.00.886.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.886.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.886.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.886.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.886.157 I llm_load_print_meta: ssm_d_state      = 0
0.00.886.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.886.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.886.159 I llm_load_print_meta: model type       = 2B
0.00.886.160 I llm_load_print_meta: model ftype      = Q8_0
0.00.886.172 I llm_load_print_meta: model params     = 2.51 B
0.00.886.174 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.886.174 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.886.175 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.886.176 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.886.177 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.886.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.886.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.886.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.886.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.886.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.886.187 I llm_load_print_meta: max token length = 93
0.00.959.462 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.959.470 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.965.612 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.619 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.620 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.621 I llama_new_context_with_model: n_batch       = 2048
0.00.965.621 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.622 I llama_new_context_with_model: flash_attn    = 0
0.00.965.624 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.625 I llama_new_context_with_model: freq_scale    = 1
0.00.965.626 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.595 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.637 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.757 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.397 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.400 I llama_new_context_with_model: graph nodes  = 601
0.00.983.400 I llama_new_context_with_model: graph splits = 1
0.00.983.423 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.771 I main: llama threadpool init, n_threads = 4
0.01.592.787 I 
0.01.592.906 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.592.911 I 
0.01.593.151 I sampler seed: 557676814
0.01.593.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.177 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.178 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.178 I 
 increasities with the words "unprecedented" and "unforgettable".

**Unprecedented surge in demand for sustainable energy solutions**

The unprecedented surge in demand

0.15.172.971 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.10 tokens per second)
0.15.172.974 I llama_perf_context_print:        load time =    1591.82 ms
0.15.172.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.172.977 I llama_perf_context_print:        eval time =   13490.80 ms /    32 runs   (  421.59 ms per token,     2.37 tokens per second)
0.15.172.978 I llama_perf_context_print:       total time =   13580.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.142s
user	3m2.027s
sys	0m9.309s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4321 (9f35e445)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186015.95 ms
main:    total time = 186015.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.866 I main: load the model and apply lora adapter, if any
0.00.023.088 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.100 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.206 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.215 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.219 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.221 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.222 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.230 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.232 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.233 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.234 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.235 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.495 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.180 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.893 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.894 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.899 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.903 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.905 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.906 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.907 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.361.909 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.918 I llama_model_loader: - type  f32:   37 tensors
0.00.361.920 I llama_model_loader: - type q4_K:  108 tensors
0.00.361.921 I llama_model_loader: - type q6_K:   19 tensors
0.00.584.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.702 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.572 I llm_load_vocab: special tokens cache size = 5
0.00.836.995 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.071 I llm_load_print_meta: arch             = gemma
0.00.837.071 I llm_load_print_meta: vocab type       = SPM
0.00.837.072 I llm_load_print_meta: n_vocab          = 256000
0.00.837.074 I llm_load_print_meta: n_merges         = 0
0.00.837.075 I llm_load_print_meta: vocab_only       = 0
0.00.837.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.076 I llm_load_print_meta: n_embd           = 2048
0.00.837.076 I llm_load_print_meta: n_layer          = 18
0.00.837.141 I llm_load_print_meta: n_head           = 8
0.00.837.151 I llm_load_print_meta: n_head_kv        = 1
0.00.837.152 I llm_load_print_meta: n_rot            = 256
0.00.837.154 I llm_load_print_meta: n_swa            = 0
0.00.837.154 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.154 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.159 I llm_load_print_meta: n_gqa            = 8
0.00.837.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.169 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.171 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.172 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.173 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.174 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.179 I llm_load_print_meta: n_ff             = 16384
0.00.837.180 I llm_load_print_meta: n_expert         = 0
0.00.837.180 I llm_load_print_meta: n_expert_used    = 0
0.00.837.182 I llm_load_print_meta: causal attn      = 1
0.00.837.183 I llm_load_print_meta: pooling type     = 0
0.00.837.183 I llm_load_print_meta: rope type        = 2
0.00.837.184 I llm_load_print_meta: rope scaling     = linear
0.00.837.186 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.187 I llm_load_print_meta: freq_scale_train = 1
0.00.837.187 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.189 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.192 I llm_load_print_meta: model type       = 2B
0.00.837.193 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.194 I llm_load_print_meta: model params     = 2.51 B
0.00.837.194 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.199 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.205 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.208 I llm_load_print_meta: max token length = 93
0.00.900.120 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.900.129 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.900.129 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.900.130 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.900.131 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.900.131 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.905.958 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.963 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.964 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.964 I llama_new_context_with_model: n_batch       = 2048
0.00.905.965 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.965 I llama_new_context_with_model: flash_attn    = 0
0.00.905.967 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.968 I llama_new_context_with_model: freq_scale    = 1
0.00.905.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.298 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.340 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.004 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.009 I llama_new_context_with_model: graph nodes  = 601
0.00.923.009 I llama_new_context_with_model: graph splits = 1
0.00.923.032 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.642 I main: llama threadpool init, n_threads = 4
0.01.504.659 I 
0.01.504.780 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.504.784 I 
0.01.505.030 I sampler seed: 3321419425
0.01.505.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.505.055 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.505.056 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.505.056 I 
 seconal to the human respiratory system. It is also known as the mammalian respiratory tree.

Answer: Bronchial tree.

Bronchial tree is the mammalian

0.12.578.812 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.12.578.814 I llama_perf_context_print:        load time =    1503.68 ms
0.12.578.816 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.578.817 I llama_perf_context_print:        eval time =   10985.13 ms /    32 runs   (  343.29 ms per token,     2.91 tokens per second)
0.12.578.818 I llama_perf_context_print:       total time =   11074.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4321 (9f35e445)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186114.78 ms
main:    total time = 186114.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4321 (9f35e445) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.637 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.766 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.780 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.788 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.790 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.792 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.793 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.795 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.797 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.818 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.820 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.824 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.825 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.249 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.071 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.073 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.074 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.075 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.077 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.078 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.092 I llama_model_loader: - type  f32:   37 tensors
0.00.364.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.364.095 I llama_model_loader: - type q6_K:   19 tensors
0.00.619.458 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.691.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.692.885 I llm_load_vocab: special tokens cache size = 5
0.00.897.579 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.897.654 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.897.655 I llm_load_print_meta: arch             = gemma
0.00.897.656 I llm_load_print_meta: vocab type       = SPM
0.00.897.657 I llm_load_print_meta: n_vocab          = 256000
0.00.897.659 I llm_load_print_meta: n_merges         = 0
0.00.897.660 I llm_load_print_meta: vocab_only       = 0
0.00.897.660 I llm_load_print_meta: n_ctx_train      = 8192
0.00.897.661 I llm_load_print_meta: n_embd           = 2048
0.00.897.661 I llm_load_print_meta: n_layer          = 18
0.00.897.727 I llm_load_print_meta: n_head           = 8
0.00.897.734 I llm_load_print_meta: n_head_kv        = 1
0.00.897.734 I llm_load_print_meta: n_rot            = 256
0.00.897.735 I llm_load_print_meta: n_swa            = 0
0.00.897.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.897.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.897.740 I llm_load_print_meta: n_gqa            = 8
0.00.897.746 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.897.751 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.897.752 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.897.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.897.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.897.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.897.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.897.761 I llm_load_print_meta: n_ff             = 16384
0.00.897.761 I llm_load_print_meta: n_expert         = 0
0.00.897.762 I llm_load_print_meta: n_expert_used    = 0
0.00.897.762 I llm_load_print_meta: causal attn      = 1
0.00.897.762 I llm_load_print_meta: pooling type     = 0
0.00.897.763 I llm_load_print_meta: rope type        = 2
0.00.897.763 I llm_load_print_meta: rope scaling     = linear
0.00.897.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.897.765 I llm_load_print_meta: freq_scale_train = 1
0.00.897.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.897.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.897.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.897.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.897.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.897.767 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.897.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.897.768 I llm_load_print_meta: model type       = 2B
0.00.897.769 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.897.770 I llm_load_print_meta: model params     = 2.51 B
0.00.897.771 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.897.771 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.897.772 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.897.772 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.897.773 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.897.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.897.774 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.897.774 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.897.780 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.897.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.897.782 I llm_load_print_meta: max token length = 93
0.00.956.860 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.962.866 I llama_new_context_with_model: n_seq_max     = 1
0.00.962.876 I llama_new_context_with_model: n_ctx         = 4096
0.00.962.876 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.962.877 I llama_new_context_with_model: n_batch       = 2048
0.00.962.877 I llama_new_context_with_model: n_ubatch      = 512
0.00.962.878 I llama_new_context_with_model: flash_attn    = 0
0.00.962.883 I llama_new_context_with_model: freq_base     = 10000.0
0.00.962.884 I llama_new_context_with_model: freq_scale    = 1
0.00.962.885 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.979.165 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.210 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.333 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.981.916 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.981.921 I llama_new_context_with_model: graph nodes  = 601
0.00.981.921 I llama_new_context_with_model: graph splits = 1
0.00.981.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.563.910 I main: llama threadpool init, n_threads = 4
0.01.563.925 I 
0.01.564.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.564.052 I 
0.01.564.296 I sampler seed: 3008624577
0.01.564.309 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.564.321 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.564.322 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.564.322 I 
 increasities. [end of text]


0.02.959.752 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   799.11 tokens per second)
0.02.959.755 I llama_perf_context_print:        load time =    1562.90 ms
0.02.959.781 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.959.782 I llama_perf_context_print:        eval time =    1383.06 ms /     4 runs   (  345.77 ms per token,     2.89 tokens per second)
0.02.959.783 I llama_perf_context_print:       total time =    1395.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.656s
user	46m6.867s
sys	0m6.456s
