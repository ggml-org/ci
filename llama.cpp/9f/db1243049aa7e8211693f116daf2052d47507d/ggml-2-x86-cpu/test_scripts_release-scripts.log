+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.711 I main: llama backend init
0.00.000.719 I main: load the model and apply lora adapter, if any
0.00.021.132 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.143 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.157 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.158 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.163 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.167 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.168 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.169 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.169 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.174 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.175 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.175 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.176 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.189 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.196 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.196 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.197 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.198 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.199 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.202 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.203 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.204 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.205 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.208 I llama_model_loader: - type  f32:   37 tensors
0.00.132.209 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.681 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.777 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.380 I llm_load_vocab: special tokens cache size = 5
0.00.274.092 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.108 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.108 I llm_load_print_meta: arch             = gemma
0.00.274.109 I llm_load_print_meta: vocab type       = SPM
0.00.274.110 I llm_load_print_meta: n_vocab          = 256000
0.00.274.110 I llm_load_print_meta: n_merges         = 0
0.00.274.110 I llm_load_print_meta: vocab_only       = 0
0.00.274.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.111 I llm_load_print_meta: n_embd           = 2048
0.00.274.111 I llm_load_print_meta: n_layer          = 18
0.00.274.122 I llm_load_print_meta: n_head           = 8
0.00.274.123 I llm_load_print_meta: n_head_kv        = 1
0.00.274.123 I llm_load_print_meta: n_rot            = 256
0.00.274.124 I llm_load_print_meta: n_swa            = 0
0.00.274.124 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.124 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.125 I llm_load_print_meta: n_gqa            = 8
0.00.274.127 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.127 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.128 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.129 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.130 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.130 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.131 I llm_load_print_meta: n_ff             = 16384
0.00.274.132 I llm_load_print_meta: n_expert         = 0
0.00.274.132 I llm_load_print_meta: n_expert_used    = 0
0.00.274.132 I llm_load_print_meta: causal attn      = 1
0.00.274.132 I llm_load_print_meta: pooling type     = 0
0.00.274.133 I llm_load_print_meta: rope type        = 2
0.00.274.133 I llm_load_print_meta: rope scaling     = linear
0.00.274.134 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.135 I llm_load_print_meta: freq_scale_train = 1
0.00.274.135 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.136 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.136 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.137 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.137 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.137 I llm_load_print_meta: model type       = 2B
0.00.274.138 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.139 I llm_load_print_meta: model params     = 2.51 B
0.00.274.140 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.140 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.140 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.141 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.141 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.141 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.142 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.142 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.143 I llm_load_print_meta: max token length = 93
0.00.374.818 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.826 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.827 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.827 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.828 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.829 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.072 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.079 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.080 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.080 I llama_new_context_with_model: n_batch       = 2048
0.00.380.080 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.081 I llama_new_context_with_model: flash_attn    = 0
0.00.380.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.085 I llama_new_context_with_model: freq_scale    = 1
0.00.380.088 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.626 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.643 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.732 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.991 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.998 I llama_new_context_with_model: graph nodes  = 601
0.00.395.998 I llama_new_context_with_model: graph splits = 1
0.00.396.000 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.793 I main: llama threadpool init, n_threads = 4
0.00.482.808 I 
0.00.482.880 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.482.884 I 
0.00.482.932 I sampler seed: 4157381104
0.00.482.943 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.954 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.957 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.957 I 
 seconary, and tertiary lymphoid organs are involved in the adaptive immune system. Briefly explain their functions.

**Secondary lymphoid organs** are sites of immune system maturation

0.02.763.230 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6133.83 tokens per second)
0.02.763.233 I llama_perf_context_print:        load time =     482.06 ms
0.02.763.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.235 I llama_perf_context_print:        eval time =    2259.93 ms /    32 runs   (   70.62 ms per token,    14.16 tokens per second)
0.02.763.236 I llama_perf_context_print:       total time =    2280.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.620 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.870 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.551 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.565 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.573 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.574 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.578 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.579 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.580 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.580 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.581 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.586 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.587 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.587 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.588 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.818 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.215 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.105 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.114 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.114 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.115 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.116 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.117 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.119 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.122 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.123 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.125 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.125 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.131 I llama_model_loader: - type  f32:   37 tensors
0.00.131.132 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.828 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.571 I llm_load_vocab: special tokens cache size = 5
0.00.273.224 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.241 I llm_load_print_meta: arch             = gemma
0.00.273.242 I llm_load_print_meta: vocab type       = SPM
0.00.273.243 I llm_load_print_meta: n_vocab          = 256000
0.00.273.243 I llm_load_print_meta: n_merges         = 0
0.00.273.243 I llm_load_print_meta: vocab_only       = 0
0.00.273.244 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.244 I llm_load_print_meta: n_embd           = 2048
0.00.273.244 I llm_load_print_meta: n_layer          = 18
0.00.273.256 I llm_load_print_meta: n_head           = 8
0.00.273.257 I llm_load_print_meta: n_head_kv        = 1
0.00.273.258 I llm_load_print_meta: n_rot            = 256
0.00.273.258 I llm_load_print_meta: n_swa            = 0
0.00.273.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.258 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.259 I llm_load_print_meta: n_gqa            = 8
0.00.273.260 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.261 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.262 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.264 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.264 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.264 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.265 I llm_load_print_meta: n_ff             = 16384
0.00.273.265 I llm_load_print_meta: n_expert         = 0
0.00.273.266 I llm_load_print_meta: n_expert_used    = 0
0.00.273.266 I llm_load_print_meta: causal attn      = 1
0.00.273.266 I llm_load_print_meta: pooling type     = 0
0.00.273.266 I llm_load_print_meta: rope type        = 2
0.00.273.267 I llm_load_print_meta: rope scaling     = linear
0.00.273.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.269 I llm_load_print_meta: freq_scale_train = 1
0.00.273.269 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.271 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.271 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.272 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.272 I llm_load_print_meta: model type       = 2B
0.00.273.272 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.273 I llm_load_print_meta: model params     = 2.51 B
0.00.273.274 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.274 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.275 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.275 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.276 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.276 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.276 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.277 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.277 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.277 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.277 I llm_load_print_meta: max token length = 93
0.00.367.338 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.601 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.609 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.609 I llama_new_context_with_model: n_batch       = 2048
0.00.372.609 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.610 I llama_new_context_with_model: flash_attn    = 0
0.00.372.613 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.614 I llama_new_context_with_model: freq_scale    = 1
0.00.372.615 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.649 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.665 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.765 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.031 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.037 I llama_new_context_with_model: graph nodes  = 601
0.00.389.037 I llama_new_context_with_model: graph splits = 1
0.00.389.039 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.762 I main: llama threadpool init, n_threads = 4
0.00.470.777 I 
0.00.470.853 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.857 I 
0.00.470.898 I sampler seed: 2263791756
0.00.470.910 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.915 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.915 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.915 I 
 increasively, adding more and more adjectives and nouns to describe the situation. [end of text]


0.01.572.603 I llama_perf_sampler_print:    sampling time =       2.95 ms /    17 runs   (    0.17 ms per token,  5754.91 tokens per second)
0.01.572.606 I llama_perf_context_print:        load time =     469.87 ms
0.01.572.607 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.572.609 I llama_perf_context_print:        eval time =    1090.74 ms /    16 runs   (   68.17 ms per token,    14.67 tokens per second)
0.01.572.610 I llama_perf_context_print:       total time =    1101.85 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.176 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.351 I main: llama backend init
0.00.000.359 I main: load the model and apply lora adapter, if any
0.00.020.622 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.633 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.646 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.648 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.652 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.759 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.759 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.760 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.761 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.765 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.770 I llama_model_loader: - type  f32:   37 tensors
0.00.130.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.835 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.667 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.238 I llm_load_vocab: special tokens cache size = 5
0.00.294.856 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.872 I llm_load_print_meta: arch             = gemma
0.00.294.873 I llm_load_print_meta: vocab type       = SPM
0.00.294.873 I llm_load_print_meta: n_vocab          = 256000
0.00.294.874 I llm_load_print_meta: n_merges         = 0
0.00.294.874 I llm_load_print_meta: vocab_only       = 0
0.00.294.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.875 I llm_load_print_meta: n_embd           = 2048
0.00.294.875 I llm_load_print_meta: n_layer          = 18
0.00.294.887 I llm_load_print_meta: n_head           = 8
0.00.294.888 I llm_load_print_meta: n_head_kv        = 1
0.00.294.888 I llm_load_print_meta: n_rot            = 256
0.00.294.888 I llm_load_print_meta: n_swa            = 0
0.00.294.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.890 I llm_load_print_meta: n_gqa            = 8
0.00.294.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.892 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.893 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.894 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.895 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.895 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.896 I llm_load_print_meta: n_ff             = 16384
0.00.294.896 I llm_load_print_meta: n_expert         = 0
0.00.294.897 I llm_load_print_meta: n_expert_used    = 0
0.00.294.897 I llm_load_print_meta: causal attn      = 1
0.00.294.897 I llm_load_print_meta: pooling type     = 0
0.00.294.897 I llm_load_print_meta: rope type        = 2
0.00.294.898 I llm_load_print_meta: rope scaling     = linear
0.00.294.899 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.900 I llm_load_print_meta: freq_scale_train = 1
0.00.294.900 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.901 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.902 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.902 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.902 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.902 I llm_load_print_meta: model type       = 2B
0.00.294.903 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.904 I llm_load_print_meta: model params     = 2.51 B
0.00.294.904 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.905 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.905 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.906 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.907 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.907 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.907 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.908 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.908 I llm_load_print_meta: max token length = 93
0.00.372.442 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.372.449 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.372.450 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.372.451 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.372.451 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.372.452 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.377.513 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.520 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.521 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.521 I llama_new_context_with_model: n_batch       = 2048
0.00.377.521 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.522 I llama_new_context_with_model: flash_attn    = 0
0.00.377.524 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.525 I llama_new_context_with_model: freq_scale    = 1
0.00.377.526 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.151 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.268 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.608 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.615 I llama_new_context_with_model: graph nodes  = 601
0.00.394.615 I llama_new_context_with_model: graph splits = 1
0.00.394.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.668 I main: llama threadpool init, n_threads = 4
0.00.480.685 I 
0.00.480.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.765 I 
0.00.480.812 I sampler seed: 2547267226
0.00.480.823 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.835 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.839 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.839 I 
 increably, a grand spectacle of light and sound that would forever be etched in the annals of entertainment history.

The spectacle unfolded in a vast, expansive arena

0.02.750.902 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5939.52 tokens per second)
0.02.750.904 I llama_perf_context_print:        load time =     480.29 ms
0.02.750.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.750.907 I llama_perf_context_print:        eval time =    2250.28 ms /    32 runs   (   70.32 ms per token,    14.22 tokens per second)
0.02.750.907 I llama_perf_context_print:       total time =    2270.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.554 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.023.404 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.412 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.420 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.426 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.433 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.433 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.434 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.438 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.439 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.441 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.165 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.928 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.935 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.936 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.937 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.938 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.939 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.941 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.942 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.943 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.944 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.945 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.948 I llama_model_loader: - type  f32:   37 tensors
0.00.133.949 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.968 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.470 I llm_load_vocab: special tokens cache size = 5
0.00.273.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.471 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.471 I llm_load_print_meta: arch             = gemma
0.00.273.472 I llm_load_print_meta: vocab type       = SPM
0.00.273.472 I llm_load_print_meta: n_vocab          = 256000
0.00.273.473 I llm_load_print_meta: n_merges         = 0
0.00.273.473 I llm_load_print_meta: vocab_only       = 0
0.00.273.474 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.474 I llm_load_print_meta: n_embd           = 2048
0.00.273.474 I llm_load_print_meta: n_layer          = 18
0.00.273.485 I llm_load_print_meta: n_head           = 8
0.00.273.486 I llm_load_print_meta: n_head_kv        = 1
0.00.273.487 I llm_load_print_meta: n_rot            = 256
0.00.273.487 I llm_load_print_meta: n_swa            = 0
0.00.273.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.488 I llm_load_print_meta: n_gqa            = 8
0.00.273.490 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.491 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.492 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.493 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.493 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.494 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.494 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.495 I llm_load_print_meta: n_ff             = 16384
0.00.273.495 I llm_load_print_meta: n_expert         = 0
0.00.273.495 I llm_load_print_meta: n_expert_used    = 0
0.00.273.496 I llm_load_print_meta: causal attn      = 1
0.00.273.496 I llm_load_print_meta: pooling type     = 0
0.00.273.496 I llm_load_print_meta: rope type        = 2
0.00.273.496 I llm_load_print_meta: rope scaling     = linear
0.00.273.498 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.498 I llm_load_print_meta: freq_scale_train = 1
0.00.273.499 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.499 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.499 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.500 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.500 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.500 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.500 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.501 I llm_load_print_meta: model type       = 2B
0.00.273.501 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.502 I llm_load_print_meta: model params     = 2.51 B
0.00.273.503 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.503 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.503 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.504 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.504 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.504 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.505 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.505 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.505 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.506 I llm_load_print_meta: max token length = 93
0.00.345.522 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.531 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.931 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.939 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.940 I llama_new_context_with_model: n_batch       = 2048
0.00.350.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.941 I llama_new_context_with_model: flash_attn    = 0
0.00.350.945 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.946 I llama_new_context_with_model: freq_scale    = 1
0.00.350.947 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.718 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.815 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.153 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.160 I llama_new_context_with_model: graph nodes  = 601
0.00.368.161 I llama_new_context_with_model: graph splits = 1
0.00.368.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.630 I main: llama threadpool init, n_threads = 4
0.00.460.646 I 
0.00.460.731 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.735 I 
0.00.460.784 I sampler seed: 1028674789
0.00.460.796 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.804 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.808 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.808 I 
 increasities in the 19th century, it is not possible to reconstruct the specific details of these events.

Answer: True

Explanation:
The

0.02.902.517 I llama_perf_sampler_print:    sampling time =       6.25 ms /    33 runs   (    0.19 ms per token,  5277.47 tokens per second)
0.02.902.520 I llama_perf_context_print:        load time =     459.84 ms
0.02.902.521 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.902.523 I llama_perf_context_print:        eval time =    2420.47 ms /    32 runs   (   75.64 ms per token,    13.22 tokens per second)
0.02.902.523 I llama_perf_context_print:       total time =    2441.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m24.156s
user	0m35.312s
sys	0m9.517s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4311 (9fdb1243)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40248.10 ms
main:    total time = 40248.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.000.784 I main: load the model and apply lora adapter, if any
0.00.021.731 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.742 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.752 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.761 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.763 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.768 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.772 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.774 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.784 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.786 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.095 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.994 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.897 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.899 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.903 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.904 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.905 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.905 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.906 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.911 I llama_model_loader: - type  f32:   37 tensors
0.00.131.913 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.914 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.995 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.782 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.502 I llm_load_vocab: special tokens cache size = 5
0.00.293.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.633 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.634 I llm_load_print_meta: arch             = gemma
0.00.293.635 I llm_load_print_meta: vocab type       = SPM
0.00.293.635 I llm_load_print_meta: n_vocab          = 256000
0.00.293.636 I llm_load_print_meta: n_merges         = 0
0.00.293.636 I llm_load_print_meta: vocab_only       = 0
0.00.293.636 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.637 I llm_load_print_meta: n_embd           = 2048
0.00.293.637 I llm_load_print_meta: n_layer          = 18
0.00.293.650 I llm_load_print_meta: n_head           = 8
0.00.293.651 I llm_load_print_meta: n_head_kv        = 1
0.00.293.652 I llm_load_print_meta: n_rot            = 256
0.00.293.652 I llm_load_print_meta: n_swa            = 0
0.00.293.653 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.653 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.654 I llm_load_print_meta: n_gqa            = 8
0.00.293.655 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.656 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.659 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.660 I llm_load_print_meta: n_ff             = 16384
0.00.293.660 I llm_load_print_meta: n_expert         = 0
0.00.293.660 I llm_load_print_meta: n_expert_used    = 0
0.00.293.661 I llm_load_print_meta: causal attn      = 1
0.00.293.661 I llm_load_print_meta: pooling type     = 0
0.00.293.661 I llm_load_print_meta: rope type        = 2
0.00.293.662 I llm_load_print_meta: rope scaling     = linear
0.00.293.663 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.663 I llm_load_print_meta: freq_scale_train = 1
0.00.293.664 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.664 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.664 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.665 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.665 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.665 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.666 I llm_load_print_meta: model type       = 2B
0.00.293.666 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.293.667 I llm_load_print_meta: model params     = 2.51 B
0.00.293.668 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.293.668 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.668 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.669 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.669 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.669 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.669 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.670 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.670 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.670 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.671 I llm_load_print_meta: max token length = 93
0.00.353.772 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.353.782 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.353.783 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.353.783 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.353.784 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.353.784 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.359.324 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.331 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.331 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.332 I llama_new_context_with_model: n_batch       = 2048
0.00.359.332 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.333 I llama_new_context_with_model: flash_attn    = 0
0.00.359.337 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.337 I llama_new_context_with_model: freq_scale    = 1
0.00.359.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.910 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.925 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.323 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.331 I llama_new_context_with_model: graph nodes  = 601
0.00.376.332 I llama_new_context_with_model: graph splits = 1
0.00.376.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.497 I main: llama threadpool init, n_threads = 4
0.00.453.516 I 
0.00.453.606 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.609 I 
0.00.453.660 I sampler seed: 960983750
0.00.453.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.688 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.693 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.693 I 
 seconded the question and provided the following information:

"I have noticed a pattern in my data that I would like to investigate further. However, I am

0.02.134.553 I llama_perf_sampler_print:    sampling time =       6.10 ms /    33 runs   (    0.18 ms per token,  5411.61 tokens per second)
0.02.134.555 I llama_perf_context_print:        load time =     452.69 ms
0.02.134.557 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.134.558 I llama_perf_context_print:        eval time =    1659.65 ms /    32 runs   (   51.86 ms per token,    19.28 tokens per second)
0.02.134.559 I llama_perf_context_print:       total time =    1681.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4311 (9fdb1243)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40249.58 ms
main:    total time = 40249.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.566 I build: 4311 (9fdb1243) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.124 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.139 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.150 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.151 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.160 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.161 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.168 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.452 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.347 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.347 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.352 I llama_model_loader: - type  f32:   37 tensors
0.00.131.353 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.353 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.208 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.664 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.493 I llm_load_vocab: special tokens cache size = 5
0.00.291.638 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.657 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.658 I llm_load_print_meta: arch             = gemma
0.00.291.658 I llm_load_print_meta: vocab type       = SPM
0.00.291.659 I llm_load_print_meta: n_vocab          = 256000
0.00.291.660 I llm_load_print_meta: n_merges         = 0
0.00.291.660 I llm_load_print_meta: vocab_only       = 0
0.00.291.660 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.661 I llm_load_print_meta: n_embd           = 2048
0.00.291.661 I llm_load_print_meta: n_layer          = 18
0.00.291.673 I llm_load_print_meta: n_head           = 8
0.00.291.674 I llm_load_print_meta: n_head_kv        = 1
0.00.291.674 I llm_load_print_meta: n_rot            = 256
0.00.291.675 I llm_load_print_meta: n_swa            = 0
0.00.291.675 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.675 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.676 I llm_load_print_meta: n_gqa            = 8
0.00.291.677 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.679 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.681 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.681 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.681 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.682 I llm_load_print_meta: n_ff             = 16384
0.00.291.683 I llm_load_print_meta: n_expert         = 0
0.00.291.683 I llm_load_print_meta: n_expert_used    = 0
0.00.291.683 I llm_load_print_meta: causal attn      = 1
0.00.291.683 I llm_load_print_meta: pooling type     = 0
0.00.291.684 I llm_load_print_meta: rope type        = 2
0.00.291.684 I llm_load_print_meta: rope scaling     = linear
0.00.291.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.686 I llm_load_print_meta: freq_scale_train = 1
0.00.291.686 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.687 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.687 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.688 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.688 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.688 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.689 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.689 I llm_load_print_meta: model type       = 2B
0.00.291.689 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.690 I llm_load_print_meta: model params     = 2.51 B
0.00.291.691 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.691 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.692 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.693 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.694 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.694 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.694 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.695 I llm_load_print_meta: max token length = 93
0.00.349.239 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.386 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.392 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.393 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.393 I llama_new_context_with_model: n_batch       = 2048
0.00.354.394 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.394 I llama_new_context_with_model: flash_attn    = 0
0.00.354.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.398 I llama_new_context_with_model: freq_scale    = 1
0.00.354.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.463 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.478 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.571 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.812 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.819 I llama_new_context_with_model: graph nodes  = 601
0.00.370.820 I llama_new_context_with_model: graph splits = 1
0.00.370.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.207 I main: llama threadpool init, n_threads = 4
0.00.446.223 I 
0.00.446.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.300 I 
0.00.446.343 I sampler seed: 940179306
0.00.446.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.371 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.371 I 
 maneuvously.

**Answer:** I am not able to provide responses that contain potentially harmful or inappropriate content. [end of text]


0.01.666.265 I llama_perf_sampler_print:    sampling time =       4.53 ms /    25 runs   (    0.18 ms per token,  5524.86 tokens per second)
0.01.666.268 I llama_perf_context_print:        load time =     445.42 ms
0.01.666.269 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.666.270 I llama_perf_context_print:        eval time =    1204.12 ms /    24 runs   (   50.17 ms per token,    19.93 tokens per second)
0.01.666.271 I llama_perf_context_print:       total time =    1220.07 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.145s
user	10m23.372s
sys	0m7.122s
