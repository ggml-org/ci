+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.613 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.022.413 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.426 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.449 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.450 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.451 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.452 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.457 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.458 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.459 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.461 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.957 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.735 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.662 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.663 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.664 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.665 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.666 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.668 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.670 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.671 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.675 I llama_model_loader: - type  f32:   37 tensors
0.00.134.675 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.614 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.477 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.227 I llm_load_vocab: special tokens cache size = 5
0.00.293.976 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.995 I llm_load_print_meta: arch             = gemma
0.00.293.995 I llm_load_print_meta: vocab type       = SPM
0.00.293.996 I llm_load_print_meta: n_vocab          = 256000
0.00.293.996 I llm_load_print_meta: n_merges         = 0
0.00.293.997 I llm_load_print_meta: vocab_only       = 0
0.00.293.997 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.997 I llm_load_print_meta: n_embd           = 2048
0.00.293.998 I llm_load_print_meta: n_layer          = 18
0.00.294.010 I llm_load_print_meta: n_head           = 8
0.00.294.011 I llm_load_print_meta: n_head_kv        = 1
0.00.294.011 I llm_load_print_meta: n_rot            = 256
0.00.294.012 I llm_load_print_meta: n_swa            = 0
0.00.294.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.012 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.013 I llm_load_print_meta: n_gqa            = 8
0.00.294.014 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.015 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.016 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.017 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.019 I llm_load_print_meta: n_ff             = 16384
0.00.294.020 I llm_load_print_meta: n_expert         = 0
0.00.294.020 I llm_load_print_meta: n_expert_used    = 0
0.00.294.020 I llm_load_print_meta: causal attn      = 1
0.00.294.021 I llm_load_print_meta: pooling type     = 0
0.00.294.021 I llm_load_print_meta: rope type        = 2
0.00.294.021 I llm_load_print_meta: rope scaling     = linear
0.00.294.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.024 I llm_load_print_meta: freq_scale_train = 1
0.00.294.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.025 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.026 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.026 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.027 I llm_load_print_meta: model type       = 2B
0.00.294.027 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.028 I llm_load_print_meta: model params     = 2.51 B
0.00.294.029 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.030 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.032 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.033 I llm_load_print_meta: max token length = 93
0.00.394.664 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.394.673 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.394.674 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.394.675 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.394.675 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.394.676 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.400.043 I llama_new_context_with_model: n_seq_max     = 1
0.00.400.051 I llama_new_context_with_model: n_ctx         = 4096
0.00.400.051 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.400.052 I llama_new_context_with_model: n_batch       = 2048
0.00.400.052 I llama_new_context_with_model: n_ubatch      = 512
0.00.400.053 I llama_new_context_with_model: flash_attn    = 0
0.00.400.057 I llama_new_context_with_model: freq_base     = 10000.0
0.00.400.058 I llama_new_context_with_model: freq_scale    = 1
0.00.400.059 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.414.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.415.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.415.098 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.410 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.416.417 I llama_new_context_with_model: graph nodes  = 601
0.00.416.417 I llama_new_context_with_model: graph splits = 1
0.00.416.419 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.504.069 I main: llama threadpool init, n_threads = 4
0.00.504.085 I 
0.00.504.159 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.504.163 I 
0.00.504.207 I sampler seed: 2028923262
0.00.504.218 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.504.221 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.504.222 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.504.222 I 
 increadibly, and the room was filled with the sound of her screams.

The context suggests that:

a) The speaker witnessed a tragic event.


0.02.836.615 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6726.46 tokens per second)
0.02.836.618 I llama_perf_context_print:        load time =     503.20 ms
0.02.836.620 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.836.622 I llama_perf_context_print:        eval time =    2312.06 ms /    32 runs   (   72.25 ms per token,    13.84 tokens per second)
0.02.836.623 I llama_perf_context_print:       total time =    2332.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.616 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.813 I main: llama backend init
0.00.000.820 I main: load the model and apply lora adapter, if any
0.00.021.504 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.526 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.533 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.536 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.537 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.537 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.546 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.202 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.144 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.145 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.146 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.149 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.150 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.155 I llama_model_loader: - type  f32:   37 tensors
0.00.133.156 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.732 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.810 I llm_load_vocab: special tokens cache size = 5
0.00.280.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.059 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.060 I llm_load_print_meta: arch             = gemma
0.00.280.061 I llm_load_print_meta: vocab type       = SPM
0.00.280.062 I llm_load_print_meta: n_vocab          = 256000
0.00.280.062 I llm_load_print_meta: n_merges         = 0
0.00.280.063 I llm_load_print_meta: vocab_only       = 0
0.00.280.063 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.064 I llm_load_print_meta: n_embd           = 2048
0.00.280.064 I llm_load_print_meta: n_layer          = 18
0.00.280.075 I llm_load_print_meta: n_head           = 8
0.00.280.076 I llm_load_print_meta: n_head_kv        = 1
0.00.280.077 I llm_load_print_meta: n_rot            = 256
0.00.280.077 I llm_load_print_meta: n_swa            = 0
0.00.280.077 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.077 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.078 I llm_load_print_meta: n_gqa            = 8
0.00.280.079 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.080 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.081 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.082 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.083 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.083 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.084 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.085 I llm_load_print_meta: n_ff             = 16384
0.00.280.085 I llm_load_print_meta: n_expert         = 0
0.00.280.085 I llm_load_print_meta: n_expert_used    = 0
0.00.280.085 I llm_load_print_meta: causal attn      = 1
0.00.280.086 I llm_load_print_meta: pooling type     = 0
0.00.280.086 I llm_load_print_meta: rope type        = 2
0.00.280.086 I llm_load_print_meta: rope scaling     = linear
0.00.280.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.088 I llm_load_print_meta: freq_scale_train = 1
0.00.280.088 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.089 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.089 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.089 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.090 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.090 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.090 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.091 I llm_load_print_meta: model type       = 2B
0.00.280.091 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.092 I llm_load_print_meta: model params     = 2.51 B
0.00.280.093 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.093 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.097 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.097 I llm_load_print_meta: max token length = 93
0.00.373.381 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.547 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.554 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.554 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.554 I llama_new_context_with_model: n_batch       = 2048
0.00.378.555 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.555 I llama_new_context_with_model: flash_attn    = 0
0.00.378.559 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.559 I llama_new_context_with_model: freq_scale    = 1
0.00.378.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.685 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.702 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.796 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.074 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.081 I llama_new_context_with_model: graph nodes  = 601
0.00.395.081 I llama_new_context_with_model: graph splits = 1
0.00.395.084 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.004 I main: llama threadpool init, n_threads = 4
0.00.477.020 I 
0.00.477.094 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.477.097 I 
0.00.477.140 I sampler seed: 2309358532
0.00.477.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.165 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.168 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.168 I 
 increasities:

a) A single, isolated neuron transmitting a signal

b) A network of interconnected neurons transmitting a signal

c) Multiple neurons transmitting signals

0.02.711.748 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6563.25 tokens per second)
0.02.711.750 I llama_perf_context_print:        load time =     476.17 ms
0.02.711.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.754 I llama_perf_context_print:        eval time =    2214.48 ms /    32 runs   (   69.20 ms per token,    14.45 tokens per second)
0.02.711.755 I llama_perf_context_print:       total time =    2234.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.312 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.323 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.331 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.338 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.342 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.343 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.343 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.344 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.345 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.345 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.350 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.350 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.351 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.352 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.352 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.934 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.940 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.941 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.942 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.945 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.946 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.947 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.947 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.948 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.952 I llama_model_loader: - type  f32:   37 tensors
0.00.132.953 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.779 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.278.421 I llm_load_vocab: special tokens cache size = 5
0.00.299.686 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.299.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.299.714 I llm_load_print_meta: arch             = gemma
0.00.299.715 I llm_load_print_meta: vocab type       = SPM
0.00.299.715 I llm_load_print_meta: n_vocab          = 256000
0.00.299.716 I llm_load_print_meta: n_merges         = 0
0.00.299.716 I llm_load_print_meta: vocab_only       = 0
0.00.299.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.299.716 I llm_load_print_meta: n_embd           = 2048
0.00.299.717 I llm_load_print_meta: n_layer          = 18
0.00.299.729 I llm_load_print_meta: n_head           = 8
0.00.299.730 I llm_load_print_meta: n_head_kv        = 1
0.00.299.730 I llm_load_print_meta: n_rot            = 256
0.00.299.730 I llm_load_print_meta: n_swa            = 0
0.00.299.731 I llm_load_print_meta: n_embd_head_k    = 256
0.00.299.731 I llm_load_print_meta: n_embd_head_v    = 256
0.00.299.732 I llm_load_print_meta: n_gqa            = 8
0.00.299.733 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.299.734 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.299.735 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.299.736 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.299.737 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.299.737 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.299.737 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.299.738 I llm_load_print_meta: n_ff             = 16384
0.00.299.738 I llm_load_print_meta: n_expert         = 0
0.00.299.739 I llm_load_print_meta: n_expert_used    = 0
0.00.299.739 I llm_load_print_meta: causal attn      = 1
0.00.299.739 I llm_load_print_meta: pooling type     = 0
0.00.299.739 I llm_load_print_meta: rope type        = 2
0.00.299.740 I llm_load_print_meta: rope scaling     = linear
0.00.299.742 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.299.742 I llm_load_print_meta: freq_scale_train = 1
0.00.299.743 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.299.743 I llm_load_print_meta: rope_finetuned   = unknown
0.00.299.743 I llm_load_print_meta: ssm_d_conv       = 0
0.00.299.744 I llm_load_print_meta: ssm_d_inner      = 0
0.00.299.744 I llm_load_print_meta: ssm_d_state      = 0
0.00.299.744 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.299.744 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.299.745 I llm_load_print_meta: model type       = 2B
0.00.299.745 I llm_load_print_meta: model ftype      = Q8_0
0.00.299.746 I llm_load_print_meta: model params     = 2.51 B
0.00.299.747 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.299.747 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.299.748 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.299.748 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.299.749 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.299.749 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.299.750 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.750 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.750 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.751 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.751 I llm_load_print_meta: max token length = 93
0.00.374.464 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.374.471 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.472 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.374.473 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.374.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.374.474 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.379.630 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.637 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.637 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.638 I llama_new_context_with_model: n_batch       = 2048
0.00.379.638 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.639 I llama_new_context_with_model: flash_attn    = 0
0.00.379.642 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.643 I llama_new_context_with_model: freq_scale    = 1
0.00.379.644 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.088 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.101 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.193 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.428 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.435 I llama_new_context_with_model: graph nodes  = 601
0.00.395.436 I llama_new_context_with_model: graph splits = 1
0.00.395.438 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.980 I main: llama threadpool init, n_threads = 4
0.00.480.997 I 
0.00.481.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.481.086 I 
0.00.481.138 I sampler seed: 1440695051
0.00.481.149 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.155 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.156 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.156 I 
 increasements in the text, ensuring the accuracy of the dates and names mentioned.

**Historical Narrative**

The year 1872 saw the dawn

0.02.785.351 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6447.83 tokens per second)
0.02.785.353 I llama_perf_context_print:        load time =     480.22 ms
0.02.785.355 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.785.356 I llama_perf_context_print:        eval time =    2284.11 ms /    32 runs   (   71.38 ms per token,    14.01 tokens per second)
0.02.785.357 I llama_perf_context_print:       total time =    2304.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.184 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.390 I main: load the model and apply lora adapter, if any
0.00.020.501 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.521 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.527 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.528 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.532 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.533 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.534 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.540 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.540 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.541 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.542 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.821 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.416 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.328 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.329 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.332 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.337 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.338 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.339 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.341 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.345 I llama_model_loader: - type  f32:   37 tensors
0.00.132.346 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.180 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.219 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.936 I llm_load_vocab: special tokens cache size = 5
0.00.288.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.253 I llm_load_print_meta: arch             = gemma
0.00.288.253 I llm_load_print_meta: vocab type       = SPM
0.00.288.254 I llm_load_print_meta: n_vocab          = 256000
0.00.288.255 I llm_load_print_meta: n_merges         = 0
0.00.288.255 I llm_load_print_meta: vocab_only       = 0
0.00.288.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.256 I llm_load_print_meta: n_embd           = 2048
0.00.288.256 I llm_load_print_meta: n_layer          = 18
0.00.288.267 I llm_load_print_meta: n_head           = 8
0.00.288.269 I llm_load_print_meta: n_head_kv        = 1
0.00.288.269 I llm_load_print_meta: n_rot            = 256
0.00.288.269 I llm_load_print_meta: n_swa            = 0
0.00.288.270 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.270 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.271 I llm_load_print_meta: n_gqa            = 8
0.00.288.272 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.274 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.275 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.276 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.278 I llm_load_print_meta: n_ff             = 16384
0.00.288.280 I llm_load_print_meta: n_expert         = 0
0.00.288.280 I llm_load_print_meta: n_expert_used    = 0
0.00.288.280 I llm_load_print_meta: causal attn      = 1
0.00.288.280 I llm_load_print_meta: pooling type     = 0
0.00.288.281 I llm_load_print_meta: rope type        = 2
0.00.288.282 I llm_load_print_meta: rope scaling     = linear
0.00.288.283 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.285 I llm_load_print_meta: freq_scale_train = 1
0.00.288.285 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.286 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.286 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.287 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.287 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.287 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.287 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.288 I llm_load_print_meta: model type       = 2B
0.00.288.289 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.289 I llm_load_print_meta: model params     = 2.51 B
0.00.288.290 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.292 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.294 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.295 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.295 I llm_load_print_meta: max token length = 93
0.00.359.530 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.359.539 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.364.770 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.777 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.777 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.778 I llama_new_context_with_model: n_batch       = 2048
0.00.364.779 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.779 I llama_new_context_with_model: flash_attn    = 0
0.00.364.783 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.785 I llama_new_context_with_model: freq_scale    = 1
0.00.364.786 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.077 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.092 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.513 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.520 I llama_new_context_with_model: graph nodes  = 601
0.00.381.521 I llama_new_context_with_model: graph splits = 1
0.00.381.523 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.869 I main: llama threadpool init, n_threads = 4
0.00.473.886 I 
0.00.473.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.963 I 
0.00.474.011 I sampler seed: 799381852
0.00.474.022 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.026 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.028 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.028 I 
 increasels, and other small animals that live in or around the roots of trees.

**Questions:**

1. What is the purpose of these small animals

0.02.962.708 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7066.38 tokens per second)
0.02.962.711 I llama_perf_context_print:        load time =     473.46 ms
0.02.962.712 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.962.714 I llama_perf_context_print:        eval time =    2468.97 ms /    32 runs   (   77.16 ms per token,    12.96 tokens per second)
0.02.962.715 I llama_perf_context_print:       total time =    2488.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m21.048s
user	0m40.468s
sys	0m9.586s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4202 (9f912511)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40277.77 ms
main:    total time = 40277.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.564 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.431 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.443 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.452 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.462 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.469 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.470 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.471 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.471 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.936 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.003 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.004 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.006 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.008 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.009 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.009 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.013 I llama_model_loader: - type  f32:   37 tensors
0.00.134.014 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.015 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.002 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.521 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.181 I llm_load_vocab: special tokens cache size = 5
0.00.284.459 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.481 I llm_load_print_meta: arch             = gemma
0.00.284.481 I llm_load_print_meta: vocab type       = SPM
0.00.284.482 I llm_load_print_meta: n_vocab          = 256000
0.00.284.482 I llm_load_print_meta: n_merges         = 0
0.00.284.483 I llm_load_print_meta: vocab_only       = 0
0.00.284.483 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.483 I llm_load_print_meta: n_embd           = 2048
0.00.284.484 I llm_load_print_meta: n_layer          = 18
0.00.284.496 I llm_load_print_meta: n_head           = 8
0.00.284.497 I llm_load_print_meta: n_head_kv        = 1
0.00.284.497 I llm_load_print_meta: n_rot            = 256
0.00.284.497 I llm_load_print_meta: n_swa            = 0
0.00.284.498 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.498 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.499 I llm_load_print_meta: n_gqa            = 8
0.00.284.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.503 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.504 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.504 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.505 I llm_load_print_meta: n_ff             = 16384
0.00.284.506 I llm_load_print_meta: n_expert         = 0
0.00.284.506 I llm_load_print_meta: n_expert_used    = 0
0.00.284.507 I llm_load_print_meta: causal attn      = 1
0.00.284.507 I llm_load_print_meta: pooling type     = 0
0.00.284.507 I llm_load_print_meta: rope type        = 2
0.00.284.508 I llm_load_print_meta: rope scaling     = linear
0.00.284.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.509 I llm_load_print_meta: freq_scale_train = 1
0.00.284.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.510 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.511 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.511 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.512 I llm_load_print_meta: model type       = 2B
0.00.284.512 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.513 I llm_load_print_meta: model params     = 2.51 B
0.00.284.514 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.514 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.515 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.515 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.515 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.516 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.516 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.516 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.517 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.517 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.517 I llm_load_print_meta: max token length = 93
0.00.344.268 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.344.276 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.344.277 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.344.277 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.344.278 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.344.278 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.349.536 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.544 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.545 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.545 I llama_new_context_with_model: n_batch       = 2048
0.00.349.546 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.546 I llama_new_context_with_model: flash_attn    = 0
0.00.349.550 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.551 I llama_new_context_with_model: freq_scale    = 1
0.00.349.552 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.308 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.324 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.432 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.791 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.797 I llama_new_context_with_model: graph nodes  = 601
0.00.366.798 I llama_new_context_with_model: graph splits = 1
0.00.366.800 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.656 I main: llama threadpool init, n_threads = 4
0.00.446.672 I 
0.00.446.749 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.753 I 
0.00.446.799 I sampler seed: 2595472210
0.00.446.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.816 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.819 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.819 I 
 seconally.

**Answer:** I understand. I will ensure to respond promptly and accurately to any future inquiries you may have. [end of text]


0.01.868.954 I llama_perf_sampler_print:    sampling time =       4.38 ms /    28 runs   (    0.16 ms per token,  6388.32 tokens per second)
0.01.868.956 I llama_perf_context_print:        load time =     445.88 ms
0.01.868.958 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.868.959 I llama_perf_context_print:        eval time =    1405.34 ms /    27 runs   (   52.05 ms per token,    19.21 tokens per second)
0.01.868.960 I llama_perf_context_print:       total time =    1422.31 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4202 (9f912511)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40218.57 ms
main:    total time = 40218.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.568 I build: 4202 (9f912511) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.398 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.413 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.419 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.421 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.425 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.426 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.427 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.427 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.428 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.428 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.432 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.433 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.434 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.055 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.112 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.044 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.051 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.051 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.052 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.056 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.060 I llama_model_loader: - type  f32:   37 tensors
0.00.132.061 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.062 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.790 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.488 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.196 I llm_load_vocab: special tokens cache size = 5
0.00.286.513 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.530 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.531 I llm_load_print_meta: arch             = gemma
0.00.286.531 I llm_load_print_meta: vocab type       = SPM
0.00.286.532 I llm_load_print_meta: n_vocab          = 256000
0.00.286.533 I llm_load_print_meta: n_merges         = 0
0.00.286.533 I llm_load_print_meta: vocab_only       = 0
0.00.286.533 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.533 I llm_load_print_meta: n_embd           = 2048
0.00.286.534 I llm_load_print_meta: n_layer          = 18
0.00.286.545 I llm_load_print_meta: n_head           = 8
0.00.286.546 I llm_load_print_meta: n_head_kv        = 1
0.00.286.547 I llm_load_print_meta: n_rot            = 256
0.00.286.547 I llm_load_print_meta: n_swa            = 0
0.00.286.547 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.547 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.548 I llm_load_print_meta: n_gqa            = 8
0.00.286.549 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.550 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.551 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.553 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.553 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.554 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.554 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.555 I llm_load_print_meta: n_ff             = 16384
0.00.286.555 I llm_load_print_meta: n_expert         = 0
0.00.286.555 I llm_load_print_meta: n_expert_used    = 0
0.00.286.555 I llm_load_print_meta: causal attn      = 1
0.00.286.555 I llm_load_print_meta: pooling type     = 0
0.00.286.556 I llm_load_print_meta: rope type        = 2
0.00.286.556 I llm_load_print_meta: rope scaling     = linear
0.00.286.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.558 I llm_load_print_meta: freq_scale_train = 1
0.00.286.559 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.560 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.560 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.561 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.561 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.562 I llm_load_print_meta: model type       = 2B
0.00.286.562 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.563 I llm_load_print_meta: model params     = 2.51 B
0.00.286.564 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.564 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.564 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.565 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.565 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.566 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.566 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.568 I llm_load_print_meta: max token length = 93
0.00.342.369 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.348.431 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.436 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.437 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.437 I llama_new_context_with_model: n_batch       = 2048
0.00.348.438 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.438 I llama_new_context_with_model: flash_attn    = 0
0.00.348.441 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.442 I llama_new_context_with_model: freq_scale    = 1
0.00.348.442 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.347 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.362 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.732 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.737 I llama_new_context_with_model: graph nodes  = 601
0.00.364.737 I llama_new_context_with_model: graph splits = 1
0.00.364.739 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.476 I main: llama threadpool init, n_threads = 4
0.00.439.494 I 
0.00.439.568 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.439.571 I 
0.00.439.615 I sampler seed: 2300402044
0.00.439.627 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.630 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.631 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.631 I 
 maneustalline crystalline structures, and how they influence the properties of the materials.

**Answer:**

**1. Structural Properties:**

- The crystalline structure of

0.02.054.446 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.02.054.449 I llama_perf_context_print:        load time =     438.69 ms
0.02.054.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.452 I llama_perf_context_print:        eval time =    1596.00 ms /    32 runs   (   49.87 ms per token,    20.05 tokens per second)
0.02.054.453 I llama_perf_context_print:       total time =    1614.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.303s
user	10m24.149s
sys	0m6.984s
