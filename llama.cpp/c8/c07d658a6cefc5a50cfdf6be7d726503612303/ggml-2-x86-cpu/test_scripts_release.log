+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.801 I main: llama backend init
0.00.001.934 I main: load the model and apply lora adapter, if any
0.00.022.330 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.382 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.398 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.406 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.406 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.408 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.408 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.409 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.414 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.414 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.416 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.416 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.417 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.216 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.457 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.460 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.463 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.464 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.464 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.469 I llama_model_loader: - type  f32:   37 tensors
0.00.133.472 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.179 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.836 I llm_load_vocab: special tokens cache size = 5
0.00.285.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.069 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.069 I llm_load_print_meta: arch             = gemma
0.00.285.070 I llm_load_print_meta: vocab type       = SPM
0.00.285.071 I llm_load_print_meta: n_vocab          = 256000
0.00.285.071 I llm_load_print_meta: n_merges         = 0
0.00.285.072 I llm_load_print_meta: vocab_only       = 0
0.00.285.072 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.072 I llm_load_print_meta: n_embd           = 2048
0.00.285.073 I llm_load_print_meta: n_layer          = 18
0.00.285.084 I llm_load_print_meta: n_head           = 8
0.00.285.085 I llm_load_print_meta: n_head_kv        = 1
0.00.285.086 I llm_load_print_meta: n_rot            = 256
0.00.285.086 I llm_load_print_meta: n_swa            = 0
0.00.285.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.087 I llm_load_print_meta: n_gqa            = 8
0.00.285.088 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.090 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.091 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.091 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.092 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.093 I llm_load_print_meta: n_ff             = 16384
0.00.285.093 I llm_load_print_meta: n_expert         = 0
0.00.285.094 I llm_load_print_meta: n_expert_used    = 0
0.00.285.094 I llm_load_print_meta: causal attn      = 1
0.00.285.094 I llm_load_print_meta: pooling type     = 0
0.00.285.095 I llm_load_print_meta: rope type        = 2
0.00.285.095 I llm_load_print_meta: rope scaling     = linear
0.00.285.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.097 I llm_load_print_meta: freq_scale_train = 1
0.00.285.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.098 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.098 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.099 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.099 I llm_load_print_meta: model type       = 2B
0.00.285.099 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.100 I llm_load_print_meta: model params     = 2.51 B
0.00.285.101 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.102 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.103 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.103 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.104 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.104 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.104 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.105 I llm_load_print_meta: max token length = 93
0.00.285.128 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.384.767 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.384.776 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.384.777 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.384.777 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.384.778 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.384.779 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.389.970 I llama_new_context_with_model: n_ctx      = 8192
0.00.389.978 I llama_new_context_with_model: n_batch    = 2048
0.00.389.979 I llama_new_context_with_model: n_ubatch   = 512
0.00.389.979 I llama_new_context_with_model: flash_attn = 0
0.00.389.983 I llama_new_context_with_model: freq_base  = 10000.0
0.00.389.984 I llama_new_context_with_model: freq_scale = 1
0.00.419.612 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.419.627 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.419.720 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.604 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.420.613 I llama_new_context_with_model: graph nodes  = 601
0.00.420.613 I llama_new_context_with_model: graph splits = 1
0.00.420.615 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.512.727 I main: llama threadpool init, n_threads = 4
0.00.512.740 I 
0.00.512.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.512.828 I 
0.00.512.867 I sampler seed: 2895032292
0.00.512.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.512.885 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.512.886 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.512.886 I 
 increasels and other playful creatures.

I am unable to generate text that contains sexually suggestive content. [end of text]


0.02.016.910 I llama_perf_sampler_print:    sampling time =       3.52 ms /    22 runs   (    0.16 ms per token,  6255.33 tokens per second)
0.02.016.913 I llama_perf_context_print:        load time =     510.77 ms
0.02.016.915 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.016.917 I llama_perf_context_print:        eval time =    1489.96 ms /    21 runs   (   70.95 ms per token,    14.09 tokens per second)
0.02.016.918 I llama_perf_context_print:       total time =    1504.19 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.523 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.001.838 I main: load the model and apply lora adapter, if any
0.00.022.089 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.105 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.120 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.131 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.133 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.134 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.282 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.120 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.126 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.127 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.135 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.137 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.137 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.139 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.143 I llama_model_loader: - type  f32:   37 tensors
0.00.133.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.645 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.369 I llm_load_vocab: special tokens cache size = 5
0.00.292.710 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.731 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.731 I llm_load_print_meta: arch             = gemma
0.00.292.732 I llm_load_print_meta: vocab type       = SPM
0.00.292.733 I llm_load_print_meta: n_vocab          = 256000
0.00.292.733 I llm_load_print_meta: n_merges         = 0
0.00.292.734 I llm_load_print_meta: vocab_only       = 0
0.00.292.734 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.734 I llm_load_print_meta: n_embd           = 2048
0.00.292.735 I llm_load_print_meta: n_layer          = 18
0.00.292.747 I llm_load_print_meta: n_head           = 8
0.00.292.748 I llm_load_print_meta: n_head_kv        = 1
0.00.292.748 I llm_load_print_meta: n_rot            = 256
0.00.292.749 I llm_load_print_meta: n_swa            = 0
0.00.292.749 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.750 I llm_load_print_meta: n_gqa            = 8
0.00.292.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.752 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.755 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.756 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.757 I llm_load_print_meta: n_ff             = 16384
0.00.292.757 I llm_load_print_meta: n_expert         = 0
0.00.292.758 I llm_load_print_meta: n_expert_used    = 0
0.00.292.758 I llm_load_print_meta: causal attn      = 1
0.00.292.758 I llm_load_print_meta: pooling type     = 0
0.00.292.758 I llm_load_print_meta: rope type        = 2
0.00.292.759 I llm_load_print_meta: rope scaling     = linear
0.00.292.760 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.761 I llm_load_print_meta: freq_scale_train = 1
0.00.292.761 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.762 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.762 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.762 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.762 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.762 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.763 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.763 I llm_load_print_meta: model type       = 2B
0.00.292.764 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.765 I llm_load_print_meta: model params     = 2.51 B
0.00.292.765 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.766 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.767 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.767 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.768 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.769 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.769 I llm_load_print_meta: max token length = 93
0.00.292.790 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.385.398 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.390.628 I llama_new_context_with_model: n_ctx      = 8192
0.00.390.636 I llama_new_context_with_model: n_batch    = 2048
0.00.390.636 I llama_new_context_with_model: n_ubatch   = 512
0.00.390.637 I llama_new_context_with_model: flash_attn = 0
0.00.390.640 I llama_new_context_with_model: freq_base  = 10000.0
0.00.390.641 I llama_new_context_with_model: freq_scale = 1
0.00.422.529 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.422.548 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.422.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.423.550 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.423.558 I llama_new_context_with_model: graph nodes  = 601
0.00.423.558 I llama_new_context_with_model: graph splits = 1
0.00.423.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.514.507 I main: llama threadpool init, n_threads = 4
0.00.514.522 I 
0.00.514.600 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.514.603 I 
0.00.514.644 I sampler seed: 2353777716
0.00.514.654 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.514.657 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.514.658 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.514.658 I 
 seconary and conjunctive clauses.

**Secondary Clauses**

Secondary clauses are dependent clauses that provide additional information or explanation to the main clause. They often contain

0.02.756.217 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6879.30 tokens per second)
0.02.756.219 I llama_perf_context_print:        load time =     512.65 ms
0.02.756.220 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.756.222 I llama_perf_context_print:        eval time =    2221.11 ms /    32 runs   (   69.41 ms per token,    14.41 tokens per second)
0.02.756.222 I llama_perf_context_print:       total time =    2241.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.522 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.021.728 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.789 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.805 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.814 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.816 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.821 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.825 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.826 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.827 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.828 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.837 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.838 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.839 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.840 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.639 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.571 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.573 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.576 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.577 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.578 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.578 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.579 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.583 I llama_model_loader: - type  f32:   37 tensors
0.00.132.586 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.295 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.965 I llm_load_vocab: special tokens cache size = 5
0.00.276.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.058 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.058 I llm_load_print_meta: arch             = gemma
0.00.276.059 I llm_load_print_meta: vocab type       = SPM
0.00.276.059 I llm_load_print_meta: n_vocab          = 256000
0.00.276.060 I llm_load_print_meta: n_merges         = 0
0.00.276.060 I llm_load_print_meta: vocab_only       = 0
0.00.276.060 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.061 I llm_load_print_meta: n_embd           = 2048
0.00.276.061 I llm_load_print_meta: n_layer          = 18
0.00.276.074 I llm_load_print_meta: n_head           = 8
0.00.276.075 I llm_load_print_meta: n_head_kv        = 1
0.00.276.075 I llm_load_print_meta: n_rot            = 256
0.00.276.076 I llm_load_print_meta: n_swa            = 0
0.00.276.076 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.076 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.077 I llm_load_print_meta: n_gqa            = 8
0.00.276.078 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.081 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.082 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.082 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.083 I llm_load_print_meta: n_ff             = 16384
0.00.276.084 I llm_load_print_meta: n_expert         = 0
0.00.276.084 I llm_load_print_meta: n_expert_used    = 0
0.00.276.084 I llm_load_print_meta: causal attn      = 1
0.00.276.085 I llm_load_print_meta: pooling type     = 0
0.00.276.085 I llm_load_print_meta: rope type        = 2
0.00.276.085 I llm_load_print_meta: rope scaling     = linear
0.00.276.087 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.087 I llm_load_print_meta: freq_scale_train = 1
0.00.276.088 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.088 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.088 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.088 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.088 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.089 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.090 I llm_load_print_meta: model type       = 2B
0.00.276.090 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.091 I llm_load_print_meta: model params     = 2.51 B
0.00.276.092 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.093 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.093 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.095 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.095 I llm_load_print_meta: max token length = 93
0.00.276.119 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.352.427 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.352.436 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.352.436 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.352.437 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.352.438 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.352.438 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.357.486 I llama_new_context_with_model: n_ctx      = 8192
0.00.357.494 I llama_new_context_with_model: n_batch    = 2048
0.00.357.494 I llama_new_context_with_model: n_ubatch   = 512
0.00.357.495 I llama_new_context_with_model: flash_attn = 0
0.00.357.498 I llama_new_context_with_model: freq_base  = 10000.0
0.00.357.499 I llama_new_context_with_model: freq_scale = 1
0.00.387.605 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.387.621 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.387.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.623 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.388.631 I llama_new_context_with_model: graph nodes  = 601
0.00.388.631 I llama_new_context_with_model: graph splits = 1
0.00.388.632 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.495 I main: llama threadpool init, n_threads = 4
0.00.482.510 I 
0.00.482.599 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.602 I 
0.00.482.653 I sampler seed: 2141035405
0.00.482.663 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.665 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.666 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.666 I 
 increasities in his music. He has faced scrutiny for his lyrics, which often depict violence, misogyny, and drug use.

Despite the controversies,

0.02.830.415 I llama_perf_sampler_print:    sampling time =       5.30 ms /    33 runs   (    0.16 ms per token,  6222.89 tokens per second)
0.02.830.418 I llama_perf_context_print:        load time =     480.58 ms
0.02.830.419 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.830.420 I llama_perf_context_print:        eval time =    2326.99 ms /    32 runs   (   72.72 ms per token,    13.75 tokens per second)
0.02.830.421 I llama_perf_context_print:       total time =    2347.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.587 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.001.888 I main: load the model and apply lora adapter, if any
0.00.022.188 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.259 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.266 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.267 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.267 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.268 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.268 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.550 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.363 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.369 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.370 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.370 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.371 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.375 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.376 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.377 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.378 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.382 I llama_model_loader: - type  f32:   37 tensors
0.00.134.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.271.791 I llm_load_vocab: special tokens cache size = 5
0.00.292.916 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.936 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.937 I llm_load_print_meta: arch             = gemma
0.00.292.937 I llm_load_print_meta: vocab type       = SPM
0.00.292.938 I llm_load_print_meta: n_vocab          = 256000
0.00.292.938 I llm_load_print_meta: n_merges         = 0
0.00.292.939 I llm_load_print_meta: vocab_only       = 0
0.00.292.939 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.939 I llm_load_print_meta: n_embd           = 2048
0.00.292.939 I llm_load_print_meta: n_layer          = 18
0.00.292.952 I llm_load_print_meta: n_head           = 8
0.00.292.953 I llm_load_print_meta: n_head_kv        = 1
0.00.292.953 I llm_load_print_meta: n_rot            = 256
0.00.292.953 I llm_load_print_meta: n_swa            = 0
0.00.292.953 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.954 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.955 I llm_load_print_meta: n_gqa            = 8
0.00.292.956 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.957 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.957 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.960 I llm_load_print_meta: n_ff             = 16384
0.00.292.961 I llm_load_print_meta: n_expert         = 0
0.00.292.961 I llm_load_print_meta: n_expert_used    = 0
0.00.292.961 I llm_load_print_meta: causal attn      = 1
0.00.292.962 I llm_load_print_meta: pooling type     = 0
0.00.292.962 I llm_load_print_meta: rope type        = 2
0.00.292.962 I llm_load_print_meta: rope scaling     = linear
0.00.292.964 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.965 I llm_load_print_meta: freq_scale_train = 1
0.00.292.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.966 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.966 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.966 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.967 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.967 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.967 I llm_load_print_meta: model type       = 2B
0.00.292.968 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.969 I llm_load_print_meta: model params     = 2.51 B
0.00.292.969 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.970 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.970 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.970 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.971 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.971 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.972 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.972 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.972 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.973 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.973 I llm_load_print_meta: max token length = 93
0.00.292.993 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.159 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.363.167 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.368.171 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.178 I llama_new_context_with_model: n_batch    = 2048
0.00.368.178 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.179 I llama_new_context_with_model: flash_attn = 0
0.00.368.181 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.182 I llama_new_context_with_model: freq_scale = 1
0.00.397.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.773 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.867 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.767 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.398.775 I llama_new_context_with_model: graph nodes  = 601
0.00.398.775 I llama_new_context_with_model: graph splits = 1
0.00.398.777 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.951 I main: llama threadpool init, n_threads = 4
0.00.495.965 I 
0.00.496.044 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.048 I 
0.00.496.088 I sampler seed: 2054948923
0.00.496.099 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.102 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.102 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.104 I 
 increasively.

I have a request for you to generate a report on the effectiveness of a marketing campaign aimed at increasing brand awareness and customer engagement.

The

0.02.988.535 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6924.05 tokens per second)
0.02.988.537 I llama_perf_context_print:        load time =     494.04 ms
0.02.988.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.988.540 I llama_perf_context_print:        eval time =    2472.55 ms /    32 runs   (   77.27 ms per token,    12.94 tokens per second)
0.02.988.540 I llama_perf_context_print:       total time =    2492.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.256s
user	0m37.355s
sys	0m9.574s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3962 (c8c07d65)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32005.60 ms
main:    total time = 32005.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.777 I main: llama backend init
0.00.001.903 I main: load the model and apply lora adapter, if any
0.00.022.184 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.236 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.244 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.249 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.255 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.255 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.256 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.256 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.260 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.262 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.509 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.516 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.517 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.518 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.519 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.522 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.523 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.523 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.525 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.528 I llama_model_loader: - type  f32:   37 tensors
0.00.132.530 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.531 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.261 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.861 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.578 I llm_load_vocab: special tokens cache size = 5
0.00.280.711 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.728 I llm_load_print_meta: arch             = gemma
0.00.280.728 I llm_load_print_meta: vocab type       = SPM
0.00.280.729 I llm_load_print_meta: n_vocab          = 256000
0.00.280.729 I llm_load_print_meta: n_merges         = 0
0.00.280.730 I llm_load_print_meta: vocab_only       = 0
0.00.280.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.731 I llm_load_print_meta: n_embd           = 2048
0.00.280.731 I llm_load_print_meta: n_layer          = 18
0.00.280.743 I llm_load_print_meta: n_head           = 8
0.00.280.744 I llm_load_print_meta: n_head_kv        = 1
0.00.280.745 I llm_load_print_meta: n_rot            = 256
0.00.280.745 I llm_load_print_meta: n_swa            = 0
0.00.280.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.746 I llm_load_print_meta: n_gqa            = 8
0.00.280.747 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.750 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.752 I llm_load_print_meta: n_ff             = 16384
0.00.280.752 I llm_load_print_meta: n_expert         = 0
0.00.280.752 I llm_load_print_meta: n_expert_used    = 0
0.00.280.753 I llm_load_print_meta: causal attn      = 1
0.00.280.753 I llm_load_print_meta: pooling type     = 0
0.00.280.753 I llm_load_print_meta: rope type        = 2
0.00.280.754 I llm_load_print_meta: rope scaling     = linear
0.00.280.756 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.756 I llm_load_print_meta: freq_scale_train = 1
0.00.280.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.757 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.758 I llm_load_print_meta: model type       = 2B
0.00.280.759 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.759 I llm_load_print_meta: model params     = 2.51 B
0.00.280.760 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.760 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.761 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.761 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.761 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.762 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.762 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.762 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.763 I llm_load_print_meta: max token length = 93
0.00.280.789 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.341.017 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.341.025 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.341.025 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.341.026 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.341.027 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.341.027 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.346.197 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.203 I llama_new_context_with_model: n_batch    = 2048
0.00.346.204 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.204 I llama_new_context_with_model: flash_attn = 0
0.00.346.207 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.208 I llama_new_context_with_model: freq_scale = 1
0.00.376.677 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.376.689 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.376.780 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.675 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.377.683 I llama_new_context_with_model: graph nodes  = 601
0.00.377.683 I llama_new_context_with_model: graph splits = 1
0.00.377.685 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.849 I main: llama threadpool init, n_threads = 4
0.00.459.861 I 
0.00.459.937 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.940 I 
0.00.459.979 I sampler seed: 1591917775
0.00.459.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.993 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.993 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.994 I 
 maneuvously. [end of text]


0.00.720.227 I llama_perf_sampler_print:    sampling time =       0.76 ms /     6 runs   (    0.13 ms per token,  7853.40 tokens per second)
0.00.720.230 I llama_perf_context_print:        load time =     457.92 ms
0.00.720.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.720.233 I llama_perf_context_print:        eval time =     256.24 ms /     5 runs   (   51.25 ms per token,    19.51 tokens per second)
0.00.720.233 I llama_perf_context_print:       total time =     260.39 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3962 (c8c07d65)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32153.01 ms
main:    total time = 32153.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.592 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.001.914 I main: load the model and apply lora adapter, if any
0.00.021.969 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.985 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.992 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.999 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.999 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.000 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.001 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.008 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.292 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.298 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.298 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.299 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.300 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.301 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.302 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.305 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.305 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.310 I llama_model_loader: - type  f32:   37 tensors
0.00.133.314 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.314 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.994 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.903 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.597 I llm_load_vocab: special tokens cache size = 5
0.00.283.852 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.873 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.873 I llm_load_print_meta: arch             = gemma
0.00.283.874 I llm_load_print_meta: vocab type       = SPM
0.00.283.875 I llm_load_print_meta: n_vocab          = 256000
0.00.283.875 I llm_load_print_meta: n_merges         = 0
0.00.283.875 I llm_load_print_meta: vocab_only       = 0
0.00.283.876 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.876 I llm_load_print_meta: n_embd           = 2048
0.00.283.876 I llm_load_print_meta: n_layer          = 18
0.00.283.888 I llm_load_print_meta: n_head           = 8
0.00.283.889 I llm_load_print_meta: n_head_kv        = 1
0.00.283.889 I llm_load_print_meta: n_rot            = 256
0.00.283.889 I llm_load_print_meta: n_swa            = 0
0.00.283.890 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.890 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.891 I llm_load_print_meta: n_gqa            = 8
0.00.283.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.893 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.895 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.895 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.906 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.907 I llm_load_print_meta: n_ff             = 16384
0.00.283.907 I llm_load_print_meta: n_expert         = 0
0.00.283.908 I llm_load_print_meta: n_expert_used    = 0
0.00.283.908 I llm_load_print_meta: causal attn      = 1
0.00.283.908 I llm_load_print_meta: pooling type     = 0
0.00.283.909 I llm_load_print_meta: rope type        = 2
0.00.283.909 I llm_load_print_meta: rope scaling     = linear
0.00.283.911 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.912 I llm_load_print_meta: freq_scale_train = 1
0.00.283.912 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.912 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.913 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.914 I llm_load_print_meta: model type       = 2B
0.00.283.914 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.915 I llm_load_print_meta: model params     = 2.51 B
0.00.283.916 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.916 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.917 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.917 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.917 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.917 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.918 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.919 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.919 I llm_load_print_meta: max token length = 93
0.00.283.942 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.341.680 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.346.754 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.760 I llama_new_context_with_model: n_batch    = 2048
0.00.346.761 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.761 I llama_new_context_with_model: flash_attn = 0
0.00.346.764 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.765 I llama_new_context_with_model: freq_scale = 1
0.00.377.124 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.140 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.231 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.069 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.077 I llama_new_context_with_model: graph nodes  = 601
0.00.378.077 I llama_new_context_with_model: graph splits = 1
0.00.378.079 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.639 I main: llama threadpool init, n_threads = 4
0.00.459.652 I 
0.00.459.729 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.732 I 
0.00.459.772 I sampler seed: 220570427
0.00.459.784 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.787 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.788 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.789 I 
 increasities, and the resultant increase in demand for the product. 

This is an example of:

a) Supply and demand equilibrium
b) Market

0.02.138.040 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6733.32 tokens per second)
0.02.138.042 I llama_perf_context_print:        load time =     457.70 ms
0.02.138.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.138.044 I llama_perf_context_print:        eval time =    1657.71 ms /    32 runs   (   51.80 ms per token,    19.30 tokens per second)
0.02.138.045 I llama_perf_context_print:       total time =    1678.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.268s
user	8m9.718s
sys	0m7.135s
