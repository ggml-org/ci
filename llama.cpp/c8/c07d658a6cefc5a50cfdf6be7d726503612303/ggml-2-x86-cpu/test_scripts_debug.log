+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.025.191 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.411 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.520 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.521 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.526 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.531 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.532 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.533 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.542 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.546 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.548 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.000 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.380 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.381 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.383 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.387 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.388 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.389 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.390 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.277.391 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.401 I llama_model_loader: - type  f32:   37 tensors
0.00.277.406 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.217 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.251 I llm_load_vocab: special tokens cache size = 5
0.00.632.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.302 I llm_load_print_meta: arch             = gemma
0.00.632.303 I llm_load_print_meta: vocab type       = SPM
0.00.632.303 I llm_load_print_meta: n_vocab          = 256000
0.00.632.306 I llm_load_print_meta: n_merges         = 0
0.00.632.306 I llm_load_print_meta: vocab_only       = 0
0.00.632.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.307 I llm_load_print_meta: n_embd           = 2048
0.00.632.307 I llm_load_print_meta: n_layer          = 18
0.00.632.371 I llm_load_print_meta: n_head           = 8
0.00.632.378 I llm_load_print_meta: n_head_kv        = 1
0.00.632.378 I llm_load_print_meta: n_rot            = 256
0.00.632.379 I llm_load_print_meta: n_swa            = 0
0.00.632.379 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.379 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.384 I llm_load_print_meta: n_gqa            = 8
0.00.632.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.393 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.394 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.396 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.397 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.403 I llm_load_print_meta: n_ff             = 16384
0.00.632.404 I llm_load_print_meta: n_expert         = 0
0.00.632.404 I llm_load_print_meta: n_expert_used    = 0
0.00.632.404 I llm_load_print_meta: causal attn      = 1
0.00.632.405 I llm_load_print_meta: pooling type     = 0
0.00.632.406 I llm_load_print_meta: rope type        = 2
0.00.632.407 I llm_load_print_meta: rope scaling     = linear
0.00.632.409 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.410 I llm_load_print_meta: freq_scale_train = 1
0.00.632.411 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.411 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.411 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.411 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.412 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.412 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.412 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.413 I llm_load_print_meta: model type       = 2B
0.00.632.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.415 I llm_load_print_meta: model params     = 2.51 B
0.00.632.416 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.417 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.418 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.418 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.453 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.460 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.461 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.462 I llm_load_print_meta: max token length = 93
0.00.632.644 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.732.187 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.732.199 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.732.200 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.732.200 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.732.201 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.732.202 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.738.002 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.010 I llama_new_context_with_model: n_batch    = 2048
0.00.738.010 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.011 I llama_new_context_with_model: flash_attn = 0
0.00.738.014 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.015 I llama_new_context_with_model: freq_scale = 1
0.00.768.404 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.768.449 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.768.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.769.983 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.769.989 I llama_new_context_with_model: graph nodes  = 601
0.00.769.989 I llama_new_context_with_model: graph splits = 1
0.00.770.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.380.974 I main: llama threadpool init, n_threads = 4
0.01.380.987 I 
0.01.381.094 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.381.098 I 
0.01.381.277 I sampler seed: 1792651049
0.01.381.289 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.381.296 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.381.297 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.381.298 I 
 seconally.

A company has invested in a new technology that promises to increase efficiency by 20%. The initial investment is $100,0

0.14.802.700 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.58 tokens per second)
0.14.802.702 I llama_perf_context_print:        load time =    1378.07 ms
0.14.802.704 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.802.705 I llama_perf_context_print:        eval time =   13327.85 ms /    32 runs   (  416.50 ms per token,     2.40 tokens per second)
0.14.802.719 I llama_perf_context_print:       total time =   13421.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.836 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.947 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.951 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.955 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.956 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.957 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.958 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.965 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.966 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.967 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.968 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.969 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.160 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.263 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.275 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.276 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.279 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.283 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.284 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.285 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.286 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.275.287 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.295 I llama_model_loader: - type  f32:   37 tensors
0.00.275.299 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.597 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.641 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.703 I llm_load_vocab: special tokens cache size = 5
0.00.654.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.654.295 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.654.296 I llm_load_print_meta: arch             = gemma
0.00.654.297 I llm_load_print_meta: vocab type       = SPM
0.00.654.298 I llm_load_print_meta: n_vocab          = 256000
0.00.654.300 I llm_load_print_meta: n_merges         = 0
0.00.654.301 I llm_load_print_meta: vocab_only       = 0
0.00.654.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.654.301 I llm_load_print_meta: n_embd           = 2048
0.00.654.302 I llm_load_print_meta: n_layer          = 18
0.00.654.376 I llm_load_print_meta: n_head           = 8
0.00.654.383 I llm_load_print_meta: n_head_kv        = 1
0.00.654.383 I llm_load_print_meta: n_rot            = 256
0.00.654.384 I llm_load_print_meta: n_swa            = 0
0.00.654.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.654.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.654.389 I llm_load_print_meta: n_gqa            = 8
0.00.654.394 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.654.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.654.400 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.654.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.654.402 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.654.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.654.403 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.654.431 I llm_load_print_meta: n_ff             = 16384
0.00.654.433 I llm_load_print_meta: n_expert         = 0
0.00.654.433 I llm_load_print_meta: n_expert_used    = 0
0.00.654.433 I llm_load_print_meta: causal attn      = 1
0.00.654.434 I llm_load_print_meta: pooling type     = 0
0.00.654.434 I llm_load_print_meta: rope type        = 2
0.00.654.435 I llm_load_print_meta: rope scaling     = linear
0.00.654.437 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.654.438 I llm_load_print_meta: freq_scale_train = 1
0.00.654.439 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.654.439 I llm_load_print_meta: rope_finetuned   = unknown
0.00.654.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.654.448 I llm_load_print_meta: ssm_d_inner      = 0
0.00.654.448 I llm_load_print_meta: ssm_d_state      = 0
0.00.654.449 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.654.449 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.654.458 I llm_load_print_meta: model type       = 2B
0.00.654.466 I llm_load_print_meta: model ftype      = Q8_0
0.00.654.470 I llm_load_print_meta: model params     = 2.51 B
0.00.654.471 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.654.472 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.654.472 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.654.473 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.654.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.654.473 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.654.474 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.654.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.654.480 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.654.481 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.654.482 I llm_load_print_meta: max token length = 93
0.00.654.655 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.748.361 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.754.111 I llama_new_context_with_model: n_ctx      = 8192
0.00.754.118 I llama_new_context_with_model: n_batch    = 2048
0.00.754.119 I llama_new_context_with_model: n_ubatch   = 512
0.00.754.119 I llama_new_context_with_model: flash_attn = 0
0.00.754.122 I llama_new_context_with_model: freq_base  = 10000.0
0.00.754.123 I llama_new_context_with_model: freq_scale = 1
0.00.784.361 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.784.409 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.784.525 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.785.898 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.785.902 I llama_new_context_with_model: graph nodes  = 601
0.00.785.903 I llama_new_context_with_model: graph splits = 1
0.00.785.919 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.399.448 I main: llama threadpool init, n_threads = 4
0.01.399.464 I 
0.01.399.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.399.585 I 
0.01.399.776 I sampler seed: 4172770974
0.01.399.790 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.399.799 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.399.801 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.399.801 I 
 increasively.

I was wondering if you could help me with something.

I'm having some trouble understanding something in a book.

I've

0.15.035.522 I llama_perf_sampler_print:    sampling time =      49.94 ms /    33 runs   (    1.51 ms per token,   660.86 tokens per second)
0.15.035.537 I llama_perf_context_print:        load time =    1396.58 ms
0.15.035.538 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.035.540 I llama_perf_context_print:        eval time =   13540.33 ms /    32 runs   (  423.14 ms per token,     2.36 tokens per second)
0.15.035.541 I llama_perf_context_print:       total time =   13636.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.025.019 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.235 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.351 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.363 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.365 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.366 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.368 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.379 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.380 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.382 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.384 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.946 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.380 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.396 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.399 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.405 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.406 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.407 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.408 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.409 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.419 I llama_model_loader: - type  f32:   37 tensors
0.00.276.439 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.287 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.104 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.076 I llm_load_vocab: special tokens cache size = 5
0.00.641.564 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.642 I llm_load_print_meta: arch             = gemma
0.00.641.643 I llm_load_print_meta: vocab type       = SPM
0.00.641.643 I llm_load_print_meta: n_vocab          = 256000
0.00.641.646 I llm_load_print_meta: n_merges         = 0
0.00.641.646 I llm_load_print_meta: vocab_only       = 0
0.00.641.647 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.647 I llm_load_print_meta: n_embd           = 2048
0.00.641.648 I llm_load_print_meta: n_layer          = 18
0.00.641.713 I llm_load_print_meta: n_head           = 8
0.00.641.721 I llm_load_print_meta: n_head_kv        = 1
0.00.641.721 I llm_load_print_meta: n_rot            = 256
0.00.641.722 I llm_load_print_meta: n_swa            = 0
0.00.641.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.728 I llm_load_print_meta: n_gqa            = 8
0.00.641.733 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.738 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.742 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.742 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.747 I llm_load_print_meta: n_ff             = 16384
0.00.641.748 I llm_load_print_meta: n_expert         = 0
0.00.641.748 I llm_load_print_meta: n_expert_used    = 0
0.00.641.748 I llm_load_print_meta: causal attn      = 1
0.00.641.749 I llm_load_print_meta: pooling type     = 0
0.00.641.749 I llm_load_print_meta: rope type        = 2
0.00.641.749 I llm_load_print_meta: rope scaling     = linear
0.00.641.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.752 I llm_load_print_meta: freq_scale_train = 1
0.00.641.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.754 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.765 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.766 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.790 I llm_load_print_meta: model type       = 2B
0.00.641.792 I llm_load_print_meta: model ftype      = Q8_0
0.00.641.792 I llm_load_print_meta: model params     = 2.51 B
0.00.641.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.641.794 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.802 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.803 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.813 I llm_load_print_meta: max token length = 93
0.00.641.989 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.719.796 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.719.808 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.808 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.719.809 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.719.810 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.811 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.725.897 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.906 I llama_new_context_with_model: n_batch    = 2048
0.00.725.907 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.907 I llama_new_context_with_model: flash_attn = 0
0.00.725.911 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.912 I llama_new_context_with_model: freq_scale = 1
0.00.758.214 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.758.259 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.758.401 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.936 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.759.942 I llama_new_context_with_model: graph nodes  = 601
0.00.759.942 I llama_new_context_with_model: graph splits = 1
0.00.759.957 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.502 I main: llama threadpool init, n_threads = 4
0.01.371.516 I 
0.01.371.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.638 I 
0.01.371.823 I sampler seed: 746271770
0.01.371.835 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.841 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.842 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.843 I 
 seconal, a large, powerful nation that has been ruled by a tyrannical emperor for centuries.

**A desperate plea from a young peasant:**

"My

0.14.798.706 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.03 tokens per second)
0.14.798.709 I llama_perf_context_print:        load time =    1368.56 ms
0.14.798.723 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.798.725 I llama_perf_context_print:        eval time =   13332.03 ms /    32 runs   (  416.63 ms per token,     2.40 tokens per second)
0.14.798.725 I llama_perf_context_print:       total time =   13427.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.609 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.809 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.898 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.909 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.911 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.915 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.919 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.920 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.921 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.923 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.930 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.931 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.933 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.935 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.223 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.224 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.225 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.227 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.232 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.233 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.234 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.244 I llama_model_loader: - type  f32:   37 tensors
0.00.274.249 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.779 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.524 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.550 I llm_load_vocab: special tokens cache size = 5
0.00.639.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.830 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.831 I llm_load_print_meta: arch             = gemma
0.00.639.832 I llm_load_print_meta: vocab type       = SPM
0.00.639.832 I llm_load_print_meta: n_vocab          = 256000
0.00.639.835 I llm_load_print_meta: n_merges         = 0
0.00.639.835 I llm_load_print_meta: vocab_only       = 0
0.00.639.836 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.836 I llm_load_print_meta: n_embd           = 2048
0.00.639.836 I llm_load_print_meta: n_layer          = 18
0.00.639.900 I llm_load_print_meta: n_head           = 8
0.00.639.907 I llm_load_print_meta: n_head_kv        = 1
0.00.639.908 I llm_load_print_meta: n_rot            = 256
0.00.639.908 I llm_load_print_meta: n_swa            = 0
0.00.639.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.639.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.639.913 I llm_load_print_meta: n_gqa            = 8
0.00.639.918 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.639.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.639.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.639.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.639.932 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.639.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.639.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.639.938 I llm_load_print_meta: n_ff             = 16384
0.00.639.938 I llm_load_print_meta: n_expert         = 0
0.00.639.939 I llm_load_print_meta: n_expert_used    = 0
0.00.639.942 I llm_load_print_meta: causal attn      = 1
0.00.639.942 I llm_load_print_meta: pooling type     = 0
0.00.639.942 I llm_load_print_meta: rope type        = 2
0.00.639.943 I llm_load_print_meta: rope scaling     = linear
0.00.639.944 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.639.945 I llm_load_print_meta: freq_scale_train = 1
0.00.639.945 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.639.946 I llm_load_print_meta: rope_finetuned   = unknown
0.00.639.946 I llm_load_print_meta: ssm_d_conv       = 0
0.00.639.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.639.946 I llm_load_print_meta: ssm_d_state      = 0
0.00.639.947 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.639.947 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.639.948 I llm_load_print_meta: model type       = 2B
0.00.639.948 I llm_load_print_meta: model ftype      = Q8_0
0.00.639.949 I llm_load_print_meta: model params     = 2.51 B
0.00.639.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.639.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.639.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.639.951 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.639.952 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.639.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.639.954 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.639.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.639.960 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.639.962 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.639.962 I llm_load_print_meta: max token length = 93
0.00.640.131 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.420 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.711.427 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.717.110 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.118 I llama_new_context_with_model: n_batch    = 2048
0.00.717.118 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.119 I llama_new_context_with_model: flash_attn = 0
0.00.717.122 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.123 I llama_new_context_with_model: freq_scale = 1
0.00.747.046 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.091 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.206 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.593 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.598 I llama_new_context_with_model: graph nodes  = 601
0.00.748.598 I llama_new_context_with_model: graph splits = 1
0.00.748.614 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.195 I main: llama threadpool init, n_threads = 4
0.01.359.208 I 
0.01.359.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.321 I 
0.01.359.497 I sampler seed: 547543371
0.01.359.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.517 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.518 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.518 I 
 increably.

I am unable to locate a reference to the provided statement in my database. Please provide me with the necessary information to enable me to understand and

0.14.781.491 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.13 tokens per second)
0.14.781.495 I llama_perf_context_print:        load time =    1356.33 ms
0.14.781.520 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.781.522 I llama_perf_context_print:        eval time =   13327.37 ms /    32 runs   (  416.48 ms per token,     2.40 tokens per second)
0.14.781.524 I llama_perf_context_print:       total time =   13422.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.633s
user	3m48.447s
sys	0m9.550s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3962 (c8c07d65)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199510.72 ms
main:    total time = 199510.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.024.931 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.152 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.262 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.270 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.276 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.286 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.287 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.288 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.289 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.291 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.579 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.185 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.513 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.526 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.527 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.528 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.529 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.533 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.534 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.536 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.548 I llama_model_loader: - type  f32:   37 tensors
0.00.275.552 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.553 I llama_model_loader: - type q6_K:   19 tensors
0.00.465.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.910 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.967 I llm_load_vocab: special tokens cache size = 5
0.00.635.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.616 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.617 I llm_load_print_meta: arch             = gemma
0.00.635.618 I llm_load_print_meta: vocab type       = SPM
0.00.635.619 I llm_load_print_meta: n_vocab          = 256000
0.00.635.621 I llm_load_print_meta: n_merges         = 0
0.00.635.621 I llm_load_print_meta: vocab_only       = 0
0.00.635.621 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.622 I llm_load_print_meta: n_embd           = 2048
0.00.635.622 I llm_load_print_meta: n_layer          = 18
0.00.635.685 I llm_load_print_meta: n_head           = 8
0.00.635.692 I llm_load_print_meta: n_head_kv        = 1
0.00.635.692 I llm_load_print_meta: n_rot            = 256
0.00.635.693 I llm_load_print_meta: n_swa            = 0
0.00.635.693 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.693 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.698 I llm_load_print_meta: n_gqa            = 8
0.00.635.703 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.709 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.710 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.711 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.711 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.716 I llm_load_print_meta: n_ff             = 16384
0.00.635.717 I llm_load_print_meta: n_expert         = 0
0.00.635.717 I llm_load_print_meta: n_expert_used    = 0
0.00.635.717 I llm_load_print_meta: causal attn      = 1
0.00.635.718 I llm_load_print_meta: pooling type     = 0
0.00.635.718 I llm_load_print_meta: rope type        = 2
0.00.635.718 I llm_load_print_meta: rope scaling     = linear
0.00.635.720 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.720 I llm_load_print_meta: freq_scale_train = 1
0.00.635.721 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.721 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.722 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.722 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.722 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.722 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.723 I llm_load_print_meta: model type       = 2B
0.00.635.724 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.635.725 I llm_load_print_meta: model params     = 2.51 B
0.00.635.726 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.635.726 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.727 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.727 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.728 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.735 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.736 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.737 I llm_load_print_meta: max token length = 93
0.00.635.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.220 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.695.232 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.695.233 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.695.233 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.695.234 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.695.235 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.700.894 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.901 I llama_new_context_with_model: n_batch    = 2048
0.00.700.902 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.902 I llama_new_context_with_model: flash_attn = 0
0.00.700.904 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.905 I llama_new_context_with_model: freq_scale = 1
0.00.731.058 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.102 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.611 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.616 I llama_new_context_with_model: graph nodes  = 601
0.00.732.616 I llama_new_context_with_model: graph splits = 1
0.00.732.631 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.470 I main: llama threadpool init, n_threads = 4
0.01.314.483 I 
0.01.314.594 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.598 I 
0.01.314.781 I sampler seed: 2020287738
0.01.314.792 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.798 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.314.799 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.799 I 
 maneurors in the forest, they are mischievous and playful, and love to hide in the shadows.

What is the main idea of the passage?

a

0.12.288.369 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.81 tokens per second)
0.12.288.372 I llama_perf_context_print:        load time =    1311.53 ms
0.12.288.373 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.288.389 I llama_perf_context_print:        eval time =   10879.30 ms /    32 runs   (  339.98 ms per token,     2.94 tokens per second)
0.12.288.390 I llama_perf_context_print:       total time =   10973.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3962 (c8c07d65)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199392.96 ms
main:    total time = 199392.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3962 (c8c07d65) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.909 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.034 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.035 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.036 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.051 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.053 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.055 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.607 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.470 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.480 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.481 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.482 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.483 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.484 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.485 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.490 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.502 I llama_model_loader: - type  f32:   37 tensors
0.00.275.505 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.506 I llama_model_loader: - type q6_K:   19 tensors
0.00.463.400 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.409 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.461 I llm_load_vocab: special tokens cache size = 5
0.00.632.970 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.046 I llm_load_print_meta: arch             = gemma
0.00.633.046 I llm_load_print_meta: vocab type       = SPM
0.00.633.047 I llm_load_print_meta: n_vocab          = 256000
0.00.633.049 I llm_load_print_meta: n_merges         = 0
0.00.633.050 I llm_load_print_meta: vocab_only       = 0
0.00.633.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.051 I llm_load_print_meta: n_embd           = 2048
0.00.633.052 I llm_load_print_meta: n_layer          = 18
0.00.633.118 I llm_load_print_meta: n_head           = 8
0.00.633.125 I llm_load_print_meta: n_head_kv        = 1
0.00.633.125 I llm_load_print_meta: n_rot            = 256
0.00.633.125 I llm_load_print_meta: n_swa            = 0
0.00.633.126 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.126 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.131 I llm_load_print_meta: n_gqa            = 8
0.00.633.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.140 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.143 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.144 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.144 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.148 I llm_load_print_meta: n_ff             = 16384
0.00.633.149 I llm_load_print_meta: n_expert         = 0
0.00.633.149 I llm_load_print_meta: n_expert_used    = 0
0.00.633.150 I llm_load_print_meta: causal attn      = 1
0.00.633.152 I llm_load_print_meta: pooling type     = 0
0.00.633.153 I llm_load_print_meta: rope type        = 2
0.00.633.154 I llm_load_print_meta: rope scaling     = linear
0.00.633.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.157 I llm_load_print_meta: freq_scale_train = 1
0.00.633.157 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.158 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.159 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.164 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.165 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.167 I llm_load_print_meta: model type       = 2B
0.00.633.168 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.633.169 I llm_load_print_meta: model params     = 2.51 B
0.00.633.171 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.633.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.173 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.183 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.185 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.186 I llm_load_print_meta: max token length = 93
0.00.633.372 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.575 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.697.491 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.499 I llama_new_context_with_model: n_batch    = 2048
0.00.697.499 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.500 I llama_new_context_with_model: flash_attn = 0
0.00.697.504 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.505 I llama_new_context_with_model: freq_scale = 1
0.00.729.221 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.267 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.390 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.760 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.766 I llama_new_context_with_model: graph nodes  = 601
0.00.730.766 I llama_new_context_with_model: graph splits = 1
0.00.730.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.500 I main: llama threadpool init, n_threads = 4
0.01.309.514 I 
0.01.309.622 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.626 I 
0.01.309.806 I sampler seed: 3226659534
0.01.309.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.823 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.824 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.824 I 
 seconally.

I'm confused about the difference between a variable and a parameter.

**Variable:**

- A variable is a temporary storage location for

0.12.299.222 I llama_perf_sampler_print:    sampling time =      53.21 ms /    33 runs   (    1.61 ms per token,   620.16 tokens per second)
0.12.299.225 I llama_perf_context_print:        load time =    1306.63 ms
0.12.299.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.299.228 I llama_perf_context_print:        eval time =   10891.00 ms /    32 runs   (  340.34 ms per token,     2.94 tokens per second)
0.12.299.229 I llama_perf_context_print:       total time =   10989.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.423s
user	50m14.891s
sys	0m6.325s
