+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.624 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.845 I main: load the model and apply lora adapter, if any
0.00.024.856 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.153 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.154 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.155 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.426 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.714 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.721 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.722 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.729 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.730 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.731 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.732 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.740 I llama_model_loader: - type  f32:   37 tensors
0.00.194.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.335.954 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.360.200 I llm_load_vocab: special tokens cache size = 5
0.00.417.513 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.417.576 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.417.580 I llm_load_print_meta: arch             = gemma
0.00.417.581 I llm_load_print_meta: vocab type       = SPM
0.00.417.581 I llm_load_print_meta: n_vocab          = 256000
0.00.417.584 I llm_load_print_meta: n_merges         = 0
0.00.417.585 I llm_load_print_meta: vocab_only       = 0
0.00.417.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.417.585 I llm_load_print_meta: n_embd           = 2048
0.00.417.586 I llm_load_print_meta: n_layer          = 18
0.00.417.653 I llm_load_print_meta: n_head           = 8
0.00.417.662 I llm_load_print_meta: n_head_kv        = 1
0.00.417.663 I llm_load_print_meta: n_rot            = 256
0.00.417.666 I llm_load_print_meta: n_swa            = 0
0.00.417.666 I llm_load_print_meta: n_embd_head_k    = 256
0.00.417.666 I llm_load_print_meta: n_embd_head_v    = 256
0.00.417.671 I llm_load_print_meta: n_gqa            = 8
0.00.417.676 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.417.681 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.417.684 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.417.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.417.686 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.417.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.417.687 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.417.692 I llm_load_print_meta: n_ff             = 16384
0.00.417.693 I llm_load_print_meta: n_expert         = 0
0.00.417.694 I llm_load_print_meta: n_expert_used    = 0
0.00.417.695 I llm_load_print_meta: causal attn      = 1
0.00.417.696 I llm_load_print_meta: pooling type     = 0
0.00.417.696 I llm_load_print_meta: rope type        = 2
0.00.417.697 I llm_load_print_meta: rope scaling     = linear
0.00.417.698 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.417.698 I llm_load_print_meta: freq_scale_train = 1
0.00.417.699 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.417.699 I llm_load_print_meta: rope_finetuned   = unknown
0.00.417.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.417.700 I llm_load_print_meta: ssm_d_inner      = 0
0.00.417.701 I llm_load_print_meta: ssm_d_state      = 0
0.00.417.702 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.417.702 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.417.712 I llm_load_print_meta: model type       = 2B
0.00.417.713 I llm_load_print_meta: model ftype      = Q8_0
0.00.417.714 I llm_load_print_meta: model params     = 2.51 B
0.00.417.715 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.417.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.417.716 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.417.718 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.417.719 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.417.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.417.720 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.417.720 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.417.727 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.417.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.417.730 I llm_load_print_meta: max token length = 93
0.00.417.907 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.518.065 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.518.077 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.518.078 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.518.078 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.518.079 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.518.079 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.523.865 I llama_new_context_with_model: n_ctx      = 8192
0.00.523.873 I llama_new_context_with_model: n_batch    = 2048
0.00.523.873 I llama_new_context_with_model: n_ubatch   = 512
0.00.523.875 I llama_new_context_with_model: flash_attn = 0
0.00.523.878 I llama_new_context_with_model: freq_base  = 10000.0
0.00.523.879 I llama_new_context_with_model: freq_scale = 1
0.00.553.176 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.553.222 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.553.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.554.808 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.554.815 I llama_new_context_with_model: graph nodes  = 601
0.00.554.815 I llama_new_context_with_model: graph splits = 1
0.00.554.832 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.169.756 I main: llama threadpool init, n_threads = 4
0.01.169.769 I 
0.01.169.860 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.169.863 I 
0.01.170.023 I sampler seed: 2879408459
0.01.170.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.170.039 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.170.040 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.170.040 I 
 increably. 

I'm not sure what's going on here. Could you explain what is happening in this sentence?

"I'm

0.14.822.793 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.55 tokens per second)
0.14.822.797 I llama_perf_context_print:        load time =    1166.82 ms
0.14.822.799 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.822.801 I llama_perf_context_print:        eval time =   13570.84 ms /    32 runs   (  424.09 ms per token,     2.36 tokens per second)
0.14.822.802 I llama_perf_context_print:       total time =   13653.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.621 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.025.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.121 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.134 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.136 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.140 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.156 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.424 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.649 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.656 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.658 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.665 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.666 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.667 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.675 I llama_model_loader: - type  f32:   37 tensors
0.00.194.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.338.955 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.361.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.362.445 I llm_load_vocab: special tokens cache size = 5
0.00.422.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.423.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.423.001 I llm_load_print_meta: arch             = gemma
0.00.423.002 I llm_load_print_meta: vocab type       = SPM
0.00.423.003 I llm_load_print_meta: n_vocab          = 256000
0.00.423.005 I llm_load_print_meta: n_merges         = 0
0.00.423.006 I llm_load_print_meta: vocab_only       = 0
0.00.423.006 I llm_load_print_meta: n_ctx_train      = 8192
0.00.423.007 I llm_load_print_meta: n_embd           = 2048
0.00.423.007 I llm_load_print_meta: n_layer          = 18
0.00.423.070 I llm_load_print_meta: n_head           = 8
0.00.423.077 I llm_load_print_meta: n_head_kv        = 1
0.00.423.078 I llm_load_print_meta: n_rot            = 256
0.00.423.078 I llm_load_print_meta: n_swa            = 0
0.00.423.078 I llm_load_print_meta: n_embd_head_k    = 256
0.00.423.080 I llm_load_print_meta: n_embd_head_v    = 256
0.00.423.084 I llm_load_print_meta: n_gqa            = 8
0.00.423.088 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.423.093 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.423.094 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.423.096 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.423.096 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.423.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.423.097 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.423.102 I llm_load_print_meta: n_ff             = 16384
0.00.423.102 I llm_load_print_meta: n_expert         = 0
0.00.423.103 I llm_load_print_meta: n_expert_used    = 0
0.00.423.103 I llm_load_print_meta: causal attn      = 1
0.00.423.104 I llm_load_print_meta: pooling type     = 0
0.00.423.105 I llm_load_print_meta: rope type        = 2
0.00.423.105 I llm_load_print_meta: rope scaling     = linear
0.00.423.106 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.423.107 I llm_load_print_meta: freq_scale_train = 1
0.00.423.107 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.423.109 I llm_load_print_meta: rope_finetuned   = unknown
0.00.423.109 I llm_load_print_meta: ssm_d_conv       = 0
0.00.423.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.423.110 I llm_load_print_meta: ssm_d_state      = 0
0.00.423.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.423.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.423.119 I llm_load_print_meta: model type       = 2B
0.00.423.120 I llm_load_print_meta: model ftype      = Q8_0
0.00.423.120 I llm_load_print_meta: model params     = 2.51 B
0.00.423.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.423.122 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.423.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.423.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.423.123 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.423.124 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.423.134 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.423.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.423.144 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.423.146 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.423.146 I llm_load_print_meta: max token length = 93
0.00.423.315 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.518.569 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.524.228 I llama_new_context_with_model: n_ctx      = 8192
0.00.524.235 I llama_new_context_with_model: n_batch    = 2048
0.00.524.235 I llama_new_context_with_model: n_ubatch   = 512
0.00.524.236 I llama_new_context_with_model: flash_attn = 0
0.00.524.238 I llama_new_context_with_model: freq_base  = 10000.0
0.00.524.239 I llama_new_context_with_model: freq_scale = 1
0.00.553.167 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.553.211 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.553.337 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.554.716 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.554.722 I llama_new_context_with_model: graph nodes  = 601
0.00.554.722 I llama_new_context_with_model: graph splits = 1
0.00.554.738 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.174.544 I main: llama threadpool init, n_threads = 4
0.01.174.555 I 
0.01.174.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.174.653 I 
0.01.174.822 I sampler seed: 961676100
0.01.174.833 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.174.838 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.174.847 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.174.848 I 
 increasively. 

I am unable to process the provided text. It appears to be gibberish or corrupted. [end of text]


0.11.420.857 I llama_perf_sampler_print:    sampling time =      36.88 ms /    25 runs   (    1.48 ms per token,   677.89 tokens per second)
0.11.420.860 I llama_perf_context_print:        load time =    1171.66 ms
0.11.420.861 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.420.878 I llama_perf_context_print:        eval time =   10184.05 ms /    24 runs   (  424.34 ms per token,     2.36 tokens per second)
0.11.420.880 I llama_perf_context_print:       total time =   10246.32 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.695 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.002.877 I main: load the model and apply lora adapter, if any
0.00.025.076 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.352 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.358 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.359 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.361 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.362 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.368 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.369 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.371 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.372 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.938 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.946 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.947 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.949 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.951 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.954 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.956 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.957 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.194.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.967 I llama_model_loader: - type  f32:   37 tensors
0.00.194.971 I llama_model_loader: - type q8_0:  127 tensors
0.00.320.155 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.343.105 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.344.124 I llm_load_vocab: special tokens cache size = 5
0.00.401.389 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.401.448 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.401.450 I llm_load_print_meta: arch             = gemma
0.00.401.450 I llm_load_print_meta: vocab type       = SPM
0.00.401.451 I llm_load_print_meta: n_vocab          = 256000
0.00.401.453 I llm_load_print_meta: n_merges         = 0
0.00.401.454 I llm_load_print_meta: vocab_only       = 0
0.00.401.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.401.454 I llm_load_print_meta: n_embd           = 2048
0.00.401.455 I llm_load_print_meta: n_layer          = 18
0.00.401.518 I llm_load_print_meta: n_head           = 8
0.00.401.525 I llm_load_print_meta: n_head_kv        = 1
0.00.401.525 I llm_load_print_meta: n_rot            = 256
0.00.401.526 I llm_load_print_meta: n_swa            = 0
0.00.401.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.401.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.401.531 I llm_load_print_meta: n_gqa            = 8
0.00.401.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.401.540 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.401.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.401.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.401.544 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.401.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.401.546 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.401.551 I llm_load_print_meta: n_ff             = 16384
0.00.401.552 I llm_load_print_meta: n_expert         = 0
0.00.401.552 I llm_load_print_meta: n_expert_used    = 0
0.00.401.552 I llm_load_print_meta: causal attn      = 1
0.00.401.554 I llm_load_print_meta: pooling type     = 0
0.00.401.555 I llm_load_print_meta: rope type        = 2
0.00.401.555 I llm_load_print_meta: rope scaling     = linear
0.00.401.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.401.567 I llm_load_print_meta: freq_scale_train = 1
0.00.401.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.401.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.401.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.401.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.401.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.401.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.401.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.401.612 I llm_load_print_meta: model type       = 2B
0.00.401.613 I llm_load_print_meta: model ftype      = Q8_0
0.00.401.613 I llm_load_print_meta: model params     = 2.51 B
0.00.401.614 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.401.615 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.401.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.401.617 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.401.617 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.401.617 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.401.618 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.401.620 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.401.626 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.401.628 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.401.628 I llm_load_print_meta: max token length = 93
0.00.401.795 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.478.605 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.478.616 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.478.617 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.478.617 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.478.618 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.478.618 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.484.289 I llama_new_context_with_model: n_ctx      = 8192
0.00.484.297 I llama_new_context_with_model: n_batch    = 2048
0.00.484.298 I llama_new_context_with_model: n_ubatch   = 512
0.00.484.298 I llama_new_context_with_model: flash_attn = 0
0.00.484.301 I llama_new_context_with_model: freq_base  = 10000.0
0.00.484.302 I llama_new_context_with_model: freq_scale = 1
0.00.515.511 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.515.554 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.515.671 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.517.076 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.517.082 I llama_new_context_with_model: graph nodes  = 601
0.00.517.083 I llama_new_context_with_model: graph splits = 1
0.00.517.099 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.131.333 I main: llama threadpool init, n_threads = 4
0.01.131.345 I 
0.01.131.437 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.131.440 I 
0.01.131.606 I sampler seed: 681182369
0.01.131.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.131.621 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.131.622 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.131.622 I 
 increably, and then tripped over her own shoelaces.

What happened?

The shoelaces were untied. [end of text]


0.12.607.605 I llama_perf_sampler_print:    sampling time =      41.47 ms /    28 runs   (    1.48 ms per token,   675.22 tokens per second)
0.12.607.607 I llama_perf_context_print:        load time =    1128.37 ms
0.12.607.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.607.625 I llama_perf_context_print:        eval time =   11406.96 ms /    27 runs   (  422.48 ms per token,     2.37 tokens per second)
0.12.607.626 I llama_perf_context_print:       total time =   11476.28 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.614 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.810 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.691 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.878 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.963 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.974 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.981 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.986 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.992 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.995 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.996 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.200.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.213.316 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.213.324 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.213.325 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.213.326 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.213.327 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.213.328 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.213.329 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.213.333 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.213.333 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.213.334 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.213.335 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.213.336 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.213.344 I llama_model_loader: - type  f32:   37 tensors
0.00.213.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.351.794 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.374.831 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.375.845 I llm_load_vocab: special tokens cache size = 5
0.00.433.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.433.119 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.433.121 I llm_load_print_meta: arch             = gemma
0.00.433.122 I llm_load_print_meta: vocab type       = SPM
0.00.433.123 I llm_load_print_meta: n_vocab          = 256000
0.00.433.125 I llm_load_print_meta: n_merges         = 0
0.00.433.126 I llm_load_print_meta: vocab_only       = 0
0.00.433.126 I llm_load_print_meta: n_ctx_train      = 8192
0.00.433.126 I llm_load_print_meta: n_embd           = 2048
0.00.433.127 I llm_load_print_meta: n_layer          = 18
0.00.433.190 I llm_load_print_meta: n_head           = 8
0.00.433.198 I llm_load_print_meta: n_head_kv        = 1
0.00.433.198 I llm_load_print_meta: n_rot            = 256
0.00.433.198 I llm_load_print_meta: n_swa            = 0
0.00.433.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.433.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.433.204 I llm_load_print_meta: n_gqa            = 8
0.00.433.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.433.213 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.433.215 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.433.235 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.433.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.433.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.433.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.433.244 I llm_load_print_meta: n_ff             = 16384
0.00.433.244 I llm_load_print_meta: n_expert         = 0
0.00.433.244 I llm_load_print_meta: n_expert_used    = 0
0.00.433.245 I llm_load_print_meta: causal attn      = 1
0.00.433.245 I llm_load_print_meta: pooling type     = 0
0.00.433.246 I llm_load_print_meta: rope type        = 2
0.00.433.247 I llm_load_print_meta: rope scaling     = linear
0.00.433.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.433.249 I llm_load_print_meta: freq_scale_train = 1
0.00.433.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.433.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.433.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.433.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.433.251 I llm_load_print_meta: ssm_d_state      = 0
0.00.433.252 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.433.252 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.433.261 I llm_load_print_meta: model type       = 2B
0.00.433.262 I llm_load_print_meta: model ftype      = Q8_0
0.00.433.262 I llm_load_print_meta: model params     = 2.51 B
0.00.433.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.433.264 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.433.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.433.265 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.433.265 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.433.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.433.266 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.433.267 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.433.274 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.433.275 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.433.275 I llm_load_print_meta: max token length = 93
0.00.433.445 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.504.835 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.504.847 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.510.378 I llama_new_context_with_model: n_ctx      = 8192
0.00.510.385 I llama_new_context_with_model: n_batch    = 2048
0.00.510.385 I llama_new_context_with_model: n_ubatch   = 512
0.00.510.386 I llama_new_context_with_model: flash_attn = 0
0.00.510.389 I llama_new_context_with_model: freq_base  = 10000.0
0.00.510.390 I llama_new_context_with_model: freq_scale = 1
0.00.539.888 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.539.931 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.540.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.541.431 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.541.438 I llama_new_context_with_model: graph nodes  = 601
0.00.541.438 I llama_new_context_with_model: graph splits = 1
0.00.541.455 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.155.084 I main: llama threadpool init, n_threads = 4
0.01.155.095 I 
0.01.155.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.155.189 I 
0.01.155.354 I sampler seed: 3538293986
0.01.155.364 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.155.368 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.155.369 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.155.369 I 
 seconary.
I am unable to access the provided text and therefore am unable to provide a response. Please provide the text or specify the topic you would like

0.14.703.620 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.87 tokens per second)
0.14.703.624 I llama_perf_context_print:        load time =    1152.21 ms
0.14.703.626 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.703.627 I llama_perf_context_print:        eval time =   13467.06 ms /    32 runs   (  420.85 ms per token,     2.38 tokens per second)
0.14.703.629 I llama_perf_context_print:       total time =   13548.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.346s
user	3m27.585s
sys	0m9.463s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3868 (c83ad6d0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199774.16 ms
main:    total time = 199774.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.624 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.024.880 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.057 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.141 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.152 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.153 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.160 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.167 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.168 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.340 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.107 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.389 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.397 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.398 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.399 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.400 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.401 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.402 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.405 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.406 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.407 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.407 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.408 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.416 I llama_model_loader: - type  f32:   37 tensors
0.00.194.421 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.422 I llama_model_loader: - type q6_K:   19 tensors
0.00.334.291 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.356.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.357.853 I llm_load_vocab: special tokens cache size = 5
0.00.415.118 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.415.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.415.181 I llm_load_print_meta: arch             = gemma
0.00.415.182 I llm_load_print_meta: vocab type       = SPM
0.00.415.182 I llm_load_print_meta: n_vocab          = 256000
0.00.415.185 I llm_load_print_meta: n_merges         = 0
0.00.415.185 I llm_load_print_meta: vocab_only       = 0
0.00.415.186 I llm_load_print_meta: n_ctx_train      = 8192
0.00.415.186 I llm_load_print_meta: n_embd           = 2048
0.00.415.186 I llm_load_print_meta: n_layer          = 18
0.00.415.249 I llm_load_print_meta: n_head           = 8
0.00.415.255 I llm_load_print_meta: n_head_kv        = 1
0.00.415.256 I llm_load_print_meta: n_rot            = 256
0.00.415.256 I llm_load_print_meta: n_swa            = 0
0.00.415.257 I llm_load_print_meta: n_embd_head_k    = 256
0.00.415.257 I llm_load_print_meta: n_embd_head_v    = 256
0.00.415.262 I llm_load_print_meta: n_gqa            = 8
0.00.415.283 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.415.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.415.290 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.415.291 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.415.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.415.292 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.415.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.415.297 I llm_load_print_meta: n_ff             = 16384
0.00.415.298 I llm_load_print_meta: n_expert         = 0
0.00.415.298 I llm_load_print_meta: n_expert_used    = 0
0.00.415.299 I llm_load_print_meta: causal attn      = 1
0.00.415.299 I llm_load_print_meta: pooling type     = 0
0.00.415.299 I llm_load_print_meta: rope type        = 2
0.00.415.301 I llm_load_print_meta: rope scaling     = linear
0.00.415.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.415.303 I llm_load_print_meta: freq_scale_train = 1
0.00.415.304 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.415.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.415.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.415.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.415.306 I llm_load_print_meta: ssm_d_state      = 0
0.00.415.306 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.415.306 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.415.315 I llm_load_print_meta: model type       = 2B
0.00.415.316 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.415.317 I llm_load_print_meta: model params     = 2.51 B
0.00.415.318 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.415.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.415.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.415.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.415.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.415.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.415.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.415.322 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.415.328 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.415.329 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.415.330 I llm_load_print_meta: max token length = 93
0.00.415.502 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.475.931 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.475.940 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.475.941 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.475.942 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.475.942 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.475.943 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.481.580 I llama_new_context_with_model: n_ctx      = 8192
0.00.481.587 I llama_new_context_with_model: n_batch    = 2048
0.00.481.587 I llama_new_context_with_model: n_ubatch   = 512
0.00.481.588 I llama_new_context_with_model: flash_attn = 0
0.00.481.590 I llama_new_context_with_model: freq_base  = 10000.0
0.00.481.591 I llama_new_context_with_model: freq_scale = 1
0.00.510.703 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.510.747 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.510.859 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.512.262 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.512.268 I llama_new_context_with_model: graph nodes  = 601
0.00.512.269 I llama_new_context_with_model: graph splits = 1
0.00.512.284 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.091.479 I main: llama threadpool init, n_threads = 4
0.01.091.491 I 
0.01.091.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.091.582 I 
0.01.091.746 I sampler seed: 3319375330
0.01.091.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.091.762 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.091.762 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.091.763 I 
 seconded

## Analyzing the Text

The provided text appears to be a paraphrasing or summary of some text. However, without the actual text itself, it

0.12.036.324 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.90 tokens per second)
0.12.036.327 I llama_perf_context_print:        load time =    1088.59 ms
0.12.036.347 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.036.350 I llama_perf_context_print:        eval time =   10863.57 ms /    32 runs   (  339.49 ms per token,     2.95 tokens per second)
0.12.036.350 I llama_perf_context_print:       total time =   10944.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3868 (c83ad6d0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199737.03 ms
main:    total time = 199737.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.609 I build: 3868 (c83ad6d0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.585 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.688 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.708 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.714 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.716 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.718 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.721 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.730 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.735 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.737 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.987 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.994 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.995 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.996 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.003 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.010 I llama_model_loader: - type  f32:   37 tensors
0.00.194.014 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.015 I llama_model_loader: - type q6_K:   19 tensors
0.00.343.407 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.368.410 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.369.434 I llm_load_vocab: special tokens cache size = 5
0.00.426.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.426.726 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.426.727 I llm_load_print_meta: arch             = gemma
0.00.426.728 I llm_load_print_meta: vocab type       = SPM
0.00.426.729 I llm_load_print_meta: n_vocab          = 256000
0.00.426.731 I llm_load_print_meta: n_merges         = 0
0.00.426.731 I llm_load_print_meta: vocab_only       = 0
0.00.426.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.426.732 I llm_load_print_meta: n_embd           = 2048
0.00.426.732 I llm_load_print_meta: n_layer          = 18
0.00.426.809 I llm_load_print_meta: n_head           = 8
0.00.426.818 I llm_load_print_meta: n_head_kv        = 1
0.00.426.818 I llm_load_print_meta: n_rot            = 256
0.00.426.818 I llm_load_print_meta: n_swa            = 0
0.00.426.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.426.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.426.824 I llm_load_print_meta: n_gqa            = 8
0.00.426.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.426.833 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.426.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.426.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.426.837 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.426.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.426.838 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.426.854 I llm_load_print_meta: n_ff             = 16384
0.00.426.855 I llm_load_print_meta: n_expert         = 0
0.00.426.855 I llm_load_print_meta: n_expert_used    = 0
0.00.426.855 I llm_load_print_meta: causal attn      = 1
0.00.426.856 I llm_load_print_meta: pooling type     = 0
0.00.426.860 I llm_load_print_meta: rope type        = 2
0.00.426.861 I llm_load_print_meta: rope scaling     = linear
0.00.426.870 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.426.871 I llm_load_print_meta: freq_scale_train = 1
0.00.426.872 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.426.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.426.873 I llm_load_print_meta: ssm_d_conv       = 0
0.00.426.873 I llm_load_print_meta: ssm_d_inner      = 0
0.00.426.874 I llm_load_print_meta: ssm_d_state      = 0
0.00.426.877 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.426.878 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.426.886 I llm_load_print_meta: model type       = 2B
0.00.426.888 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.426.889 I llm_load_print_meta: model params     = 2.51 B
0.00.426.890 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.426.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.426.891 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.426.891 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.426.892 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.426.892 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.426.893 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.426.894 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.426.901 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.426.902 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.426.902 I llm_load_print_meta: max token length = 93
0.00.427.083 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.484.446 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.490.087 I llama_new_context_with_model: n_ctx      = 8192
0.00.490.093 I llama_new_context_with_model: n_batch    = 2048
0.00.490.093 I llama_new_context_with_model: n_ubatch   = 512
0.00.490.094 I llama_new_context_with_model: flash_attn = 0
0.00.490.097 I llama_new_context_with_model: freq_base  = 10000.0
0.00.490.097 I llama_new_context_with_model: freq_scale = 1
0.00.519.765 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.519.811 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.519.922 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.521.304 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.521.311 I llama_new_context_with_model: graph nodes  = 601
0.00.521.312 I llama_new_context_with_model: graph splits = 1
0.00.521.330 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.098.755 I main: llama threadpool init, n_threads = 4
0.01.098.767 I 
0.01.098.861 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.098.864 I 
0.01.099.028 I sampler seed: 4123238626
0.01.099.039 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.099.044 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.099.045 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.099.045 I 
 susceptacles or a device that provides similar functionality?

The question asks for a device or tool that provides similar functionality to a susceptacles. A susceptacles is

0.12.052.332 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.09 tokens per second)
0.12.052.335 I llama_perf_context_print:        load time =    1095.84 ms
0.12.052.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.052.337 I llama_perf_context_print:        eval time =   10871.34 ms /    32 runs   (  339.73 ms per token,     2.94 tokens per second)
0.12.052.338 I llama_perf_context_print:       total time =   10953.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.463s
user	50m9.361s
sys	0m6.326s
