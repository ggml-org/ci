+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.663 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.207 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.404 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.504 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.506 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.512 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.513 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.514 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.515 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.523 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.525 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.526 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.527 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.114 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.226 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.653 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.664 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.673 I llama_model_loader: - type  f32:   37 tensors
0.00.270.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.432.092 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.456.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.457.604 I llm_load_vocab: special tokens cache size = 5
0.00.552.913 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.552.979 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.552.981 I llm_load_print_meta: arch             = gemma
0.00.552.981 I llm_load_print_meta: vocab type       = SPM
0.00.552.982 I llm_load_print_meta: n_vocab          = 256000
0.00.552.985 I llm_load_print_meta: n_merges         = 0
0.00.552.985 I llm_load_print_meta: vocab_only       = 0
0.00.552.986 I llm_load_print_meta: n_ctx_train      = 8192
0.00.552.986 I llm_load_print_meta: n_embd           = 2048
0.00.552.987 I llm_load_print_meta: n_layer          = 18
0.00.553.048 I llm_load_print_meta: n_head           = 8
0.00.553.055 I llm_load_print_meta: n_head_kv        = 1
0.00.553.055 I llm_load_print_meta: n_rot            = 256
0.00.553.056 I llm_load_print_meta: n_swa            = 0
0.00.553.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.056 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.062 I llm_load_print_meta: n_gqa            = 8
0.00.553.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.072 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.099 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.100 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.105 I llm_load_print_meta: n_ff             = 16384
0.00.553.111 I llm_load_print_meta: n_expert         = 0
0.00.553.119 I llm_load_print_meta: n_expert_used    = 0
0.00.553.120 I llm_load_print_meta: causal attn      = 1
0.00.553.121 I llm_load_print_meta: pooling type     = 0
0.00.553.121 I llm_load_print_meta: rope type        = 2
0.00.553.121 I llm_load_print_meta: rope scaling     = linear
0.00.553.123 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.124 I llm_load_print_meta: freq_scale_train = 1
0.00.553.132 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.133 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.142 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.144 I llm_load_print_meta: model type       = 2B
0.00.553.145 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.146 I llm_load_print_meta: model params     = 2.51 B
0.00.553.147 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.147 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.149 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.149 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.149 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.151 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.158 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.159 I llm_load_print_meta: max token length = 93
0.00.553.329 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.573 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.653.585 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.653.586 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.653.586 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.653.587 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.653.587 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.659.300 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.309 I llama_new_context_with_model: n_batch    = 2048
0.00.659.309 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.310 I llama_new_context_with_model: flash_attn = 0
0.00.659.313 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.314 I llama_new_context_with_model: freq_scale = 1
0.00.689.315 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.359 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.475 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.690.902 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.909 I llama_new_context_with_model: graph nodes  = 601
0.00.690.909 I llama_new_context_with_model: graph splits = 1
0.00.690.925 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.233 I main: llama threadpool init, n_threads = 4
0.01.302.246 I 
0.01.302.350 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.350 I 
0.01.302.520 I sampler seed: 3552143517
0.01.302.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.537 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.302.538 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.539 I 
 increably.

I am unable to generate a response due to the provided context being incomplete. Please provide more context or specify the missing information so I can assist

0.14.880.817 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.29 tokens per second)
0.14.880.821 I llama_perf_context_print:        load time =    1299.25 ms
0.14.880.836 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.880.838 I llama_perf_context_print:        eval time =   13496.51 ms /    32 runs   (  421.77 ms per token,     2.37 tokens per second)
0.14.880.839 I llama_perf_context_print:       total time =   13578.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.632 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.948 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.054 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.055 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.062 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.063 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.065 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.066 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.073 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.712 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.799 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.808 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.810 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.812 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.815 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.819 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.820 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.823 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.824 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.825 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.833 I llama_model_loader: - type  f32:   37 tensors
0.00.268.836 I llama_model_loader: - type q8_0:  127 tensors
0.00.423.591 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.445.979 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.447.009 I llm_load_vocab: special tokens cache size = 5
0.00.541.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.366 I llm_load_print_meta: arch             = gemma
0.00.541.366 I llm_load_print_meta: vocab type       = SPM
0.00.541.367 I llm_load_print_meta: n_vocab          = 256000
0.00.541.369 I llm_load_print_meta: n_merges         = 0
0.00.541.370 I llm_load_print_meta: vocab_only       = 0
0.00.541.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.370 I llm_load_print_meta: n_embd           = 2048
0.00.541.371 I llm_load_print_meta: n_layer          = 18
0.00.541.434 I llm_load_print_meta: n_head           = 8
0.00.541.441 I llm_load_print_meta: n_head_kv        = 1
0.00.541.442 I llm_load_print_meta: n_rot            = 256
0.00.541.442 I llm_load_print_meta: n_swa            = 0
0.00.541.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.447 I llm_load_print_meta: n_gqa            = 8
0.00.541.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.458 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.462 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.463 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.468 I llm_load_print_meta: n_ff             = 16384
0.00.541.469 I llm_load_print_meta: n_expert         = 0
0.00.541.469 I llm_load_print_meta: n_expert_used    = 0
0.00.541.470 I llm_load_print_meta: causal attn      = 1
0.00.541.470 I llm_load_print_meta: pooling type     = 0
0.00.541.470 I llm_load_print_meta: rope type        = 2
0.00.541.471 I llm_load_print_meta: rope scaling     = linear
0.00.541.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.473 I llm_load_print_meta: freq_scale_train = 1
0.00.541.473 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.473 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.474 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.476 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.476 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.485 I llm_load_print_meta: model type       = 2B
0.00.541.487 I llm_load_print_meta: model ftype      = Q8_0
0.00.541.487 I llm_load_print_meta: model params     = 2.51 B
0.00.541.491 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.541.504 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.506 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.518 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.541.528 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.541.529 I llm_load_print_meta: max token length = 93
0.00.541.709 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.479 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.642.313 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.320 I llama_new_context_with_model: n_batch    = 2048
0.00.642.320 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.321 I llama_new_context_with_model: flash_attn = 0
0.00.642.323 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.323 I llama_new_context_with_model: freq_scale = 1
0.00.673.489 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.673.531 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.673.654 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.002 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.008 I llama_new_context_with_model: graph nodes  = 601
0.00.675.009 I llama_new_context_with_model: graph splits = 1
0.00.675.024 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.344 I main: llama threadpool init, n_threads = 4
0.01.317.355 I 
0.01.317.461 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.468 I 
0.01.317.650 I sampler seed: 3731628695
0.01.317.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.666 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.668 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.669 I 
 increadibly fast and without any prior training. 

**Assumptions:**
- The individual is a biological entity.
- The entity possesses a vast array of

0.14.883.111 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.30 tokens per second)
0.14.883.129 I llama_perf_context_print:        load time =    1314.39 ms
0.14.883.131 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.883.133 I llama_perf_context_print:        eval time =   13483.29 ms /    32 runs   (  421.35 ms per token,     2.37 tokens per second)
0.14.883.134 I llama_perf_context_print:       total time =   13565.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.648 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.864 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.371 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.581 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.701 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.703 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.705 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.707 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.708 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.717 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.725 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.256 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.829 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.253 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.264 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.265 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.267 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.268 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.269 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.274 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.275 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.277 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.278 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.288 I llama_model_loader: - type  f32:   37 tensors
0.00.269.295 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.521 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.324 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.471.354 I llm_load_vocab: special tokens cache size = 5
0.00.566.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.566.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.566.662 I llm_load_print_meta: arch             = gemma
0.00.566.663 I llm_load_print_meta: vocab type       = SPM
0.00.566.663 I llm_load_print_meta: n_vocab          = 256000
0.00.566.666 I llm_load_print_meta: n_merges         = 0
0.00.566.666 I llm_load_print_meta: vocab_only       = 0
0.00.566.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.566.667 I llm_load_print_meta: n_embd           = 2048
0.00.566.668 I llm_load_print_meta: n_layer          = 18
0.00.566.733 I llm_load_print_meta: n_head           = 8
0.00.566.739 I llm_load_print_meta: n_head_kv        = 1
0.00.566.740 I llm_load_print_meta: n_rot            = 256
0.00.566.741 I llm_load_print_meta: n_swa            = 0
0.00.566.741 I llm_load_print_meta: n_embd_head_k    = 256
0.00.566.741 I llm_load_print_meta: n_embd_head_v    = 256
0.00.566.746 I llm_load_print_meta: n_gqa            = 8
0.00.566.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.566.757 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.566.758 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.566.759 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.566.760 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.566.760 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.566.760 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.566.765 I llm_load_print_meta: n_ff             = 16384
0.00.566.766 I llm_load_print_meta: n_expert         = 0
0.00.566.766 I llm_load_print_meta: n_expert_used    = 0
0.00.566.766 I llm_load_print_meta: causal attn      = 1
0.00.566.767 I llm_load_print_meta: pooling type     = 0
0.00.566.767 I llm_load_print_meta: rope type        = 2
0.00.566.767 I llm_load_print_meta: rope scaling     = linear
0.00.566.769 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.566.770 I llm_load_print_meta: freq_scale_train = 1
0.00.566.770 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.566.771 I llm_load_print_meta: rope_finetuned   = unknown
0.00.566.771 I llm_load_print_meta: ssm_d_conv       = 0
0.00.566.772 I llm_load_print_meta: ssm_d_inner      = 0
0.00.566.772 I llm_load_print_meta: ssm_d_state      = 0
0.00.566.773 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.566.773 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.566.774 I llm_load_print_meta: model type       = 2B
0.00.566.775 I llm_load_print_meta: model ftype      = Q8_0
0.00.566.776 I llm_load_print_meta: model params     = 2.51 B
0.00.566.778 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.566.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.566.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.566.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.566.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.566.794 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.566.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.566.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.566.803 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.566.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.566.805 I llm_load_print_meta: max token length = 93
0.00.566.995 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.643.655 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.643.666 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.643.667 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.643.668 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.643.669 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.643.670 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.649.503 I llama_new_context_with_model: n_ctx      = 8192
0.00.649.510 I llama_new_context_with_model: n_batch    = 2048
0.00.649.510 I llama_new_context_with_model: n_ubatch   = 512
0.00.649.511 I llama_new_context_with_model: flash_attn = 0
0.00.649.515 I llama_new_context_with_model: freq_base  = 10000.0
0.00.649.516 I llama_new_context_with_model: freq_scale = 1
0.00.679.279 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.679.321 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.443 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.680.894 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.680.902 I llama_new_context_with_model: graph nodes  = 601
0.00.680.903 I llama_new_context_with_model: graph splits = 1
0.00.680.922 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.700 I main: llama threadpool init, n_threads = 4
0.01.291.710 I 
0.01.291.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.835 I 
0.01.292.008 I sampler seed: 1197784600
0.01.292.019 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.025 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.292.027 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.028 I 
 increamically.

The answer is:
**Exuberantly.**

The word "exuberantly" means showing or expressing great joy or enthusiasm. [end of text]


0.14.863.321 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.22 tokens per second)
0.14.863.324 I llama_perf_context_print:        load time =    1288.64 ms
0.14.863.326 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.863.340 I llama_perf_context_print:        eval time =   13489.10 ms /    32 runs   (  421.53 ms per token,     2.37 tokens per second)
0.14.863.341 I llama_perf_context_print:       total time =   13571.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.681 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.857 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.981 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.298 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.310 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.315 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.318 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.333 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.349 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.352 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.015 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.024 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.025 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.033 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.037 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.038 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.047 I llama_model_loader: - type  f32:   37 tensors
0.00.270.051 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.674 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.452.826 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.453.855 I llm_load_vocab: special tokens cache size = 5
0.00.548.485 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.548.549 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.548.553 I llm_load_print_meta: arch             = gemma
0.00.548.554 I llm_load_print_meta: vocab type       = SPM
0.00.548.555 I llm_load_print_meta: n_vocab          = 256000
0.00.548.557 I llm_load_print_meta: n_merges         = 0
0.00.548.558 I llm_load_print_meta: vocab_only       = 0
0.00.548.559 I llm_load_print_meta: n_ctx_train      = 8192
0.00.548.559 I llm_load_print_meta: n_embd           = 2048
0.00.548.559 I llm_load_print_meta: n_layer          = 18
0.00.548.632 I llm_load_print_meta: n_head           = 8
0.00.548.642 I llm_load_print_meta: n_head_kv        = 1
0.00.548.645 I llm_load_print_meta: n_rot            = 256
0.00.548.646 I llm_load_print_meta: n_swa            = 0
0.00.548.646 I llm_load_print_meta: n_embd_head_k    = 256
0.00.548.646 I llm_load_print_meta: n_embd_head_v    = 256
0.00.548.651 I llm_load_print_meta: n_gqa            = 8
0.00.548.657 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.548.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.548.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.548.667 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.548.668 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.548.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.548.669 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.548.677 I llm_load_print_meta: n_ff             = 16384
0.00.548.678 I llm_load_print_meta: n_expert         = 0
0.00.548.680 I llm_load_print_meta: n_expert_used    = 0
0.00.548.680 I llm_load_print_meta: causal attn      = 1
0.00.548.681 I llm_load_print_meta: pooling type     = 0
0.00.548.682 I llm_load_print_meta: rope type        = 2
0.00.548.682 I llm_load_print_meta: rope scaling     = linear
0.00.548.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.548.686 I llm_load_print_meta: freq_scale_train = 1
0.00.548.689 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.548.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.548.690 I llm_load_print_meta: ssm_d_conv       = 0
0.00.548.691 I llm_load_print_meta: ssm_d_inner      = 0
0.00.548.692 I llm_load_print_meta: ssm_d_state      = 0
0.00.548.692 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.548.693 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.548.694 I llm_load_print_meta: model type       = 2B
0.00.548.695 I llm_load_print_meta: model ftype      = Q8_0
0.00.548.696 I llm_load_print_meta: model params     = 2.51 B
0.00.548.698 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.548.709 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.548.709 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.548.710 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.548.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.548.713 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.548.715 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.548.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.548.723 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.548.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.548.728 I llm_load_print_meta: max token length = 93
0.00.548.910 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.309 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.620.319 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.626.127 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.135 I llama_new_context_with_model: n_batch    = 2048
0.00.626.136 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.137 I llama_new_context_with_model: flash_attn = 0
0.00.626.140 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.141 I llama_new_context_with_model: freq_scale = 1
0.00.656.440 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.484 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.011 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.019 I llama_new_context_with_model: graph nodes  = 601
0.00.658.020 I llama_new_context_with_model: graph splits = 1
0.00.658.036 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.242 I main: llama threadpool init, n_threads = 4
0.01.271.252 I 
0.01.271.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.375 I 
0.01.271.548 I sampler seed: 4169100298
0.01.271.561 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.567 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.570 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.571 I 
 increably. [end of text]


0.02.972.216 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.45 tokens per second)
0.02.972.219 I llama_perf_context_print:        load time =    1268.16 ms
0.02.972.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.972.235 I llama_perf_context_print:        eval time =    1689.31 ms /     4 runs   (  422.33 ms per token,     2.37 tokens per second)
0.02.972.236 I llama_perf_context_print:       total time =    1700.98 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.320s
user	3m2.227s
sys	0m9.518s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3902 (c81f3bbb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198872.99 ms
main:    total time = 198872.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.652 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.961 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.166 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.263 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.264 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.268 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.269 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.273 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.274 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.280 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.281 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.284 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.667 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.686 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.688 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.688 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.690 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.697 I llama_model_loader: - type  f32:   37 tensors
0.00.269.701 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.702 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.301 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.475 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.475.492 I llm_load_vocab: special tokens cache size = 5
0.00.572.725 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.572.785 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.572.786 I llm_load_print_meta: arch             = gemma
0.00.572.787 I llm_load_print_meta: vocab type       = SPM
0.00.572.788 I llm_load_print_meta: n_vocab          = 256000
0.00.572.790 I llm_load_print_meta: n_merges         = 0
0.00.572.790 I llm_load_print_meta: vocab_only       = 0
0.00.572.791 I llm_load_print_meta: n_ctx_train      = 8192
0.00.572.791 I llm_load_print_meta: n_embd           = 2048
0.00.572.792 I llm_load_print_meta: n_layer          = 18
0.00.572.857 I llm_load_print_meta: n_head           = 8
0.00.572.863 I llm_load_print_meta: n_head_kv        = 1
0.00.572.864 I llm_load_print_meta: n_rot            = 256
0.00.572.865 I llm_load_print_meta: n_swa            = 0
0.00.572.865 I llm_load_print_meta: n_embd_head_k    = 256
0.00.572.865 I llm_load_print_meta: n_embd_head_v    = 256
0.00.572.870 I llm_load_print_meta: n_gqa            = 8
0.00.572.874 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.572.879 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.572.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.572.882 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.572.882 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.572.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.572.883 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.572.887 I llm_load_print_meta: n_ff             = 16384
0.00.572.888 I llm_load_print_meta: n_expert         = 0
0.00.572.888 I llm_load_print_meta: n_expert_used    = 0
0.00.572.889 I llm_load_print_meta: causal attn      = 1
0.00.572.889 I llm_load_print_meta: pooling type     = 0
0.00.572.889 I llm_load_print_meta: rope type        = 2
0.00.572.890 I llm_load_print_meta: rope scaling     = linear
0.00.572.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.572.892 I llm_load_print_meta: freq_scale_train = 1
0.00.572.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.572.892 I llm_load_print_meta: rope_finetuned   = unknown
0.00.572.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.572.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.572.893 I llm_load_print_meta: ssm_d_state      = 0
0.00.572.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.572.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.572.895 I llm_load_print_meta: model type       = 2B
0.00.572.897 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.572.897 I llm_load_print_meta: model params     = 2.51 B
0.00.572.898 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.572.898 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.572.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.572.899 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.572.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.572.900 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.572.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.572.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.572.906 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.572.907 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.572.907 I llm_load_print_meta: max token length = 93
0.00.573.080 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.651 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.632.660 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.632.661 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.632.661 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.632.662 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.632.662 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.638.475 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.485 I llama_new_context_with_model: n_batch    = 2048
0.00.638.485 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.486 I llama_new_context_with_model: flash_attn = 0
0.00.638.489 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.490 I llama_new_context_with_model: freq_scale = 1
0.00.669.588 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.631 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.669.749 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.215 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.222 I llama_new_context_with_model: graph nodes  = 601
0.00.671.222 I llama_new_context_with_model: graph splits = 1
0.00.671.238 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.365 I main: llama threadpool init, n_threads = 4
0.01.250.377 I 
0.01.250.485 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.489 I 
0.01.250.661 I sampler seed: 551404312
0.01.250.671 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.250.677 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.250.677 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.250.677 I 
 seconde.

**Assistant**

I am unable to access the requested text. Please provide me with the text so that I can assist you. [end of text]


0.11.873.918 I llama_perf_sampler_print:    sampling time =      47.44 ms /    32 runs   (    1.48 ms per token,   674.59 tokens per second)
0.11.873.922 I llama_perf_context_print:        load time =    1247.36 ms
0.11.873.923 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.873.924 I llama_perf_context_print:        eval time =   10543.99 ms /    31 runs   (  340.13 ms per token,     2.94 tokens per second)
0.11.873.939 I llama_perf_context_print:       total time =   10623.56 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3902 (c81f3bbb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198884.45 ms
main:    total time = 198884.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.668 I build: 3902 (c81f3bbb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.757 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.847 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.861 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.863 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.867 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.869 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.870 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.871 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.872 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.873 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.879 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.886 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.889 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.966 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.967 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.968 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.969 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.974 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.982 I llama_model_loader: - type  f32:   37 tensors
0.00.269.986 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.987 I llama_model_loader: - type q6_K:   19 tensors
0.00.420.329 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.444.065 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.445.105 I llm_load_vocab: special tokens cache size = 5
0.00.544.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.074 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.078 I llm_load_print_meta: arch             = gemma
0.00.544.079 I llm_load_print_meta: vocab type       = SPM
0.00.544.080 I llm_load_print_meta: n_vocab          = 256000
0.00.544.083 I llm_load_print_meta: n_merges         = 0
0.00.544.083 I llm_load_print_meta: vocab_only       = 0
0.00.544.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.084 I llm_load_print_meta: n_embd           = 2048
0.00.544.084 I llm_load_print_meta: n_layer          = 18
0.00.544.148 I llm_load_print_meta: n_head           = 8
0.00.544.158 I llm_load_print_meta: n_head_kv        = 1
0.00.544.159 I llm_load_print_meta: n_rot            = 256
0.00.544.159 I llm_load_print_meta: n_swa            = 0
0.00.544.160 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.161 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.166 I llm_load_print_meta: n_gqa            = 8
0.00.544.170 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.181 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.182 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.187 I llm_load_print_meta: n_ff             = 16384
0.00.544.196 I llm_load_print_meta: n_expert         = 0
0.00.544.196 I llm_load_print_meta: n_expert_used    = 0
0.00.544.208 I llm_load_print_meta: causal attn      = 1
0.00.544.209 I llm_load_print_meta: pooling type     = 0
0.00.544.209 I llm_load_print_meta: rope type        = 2
0.00.544.209 I llm_load_print_meta: rope scaling     = linear
0.00.544.211 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.212 I llm_load_print_meta: freq_scale_train = 1
0.00.544.212 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.221 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.222 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.222 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.222 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.223 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.223 I llm_load_print_meta: model type       = 2B
0.00.544.224 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.544.226 I llm_load_print_meta: model params     = 2.51 B
0.00.544.227 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.544.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.544.248 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.544.249 I llm_load_print_meta: max token length = 93
0.00.544.424 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.603.873 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.609.478 I llama_new_context_with_model: n_ctx      = 8192
0.00.609.486 I llama_new_context_with_model: n_batch    = 2048
0.00.609.486 I llama_new_context_with_model: n_ubatch   = 512
0.00.609.487 I llama_new_context_with_model: flash_attn = 0
0.00.609.490 I llama_new_context_with_model: freq_base  = 10000.0
0.00.609.491 I llama_new_context_with_model: freq_scale = 1
0.00.639.779 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.639.823 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.639.940 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.641.309 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.641.315 I llama_new_context_with_model: graph nodes  = 601
0.00.641.316 I llama_new_context_with_model: graph splits = 1
0.00.641.331 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.219.514 I main: llama threadpool init, n_threads = 4
0.01.219.526 I 
0.01.219.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.219.636 I 
0.01.219.803 I sampler seed: 3731660682
0.01.219.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.219.820 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.219.820 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.219.821 I 
 squaRE, the world's largest language model, is a remarkable achievement in artificial intelligence. However, its potential consequences require careful consideration.

**Concerns about

0.12.117.242 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.77 tokens per second)
0.12.117.256 I llama_perf_context_print:        load time =    1216.52 ms
0.12.117.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.117.260 I llama_perf_context_print:        eval time =   10816.09 ms /    32 runs   (  338.00 ms per token,     2.96 tokens per second)
0.12.117.261 I llama_perf_context_print:       total time =   10897.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.664s
user	50m14.107s
sys	0m6.377s
