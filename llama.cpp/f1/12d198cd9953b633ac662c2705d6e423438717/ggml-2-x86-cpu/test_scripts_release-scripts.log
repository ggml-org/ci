+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.191 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.385 I main: llama backend init
0.00.000.391 I main: load the model and apply lora adapter, if any
0.00.020.839 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.849 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.857 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.861 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.863 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.867 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.868 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.868 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.869 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.869 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.874 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.875 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.875 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.876 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.876 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.361 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.177 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.980 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.983 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.984 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.987 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.988 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.990 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.991 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.995 I llama_model_loader: - type  f32:   37 tensors
0.00.130.996 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.834 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.675 I llm_load_vocab: special tokens cache size = 5
0.00.282.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.125 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.126 I llm_load_print_meta: arch             = gemma
0.00.282.126 I llm_load_print_meta: vocab type       = SPM
0.00.282.127 I llm_load_print_meta: n_vocab          = 256000
0.00.282.127 I llm_load_print_meta: n_merges         = 0
0.00.282.128 I llm_load_print_meta: vocab_only       = 0
0.00.282.128 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.128 I llm_load_print_meta: n_embd           = 2048
0.00.282.129 I llm_load_print_meta: n_layer          = 18
0.00.282.140 I llm_load_print_meta: n_head           = 8
0.00.282.141 I llm_load_print_meta: n_head_kv        = 1
0.00.282.142 I llm_load_print_meta: n_rot            = 256
0.00.282.142 I llm_load_print_meta: n_swa            = 0
0.00.282.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.143 I llm_load_print_meta: n_gqa            = 8
0.00.282.144 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.145 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.148 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.150 I llm_load_print_meta: n_ff             = 16384
0.00.282.150 I llm_load_print_meta: n_expert         = 0
0.00.282.150 I llm_load_print_meta: n_expert_used    = 0
0.00.282.150 I llm_load_print_meta: causal attn      = 1
0.00.282.150 I llm_load_print_meta: pooling type     = 0
0.00.282.151 I llm_load_print_meta: rope type        = 2
0.00.282.151 I llm_load_print_meta: rope scaling     = linear
0.00.282.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.154 I llm_load_print_meta: freq_scale_train = 1
0.00.282.154 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.156 I llm_load_print_meta: model type       = 2B
0.00.282.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.157 I llm_load_print_meta: model params     = 2.51 B
0.00.282.158 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.158 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.159 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.159 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.160 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.160 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.161 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.162 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.162 I llm_load_print_meta: max token length = 93
0.00.382.837 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.382.842 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.382.843 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.382.843 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.382.844 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.382.845 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.387.982 I llama_new_context_with_model: n_seq_max     = 1
0.00.387.990 I llama_new_context_with_model: n_ctx         = 4096
0.00.387.990 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.387.991 I llama_new_context_with_model: n_batch       = 2048
0.00.387.991 I llama_new_context_with_model: n_ubatch      = 512
0.00.387.992 I llama_new_context_with_model: flash_attn    = 0
0.00.387.995 I llama_new_context_with_model: freq_base     = 10000.0
0.00.387.995 I llama_new_context_with_model: freq_scale    = 1
0.00.387.996 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.108 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.124 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.452 I llama_new_context_with_model: graph nodes  = 601
0.00.403.453 I llama_new_context_with_model: graph splits = 1
0.00.403.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.708 I main: llama threadpool init, n_threads = 4
0.00.488.723 I 
0.00.488.797 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.488.800 I 
0.00.488.841 I sampler seed: 1618186621
0.00.488.852 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.865 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.869 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.869 I 
 maneuvled in the text:

**I have read the text and I understand that the text refers to a situation where a person has been unjustly accused of

0.02.745.914 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6738.82 tokens per second)
0.02.745.916 I llama_perf_context_print:        load time =     488.30 ms
0.02.745.917 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.919 I llama_perf_context_print:        eval time =    2238.47 ms /    32 runs   (   69.95 ms per token,    14.30 tokens per second)
0.02.745.919 I llama_perf_context_print:       total time =    2257.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.528 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.020.953 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.979 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.983 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.984 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.990 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.996 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.997 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.999 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.439 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.774 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.557 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.563 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.564 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.564 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.565 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.566 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.567 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.569 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.569 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.570 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.571 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.572 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.575 I llama_model_loader: - type  f32:   37 tensors
0.00.130.576 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.280 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.844 I llm_load_vocab: special tokens cache size = 5
0.00.262.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.799 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.801 I llm_load_print_meta: arch             = gemma
0.00.262.815 I llm_load_print_meta: vocab type       = SPM
0.00.262.816 I llm_load_print_meta: n_vocab          = 256000
0.00.262.817 I llm_load_print_meta: n_merges         = 0
0.00.262.817 I llm_load_print_meta: vocab_only       = 0
0.00.262.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.818 I llm_load_print_meta: n_embd           = 2048
0.00.262.818 I llm_load_print_meta: n_layer          = 18
0.00.262.830 I llm_load_print_meta: n_head           = 8
0.00.262.831 I llm_load_print_meta: n_head_kv        = 1
0.00.262.832 I llm_load_print_meta: n_rot            = 256
0.00.262.833 I llm_load_print_meta: n_swa            = 0
0.00.262.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.834 I llm_load_print_meta: n_gqa            = 8
0.00.262.836 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.837 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.839 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.840 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.840 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.841 I llm_load_print_meta: n_ff             = 16384
0.00.262.841 I llm_load_print_meta: n_expert         = 0
0.00.262.841 I llm_load_print_meta: n_expert_used    = 0
0.00.262.842 I llm_load_print_meta: causal attn      = 1
0.00.262.842 I llm_load_print_meta: pooling type     = 0
0.00.262.842 I llm_load_print_meta: rope type        = 2
0.00.262.843 I llm_load_print_meta: rope scaling     = linear
0.00.262.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.846 I llm_load_print_meta: freq_scale_train = 1
0.00.262.847 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.849 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.849 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.850 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.851 I llm_load_print_meta: model type       = 2B
0.00.262.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.853 I llm_load_print_meta: model params     = 2.51 B
0.00.262.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.858 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.858 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.859 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.859 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.860 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.860 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.861 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.861 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.862 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.863 I llm_load_print_meta: max token length = 93
0.00.357.780 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.158 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.166 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.166 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.167 I llama_new_context_with_model: n_batch       = 2048
0.00.363.167 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.168 I llama_new_context_with_model: flash_attn    = 0
0.00.363.172 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.172 I llama_new_context_with_model: freq_scale    = 1
0.00.363.173 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.871 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.887 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.981 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.328 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.336 I llama_new_context_with_model: graph nodes  = 601
0.00.380.336 I llama_new_context_with_model: graph splits = 1
0.00.380.338 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.488 I main: llama threadpool init, n_threads = 4
0.00.464.505 I 
0.00.464.587 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.591 I 
0.00.464.644 I sampler seed: 3710402453
0.00.464.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.672 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.672 I 
 increasively.

I am sorry, I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.031.413 I llama_perf_sampler_print:    sampling time =       3.36 ms /    24 runs   (    0.14 ms per token,  7134.36 tokens per second)
0.02.031.417 I llama_perf_context_print:        load time =     463.73 ms
0.02.031.418 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.031.420 I llama_perf_context_print:        eval time =    1552.58 ms /    23 runs   (   67.50 ms per token,    14.81 tokens per second)
0.02.031.421 I llama_perf_context_print:       total time =    1566.93 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.806 I main: llama backend init
0.00.000.813 I main: load the model and apply lora adapter, if any
0.00.021.488 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.497 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.505 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.510 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.511 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.517 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.518 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.519 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.519 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.520 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.525 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.525 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.526 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.527 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.529 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.084 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.923 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.936 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.938 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.939 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.944 I llama_model_loader: - type  f32:   37 tensors
0.00.135.945 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.013 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.743 I llm_load_vocab: special tokens cache size = 5
0.00.287.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.767 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.768 I llm_load_print_meta: arch             = gemma
0.00.287.768 I llm_load_print_meta: vocab type       = SPM
0.00.287.769 I llm_load_print_meta: n_vocab          = 256000
0.00.287.770 I llm_load_print_meta: n_merges         = 0
0.00.287.770 I llm_load_print_meta: vocab_only       = 0
0.00.287.771 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.771 I llm_load_print_meta: n_embd           = 2048
0.00.287.772 I llm_load_print_meta: n_layer          = 18
0.00.287.786 I llm_load_print_meta: n_head           = 8
0.00.287.788 I llm_load_print_meta: n_head_kv        = 1
0.00.287.788 I llm_load_print_meta: n_rot            = 256
0.00.287.789 I llm_load_print_meta: n_swa            = 0
0.00.287.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.790 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.791 I llm_load_print_meta: n_gqa            = 8
0.00.287.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.801 I llm_load_print_meta: n_ff             = 16384
0.00.287.801 I llm_load_print_meta: n_expert         = 0
0.00.287.802 I llm_load_print_meta: n_expert_used    = 0
0.00.287.802 I llm_load_print_meta: causal attn      = 1
0.00.287.802 I llm_load_print_meta: pooling type     = 0
0.00.287.803 I llm_load_print_meta: rope type        = 2
0.00.287.803 I llm_load_print_meta: rope scaling     = linear
0.00.287.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.806 I llm_load_print_meta: freq_scale_train = 1
0.00.287.806 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.807 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.807 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.808 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.809 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.809 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.810 I llm_load_print_meta: model type       = 2B
0.00.287.810 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.811 I llm_load_print_meta: model params     = 2.51 B
0.00.287.812 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.813 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.813 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.814 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.814 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.816 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.816 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.818 I llm_load_print_meta: max token length = 93
0.00.365.577 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.365.583 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.584 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.365.584 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.365.585 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.586 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.370.769 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.776 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.776 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.776 I llama_new_context_with_model: n_batch       = 2048
0.00.370.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.778 I llama_new_context_with_model: flash_attn    = 0
0.00.370.779 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.780 I llama_new_context_with_model: freq_scale    = 1
0.00.370.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.229 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.244 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.338 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.586 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.592 I llama_new_context_with_model: graph nodes  = 601
0.00.387.592 I llama_new_context_with_model: graph splits = 1
0.00.387.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.056 I main: llama threadpool init, n_threads = 4
0.00.472.072 I 
0.00.472.146 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.149 I 
0.00.472.192 I sampler seed: 3451913300
0.00.472.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.215 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.218 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.218 I 
 increadibly to answer the question!

I am unable to generate a response as I am unable to access or process personal or sensitive information. [end of text]


0.02.567.074 I llama_perf_sampler_print:    sampling time =       4.58 ms /    30 runs   (    0.15 ms per token,  6554.51 tokens per second)
0.02.567.077 I llama_perf_context_print:        load time =     471.23 ms
0.02.567.078 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.567.080 I llama_perf_context_print:        eval time =    2076.58 ms /    29 runs   (   71.61 ms per token,    13.97 tokens per second)
0.02.567.080 I llama_perf_context_print:       total time =    2095.03 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.165 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.347 I main: llama backend init
0.00.000.355 I main: load the model and apply lora adapter, if any
0.00.020.581 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.599 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.608 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.609 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.614 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.618 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.619 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.619 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.619 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.337 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.326 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.186 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.193 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.194 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.195 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.197 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.198 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.201 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.202 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.203 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.204 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.205 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.209 I llama_model_loader: - type  f32:   37 tensors
0.00.131.211 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.421 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.976 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.535 I llm_load_vocab: special tokens cache size = 5
0.00.266.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.465 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.465 I llm_load_print_meta: arch             = gemma
0.00.266.466 I llm_load_print_meta: vocab type       = SPM
0.00.266.466 I llm_load_print_meta: n_vocab          = 256000
0.00.266.467 I llm_load_print_meta: n_merges         = 0
0.00.266.467 I llm_load_print_meta: vocab_only       = 0
0.00.266.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.468 I llm_load_print_meta: n_embd           = 2048
0.00.266.468 I llm_load_print_meta: n_layer          = 18
0.00.266.480 I llm_load_print_meta: n_head           = 8
0.00.266.481 I llm_load_print_meta: n_head_kv        = 1
0.00.266.481 I llm_load_print_meta: n_rot            = 256
0.00.266.482 I llm_load_print_meta: n_swa            = 0
0.00.266.482 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.482 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.483 I llm_load_print_meta: n_gqa            = 8
0.00.266.484 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.485 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.485 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.487 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.487 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.487 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.488 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.489 I llm_load_print_meta: n_ff             = 16384
0.00.266.489 I llm_load_print_meta: n_expert         = 0
0.00.266.489 I llm_load_print_meta: n_expert_used    = 0
0.00.266.489 I llm_load_print_meta: causal attn      = 1
0.00.266.490 I llm_load_print_meta: pooling type     = 0
0.00.266.490 I llm_load_print_meta: rope type        = 2
0.00.266.490 I llm_load_print_meta: rope scaling     = linear
0.00.266.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.493 I llm_load_print_meta: freq_scale_train = 1
0.00.266.493 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.494 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.494 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.494 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.495 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.495 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.495 I llm_load_print_meta: model type       = 2B
0.00.266.496 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.497 I llm_load_print_meta: model params     = 2.51 B
0.00.266.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.498 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.499 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.499 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.500 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.500 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.501 I llm_load_print_meta: max token length = 93
0.00.337.538 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.544 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.630 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.636 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.637 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.637 I llama_new_context_with_model: n_batch       = 2048
0.00.342.638 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.639 I llama_new_context_with_model: flash_attn    = 0
0.00.342.641 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.642 I llama_new_context_with_model: freq_scale    = 1
0.00.342.643 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.664 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.678 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.043 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.049 I llama_new_context_with_model: graph nodes  = 601
0.00.358.050 I llama_new_context_with_model: graph splits = 1
0.00.358.051 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.224 I main: llama threadpool init, n_threads = 4
0.00.447.239 I 
0.00.447.312 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.315 I 
0.00.447.358 I sampler seed: 4077320028
0.00.447.369 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.382 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.386 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.386 I 
 increably.

I'm sorry, I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.02.189.164 I llama_perf_sampler_print:    sampling time =       3.50 ms /    24 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.02.189.167 I llama_perf_context_print:        load time =     446.85 ms
0.02.189.169 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.189.170 I llama_perf_context_print:        eval time =    1727.14 ms /    23 runs   (   75.09 ms per token,    13.32 tokens per second)
0.02.189.171 I llama_perf_context_print:       total time =    1741.95 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.076s
user	0m33.501s
sys	0m9.453s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4267 (f112d198)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40211.61 ms
main:    total time = 40211.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.194 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.399 I main: llama backend init
0.00.000.406 I main: load the model and apply lora adapter, if any
0.00.020.517 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.526 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.538 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.544 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.545 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.546 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.547 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.552 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.896 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.741 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.744 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.750 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.751 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.752 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.753 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.757 I llama_model_loader: - type  f32:   37 tensors
0.00.130.758 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.759 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.929 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.544 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.144 I llm_load_vocab: special tokens cache size = 5
0.00.269.177 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.195 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.195 I llm_load_print_meta: arch             = gemma
0.00.269.196 I llm_load_print_meta: vocab type       = SPM
0.00.269.196 I llm_load_print_meta: n_vocab          = 256000
0.00.269.197 I llm_load_print_meta: n_merges         = 0
0.00.269.198 I llm_load_print_meta: vocab_only       = 0
0.00.269.198 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.198 I llm_load_print_meta: n_embd           = 2048
0.00.269.198 I llm_load_print_meta: n_layer          = 18
0.00.269.210 I llm_load_print_meta: n_head           = 8
0.00.269.211 I llm_load_print_meta: n_head_kv        = 1
0.00.269.211 I llm_load_print_meta: n_rot            = 256
0.00.269.211 I llm_load_print_meta: n_swa            = 0
0.00.269.211 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.212 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.213 I llm_load_print_meta: n_gqa            = 8
0.00.269.214 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.215 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.216 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.217 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.218 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.218 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.218 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.219 I llm_load_print_meta: n_ff             = 16384
0.00.269.220 I llm_load_print_meta: n_expert         = 0
0.00.269.220 I llm_load_print_meta: n_expert_used    = 0
0.00.269.220 I llm_load_print_meta: causal attn      = 1
0.00.269.221 I llm_load_print_meta: pooling type     = 0
0.00.269.221 I llm_load_print_meta: rope type        = 2
0.00.269.221 I llm_load_print_meta: rope scaling     = linear
0.00.269.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.223 I llm_load_print_meta: freq_scale_train = 1
0.00.269.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.224 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.225 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.226 I llm_load_print_meta: model type       = 2B
0.00.269.227 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.227 I llm_load_print_meta: model params     = 2.51 B
0.00.269.228 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.228 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.229 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.229 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.229 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.230 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.230 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.231 I llm_load_print_meta: max token length = 93
0.00.330.215 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.223 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.224 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.224 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.225 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.226 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.426 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.435 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.436 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.436 I llama_new_context_with_model: n_batch       = 2048
0.00.335.437 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.438 I llama_new_context_with_model: flash_attn    = 0
0.00.335.440 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.441 I llama_new_context_with_model: freq_scale    = 1
0.00.335.442 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.272 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.384 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.659 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.666 I llama_new_context_with_model: graph nodes  = 601
0.00.352.666 I llama_new_context_with_model: graph splits = 1
0.00.352.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.475 I main: llama threadpool init, n_threads = 4
0.00.430.492 I 
0.00.430.569 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.572 I 
0.00.430.622 I sampler seed: 4020622440
0.00.430.633 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.647 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.650 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.651 I 
 maneuvously.

This is a riddle. Can you solve it?

I have cities, but no houses;
I have mountains, but no rocks

0.02.058.758 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6253.55 tokens per second)
0.02.058.760 I llama_perf_context_print:        load time =     430.05 ms
0.02.058.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.058.763 I llama_perf_context_print:        eval time =    1608.44 ms /    32 runs   (   50.26 ms per token,    19.90 tokens per second)
0.02.058.763 I llama_perf_context_print:       total time =    1628.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4267 (f112d198)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40176.14 ms
main:    total time = 40176.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4267 (f112d198) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.117 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.132 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.141 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.142 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.148 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.149 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.152 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.596 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.519 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.525 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.526 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.526 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.527 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.528 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.528 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.531 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.535 I llama_model_loader: - type  f32:   37 tensors
0.00.131.536 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.536 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.585 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.407 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.010 I llm_load_vocab: special tokens cache size = 5
0.00.272.148 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.166 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.166 I llm_load_print_meta: arch             = gemma
0.00.272.167 I llm_load_print_meta: vocab type       = SPM
0.00.272.167 I llm_load_print_meta: n_vocab          = 256000
0.00.272.168 I llm_load_print_meta: n_merges         = 0
0.00.272.168 I llm_load_print_meta: vocab_only       = 0
0.00.272.168 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.168 I llm_load_print_meta: n_embd           = 2048
0.00.272.169 I llm_load_print_meta: n_layer          = 18
0.00.272.179 I llm_load_print_meta: n_head           = 8
0.00.272.180 I llm_load_print_meta: n_head_kv        = 1
0.00.272.181 I llm_load_print_meta: n_rot            = 256
0.00.272.181 I llm_load_print_meta: n_swa            = 0
0.00.272.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.182 I llm_load_print_meta: n_gqa            = 8
0.00.272.183 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.184 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.185 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.186 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.187 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.187 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.187 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.188 I llm_load_print_meta: n_ff             = 16384
0.00.272.189 I llm_load_print_meta: n_expert         = 0
0.00.272.189 I llm_load_print_meta: n_expert_used    = 0
0.00.272.189 I llm_load_print_meta: causal attn      = 1
0.00.272.189 I llm_load_print_meta: pooling type     = 0
0.00.272.189 I llm_load_print_meta: rope type        = 2
0.00.272.190 I llm_load_print_meta: rope scaling     = linear
0.00.272.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.192 I llm_load_print_meta: freq_scale_train = 1
0.00.272.192 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.193 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.193 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.193 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.194 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.194 I llm_load_print_meta: model type       = 2B
0.00.272.195 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.195 I llm_load_print_meta: model params     = 2.51 B
0.00.272.196 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.199 I llm_load_print_meta: max token length = 93
0.00.328.195 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.309 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.316 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.316 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.317 I llama_new_context_with_model: n_batch       = 2048
0.00.333.317 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.318 I llama_new_context_with_model: flash_attn    = 0
0.00.333.320 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.322 I llama_new_context_with_model: freq_scale    = 1
0.00.333.323 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.833 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.850 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.147 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.174 I llama_new_context_with_model: graph nodes  = 601
0.00.350.174 I llama_new_context_with_model: graph splits = 1
0.00.350.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.319 I main: llama threadpool init, n_threads = 4
0.00.427.336 I 
0.00.427.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.416 I 
0.00.427.461 I sampler seed: 983033182
0.00.427.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.474 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.475 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.475 I 
 seconally, a beautiful woman dressed in a flowing gown.

The woman's voice was like a gentle caress, her smile radiant like the sun. She

0.02.018.717 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6479.48 tokens per second)
0.02.018.719 I llama_perf_context_print:        load time =     426.57 ms
0.02.018.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.722 I llama_perf_context_print:        eval time =    1572.61 ms /    32 runs   (   49.14 ms per token,    20.35 tokens per second)
0.02.018.722 I llama_perf_context_print:       total time =    1591.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.293s
user	10m24.521s
sys	0m7.043s
