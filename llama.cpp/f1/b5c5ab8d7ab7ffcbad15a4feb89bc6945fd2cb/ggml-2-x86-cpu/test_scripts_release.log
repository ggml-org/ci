+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.021.420 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.430 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.449 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.450 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.456 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.797 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.828 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.659 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.660 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.661 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.667 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.667 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.668 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.669 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.671 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.674 I llama_model_loader: - type  f32:   37 tensors
0.00.131.675 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.631 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.411 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.918 I llm_load_vocab: special tokens cache size = 5
0.00.264.560 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.581 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.582 I llm_load_print_meta: arch             = gemma
0.00.264.582 I llm_load_print_meta: vocab type       = SPM
0.00.264.583 I llm_load_print_meta: n_vocab          = 256000
0.00.264.583 I llm_load_print_meta: n_merges         = 0
0.00.264.583 I llm_load_print_meta: vocab_only       = 0
0.00.264.584 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.584 I llm_load_print_meta: n_embd           = 2048
0.00.264.584 I llm_load_print_meta: n_layer          = 18
0.00.264.599 I llm_load_print_meta: n_head           = 8
0.00.264.600 I llm_load_print_meta: n_head_kv        = 1
0.00.264.601 I llm_load_print_meta: n_rot            = 256
0.00.264.601 I llm_load_print_meta: n_swa            = 0
0.00.264.602 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.603 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.604 I llm_load_print_meta: n_gqa            = 8
0.00.264.605 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.607 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.609 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.609 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.609 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.618 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.619 I llm_load_print_meta: n_ff             = 16384
0.00.264.620 I llm_load_print_meta: n_expert         = 0
0.00.264.620 I llm_load_print_meta: n_expert_used    = 0
0.00.264.621 I llm_load_print_meta: causal attn      = 1
0.00.264.621 I llm_load_print_meta: pooling type     = 0
0.00.264.622 I llm_load_print_meta: rope type        = 2
0.00.264.622 I llm_load_print_meta: rope scaling     = linear
0.00.264.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.625 I llm_load_print_meta: freq_scale_train = 1
0.00.264.625 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.625 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.625 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.626 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.626 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.627 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.627 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.628 I llm_load_print_meta: model type       = 2B
0.00.264.628 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.630 I llm_load_print_meta: model params     = 2.51 B
0.00.264.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.632 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.634 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.634 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.635 I llm_load_print_meta: max token length = 93
0.00.368.633 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.368.641 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.368.642 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.368.643 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.368.643 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.368.644 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.915 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.922 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.922 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.922 I llama_new_context_with_model: n_batch       = 2048
0.00.373.923 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.923 I llama_new_context_with_model: flash_attn    = 0
0.00.373.926 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.927 I llama_new_context_with_model: freq_scale    = 1
0.00.373.927 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.404 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.421 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.512 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.761 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.766 I llama_new_context_with_model: graph nodes  = 601
0.00.390.766 I llama_new_context_with_model: graph splits = 1
0.00.390.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.631 I main: llama threadpool init, n_threads = 4
0.00.475.645 I 
0.00.475.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.724 I 
0.00.475.766 I sampler seed: 422780387
0.00.475.778 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.781 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.781 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.781 I 
 maneuvres.

This context does not mention anything about the maneuvres's age or gender, so I cannot answer this question from the provided context. [end of text]


0.02.736.923 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6975.27 tokens per second)
0.02.736.925 I llama_perf_context_print:        load time =     474.75 ms
0.02.736.926 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.736.927 I llama_perf_context_print:        eval time =    2242.76 ms /    32 runs   (   70.09 ms per token,    14.27 tokens per second)
0.02.736.928 I llama_perf_context_print:       total time =    2261.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.021.169 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.182 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.198 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.199 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.200 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.206 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.317 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.106 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.112 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.113 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.114 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.115 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.116 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.117 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.121 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.122 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.123 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.123 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.124 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.128 I llama_model_loader: - type  f32:   37 tensors
0.00.131.129 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.459 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.430 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.907 I llm_load_vocab: special tokens cache size = 5
0.00.258.677 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.694 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.695 I llm_load_print_meta: arch             = gemma
0.00.258.696 I llm_load_print_meta: vocab type       = SPM
0.00.258.696 I llm_load_print_meta: n_vocab          = 256000
0.00.258.697 I llm_load_print_meta: n_merges         = 0
0.00.258.697 I llm_load_print_meta: vocab_only       = 0
0.00.258.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.698 I llm_load_print_meta: n_embd           = 2048
0.00.258.698 I llm_load_print_meta: n_layer          = 18
0.00.258.710 I llm_load_print_meta: n_head           = 8
0.00.258.711 I llm_load_print_meta: n_head_kv        = 1
0.00.258.712 I llm_load_print_meta: n_rot            = 256
0.00.258.712 I llm_load_print_meta: n_swa            = 0
0.00.258.712 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.713 I llm_load_print_meta: n_gqa            = 8
0.00.258.714 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.716 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.717 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.717 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.717 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.718 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.718 I llm_load_print_meta: n_ff             = 16384
0.00.258.719 I llm_load_print_meta: n_expert         = 0
0.00.258.719 I llm_load_print_meta: n_expert_used    = 0
0.00.258.719 I llm_load_print_meta: causal attn      = 1
0.00.258.720 I llm_load_print_meta: pooling type     = 0
0.00.258.720 I llm_load_print_meta: rope type        = 2
0.00.258.720 I llm_load_print_meta: rope scaling     = linear
0.00.258.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.722 I llm_load_print_meta: freq_scale_train = 1
0.00.258.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.723 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.724 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.724 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.724 I llm_load_print_meta: model type       = 2B
0.00.258.725 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.726 I llm_load_print_meta: model params     = 2.51 B
0.00.258.726 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.727 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.728 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.728 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.728 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.729 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.729 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.730 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.730 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.730 I llm_load_print_meta: max token length = 93
0.00.355.672 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.909 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.916 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.916 I llama_new_context_with_model: n_batch       = 2048
0.00.360.917 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.917 I llama_new_context_with_model: flash_attn    = 0
0.00.360.919 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.920 I llama_new_context_with_model: freq_scale    = 1
0.00.360.921 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.441 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.456 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.788 I llama_new_context_with_model: graph nodes  = 601
0.00.377.789 I llama_new_context_with_model: graph splits = 1
0.00.377.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.272 I main: llama threadpool init, n_threads = 4
0.00.460.284 I 
0.00.460.358 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.360 I 
0.00.460.400 I sampler seed: 2377019506
0.00.460.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.430 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.431 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.431 I 
 increasities to the highest possible level, making this the most efficient system for generating random data.

**Critique:**

The statement presents a hypothetical scenario that does

0.02.690.066 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6909.55 tokens per second)
0.02.690.069 I llama_perf_context_print:        load time =     459.40 ms
0.02.690.070 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.690.072 I llama_perf_context_print:        eval time =    2210.10 ms /    32 runs   (   69.07 ms per token,    14.48 tokens per second)
0.02.690.073 I llama_perf_context_print:       total time =    2229.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.544 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.021.095 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.106 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.118 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.122 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.123 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.129 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.129 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.130 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.131 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.389 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.207 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.208 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.215 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.216 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.221 I llama_model_loader: - type  f32:   37 tensors
0.00.131.222 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.493 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.728 I llm_load_vocab: special tokens cache size = 5
0.00.270.572 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.588 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.589 I llm_load_print_meta: arch             = gemma
0.00.270.589 I llm_load_print_meta: vocab type       = SPM
0.00.270.590 I llm_load_print_meta: n_vocab          = 256000
0.00.270.590 I llm_load_print_meta: n_merges         = 0
0.00.270.591 I llm_load_print_meta: vocab_only       = 0
0.00.270.591 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.591 I llm_load_print_meta: n_embd           = 2048
0.00.270.591 I llm_load_print_meta: n_layer          = 18
0.00.270.603 I llm_load_print_meta: n_head           = 8
0.00.270.604 I llm_load_print_meta: n_head_kv        = 1
0.00.270.604 I llm_load_print_meta: n_rot            = 256
0.00.270.604 I llm_load_print_meta: n_swa            = 0
0.00.270.605 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.606 I llm_load_print_meta: n_gqa            = 8
0.00.270.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.611 I llm_load_print_meta: n_ff             = 16384
0.00.270.612 I llm_load_print_meta: n_expert         = 0
0.00.270.612 I llm_load_print_meta: n_expert_used    = 0
0.00.270.612 I llm_load_print_meta: causal attn      = 1
0.00.270.613 I llm_load_print_meta: pooling type     = 0
0.00.270.613 I llm_load_print_meta: rope type        = 2
0.00.270.613 I llm_load_print_meta: rope scaling     = linear
0.00.270.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.615 I llm_load_print_meta: freq_scale_train = 1
0.00.270.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.616 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.617 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.617 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.617 I llm_load_print_meta: model type       = 2B
0.00.270.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.619 I llm_load_print_meta: model params     = 2.51 B
0.00.270.619 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.621 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.621 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.622 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.623 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.623 I llm_load_print_meta: max token length = 93
0.00.365.251 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.365.260 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.365.261 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.365.261 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.365.262 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.365.262 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.370.603 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.609 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.609 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.610 I llama_new_context_with_model: n_batch       = 2048
0.00.370.610 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.611 I llama_new_context_with_model: flash_attn    = 0
0.00.370.614 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.615 I llama_new_context_with_model: freq_scale    = 1
0.00.370.615 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.544 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.558 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.647 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.907 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.912 I llama_new_context_with_model: graph nodes  = 601
0.00.387.912 I llama_new_context_with_model: graph splits = 1
0.00.387.914 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.518 I main: llama threadpool init, n_threads = 4
0.00.474.532 I 
0.00.474.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.610 I 
0.00.474.650 I sampler seed: 3343766429
0.00.474.661 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.664 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.667 I 
 increasels with a penchant for mischief!

The mischievous creatures, known as the Fizzlings, have been causing quite a stir in the magical realm. They'

0.02.640.366 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6251.18 tokens per second)
0.02.640.368 I llama_perf_context_print:        load time =     473.63 ms
0.02.640.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.640.371 I llama_perf_context_print:        eval time =    2146.35 ms /    32 runs   (   67.07 ms per token,    14.91 tokens per second)
0.02.640.372 I llama_perf_context_print:       total time =    2165.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.646 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.888 I main: llama backend init
0.00.001.083 I main: load the model and apply lora adapter, if any
0.00.026.526 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.026.535 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.026.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.548 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.553 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.554 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.556 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.556 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.557 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.561 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.562 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.563 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.563 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.181 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.024 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.030 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.031 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.031 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.032 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.033 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.034 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.036 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.037 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.038 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.039 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.144.039 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.044 I llama_model_loader: - type  f32:   37 tensors
0.00.144.045 I llama_model_loader: - type q8_0:  127 tensors
0.00.224.218 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.278.365 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.278.969 I llm_load_vocab: special tokens cache size = 5
0.00.299.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.299.696 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.299.697 I llm_load_print_meta: arch             = gemma
0.00.299.697 I llm_load_print_meta: vocab type       = SPM
0.00.299.698 I llm_load_print_meta: n_vocab          = 256000
0.00.299.698 I llm_load_print_meta: n_merges         = 0
0.00.299.698 I llm_load_print_meta: vocab_only       = 0
0.00.299.699 I llm_load_print_meta: n_ctx_train      = 8192
0.00.299.699 I llm_load_print_meta: n_embd           = 2048
0.00.299.699 I llm_load_print_meta: n_layer          = 18
0.00.299.712 I llm_load_print_meta: n_head           = 8
0.00.299.713 I llm_load_print_meta: n_head_kv        = 1
0.00.299.713 I llm_load_print_meta: n_rot            = 256
0.00.299.713 I llm_load_print_meta: n_swa            = 0
0.00.299.714 I llm_load_print_meta: n_embd_head_k    = 256
0.00.299.714 I llm_load_print_meta: n_embd_head_v    = 256
0.00.299.715 I llm_load_print_meta: n_gqa            = 8
0.00.299.716 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.299.717 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.299.718 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.299.719 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.299.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.299.720 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.299.720 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.299.721 I llm_load_print_meta: n_ff             = 16384
0.00.299.721 I llm_load_print_meta: n_expert         = 0
0.00.299.721 I llm_load_print_meta: n_expert_used    = 0
0.00.299.722 I llm_load_print_meta: causal attn      = 1
0.00.299.722 I llm_load_print_meta: pooling type     = 0
0.00.299.723 I llm_load_print_meta: rope type        = 2
0.00.299.723 I llm_load_print_meta: rope scaling     = linear
0.00.299.724 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.299.725 I llm_load_print_meta: freq_scale_train = 1
0.00.299.725 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.299.726 I llm_load_print_meta: rope_finetuned   = unknown
0.00.299.726 I llm_load_print_meta: ssm_d_conv       = 0
0.00.299.726 I llm_load_print_meta: ssm_d_inner      = 0
0.00.299.726 I llm_load_print_meta: ssm_d_state      = 0
0.00.299.726 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.299.727 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.299.727 I llm_load_print_meta: model type       = 2B
0.00.299.728 I llm_load_print_meta: model ftype      = Q8_0
0.00.299.729 I llm_load_print_meta: model params     = 2.51 B
0.00.299.730 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.299.730 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.299.731 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.299.731 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.299.733 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.299.733 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.299.733 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.734 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.734 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.735 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.736 I llm_load_print_meta: max token length = 93
0.00.375.465 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.375.474 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.380.548 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.555 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.556 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.556 I llama_new_context_with_model: n_batch       = 2048
0.00.380.556 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.557 I llama_new_context_with_model: flash_attn    = 0
0.00.380.559 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.560 I llama_new_context_with_model: freq_scale    = 1
0.00.380.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.148 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.241 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.459 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.466 I llama_new_context_with_model: graph nodes  = 601
0.00.397.466 I llama_new_context_with_model: graph splits = 1
0.00.397.468 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.025 I main: llama threadpool init, n_threads = 4
0.00.484.039 I 
0.00.484.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.484.116 I 
0.00.484.161 I sampler seed: 3322625752
0.00.484.172 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.176 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.176 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.176 I 
 increasities. [end of text]


0.00.776.564 I llama_perf_sampler_print:    sampling time =       0.59 ms /     5 runs   (    0.12 ms per token,  8517.89 tokens per second)
0.00.776.567 I llama_perf_context_print:        load time =     482.92 ms
0.00.776.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.776.569 I llama_perf_context_print:        eval time =     289.47 ms /     4 runs   (   72.37 ms per token,    13.82 tokens per second)
0.00.776.570 I llama_perf_context_print:       total time =     292.55 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.759s
user	0m30.657s
sys	0m9.585s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (f1b5c5ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32151.34 ms
main:    total time = 32151.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.021.390 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.402 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.411 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.417 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.417 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.423 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.423 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.424 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.424 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.425 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.430 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.430 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.431 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.432 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.433 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.271 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.140 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.141 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.141 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.143 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.147 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.148 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.148 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.152 I llama_model_loader: - type  f32:   37 tensors
0.00.132.153 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.154 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.786 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.390 I llm_load_vocab: special tokens cache size = 5
0.00.271.235 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.253 I llm_load_print_meta: arch             = gemma
0.00.271.253 I llm_load_print_meta: vocab type       = SPM
0.00.271.254 I llm_load_print_meta: n_vocab          = 256000
0.00.271.254 I llm_load_print_meta: n_merges         = 0
0.00.271.255 I llm_load_print_meta: vocab_only       = 0
0.00.271.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.255 I llm_load_print_meta: n_embd           = 2048
0.00.271.256 I llm_load_print_meta: n_layer          = 18
0.00.271.268 I llm_load_print_meta: n_head           = 8
0.00.271.269 I llm_load_print_meta: n_head_kv        = 1
0.00.271.270 I llm_load_print_meta: n_rot            = 256
0.00.271.271 I llm_load_print_meta: n_swa            = 0
0.00.271.271 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.271 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.273 I llm_load_print_meta: n_gqa            = 8
0.00.271.274 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.277 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.278 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.278 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.280 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.281 I llm_load_print_meta: n_ff             = 16384
0.00.271.282 I llm_load_print_meta: n_expert         = 0
0.00.271.282 I llm_load_print_meta: n_expert_used    = 0
0.00.271.282 I llm_load_print_meta: causal attn      = 1
0.00.271.283 I llm_load_print_meta: pooling type     = 0
0.00.271.283 I llm_load_print_meta: rope type        = 2
0.00.271.284 I llm_load_print_meta: rope scaling     = linear
0.00.271.286 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.286 I llm_load_print_meta: freq_scale_train = 1
0.00.271.287 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.288 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.288 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.288 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.291 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.292 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.292 I llm_load_print_meta: model type       = 2B
0.00.271.293 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.293 I llm_load_print_meta: model params     = 2.51 B
0.00.271.294 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.294 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.295 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.295 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.296 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.296 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.296 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.297 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.297 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.298 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.298 I llm_load_print_meta: max token length = 93
0.00.333.583 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.333.589 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.333.590 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.333.590 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.333.591 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.333.592 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.891 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.896 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.897 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.897 I llama_new_context_with_model: n_batch       = 2048
0.00.338.898 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.898 I llama_new_context_with_model: flash_attn    = 0
0.00.338.901 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.901 I llama_new_context_with_model: freq_scale    = 1
0.00.338.902 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.159 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.511 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.518 I llama_new_context_with_model: graph nodes  = 601
0.00.355.518 I llama_new_context_with_model: graph splits = 1
0.00.355.520 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.160 I main: llama threadpool init, n_threads = 4
0.00.431.173 I 
0.00.431.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.263 I 
0.00.431.315 I sampler seed: 3794120737
0.00.431.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.330 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.330 I 
 increamically.

The question is: Find the equation of the line that passes through the points (2, 3) and (4, 7).

0.02.080.840 I llama_perf_sampler_print:    sampling time =       4.61 ms /    33 runs   (    0.14 ms per token,  7158.35 tokens per second)
0.02.080.842 I llama_perf_context_print:        load time =     430.25 ms
0.02.080.843 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.080.845 I llama_perf_context_print:        eval time =    1631.82 ms /    32 runs   (   50.99 ms per token,    19.61 tokens per second)
0.02.080.846 I llama_perf_context_print:       total time =    1649.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (f1b5c5ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32090.84 ms
main:    total time = 32090.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.541 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.021.289 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.313 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.314 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.318 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.327 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.329 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.079 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.086 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.087 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.087 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.089 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.092 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.092 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.096 I llama_model_loader: - type  f32:   37 tensors
0.00.132.097 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.097 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.019 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.727 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.336 I llm_load_vocab: special tokens cache size = 5
0.00.268.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.271 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.272 I llm_load_print_meta: arch             = gemma
0.00.268.272 I llm_load_print_meta: vocab type       = SPM
0.00.268.273 I llm_load_print_meta: n_vocab          = 256000
0.00.268.274 I llm_load_print_meta: n_merges         = 0
0.00.268.274 I llm_load_print_meta: vocab_only       = 0
0.00.268.275 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.275 I llm_load_print_meta: n_embd           = 2048
0.00.268.275 I llm_load_print_meta: n_layer          = 18
0.00.268.287 I llm_load_print_meta: n_head           = 8
0.00.268.288 I llm_load_print_meta: n_head_kv        = 1
0.00.268.289 I llm_load_print_meta: n_rot            = 256
0.00.268.289 I llm_load_print_meta: n_swa            = 0
0.00.268.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.290 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.291 I llm_load_print_meta: n_gqa            = 8
0.00.268.292 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.295 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.296 I llm_load_print_meta: n_ff             = 16384
0.00.268.297 I llm_load_print_meta: n_expert         = 0
0.00.268.297 I llm_load_print_meta: n_expert_used    = 0
0.00.268.297 I llm_load_print_meta: causal attn      = 1
0.00.268.297 I llm_load_print_meta: pooling type     = 0
0.00.268.298 I llm_load_print_meta: rope type        = 2
0.00.268.298 I llm_load_print_meta: rope scaling     = linear
0.00.268.299 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.300 I llm_load_print_meta: freq_scale_train = 1
0.00.268.300 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.301 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.301 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.302 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.302 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.302 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.304 I llm_load_print_meta: model type       = 2B
0.00.268.304 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.305 I llm_load_print_meta: model params     = 2.51 B
0.00.268.306 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.306 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.306 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.307 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.311 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.311 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.312 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.312 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.312 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.314 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.314 I llm_load_print_meta: max token length = 93
0.00.327.024 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.004 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.010 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.010 I llama_new_context_with_model: n_batch       = 2048
0.00.332.010 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.011 I llama_new_context_with_model: flash_attn    = 0
0.00.332.013 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.014 I llama_new_context_with_model: freq_scale    = 1
0.00.332.015 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.539 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.854 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.859 I llama_new_context_with_model: graph nodes  = 601
0.00.348.860 I llama_new_context_with_model: graph splits = 1
0.00.348.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.103 I main: llama threadpool init, n_threads = 4
0.00.423.116 I 
0.00.423.191 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.194 I 
0.00.423.236 I sampler seed: 3495630066
0.00.423.247 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.250 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.251 I 
 seconded as the third person singular pronoun.

She likes **to read** books.

**Answer:**
She likes to read books. [end of text]


0.01.928.328 I llama_perf_sampler_print:    sampling time =       4.40 ms /    31 runs   (    0.14 ms per token,  7051.87 tokens per second)
0.01.928.332 I llama_perf_context_print:        load time =     422.21 ms
0.01.928.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.928.336 I llama_perf_context_print:        eval time =    1487.49 ms /    30 runs   (   49.58 ms per token,    20.17 tokens per second)
0.01.928.337 I llama_perf_context_print:       total time =    1505.23 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.354s
user	8m14.840s
sys	0m6.945s
