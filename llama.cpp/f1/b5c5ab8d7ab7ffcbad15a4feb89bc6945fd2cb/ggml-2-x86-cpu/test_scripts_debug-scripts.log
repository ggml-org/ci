+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.001.118 I main: load the model and apply lora adapter, if any
0.00.023.831 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.948 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.971 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.976 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.099 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.824 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.834 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.835 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.836 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.837 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.838 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.846 I llama_model_loader: - type  f32:   37 tensors
0.00.264.848 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.337 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.858 I llm_load_vocab: special tokens cache size = 5
0.00.614.435 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.505 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.505 I llm_load_print_meta: arch             = gemma
0.00.614.506 I llm_load_print_meta: vocab type       = SPM
0.00.614.507 I llm_load_print_meta: n_vocab          = 256000
0.00.614.510 I llm_load_print_meta: n_merges         = 0
0.00.614.510 I llm_load_print_meta: vocab_only       = 0
0.00.614.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.511 I llm_load_print_meta: n_embd           = 2048
0.00.614.512 I llm_load_print_meta: n_layer          = 18
0.00.614.576 I llm_load_print_meta: n_head           = 8
0.00.614.583 I llm_load_print_meta: n_head_kv        = 1
0.00.614.583 I llm_load_print_meta: n_rot            = 256
0.00.614.584 I llm_load_print_meta: n_swa            = 0
0.00.614.584 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.589 I llm_load_print_meta: n_gqa            = 8
0.00.614.594 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.600 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.610 I llm_load_print_meta: n_ff             = 16384
0.00.614.611 I llm_load_print_meta: n_expert         = 0
0.00.614.611 I llm_load_print_meta: n_expert_used    = 0
0.00.614.612 I llm_load_print_meta: causal attn      = 1
0.00.614.617 I llm_load_print_meta: pooling type     = 0
0.00.614.618 I llm_load_print_meta: rope type        = 2
0.00.614.618 I llm_load_print_meta: rope scaling     = linear
0.00.614.620 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.621 I llm_load_print_meta: freq_scale_train = 1
0.00.614.621 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.622 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.623 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.623 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.623 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.624 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.627 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.628 I llm_load_print_meta: model type       = 2B
0.00.614.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.629 I llm_load_print_meta: model params     = 2.51 B
0.00.614.639 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.639 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.640 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.641 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.641 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.642 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.643 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.644 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.652 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.653 I llm_load_print_meta: max token length = 93
0.00.718.807 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.718.817 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.718.818 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.718.819 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.718.819 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.718.820 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.724.775 I llama_new_context_with_model: n_seq_max     = 1
0.00.724.781 I llama_new_context_with_model: n_ctx         = 4096
0.00.724.782 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.724.782 I llama_new_context_with_model: n_batch       = 2048
0.00.724.783 I llama_new_context_with_model: n_ubatch      = 512
0.00.724.783 I llama_new_context_with_model: flash_attn    = 0
0.00.724.785 I llama_new_context_with_model: freq_base     = 10000.0
0.00.724.786 I llama_new_context_with_model: freq_scale    = 1
0.00.724.787 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.205 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.241 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.362 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.901 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.905 I llama_new_context_with_model: graph nodes  = 601
0.00.743.906 I llama_new_context_with_model: graph splits = 1
0.00.743.931 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.405 I main: llama threadpool init, n_threads = 4
0.01.348.417 I 
0.01.348.523 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.527 I 
0.01.348.759 I sampler seed: 3119033160
0.01.348.771 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.778 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.782 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.782 I 
 increamentalism.

**A. Introduction**

* Deconstructing the notion of "progress"
* Exploring the limitations of traditional economic models
*

0.14.883.868 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.84 tokens per second)
0.14.883.882 I llama_perf_context_print:        load time =    1347.19 ms
0.14.883.884 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.883.887 I llama_perf_context_print:        eval time =   13445.38 ms /    32 runs   (  420.17 ms per token,     2.38 tokens per second)
0.14.883.888 I llama_perf_context_print:       total time =   13535.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.001.128 I main: load the model and apply lora adapter, if any
0.00.023.514 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.613 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.628 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.630 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.639 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.640 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.641 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.643 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.644 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.654 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.426 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.649 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.657 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.658 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.659 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.660 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.662 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.672 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.675 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.677 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.685 I llama_model_loader: - type  f32:   37 tensors
0.00.264.687 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.024 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.046 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.889 I llm_load_vocab: special tokens cache size = 5
0.00.587.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.380 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.381 I llm_load_print_meta: arch             = gemma
0.00.587.382 I llm_load_print_meta: vocab type       = SPM
0.00.587.383 I llm_load_print_meta: n_vocab          = 256000
0.00.587.385 I llm_load_print_meta: n_merges         = 0
0.00.587.385 I llm_load_print_meta: vocab_only       = 0
0.00.587.386 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.386 I llm_load_print_meta: n_embd           = 2048
0.00.587.387 I llm_load_print_meta: n_layer          = 18
0.00.587.448 I llm_load_print_meta: n_head           = 8
0.00.587.456 I llm_load_print_meta: n_head_kv        = 1
0.00.587.456 I llm_load_print_meta: n_rot            = 256
0.00.587.457 I llm_load_print_meta: n_swa            = 0
0.00.587.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.457 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.462 I llm_load_print_meta: n_gqa            = 8
0.00.587.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.475 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.481 I llm_load_print_meta: n_ff             = 16384
0.00.587.481 I llm_load_print_meta: n_expert         = 0
0.00.587.482 I llm_load_print_meta: n_expert_used    = 0
0.00.587.483 I llm_load_print_meta: causal attn      = 1
0.00.587.484 I llm_load_print_meta: pooling type     = 0
0.00.587.484 I llm_load_print_meta: rope type        = 2
0.00.587.485 I llm_load_print_meta: rope scaling     = linear
0.00.587.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.488 I llm_load_print_meta: freq_scale_train = 1
0.00.587.489 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.490 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.491 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.491 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.491 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.492 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.493 I llm_load_print_meta: model type       = 2B
0.00.587.494 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.500 I llm_load_print_meta: model params     = 2.51 B
0.00.587.511 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.512 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.513 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.514 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.515 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.522 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.524 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.524 I llm_load_print_meta: max token length = 93
0.00.687.214 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.693.197 I llama_new_context_with_model: n_seq_max     = 1
0.00.693.205 I llama_new_context_with_model: n_ctx         = 4096
0.00.693.205 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.693.206 I llama_new_context_with_model: n_batch       = 2048
0.00.693.206 I llama_new_context_with_model: n_ubatch      = 512
0.00.693.207 I llama_new_context_with_model: flash_attn    = 0
0.00.693.210 I llama_new_context_with_model: freq_base     = 10000.0
0.00.693.211 I llama_new_context_with_model: freq_scale    = 1
0.00.693.211 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.711.084 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.711.127 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.711.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.713.822 I llama_new_context_with_model: graph nodes  = 601
0.00.713.822 I llama_new_context_with_model: graph splits = 1
0.00.713.847 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.320.061 I main: llama threadpool init, n_threads = 4
0.01.320.072 I 
0.01.320.174 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.177 I 
0.01.320.401 I sampler seed: 3535241717
0.01.320.412 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.420 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.421 I 
 seconary elements are the elements that are not directly involved in the chemical reaction but still influence the reaction's direction and outcome.

**True or False?

0.14.863.798 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.99 tokens per second)
0.14.863.802 I llama_perf_context_print:        load time =    1318.84 ms
0.14.863.803 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.863.805 I llama_perf_context_print:        eval time =   13454.03 ms /    32 runs   (  420.44 ms per token,     2.38 tokens per second)
0.14.863.807 I llama_perf_context_print:       total time =   13543.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.001.125 I main: load the model and apply lora adapter, if any
0.00.023.374 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.384 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.506 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.928 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.099 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.103 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.108 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.109 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.110 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.264.111 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.118 I llama_model_loader: - type  f32:   37 tensors
0.00.264.120 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.994 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.907 I llm_load_vocab: special tokens cache size = 5
0.00.597.422 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.490 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.494 I llm_load_print_meta: arch             = gemma
0.00.597.495 I llm_load_print_meta: vocab type       = SPM
0.00.597.495 I llm_load_print_meta: n_vocab          = 256000
0.00.597.498 I llm_load_print_meta: n_merges         = 0
0.00.597.498 I llm_load_print_meta: vocab_only       = 0
0.00.597.499 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.499 I llm_load_print_meta: n_embd           = 2048
0.00.597.500 I llm_load_print_meta: n_layer          = 18
0.00.597.562 I llm_load_print_meta: n_head           = 8
0.00.597.572 I llm_load_print_meta: n_head_kv        = 1
0.00.597.573 I llm_load_print_meta: n_rot            = 256
0.00.597.574 I llm_load_print_meta: n_swa            = 0
0.00.597.574 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.574 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.579 I llm_load_print_meta: n_gqa            = 8
0.00.597.583 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.588 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.594 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.600 I llm_load_print_meta: n_ff             = 16384
0.00.597.600 I llm_load_print_meta: n_expert         = 0
0.00.597.601 I llm_load_print_meta: n_expert_used    = 0
0.00.597.601 I llm_load_print_meta: causal attn      = 1
0.00.597.601 I llm_load_print_meta: pooling type     = 0
0.00.597.602 I llm_load_print_meta: rope type        = 2
0.00.597.602 I llm_load_print_meta: rope scaling     = linear
0.00.597.603 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.604 I llm_load_print_meta: freq_scale_train = 1
0.00.597.604 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.605 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.605 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.606 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.607 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.607 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.607 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.609 I llm_load_print_meta: model type       = 2B
0.00.597.610 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.611 I llm_load_print_meta: model params     = 2.51 B
0.00.597.621 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.621 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.622 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.622 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.624 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.630 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.631 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.632 I llm_load_print_meta: max token length = 93
0.00.696.938 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.696.946 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.696.947 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.696.949 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.696.949 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.696.950 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.702.930 I llama_new_context_with_model: n_seq_max     = 1
0.00.702.938 I llama_new_context_with_model: n_ctx         = 4096
0.00.702.938 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.702.938 I llama_new_context_with_model: n_batch       = 2048
0.00.702.939 I llama_new_context_with_model: n_ubatch      = 512
0.00.702.939 I llama_new_context_with_model: flash_attn    = 0
0.00.702.942 I llama_new_context_with_model: freq_base     = 10000.0
0.00.702.943 I llama_new_context_with_model: freq_scale    = 1
0.00.702.944 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.203 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.240 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.365 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.945 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.949 I llama_new_context_with_model: graph nodes  = 601
0.00.722.950 I llama_new_context_with_model: graph splits = 1
0.00.722.975 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.531 I main: llama threadpool init, n_threads = 4
0.01.353.544 I 
0.01.353.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.653 I 
0.01.353.882 I sampler seed: 2463955075
0.01.353.894 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.901 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.904 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.904 I 
 maneuvously,
For I am a storyteller, weaving tales of magic and mystery.

What am I?

**Answer:** A writer.

A

0.14.871.827 I llama_perf_sampler_print:    sampling time =      49.00 ms /    33 runs   (    1.48 ms per token,   673.52 tokens per second)
0.14.871.830 I llama_perf_context_print:        load time =    1352.31 ms
0.14.871.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.871.833 I llama_perf_context_print:        eval time =   13428.63 ms /    32 runs   (  419.64 ms per token,     2.38 tokens per second)
0.14.871.834 I llama_perf_context_print:       total time =   13518.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.001.127 I main: load the model and apply lora adapter, if any
0.00.023.793 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.808 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.923 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.925 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.943 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.944 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.625 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.553 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.569 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.577 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.578 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.587 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.589 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.597 I llama_model_loader: - type  f32:   37 tensors
0.00.265.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.043 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.866 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.731 I llm_load_vocab: special tokens cache size = 5
0.00.613.700 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.770 I llm_load_print_meta: arch             = gemma
0.00.613.771 I llm_load_print_meta: vocab type       = SPM
0.00.613.771 I llm_load_print_meta: n_vocab          = 256000
0.00.613.774 I llm_load_print_meta: n_merges         = 0
0.00.613.774 I llm_load_print_meta: vocab_only       = 0
0.00.613.775 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.775 I llm_load_print_meta: n_embd           = 2048
0.00.613.775 I llm_load_print_meta: n_layer          = 18
0.00.613.840 I llm_load_print_meta: n_head           = 8
0.00.613.846 I llm_load_print_meta: n_head_kv        = 1
0.00.613.847 I llm_load_print_meta: n_rot            = 256
0.00.613.847 I llm_load_print_meta: n_swa            = 0
0.00.613.848 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.849 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.853 I llm_load_print_meta: n_gqa            = 8
0.00.613.858 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.863 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.869 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.870 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.875 I llm_load_print_meta: n_ff             = 16384
0.00.613.876 I llm_load_print_meta: n_expert         = 0
0.00.613.876 I llm_load_print_meta: n_expert_used    = 0
0.00.613.877 I llm_load_print_meta: causal attn      = 1
0.00.613.877 I llm_load_print_meta: pooling type     = 0
0.00.613.878 I llm_load_print_meta: rope type        = 2
0.00.613.878 I llm_load_print_meta: rope scaling     = linear
0.00.613.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.880 I llm_load_print_meta: freq_scale_train = 1
0.00.613.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.890 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.901 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.909 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.911 I llm_load_print_meta: model type       = 2B
0.00.613.912 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.912 I llm_load_print_meta: model params     = 2.51 B
0.00.613.921 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.922 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.922 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.923 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.924 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.931 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.933 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.933 I llm_load_print_meta: max token length = 93
0.00.687.061 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.687.071 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.692.979 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.986 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.987 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.987 I llama_new_context_with_model: n_batch       = 2048
0.00.692.987 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.988 I llama_new_context_with_model: flash_attn    = 0
0.00.692.990 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.991 I llama_new_context_with_model: freq_scale    = 1
0.00.692.991 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.471 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.508 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.632 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.126 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.130 I llama_new_context_with_model: graph nodes  = 601
0.00.712.130 I llama_new_context_with_model: graph splits = 1
0.00.712.155 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.812 I main: llama threadpool init, n_threads = 4
0.01.323.825 I 
0.01.323.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.935 I 
0.01.324.166 I sampler seed: 1839268255
0.01.324.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.184 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.187 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.188 I 
 increasities:

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information. [end of text]


0.14.444.293 I llama_perf_sampler_print:    sampling time =      47.64 ms /    32 runs   (    1.49 ms per token,   671.73 tokens per second)
0.14.444.310 I llama_perf_context_print:        load time =    1322.59 ms
0.14.444.311 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.444.313 I llama_perf_context_print:        eval time =   13032.53 ms /    31 runs   (  420.40 ms per token,     2.38 tokens per second)
0.14.444.313 I llama_perf_context_print:       total time =   13120.49 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.170s
user	3m47.638s
sys	0m9.441s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (f1b5c5ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198883.96 ms
main:    total time = 198883.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.001.106 I main: load the model and apply lora adapter, if any
0.00.023.678 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.691 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.787 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.806 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.811 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.812 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.813 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.814 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.815 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.822 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.823 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.825 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.826 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.827 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.756 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.393 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.627 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.628 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.629 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.644 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.650 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.652 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.653 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.654 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.656 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.664 I llama_model_loader: - type  f32:   37 tensors
0.00.264.666 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.671 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.211 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.598 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.703 I llm_load_vocab: special tokens cache size = 5
0.00.619.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.382 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.383 I llm_load_print_meta: arch             = gemma
0.00.619.384 I llm_load_print_meta: vocab type       = SPM
0.00.619.385 I llm_load_print_meta: n_vocab          = 256000
0.00.619.387 I llm_load_print_meta: n_merges         = 0
0.00.619.388 I llm_load_print_meta: vocab_only       = 0
0.00.619.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.388 I llm_load_print_meta: n_embd           = 2048
0.00.619.389 I llm_load_print_meta: n_layer          = 18
0.00.619.454 I llm_load_print_meta: n_head           = 8
0.00.619.461 I llm_load_print_meta: n_head_kv        = 1
0.00.619.462 I llm_load_print_meta: n_rot            = 256
0.00.619.462 I llm_load_print_meta: n_swa            = 0
0.00.619.462 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.468 I llm_load_print_meta: n_gqa            = 8
0.00.619.472 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.477 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.479 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.480 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.481 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.481 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.482 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.487 I llm_load_print_meta: n_ff             = 16384
0.00.619.487 I llm_load_print_meta: n_expert         = 0
0.00.619.488 I llm_load_print_meta: n_expert_used    = 0
0.00.619.488 I llm_load_print_meta: causal attn      = 1
0.00.619.489 I llm_load_print_meta: pooling type     = 0
0.00.619.489 I llm_load_print_meta: rope type        = 2
0.00.619.490 I llm_load_print_meta: rope scaling     = linear
0.00.619.491 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.492 I llm_load_print_meta: freq_scale_train = 1
0.00.619.493 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.494 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.494 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.494 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.495 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.496 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.497 I llm_load_print_meta: model type       = 2B
0.00.619.498 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.498 I llm_load_print_meta: model params     = 2.51 B
0.00.619.508 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.522 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.532 I llm_load_print_meta: max token length = 93
0.00.683.504 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.683.513 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.683.514 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.683.514 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.683.515 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.683.516 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.689.276 I llama_new_context_with_model: n_seq_max     = 1
0.00.689.285 I llama_new_context_with_model: n_ctx         = 4096
0.00.689.285 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.689.285 I llama_new_context_with_model: n_batch       = 2048
0.00.689.286 I llama_new_context_with_model: n_ubatch      = 512
0.00.689.286 I llama_new_context_with_model: flash_attn    = 0
0.00.689.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.689.290 I llama_new_context_with_model: freq_scale    = 1
0.00.689.291 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.705.658 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.705.694 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.705.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.368 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.373 I llama_new_context_with_model: graph nodes  = 601
0.00.708.373 I llama_new_context_with_model: graph splits = 1
0.00.708.397 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.334 I main: llama threadpool init, n_threads = 4
0.01.280.348 I 
0.01.280.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.458 I 
0.01.280.686 I sampler seed: 1556103151
0.01.280.698 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.704 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.280.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.708 I 
 encompasing a wide range of tasks, from creative and strategic initiatives to operational efficiency and risk management.

**Our Approach:**

* **Tailored assessments:**

0.12.144.730 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.83 tokens per second)
0.12.144.733 I llama_perf_context_print:        load time =    1279.13 ms
0.12.144.758 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.144.761 I llama_perf_context_print:        eval time =   10774.42 ms /    32 runs   (  336.70 ms per token,     2.97 tokens per second)
0.12.144.762 I llama_perf_context_print:       total time =   10864.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (f1b5c5ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198996.71 ms
main:    total time = 198996.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4017 (f1b5c5ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.001.130 I main: load the model and apply lora adapter, if any
0.00.023.330 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.423 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.436 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.438 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.442 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.468 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.484 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.485 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.486 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.487 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.488 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.897 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.106 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.355 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.365 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.367 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.368 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.373 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.381 I llama_model_loader: - type  f32:   37 tensors
0.00.263.384 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.384 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.948 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.961 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.888 I llm_load_vocab: special tokens cache size = 5
0.00.620.823 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.894 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.895 I llm_load_print_meta: arch             = gemma
0.00.620.896 I llm_load_print_meta: vocab type       = SPM
0.00.620.897 I llm_load_print_meta: n_vocab          = 256000
0.00.620.899 I llm_load_print_meta: n_merges         = 0
0.00.620.900 I llm_load_print_meta: vocab_only       = 0
0.00.620.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.901 I llm_load_print_meta: n_embd           = 2048
0.00.620.901 I llm_load_print_meta: n_layer          = 18
0.00.620.968 I llm_load_print_meta: n_head           = 8
0.00.620.975 I llm_load_print_meta: n_head_kv        = 1
0.00.620.976 I llm_load_print_meta: n_rot            = 256
0.00.620.977 I llm_load_print_meta: n_swa            = 0
0.00.620.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.982 I llm_load_print_meta: n_gqa            = 8
0.00.620.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.996 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.997 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.998 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.999 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.004 I llm_load_print_meta: n_ff             = 16384
0.00.621.005 I llm_load_print_meta: n_expert         = 0
0.00.621.005 I llm_load_print_meta: n_expert_used    = 0
0.00.621.005 I llm_load_print_meta: causal attn      = 1
0.00.621.005 I llm_load_print_meta: pooling type     = 0
0.00.621.006 I llm_load_print_meta: rope type        = 2
0.00.621.011 I llm_load_print_meta: rope scaling     = linear
0.00.621.012 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.013 I llm_load_print_meta: freq_scale_train = 1
0.00.621.013 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.014 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.014 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.014 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.015 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.016 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.016 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.017 I llm_load_print_meta: model type       = 2B
0.00.621.018 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.621.019 I llm_load_print_meta: model params     = 2.51 B
0.00.621.028 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.621.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.044 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.054 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.055 I llm_load_print_meta: max token length = 93
0.00.681.733 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.687.358 I llama_new_context_with_model: n_seq_max     = 1
0.00.687.365 I llama_new_context_with_model: n_ctx         = 4096
0.00.687.366 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.687.366 I llama_new_context_with_model: n_batch       = 2048
0.00.687.367 I llama_new_context_with_model: n_ubatch      = 512
0.00.687.367 I llama_new_context_with_model: flash_attn    = 0
0.00.687.370 I llama_new_context_with_model: freq_base     = 10000.0
0.00.687.370 I llama_new_context_with_model: freq_scale    = 1
0.00.687.371 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.809 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.850 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.531 I llama_new_context_with_model: graph nodes  = 601
0.00.706.531 I llama_new_context_with_model: graph splits = 1
0.00.706.555 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.377 I main: llama threadpool init, n_threads = 4
0.01.277.389 I 
0.01.277.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.497 I 
0.01.277.728 I sampler seed: 412611835
0.01.277.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.748 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.277.751 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.751 I 
 seconally.

The question asks for a synonym for "secondely".

The answer is "subsequently".

Subsequently means happening after something else

0.12.131.293 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.89 tokens per second)
0.12.131.297 I llama_perf_context_print:        load time =    1276.15 ms
0.12.131.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.131.301 I llama_perf_context_print:        eval time =   10762.34 ms /    32 runs   (  336.32 ms per token,     2.97 tokens per second)
0.12.131.302 I llama_perf_context_print:       total time =   10853.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.104s
user	50m6.519s
sys	0m6.402s
