+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.647 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.652 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.858 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.950 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.968 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.972 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.973 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.974 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.983 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.991 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.746 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.088 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.089 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.090 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.092 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.093 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.097 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.098 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.100 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.101 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.109 I llama_model_loader: - type  f32:   37 tensors
0.00.269.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.382 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.452.135 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.453.216 I llm_load_vocab: special tokens cache size = 5
0.00.557.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.558.013 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.558.017 I llm_load_print_meta: arch             = gemma
0.00.558.018 I llm_load_print_meta: vocab type       = SPM
0.00.558.019 I llm_load_print_meta: n_vocab          = 256000
0.00.558.021 I llm_load_print_meta: n_merges         = 0
0.00.558.022 I llm_load_print_meta: vocab_only       = 0
0.00.558.022 I llm_load_print_meta: n_ctx_train      = 8192
0.00.558.022 I llm_load_print_meta: n_embd           = 2048
0.00.558.023 I llm_load_print_meta: n_layer          = 18
0.00.558.087 I llm_load_print_meta: n_head           = 8
0.00.558.097 I llm_load_print_meta: n_head_kv        = 1
0.00.558.098 I llm_load_print_meta: n_rot            = 256
0.00.558.098 I llm_load_print_meta: n_swa            = 0
0.00.558.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.558.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.558.103 I llm_load_print_meta: n_gqa            = 8
0.00.558.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.558.112 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.558.113 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.558.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.558.115 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.558.116 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.558.116 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.558.121 I llm_load_print_meta: n_ff             = 16384
0.00.558.121 I llm_load_print_meta: n_expert         = 0
0.00.558.122 I llm_load_print_meta: n_expert_used    = 0
0.00.558.122 I llm_load_print_meta: causal attn      = 1
0.00.558.122 I llm_load_print_meta: pooling type     = 0
0.00.558.123 I llm_load_print_meta: rope type        = 2
0.00.558.132 I llm_load_print_meta: rope scaling     = linear
0.00.558.135 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.558.135 I llm_load_print_meta: freq_scale_train = 1
0.00.558.136 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.558.136 I llm_load_print_meta: rope_finetuned   = unknown
0.00.558.137 I llm_load_print_meta: ssm_d_conv       = 0
0.00.558.137 I llm_load_print_meta: ssm_d_inner      = 0
0.00.558.137 I llm_load_print_meta: ssm_d_state      = 0
0.00.558.138 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.558.138 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.558.139 I llm_load_print_meta: model type       = 2B
0.00.558.148 I llm_load_print_meta: model ftype      = Q8_0
0.00.558.161 I llm_load_print_meta: model params     = 2.51 B
0.00.558.162 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.558.162 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.558.163 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.558.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.558.164 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.558.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.558.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.558.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.558.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.558.188 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.558.189 I llm_load_print_meta: max token length = 93
0.00.558.354 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.747 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.656.757 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.656.758 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.656.758 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.656.759 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.656.760 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.662.375 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.382 I llama_new_context_with_model: n_batch    = 2048
0.00.662.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.383 I llama_new_context_with_model: flash_attn = 0
0.00.662.386 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.387 I llama_new_context_with_model: freq_scale = 1
0.00.692.149 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.196 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.310 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.693.747 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.753 I llama_new_context_with_model: graph nodes  = 601
0.00.693.754 I llama_new_context_with_model: graph splits = 1
0.00.693.769 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.131 I main: llama threadpool init, n_threads = 4
0.01.311.142 I 
0.01.311.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.251 I 
0.01.311.412 I sampler seed: 3990397741
0.01.311.423 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.429 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.311.430 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.430 I 
 increasively.

I'm so glad I took the leap of faith and joined this company! It's been an incredible experience so far.

I

0.14.869.116 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.25 tokens per second)
0.14.869.133 I llama_perf_context_print:        load time =    1308.17 ms
0.14.869.135 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.869.136 I llama_perf_context_print:        eval time =   13474.40 ms /    32 runs   (  421.08 ms per token,     2.37 tokens per second)
0.14.869.137 I llama_perf_context_print:       total time =   13558.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.636 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.850 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.043 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.055 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.056 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.064 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.069 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.078 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.083 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.896 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.285.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.285.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.285.221 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.285.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.285.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.285.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.285.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.285.230 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.285.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.285.232 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.285.234 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.285.235 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.243 I llama_model_loader: - type  f32:   37 tensors
0.00.285.248 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.341 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.482.993 I llm_load_vocab: special tokens cache size = 5
0.00.593.377 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.443 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.445 I llm_load_print_meta: arch             = gemma
0.00.593.445 I llm_load_print_meta: vocab type       = SPM
0.00.593.446 I llm_load_print_meta: n_vocab          = 256000
0.00.593.448 I llm_load_print_meta: n_merges         = 0
0.00.593.449 I llm_load_print_meta: vocab_only       = 0
0.00.593.449 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.450 I llm_load_print_meta: n_embd           = 2048
0.00.593.450 I llm_load_print_meta: n_layer          = 18
0.00.593.516 I llm_load_print_meta: n_head           = 8
0.00.593.523 I llm_load_print_meta: n_head_kv        = 1
0.00.593.523 I llm_load_print_meta: n_rot            = 256
0.00.593.524 I llm_load_print_meta: n_swa            = 0
0.00.593.524 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.524 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.529 I llm_load_print_meta: n_gqa            = 8
0.00.593.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.542 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.544 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.546 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.546 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.548 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.548 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.555 I llm_load_print_meta: n_ff             = 16384
0.00.593.556 I llm_load_print_meta: n_expert         = 0
0.00.593.557 I llm_load_print_meta: n_expert_used    = 0
0.00.593.558 I llm_load_print_meta: causal attn      = 1
0.00.593.558 I llm_load_print_meta: pooling type     = 0
0.00.593.560 I llm_load_print_meta: rope type        = 2
0.00.593.561 I llm_load_print_meta: rope scaling     = linear
0.00.593.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.564 I llm_load_print_meta: freq_scale_train = 1
0.00.593.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.583 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.585 I llm_load_print_meta: model type       = 2B
0.00.593.595 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.597 I llm_load_print_meta: model params     = 2.51 B
0.00.593.607 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.609 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.615 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.615 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.619 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.627 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.629 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.630 I llm_load_print_meta: max token length = 93
0.00.593.806 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.992 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.694.843 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.849 I llama_new_context_with_model: n_batch    = 2048
0.00.694.850 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.850 I llama_new_context_with_model: flash_attn = 0
0.00.694.852 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.853 I llama_new_context_with_model: freq_scale = 1
0.00.724.812 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.857 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.726.373 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.380 I llama_new_context_with_model: graph nodes  = 601
0.00.726.381 I llama_new_context_with_model: graph splits = 1
0.00.726.398 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.053 I main: llama threadpool init, n_threads = 4
0.01.338.064 I 
0.01.338.184 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.188 I 
0.01.338.380 I sampler seed: 777253279
0.01.338.390 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.397 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.338.398 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.399 I 
 seconary effects.

**Explanation:**

Secondary effects are unintended consequences that arise from the implementation of an intervention. They can be positive or negative, and they

0.14.854.808 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.61 tokens per second)
0.14.854.812 I llama_perf_context_print:        load time =    1335.00 ms
0.14.854.813 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.854.826 I llama_perf_context_print:        eval time =   13434.11 ms /    32 runs   (  419.82 ms per token,     2.38 tokens per second)
0.14.854.828 I llama_perf_context_print:       total time =   13516.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.654 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.748 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.958 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.060 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.061 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.067 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.068 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.082 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.084 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.085 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.086 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.093 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.105 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.436 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.980 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.990 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.991 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.992 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.998 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.000 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.001 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.003 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.013 I llama_model_loader: - type  f32:   37 tensors
0.00.269.018 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.577 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.441.493 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.442.510 I llm_load_vocab: special tokens cache size = 5
0.00.545.229 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.545.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.545.289 I llm_load_print_meta: arch             = gemma
0.00.545.290 I llm_load_print_meta: vocab type       = SPM
0.00.545.292 I llm_load_print_meta: n_vocab          = 256000
0.00.545.294 I llm_load_print_meta: n_merges         = 0
0.00.545.294 I llm_load_print_meta: vocab_only       = 0
0.00.545.295 I llm_load_print_meta: n_ctx_train      = 8192
0.00.545.295 I llm_load_print_meta: n_embd           = 2048
0.00.545.296 I llm_load_print_meta: n_layer          = 18
0.00.545.358 I llm_load_print_meta: n_head           = 8
0.00.545.365 I llm_load_print_meta: n_head_kv        = 1
0.00.545.366 I llm_load_print_meta: n_rot            = 256
0.00.545.367 I llm_load_print_meta: n_swa            = 0
0.00.545.367 I llm_load_print_meta: n_embd_head_k    = 256
0.00.545.367 I llm_load_print_meta: n_embd_head_v    = 256
0.00.545.372 I llm_load_print_meta: n_gqa            = 8
0.00.545.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.545.381 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.545.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.545.383 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.545.384 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.545.385 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.545.385 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.545.390 I llm_load_print_meta: n_ff             = 16384
0.00.545.391 I llm_load_print_meta: n_expert         = 0
0.00.545.391 I llm_load_print_meta: n_expert_used    = 0
0.00.545.392 I llm_load_print_meta: causal attn      = 1
0.00.545.393 I llm_load_print_meta: pooling type     = 0
0.00.545.393 I llm_load_print_meta: rope type        = 2
0.00.545.394 I llm_load_print_meta: rope scaling     = linear
0.00.545.395 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.545.395 I llm_load_print_meta: freq_scale_train = 1
0.00.545.406 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.545.407 I llm_load_print_meta: rope_finetuned   = unknown
0.00.545.419 I llm_load_print_meta: ssm_d_conv       = 0
0.00.545.420 I llm_load_print_meta: ssm_d_inner      = 0
0.00.545.428 I llm_load_print_meta: ssm_d_state      = 0
0.00.545.429 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.545.429 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.545.430 I llm_load_print_meta: model type       = 2B
0.00.545.439 I llm_load_print_meta: model ftype      = Q8_0
0.00.545.440 I llm_load_print_meta: model params     = 2.51 B
0.00.545.441 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.545.442 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.545.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.545.443 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.545.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.545.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.545.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.545.447 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.545.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.545.455 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.545.456 I llm_load_print_meta: max token length = 93
0.00.545.620 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.088 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.622.099 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.622.100 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.622.101 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.622.102 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.622.102 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.627.755 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.763 I llama_new_context_with_model: n_batch    = 2048
0.00.627.763 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.764 I llama_new_context_with_model: flash_attn = 0
0.00.627.767 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.768 I llama_new_context_with_model: freq_scale = 1
0.00.656.938 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.979 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.657.088 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.658.447 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.658.453 I llama_new_context_with_model: graph nodes  = 601
0.00.658.454 I llama_new_context_with_model: graph splits = 1
0.00.658.471 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.700 I main: llama threadpool init, n_threads = 4
0.01.271.712 I 
0.01.271.819 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.822 I 
0.01.271.985 I sampler seed: 2750574376
0.01.271.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.003 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.004 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.004 I 
 increasities and anxieties, anxieties that stem from a perceived lack of control over one's life. [end of text]


0.10.186.412 I llama_perf_sampler_print:    sampling time =      32.31 ms /    22 runs   (    1.47 ms per token,   680.80 tokens per second)
0.10.186.416 I llama_perf_context_print:        load time =    1268.70 ms
0.10.186.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.186.429 I llama_perf_context_print:        eval time =    8860.04 ms /    21 runs   (  421.91 ms per token,     2.37 tokens per second)
0.10.186.430 I llama_perf_context_print:       total time =    8914.72 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.641 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.623 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.930 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.941 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.942 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.946 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.947 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.949 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.951 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.960 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.962 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.970 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.971 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.972 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.973 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.233 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.409 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.751 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.760 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.761 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.762 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.286.795 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.286.796 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.286.805 I llama_model_loader: - type  f32:   37 tensors
0.00.286.809 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.565 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.979 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.475.011 I llm_load_vocab: special tokens cache size = 5
0.00.586.827 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.896 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.897 I llm_load_print_meta: arch             = gemma
0.00.586.898 I llm_load_print_meta: vocab type       = SPM
0.00.586.899 I llm_load_print_meta: n_vocab          = 256000
0.00.586.901 I llm_load_print_meta: n_merges         = 0
0.00.586.902 I llm_load_print_meta: vocab_only       = 0
0.00.586.902 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.903 I llm_load_print_meta: n_embd           = 2048
0.00.586.903 I llm_load_print_meta: n_layer          = 18
0.00.586.967 I llm_load_print_meta: n_head           = 8
0.00.586.974 I llm_load_print_meta: n_head_kv        = 1
0.00.586.974 I llm_load_print_meta: n_rot            = 256
0.00.586.975 I llm_load_print_meta: n_swa            = 0
0.00.586.975 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.976 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.980 I llm_load_print_meta: n_gqa            = 8
0.00.586.984 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.989 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.991 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.992 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.998 I llm_load_print_meta: n_ff             = 16384
0.00.586.998 I llm_load_print_meta: n_expert         = 0
0.00.586.999 I llm_load_print_meta: n_expert_used    = 0
0.00.586.999 I llm_load_print_meta: causal attn      = 1
0.00.586.999 I llm_load_print_meta: pooling type     = 0
0.00.587.001 I llm_load_print_meta: rope type        = 2
0.00.587.021 I llm_load_print_meta: rope scaling     = linear
0.00.587.022 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.023 I llm_load_print_meta: freq_scale_train = 1
0.00.587.023 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.025 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.025 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.026 I llm_load_print_meta: model type       = 2B
0.00.587.037 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.037 I llm_load_print_meta: model params     = 2.51 B
0.00.587.038 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.055 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.063 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.067 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.077 I llm_load_print_meta: max token length = 93
0.00.587.246 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.051 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.659.060 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.664.690 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.699 I llama_new_context_with_model: n_batch    = 2048
0.00.664.699 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.700 I llama_new_context_with_model: flash_attn = 0
0.00.664.702 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.703 I llama_new_context_with_model: freq_scale = 1
0.00.693.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.799 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.909 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.695.297 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.303 I llama_new_context_with_model: graph nodes  = 601
0.00.695.304 I llama_new_context_with_model: graph splits = 1
0.00.695.320 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.849 I main: llama threadpool init, n_threads = 4
0.01.306.861 I 
0.01.306.978 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.982 I 
0.01.307.149 I sampler seed: 3105517099
0.01.307.160 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.166 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.307.167 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.167 I 
 increasements. [end of text]


0.03.008.202 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.45 tokens per second)
0.03.008.205 I llama_perf_context_print:        load time =    1303.86 ms
0.03.008.207 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.008.209 I llama_perf_context_print:        eval time =    1689.50 ms /     4 runs   (  422.38 ms per token,     2.37 tokens per second)
0.03.008.210 I llama_perf_context_print:       total time =    1701.36 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.524s
user	2m43.311s
sys	0m9.455s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3895 (f1af42fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200390.89 ms
main:    total time = 200390.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.653 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.172 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.460 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.471 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.472 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.501 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.136 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.117 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.506 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.507 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.508 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.509 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.512 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.516 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.532 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.534 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.543 I llama_model_loader: - type  f32:   37 tensors
0.00.268.547 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.548 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.725 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.191 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.464.191 I llm_load_vocab: special tokens cache size = 5
0.00.561.774 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.839 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.841 I llm_load_print_meta: arch             = gemma
0.00.561.841 I llm_load_print_meta: vocab type       = SPM
0.00.561.842 I llm_load_print_meta: n_vocab          = 256000
0.00.561.845 I llm_load_print_meta: n_merges         = 0
0.00.561.845 I llm_load_print_meta: vocab_only       = 0
0.00.561.845 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.846 I llm_load_print_meta: n_embd           = 2048
0.00.561.846 I llm_load_print_meta: n_layer          = 18
0.00.561.909 I llm_load_print_meta: n_head           = 8
0.00.561.916 I llm_load_print_meta: n_head_kv        = 1
0.00.561.917 I llm_load_print_meta: n_rot            = 256
0.00.561.917 I llm_load_print_meta: n_swa            = 0
0.00.561.917 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.918 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.922 I llm_load_print_meta: n_gqa            = 8
0.00.561.927 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.932 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.936 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.937 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.937 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.943 I llm_load_print_meta: n_ff             = 16384
0.00.561.944 I llm_load_print_meta: n_expert         = 0
0.00.561.944 I llm_load_print_meta: n_expert_used    = 0
0.00.561.944 I llm_load_print_meta: causal attn      = 1
0.00.561.946 I llm_load_print_meta: pooling type     = 0
0.00.561.946 I llm_load_print_meta: rope type        = 2
0.00.561.946 I llm_load_print_meta: rope scaling     = linear
0.00.561.948 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.949 I llm_load_print_meta: freq_scale_train = 1
0.00.561.949 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.949 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.955 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.955 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.955 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.956 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.956 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.957 I llm_load_print_meta: model type       = 2B
0.00.561.980 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.561.981 I llm_load_print_meta: model params     = 2.51 B
0.00.561.982 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.561.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.984 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.988 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.989 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.996 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.998 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.998 I llm_load_print_meta: max token length = 93
0.00.562.174 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.621.568 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.621.580 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.621.581 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.621.582 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.621.582 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.621.583 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.627.352 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.361 I llama_new_context_with_model: n_batch    = 2048
0.00.627.362 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.363 I llama_new_context_with_model: flash_attn = 0
0.00.627.366 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.367 I llama_new_context_with_model: freq_scale = 1
0.00.657.963 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.007 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.118 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.543 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.550 I llama_new_context_with_model: graph nodes  = 601
0.00.659.551 I llama_new_context_with_model: graph splits = 1
0.00.659.567 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.237.460 I main: llama threadpool init, n_threads = 4
0.01.237.472 I 
0.01.237.577 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.237.581 I 
0.01.237.743 I sampler seed: 2895758122
0.01.237.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.237.763 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.237.763 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.237.763 I 
 seconded with a strong sense of justice, believing that the current state of affairs was unjust and needed to be corrected.

**Answer the following questions based on

0.12.210.378 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.72 tokens per second)
0.12.210.382 I llama_perf_context_print:        load time =    1234.47 ms
0.12.210.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.210.403 I llama_perf_context_print:        eval time =   10890.97 ms /    32 runs   (  340.34 ms per token,     2.94 tokens per second)
0.12.210.405 I llama_perf_context_print:       total time =   10972.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3895 (f1af42fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199496.78 ms
main:    total time = 199496.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.693 I build: 3895 (f1af42fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.002.893 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.193 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.308 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.326 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.330 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.352 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.353 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.354 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.365 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.366 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.901 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.162 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.163 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.164 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.165 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.172 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.182 I llama_model_loader: - type  f32:   37 tensors
0.00.273.187 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.188 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.672 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.404 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.465 I llm_load_vocab: special tokens cache size = 5
0.00.594.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.825 I llm_load_print_meta: arch             = gemma
0.00.594.826 I llm_load_print_meta: vocab type       = SPM
0.00.594.827 I llm_load_print_meta: n_vocab          = 256000
0.00.594.829 I llm_load_print_meta: n_merges         = 0
0.00.594.830 I llm_load_print_meta: vocab_only       = 0
0.00.594.830 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.831 I llm_load_print_meta: n_embd           = 2048
0.00.594.831 I llm_load_print_meta: n_layer          = 18
0.00.594.895 I llm_load_print_meta: n_head           = 8
0.00.594.902 I llm_load_print_meta: n_head_kv        = 1
0.00.594.902 I llm_load_print_meta: n_rot            = 256
0.00.594.902 I llm_load_print_meta: n_swa            = 0
0.00.594.903 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.903 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.908 I llm_load_print_meta: n_gqa            = 8
0.00.594.912 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.917 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.920 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.920 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.921 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.921 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.926 I llm_load_print_meta: n_ff             = 16384
0.00.594.926 I llm_load_print_meta: n_expert         = 0
0.00.594.927 I llm_load_print_meta: n_expert_used    = 0
0.00.594.927 I llm_load_print_meta: causal attn      = 1
0.00.594.927 I llm_load_print_meta: pooling type     = 0
0.00.594.928 I llm_load_print_meta: rope type        = 2
0.00.594.928 I llm_load_print_meta: rope scaling     = linear
0.00.594.930 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.930 I llm_load_print_meta: freq_scale_train = 1
0.00.594.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.931 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.931 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.932 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.932 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.933 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.933 I llm_load_print_meta: model type       = 2B
0.00.594.943 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.944 I llm_load_print_meta: model params     = 2.51 B
0.00.594.945 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.947 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.947 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.948 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.955 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.956 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.957 I llm_load_print_meta: max token length = 93
0.00.595.140 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.509 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.658.161 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.167 I llama_new_context_with_model: n_batch    = 2048
0.00.658.167 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.168 I llama_new_context_with_model: flash_attn = 0
0.00.658.170 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.171 I llama_new_context_with_model: freq_scale = 1
0.00.687.631 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.678 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.808 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.200 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.206 I llama_new_context_with_model: graph nodes  = 601
0.00.689.207 I llama_new_context_with_model: graph splits = 1
0.00.689.225 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.268.318 I main: llama threadpool init, n_threads = 4
0.01.268.331 I 
0.01.268.449 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.453 I 
0.01.268.628 I sampler seed: 3710562127
0.01.268.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.645 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.268.648 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.649 I 
 squared wires with an insulating coating and a central heating element.

This device appears to function as a space heater, providing warmth in enclosed spaces.

**

0.12.206.646 I llama_perf_sampler_print:    sampling time =      49.42 ms /    33 runs   (    1.50 ms per token,   667.73 tokens per second)
0.12.206.649 I llama_perf_context_print:        load time =    1265.21 ms
0.12.206.661 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.206.663 I llama_perf_context_print:        eval time =   10854.70 ms /    32 runs   (  339.21 ms per token,     2.95 tokens per second)
0.12.206.664 I llama_perf_context_print:       total time =   10938.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.253s
user	50m21.561s
sys	0m6.470s
