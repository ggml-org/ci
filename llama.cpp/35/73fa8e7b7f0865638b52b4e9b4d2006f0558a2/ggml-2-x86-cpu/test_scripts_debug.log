+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.808 I main: llama backend init
0.00.000.815 I main: load the model and apply lora adapter, if any
0.00.023.029 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.150 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.152 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.154 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.163 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.761 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.138 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.105 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.118 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.122 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.126 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.127 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.129 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.131 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.142 I llama_model_loader: - type  f32:   37 tensors
0.00.351.144 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.796 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.095 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.122 I llm_load_vocab: special tokens cache size = 5
0.00.851.251 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.327 I llm_load_print_meta: arch             = gemma
0.00.851.327 I llm_load_print_meta: vocab type       = SPM
0.00.851.328 I llm_load_print_meta: n_vocab          = 256000
0.00.851.331 I llm_load_print_meta: n_merges         = 0
0.00.851.332 I llm_load_print_meta: vocab_only       = 0
0.00.851.332 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.332 I llm_load_print_meta: n_embd           = 2048
0.00.851.333 I llm_load_print_meta: n_layer          = 18
0.00.851.396 I llm_load_print_meta: n_head           = 8
0.00.851.406 I llm_load_print_meta: n_head_kv        = 1
0.00.851.408 I llm_load_print_meta: n_rot            = 256
0.00.851.409 I llm_load_print_meta: n_swa            = 0
0.00.851.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.429 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.437 I llm_load_print_meta: n_gqa            = 8
0.00.851.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.450 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.459 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.462 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.468 I llm_load_print_meta: n_ff             = 16384
0.00.851.482 I llm_load_print_meta: n_expert         = 0
0.00.851.483 I llm_load_print_meta: n_expert_used    = 0
0.00.851.483 I llm_load_print_meta: causal attn      = 1
0.00.851.484 I llm_load_print_meta: pooling type     = 0
0.00.851.484 I llm_load_print_meta: rope type        = 2
0.00.851.485 I llm_load_print_meta: rope scaling     = linear
0.00.851.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.487 I llm_load_print_meta: freq_scale_train = 1
0.00.851.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.488 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.489 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.496 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.497 I llm_load_print_meta: model type       = 2B
0.00.851.505 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.508 I llm_load_print_meta: model params     = 2.51 B
0.00.851.509 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.509 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.510 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.511 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.517 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.519 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.520 I llm_load_print_meta: max token length = 93
0.00.954.569 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.954.580 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.954.581 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.954.582 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.954.582 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.954.583 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.960.420 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.426 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.427 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.427 I llama_new_context_with_model: n_batch       = 2048
0.00.960.428 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.428 I llama_new_context_with_model: flash_attn    = 0
0.00.960.430 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.431 I llama_new_context_with_model: freq_scale    = 1
0.00.960.432 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.975.079 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.119 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.231 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.896 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.900 I llama_new_context_with_model: graph nodes  = 601
0.00.977.900 I llama_new_context_with_model: graph splits = 1
0.00.977.924 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.744 I main: llama threadpool init, n_threads = 4
0.01.586.760 I 
0.01.586.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.586.883 I 
0.01.587.129 I sampler seed: 2911967029
0.01.587.143 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.155 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.155 I 
 increably!

I'm feeling so energized and ready to tackle anything that comes my way! ⚡️

I'm excited to embark on this journey

0.15.201.153 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.24 tokens per second)
0.15.201.156 I llama_perf_context_print:        load time =    1585.83 ms
0.15.201.168 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.201.171 I llama_perf_context_print:        eval time =   13525.69 ms /    32 runs   (  422.68 ms per token,     2.37 tokens per second)
0.15.201.172 I llama_perf_context_print:       total time =   13614.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.554 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.648 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.668 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.672 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.673 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.675 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.677 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.678 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.687 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.689 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.690 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.692 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.694 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.041 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.345 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.947 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.962 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.964 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.965 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.997 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.999 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.367.000 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.367.002 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.367.012 I llama_model_loader: - type  f32:   37 tensors
0.00.367.014 I llama_model_loader: - type q8_0:  127 tensors
0.00.592.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.321 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.251 I llm_load_vocab: special tokens cache size = 5
0.00.855.470 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.543 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.545 I llm_load_print_meta: arch             = gemma
0.00.855.545 I llm_load_print_meta: vocab type       = SPM
0.00.855.546 I llm_load_print_meta: n_vocab          = 256000
0.00.855.549 I llm_load_print_meta: n_merges         = 0
0.00.855.549 I llm_load_print_meta: vocab_only       = 0
0.00.855.550 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.550 I llm_load_print_meta: n_embd           = 2048
0.00.855.550 I llm_load_print_meta: n_layer          = 18
0.00.855.616 I llm_load_print_meta: n_head           = 8
0.00.855.623 I llm_load_print_meta: n_head_kv        = 1
0.00.855.623 I llm_load_print_meta: n_rot            = 256
0.00.855.624 I llm_load_print_meta: n_swa            = 0
0.00.855.624 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.625 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.629 I llm_load_print_meta: n_gqa            = 8
0.00.855.634 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.639 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.660 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.663 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.664 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.670 I llm_load_print_meta: n_ff             = 16384
0.00.855.670 I llm_load_print_meta: n_expert         = 0
0.00.855.671 I llm_load_print_meta: n_expert_used    = 0
0.00.855.672 I llm_load_print_meta: causal attn      = 1
0.00.855.673 I llm_load_print_meta: pooling type     = 0
0.00.855.673 I llm_load_print_meta: rope type        = 2
0.00.855.673 I llm_load_print_meta: rope scaling     = linear
0.00.855.675 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.676 I llm_load_print_meta: freq_scale_train = 1
0.00.855.684 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.684 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.685 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.685 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.686 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.686 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.686 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.687 I llm_load_print_meta: model type       = 2B
0.00.855.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.855.690 I llm_load_print_meta: model params     = 2.51 B
0.00.855.690 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.855.691 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.693 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.694 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.709 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.710 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.711 I llm_load_print_meta: max token length = 93
0.00.953.384 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.959.408 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.415 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.416 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.416 I llama_new_context_with_model: n_batch       = 2048
0.00.959.416 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.417 I llama_new_context_with_model: flash_attn    = 0
0.00.959.419 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.420 I llama_new_context_with_model: freq_scale    = 1
0.00.959.421 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.974.280 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.974.323 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.974.439 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.064 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.067 I llama_new_context_with_model: graph nodes  = 601
0.00.977.068 I llama_new_context_with_model: graph splits = 1
0.00.977.094 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.486 I main: llama threadpool init, n_threads = 4
0.01.585.502 I 
0.01.585.627 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.631 I 
0.01.585.878 I sampler seed: 3421749033
0.01.585.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.901 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.905 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.905 I 
 increadibly, and is a highly sought-after commodity in the trading world.

**What is the most likely reason for its high demand?**

a

0.15.245.562 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.30 tokens per second)
0.15.245.565 I llama_perf_context_print:        load time =    1584.53 ms
0.15.245.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.245.581 I llama_perf_context_print:        eval time =   13571.55 ms /    32 runs   (  424.11 ms per token,     2.36 tokens per second)
0.15.245.582 I llama_perf_context_print:       total time =   13660.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.170 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.178 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.265 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.285 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.303 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.304 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.310 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.731 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.476 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.493 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.502 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.507 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.508 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.512 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.513 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.515 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.516 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.518 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.527 I llama_model_loader: - type  f32:   37 tensors
0.00.348.529 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.258 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.244 I llm_load_vocab: special tokens cache size = 5
0.00.835.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.211 I llm_load_print_meta: arch             = gemma
0.00.835.212 I llm_load_print_meta: vocab type       = SPM
0.00.835.213 I llm_load_print_meta: n_vocab          = 256000
0.00.835.215 I llm_load_print_meta: n_merges         = 0
0.00.835.216 I llm_load_print_meta: vocab_only       = 0
0.00.835.216 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.217 I llm_load_print_meta: n_embd           = 2048
0.00.835.217 I llm_load_print_meta: n_layer          = 18
0.00.835.280 I llm_load_print_meta: n_head           = 8
0.00.835.287 I llm_load_print_meta: n_head_kv        = 1
0.00.835.287 I llm_load_print_meta: n_rot            = 256
0.00.835.288 I llm_load_print_meta: n_swa            = 0
0.00.835.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.290 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.295 I llm_load_print_meta: n_gqa            = 8
0.00.835.300 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.305 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.306 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.308 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.309 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.309 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.315 I llm_load_print_meta: n_ff             = 16384
0.00.835.316 I llm_load_print_meta: n_expert         = 0
0.00.835.316 I llm_load_print_meta: n_expert_used    = 0
0.00.835.317 I llm_load_print_meta: causal attn      = 1
0.00.835.317 I llm_load_print_meta: pooling type     = 0
0.00.835.318 I llm_load_print_meta: rope type        = 2
0.00.835.318 I llm_load_print_meta: rope scaling     = linear
0.00.835.319 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.320 I llm_load_print_meta: freq_scale_train = 1
0.00.835.320 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.321 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.321 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.322 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.322 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.323 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.323 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.324 I llm_load_print_meta: model type       = 2B
0.00.835.325 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.326 I llm_load_print_meta: model params     = 2.51 B
0.00.835.326 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.328 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.329 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.338 I llm_load_print_meta: max token length = 93
0.00.914.666 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.914.672 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.673 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.914.674 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.914.675 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.914.676 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.920.427 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.435 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.436 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.436 I llama_new_context_with_model: n_batch       = 2048
0.00.920.437 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.437 I llama_new_context_with_model: flash_attn    = 0
0.00.920.439 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.440 I llama_new_context_with_model: freq_scale    = 1
0.00.920.441 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.981 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.020 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.944 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.947 I llama_new_context_with_model: graph nodes  = 601
0.00.937.948 I llama_new_context_with_model: graph splits = 1
0.00.937.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.546.615 I main: llama threadpool init, n_threads = 4
0.01.546.632 I 
0.01.546.756 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.546.760 I 
0.01.546.999 I sampler seed: 705213493
0.01.547.013 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.547.023 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.547.026 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.547.027 I 
 increasements and expansions in the text below:

**Original Text:**

> The quick brown fox jumps over the lazy dog.

**Revised Text:**



0.15.167.423 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.14 tokens per second)
0.15.167.449 I llama_perf_context_print:        load time =    1545.67 ms
0.15.167.451 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.167.454 I llama_perf_context_print:        eval time =   13531.91 ms /    32 runs   (  422.87 ms per token,     2.36 tokens per second)
0.15.167.456 I llama_perf_context_print:       total time =   13620.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.724 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.968 I main: llama backend init
0.00.000.977 I main: load the model and apply lora adapter, if any
0.00.023.683 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.813 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.833 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.843 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.854 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.858 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.861 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.867 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.869 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.886 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.905 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.315 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.354 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.361 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.363 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.364 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.365 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.367 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.373 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.376 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.377 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.379 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.388 I llama_model_loader: - type  f32:   37 tensors
0.00.349.390 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.782 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.659 I llm_load_vocab: special tokens cache size = 5
0.00.826.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.396 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.397 I llm_load_print_meta: arch             = gemma
0.00.826.398 I llm_load_print_meta: vocab type       = SPM
0.00.826.399 I llm_load_print_meta: n_vocab          = 256000
0.00.826.401 I llm_load_print_meta: n_merges         = 0
0.00.826.402 I llm_load_print_meta: vocab_only       = 0
0.00.826.402 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.403 I llm_load_print_meta: n_embd           = 2048
0.00.826.403 I llm_load_print_meta: n_layer          = 18
0.00.826.477 I llm_load_print_meta: n_head           = 8
0.00.826.490 I llm_load_print_meta: n_head_kv        = 1
0.00.826.494 I llm_load_print_meta: n_rot            = 256
0.00.826.495 I llm_load_print_meta: n_swa            = 0
0.00.826.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.497 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.511 I llm_load_print_meta: n_gqa            = 8
0.00.826.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.533 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.541 I llm_load_print_meta: n_ff             = 16384
0.00.826.542 I llm_load_print_meta: n_expert         = 0
0.00.826.546 I llm_load_print_meta: n_expert_used    = 0
0.00.826.547 I llm_load_print_meta: causal attn      = 1
0.00.826.547 I llm_load_print_meta: pooling type     = 0
0.00.826.547 I llm_load_print_meta: rope type        = 2
0.00.826.548 I llm_load_print_meta: rope scaling     = linear
0.00.826.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.552 I llm_load_print_meta: freq_scale_train = 1
0.00.826.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.555 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.555 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.556 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.556 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.557 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.557 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.558 I llm_load_print_meta: model type       = 2B
0.00.826.559 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.560 I llm_load_print_meta: model params     = 2.51 B
0.00.826.562 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.562 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.564 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.565 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.566 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.567 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.576 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.576 I llm_load_print_meta: max token length = 93
0.00.899.438 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.899.449 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.905.734 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.742 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.742 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.743 I llama_new_context_with_model: n_batch       = 2048
0.00.905.743 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.744 I llama_new_context_with_model: flash_attn    = 0
0.00.905.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.747 I llama_new_context_with_model: freq_scale    = 1
0.00.905.749 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.693 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.737 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.858 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.410 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.414 I llama_new_context_with_model: graph nodes  = 601
0.00.923.414 I llama_new_context_with_model: graph splits = 1
0.00.923.440 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.533.508 I main: llama threadpool init, n_threads = 4
0.01.533.524 I 
0.01.533.651 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.655 I 
0.01.533.901 I sampler seed: 1453552502
0.01.533.916 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.533.928 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.533.929 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.533.929 I 
 increadibly with this sentence.

The world is a fascinating place, and it holds within it countless stories that intertwine to form a tapestry of human experience.

0.15.184.673 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.02 tokens per second)
0.15.184.677 I llama_perf_context_print:        load time =    1532.41 ms
0.15.184.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.184.681 I llama_perf_context_print:        eval time =   13561.65 ms /    32 runs   (  423.80 ms per token,     2.36 tokens per second)
0.15.184.682 I llama_perf_context_print:       total time =   13651.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.415s
user	3m51.807s
sys	0m9.319s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4285 (3573fa8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185899.42 ms
main:    total time = 185899.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.000.935 I main: load the model and apply lora adapter, if any
0.00.023.178 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.189 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.293 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.308 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.321 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.328 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.120 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.082 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.091 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.092 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.093 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.095 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.096 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.098 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.103 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.104 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.107 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.108 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.117 I llama_model_loader: - type  f32:   37 tensors
0.00.348.119 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.120 I llama_model_loader: - type q6_K:   19 tensors
0.00.570.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.916 I llm_load_vocab: special tokens cache size = 5
0.00.831.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.477 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.478 I llm_load_print_meta: arch             = gemma
0.00.831.479 I llm_load_print_meta: vocab type       = SPM
0.00.831.480 I llm_load_print_meta: n_vocab          = 256000
0.00.831.483 I llm_load_print_meta: n_merges         = 0
0.00.831.483 I llm_load_print_meta: vocab_only       = 0
0.00.831.483 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.484 I llm_load_print_meta: n_embd           = 2048
0.00.831.484 I llm_load_print_meta: n_layer          = 18
0.00.831.549 I llm_load_print_meta: n_head           = 8
0.00.831.556 I llm_load_print_meta: n_head_kv        = 1
0.00.831.557 I llm_load_print_meta: n_rot            = 256
0.00.831.558 I llm_load_print_meta: n_swa            = 0
0.00.831.558 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.558 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.563 I llm_load_print_meta: n_gqa            = 8
0.00.831.570 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.576 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.578 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.579 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.580 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.580 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.586 I llm_load_print_meta: n_ff             = 16384
0.00.831.586 I llm_load_print_meta: n_expert         = 0
0.00.831.607 I llm_load_print_meta: n_expert_used    = 0
0.00.831.610 I llm_load_print_meta: causal attn      = 1
0.00.831.611 I llm_load_print_meta: pooling type     = 0
0.00.831.611 I llm_load_print_meta: rope type        = 2
0.00.831.612 I llm_load_print_meta: rope scaling     = linear
0.00.831.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.614 I llm_load_print_meta: freq_scale_train = 1
0.00.831.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.617 I llm_load_print_meta: model type       = 2B
0.00.831.618 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.619 I llm_load_print_meta: model params     = 2.51 B
0.00.831.619 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.622 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.623 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.624 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.639 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.641 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.641 I llm_load_print_meta: max token length = 93
0.00.894.628 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.894.637 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.894.638 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.894.639 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.894.640 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.894.640 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.900.325 I llama_new_context_with_model: n_seq_max     = 1
0.00.900.331 I llama_new_context_with_model: n_ctx         = 4096
0.00.900.332 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.900.332 I llama_new_context_with_model: n_batch       = 2048
0.00.900.332 I llama_new_context_with_model: n_ubatch      = 512
0.00.900.333 I llama_new_context_with_model: flash_attn    = 0
0.00.900.335 I llama_new_context_with_model: freq_base     = 10000.0
0.00.900.336 I llama_new_context_with_model: freq_scale    = 1
0.00.900.336 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.749 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.915.792 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.915.914 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.918.640 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.918.644 I llama_new_context_with_model: graph nodes  = 601
0.00.918.645 I llama_new_context_with_model: graph splits = 1
0.00.918.668 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.500.836 I main: llama threadpool init, n_threads = 4
0.01.500.855 I 
0.01.500.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.500.987 I 
0.01.501.246 I sampler seed: 1232031612
0.01.501.261 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.271 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.273 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.273 I 
 increasities. [end of text]


0.02.892.150 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.26 tokens per second)
0.02.892.153 I llama_perf_context_print:        load time =    1499.80 ms
0.02.892.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.892.156 I llama_perf_context_print:        eval time =    1378.41 ms /     4 runs   (  344.60 ms per token,     2.90 tokens per second)
0.02.892.157 I llama_perf_context_print:       total time =    1391.32 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4285 (3573fa8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186710.88 ms
main:    total time = 186710.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.226 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.331 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.345 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.349 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.356 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.363 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.365 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.366 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.376 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.380 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.156 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.795 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.804 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.805 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.806 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.810 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.824 I llama_model_loader: - type  f32:   37 tensors
0.00.348.826 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.827 I llama_model_loader: - type q6_K:   19 tensors
0.00.596.490 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.145 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.041 I llm_load_vocab: special tokens cache size = 5
0.00.849.063 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.137 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.138 I llm_load_print_meta: arch             = gemma
0.00.849.139 I llm_load_print_meta: vocab type       = SPM
0.00.849.140 I llm_load_print_meta: n_vocab          = 256000
0.00.849.142 I llm_load_print_meta: n_merges         = 0
0.00.849.143 I llm_load_print_meta: vocab_only       = 0
0.00.849.143 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.144 I llm_load_print_meta: n_embd           = 2048
0.00.849.144 I llm_load_print_meta: n_layer          = 18
0.00.849.208 I llm_load_print_meta: n_head           = 8
0.00.849.215 I llm_load_print_meta: n_head_kv        = 1
0.00.849.216 I llm_load_print_meta: n_rot            = 256
0.00.849.217 I llm_load_print_meta: n_swa            = 0
0.00.849.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.223 I llm_load_print_meta: n_gqa            = 8
0.00.849.229 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.235 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.243 I llm_load_print_meta: n_ff             = 16384
0.00.849.244 I llm_load_print_meta: n_expert         = 0
0.00.849.244 I llm_load_print_meta: n_expert_used    = 0
0.00.849.244 I llm_load_print_meta: causal attn      = 1
0.00.849.245 I llm_load_print_meta: pooling type     = 0
0.00.849.246 I llm_load_print_meta: rope type        = 2
0.00.849.247 I llm_load_print_meta: rope scaling     = linear
0.00.849.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.249 I llm_load_print_meta: freq_scale_train = 1
0.00.849.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.251 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.251 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.251 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.252 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.252 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.272 I llm_load_print_meta: model type       = 2B
0.00.849.274 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.274 I llm_load_print_meta: model params     = 2.51 B
0.00.849.275 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.276 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.277 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.278 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.285 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.287 I llm_load_print_meta: max token length = 93
0.00.909.154 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.914.844 I llama_new_context_with_model: n_seq_max     = 1
0.00.914.851 I llama_new_context_with_model: n_ctx         = 4096
0.00.914.852 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.914.852 I llama_new_context_with_model: n_batch       = 2048
0.00.914.853 I llama_new_context_with_model: n_ubatch      = 512
0.00.914.853 I llama_new_context_with_model: flash_attn    = 0
0.00.914.856 I llama_new_context_with_model: freq_base     = 10000.0
0.00.914.856 I llama_new_context_with_model: freq_scale    = 1
0.00.914.857 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.076 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.930.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.232 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.768 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.772 I llama_new_context_with_model: graph nodes  = 601
0.00.932.772 I llama_new_context_with_model: graph splits = 1
0.00.932.796 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.513.397 I main: llama threadpool init, n_threads = 4
0.01.513.412 I 
0.01.513.539 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.513.543 I 
0.01.513.783 I sampler seed: 3027247693
0.01.513.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.513.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.513.809 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.513.809 I 
 increasities by linking the possessive pronouns with the possessed nouns.

The possessive pronouns indicate ownership or possession, while the linking words connect the possessor and the possessed.

0.12.592.955 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.03 tokens per second)
0.12.592.961 I llama_perf_context_print:        load time =    1512.45 ms
0.12.592.963 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.592.964 I llama_perf_context_print:        eval time =   10990.27 ms /    32 runs   (  343.45 ms per token,     2.91 tokens per second)
0.12.592.966 I llama_perf_context_print:       total time =   11079.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.995s
user	46m11.243s
sys	0m6.275s
