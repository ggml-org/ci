+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.432 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.626 I main: llama backend init
0.00.000.632 I main: load the model and apply lora adapter, if any
0.00.021.172 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.193 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.198 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.199 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.200 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.207 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.207 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.135 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.135 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.136 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.137 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.138 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.141 I llama_model_loader: - type  f32:   37 tensors
0.00.131.142 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.274 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.438 I llm_load_vocab: special tokens cache size = 5
0.00.271.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.048 I llm_load_print_meta: arch             = gemma
0.00.271.048 I llm_load_print_meta: vocab type       = SPM
0.00.271.049 I llm_load_print_meta: n_vocab          = 256000
0.00.271.050 I llm_load_print_meta: n_merges         = 0
0.00.271.050 I llm_load_print_meta: vocab_only       = 0
0.00.271.050 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.050 I llm_load_print_meta: n_embd           = 2048
0.00.271.051 I llm_load_print_meta: n_layer          = 18
0.00.271.061 I llm_load_print_meta: n_head           = 8
0.00.271.062 I llm_load_print_meta: n_head_kv        = 1
0.00.271.063 I llm_load_print_meta: n_rot            = 256
0.00.271.063 I llm_load_print_meta: n_swa            = 0
0.00.271.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.065 I llm_load_print_meta: n_gqa            = 8
0.00.271.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.067 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.068 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.069 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.070 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.070 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.070 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.071 I llm_load_print_meta: n_ff             = 16384
0.00.271.071 I llm_load_print_meta: n_expert         = 0
0.00.271.072 I llm_load_print_meta: n_expert_used    = 0
0.00.271.072 I llm_load_print_meta: causal attn      = 1
0.00.271.072 I llm_load_print_meta: pooling type     = 0
0.00.271.072 I llm_load_print_meta: rope type        = 2
0.00.271.073 I llm_load_print_meta: rope scaling     = linear
0.00.271.074 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.075 I llm_load_print_meta: freq_scale_train = 1
0.00.271.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.077 I llm_load_print_meta: model type       = 2B
0.00.271.078 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.078 I llm_load_print_meta: model params     = 2.51 B
0.00.271.079 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.080 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.080 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.081 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.081 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.081 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.082 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.082 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.082 I llm_load_print_meta: max token length = 93
0.00.372.377 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.385 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.386 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.386 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.387 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.387 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.549 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.555 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.556 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.556 I llama_new_context_with_model: n_batch       = 2048
0.00.377.556 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.557 I llama_new_context_with_model: flash_attn    = 0
0.00.377.559 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.560 I llama_new_context_with_model: freq_scale    = 1
0.00.377.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.995 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.337 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.341 I llama_new_context_with_model: graph nodes  = 601
0.00.393.342 I llama_new_context_with_model: graph splits = 1
0.00.393.344 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.543 I main: llama threadpool init, n_threads = 4
0.00.478.558 I 
0.00.478.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.631 I 
0.00.478.672 I sampler seed: 2506910046
0.00.478.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.695 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.699 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.699 I 
 increasities. [end of text]


0.00.760.384 I llama_perf_sampler_print:    sampling time =       0.71 ms /     5 runs   (    0.14 ms per token,  7052.19 tokens per second)
0.00.760.388 I llama_perf_context_print:        load time =     477.89 ms
0.00.760.389 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.760.391 I llama_perf_context_print:        eval time =     278.65 ms /     4 runs   (   69.66 ms per token,    14.36 tokens per second)
0.00.760.392 I llama_perf_context_print:       total time =     281.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.020.851 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.865 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.875 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.879 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.883 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.886 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.887 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.893 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.893 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.895 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.896 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.051 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.867 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.867 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.868 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.871 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.872 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.874 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.874 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.875 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.878 I llama_model_loader: - type  f32:   37 tensors
0.00.130.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.710 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.411 I llm_load_vocab: special tokens cache size = 5
0.00.271.289 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.309 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.310 I llm_load_print_meta: arch             = gemma
0.00.271.311 I llm_load_print_meta: vocab type       = SPM
0.00.271.312 I llm_load_print_meta: n_vocab          = 256000
0.00.271.312 I llm_load_print_meta: n_merges         = 0
0.00.271.312 I llm_load_print_meta: vocab_only       = 0
0.00.271.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.313 I llm_load_print_meta: n_embd           = 2048
0.00.271.313 I llm_load_print_meta: n_layer          = 18
0.00.271.325 I llm_load_print_meta: n_head           = 8
0.00.271.326 I llm_load_print_meta: n_head_kv        = 1
0.00.271.326 I llm_load_print_meta: n_rot            = 256
0.00.271.327 I llm_load_print_meta: n_swa            = 0
0.00.271.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.328 I llm_load_print_meta: n_gqa            = 8
0.00.271.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.334 I llm_load_print_meta: n_ff             = 16384
0.00.271.335 I llm_load_print_meta: n_expert         = 0
0.00.271.335 I llm_load_print_meta: n_expert_used    = 0
0.00.271.335 I llm_load_print_meta: causal attn      = 1
0.00.271.335 I llm_load_print_meta: pooling type     = 0
0.00.271.336 I llm_load_print_meta: rope type        = 2
0.00.271.336 I llm_load_print_meta: rope scaling     = linear
0.00.271.338 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.338 I llm_load_print_meta: freq_scale_train = 1
0.00.271.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.339 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.339 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.340 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.340 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.340 I llm_load_print_meta: model type       = 2B
0.00.271.341 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.342 I llm_load_print_meta: model params     = 2.51 B
0.00.271.343 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.344 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.346 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.347 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.348 I llm_load_print_meta: max token length = 93
0.00.366.020 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.234 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.241 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.241 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.242 I llama_new_context_with_model: n_batch       = 2048
0.00.371.242 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.242 I llama_new_context_with_model: flash_attn    = 0
0.00.371.245 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.246 I llama_new_context_with_model: freq_scale    = 1
0.00.371.247 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.942 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.956 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.276 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.283 I llama_new_context_with_model: graph nodes  = 601
0.00.387.284 I llama_new_context_with_model: graph splits = 1
0.00.387.286 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.960 I main: llama threadpool init, n_threads = 4
0.00.467.976 I 
0.00.468.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.071 I 
0.00.468.127 I sampler seed: 2303657455
0.00.468.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.140 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.140 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.141 I 
 increasities with a touch of whimsy!

The prompt calls for a response that includes the following elements:

* A humorous and witty response that incorporates word

0.02.645.435 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5953.45 tokens per second)
0.02.645.437 I llama_perf_context_print:        load time =     467.21 ms
0.02.645.438 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.645.440 I llama_perf_context_print:        eval time =    2158.10 ms /    32 runs   (   67.44 ms per token,    14.83 tokens per second)
0.02.645.441 I llama_perf_context_print:       total time =    2177.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.521 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.000.719 I main: load the model and apply lora adapter, if any
0.00.020.781 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.789 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.796 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.801 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.802 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.805 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.806 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.807 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.808 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.814 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.815 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.816 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.817 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.580 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.423 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.429 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.430 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.431 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.433 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.435 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.436 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.437 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.437 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.438 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.440 I llama_model_loader: - type  f32:   37 tensors
0.00.130.441 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.958 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.747 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.228 I llm_load_vocab: special tokens cache size = 5
0.00.261.795 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.814 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.814 I llm_load_print_meta: arch             = gemma
0.00.261.815 I llm_load_print_meta: vocab type       = SPM
0.00.261.815 I llm_load_print_meta: n_vocab          = 256000
0.00.261.816 I llm_load_print_meta: n_merges         = 0
0.00.261.816 I llm_load_print_meta: vocab_only       = 0
0.00.261.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.817 I llm_load_print_meta: n_embd           = 2048
0.00.261.829 I llm_load_print_meta: n_layer          = 18
0.00.261.840 I llm_load_print_meta: n_head           = 8
0.00.261.841 I llm_load_print_meta: n_head_kv        = 1
0.00.261.841 I llm_load_print_meta: n_rot            = 256
0.00.261.842 I llm_load_print_meta: n_swa            = 0
0.00.261.842 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.843 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.844 I llm_load_print_meta: n_gqa            = 8
0.00.261.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.851 I llm_load_print_meta: n_ff             = 16384
0.00.261.852 I llm_load_print_meta: n_expert         = 0
0.00.261.852 I llm_load_print_meta: n_expert_used    = 0
0.00.261.852 I llm_load_print_meta: causal attn      = 1
0.00.261.853 I llm_load_print_meta: pooling type     = 0
0.00.261.854 I llm_load_print_meta: rope type        = 2
0.00.261.854 I llm_load_print_meta: rope scaling     = linear
0.00.261.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.857 I llm_load_print_meta: freq_scale_train = 1
0.00.261.857 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.857 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.858 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.858 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.858 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.858 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.859 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.859 I llm_load_print_meta: model type       = 2B
0.00.261.859 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.860 I llm_load_print_meta: model params     = 2.51 B
0.00.261.861 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.861 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.862 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.863 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.864 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.865 I llm_load_print_meta: max token length = 93
0.00.338.485 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.338.495 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.496 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.338.497 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.338.497 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.498 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.343.706 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.713 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.713 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.714 I llama_new_context_with_model: n_batch       = 2048
0.00.343.714 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.715 I llama_new_context_with_model: flash_attn    = 0
0.00.343.719 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.720 I llama_new_context_with_model: freq_scale    = 1
0.00.343.721 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.784 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.799 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.889 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.220 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.225 I llama_new_context_with_model: graph nodes  = 601
0.00.359.225 I llama_new_context_with_model: graph splits = 1
0.00.359.228 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.524 I main: llama threadpool init, n_threads = 4
0.00.443.540 I 
0.00.443.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.443.617 I 
0.00.443.662 I sampler seed: 3748890528
0.00.443.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.676 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.679 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.679 I 
 increamental list with conditional statements.

```python
list1 = [1,2,3,4,5]

# Conditional statement to check if

0.02.701.187 I llama_perf_sampler_print:    sampling time =       5.51 ms /    33 runs   (    0.17 ms per token,  5986.94 tokens per second)
0.02.701.190 I llama_perf_context_print:        load time =     442.79 ms
0.02.701.192 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.701.194 I llama_perf_context_print:        eval time =    2238.34 ms /    32 runs   (   69.95 ms per token,    14.30 tokens per second)
0.02.701.194 I llama_perf_context_print:       total time =    2257.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.541 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.078 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.091 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.108 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.111 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.116 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.117 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.119 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.123 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.124 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.124 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.125 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.538 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.479 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.487 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.489 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.489 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.492 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.493 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.493 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.495 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.496 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.499 I llama_model_loader: - type  f32:   37 tensors
0.00.131.500 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.016 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.580 I llm_load_vocab: special tokens cache size = 5
0.00.273.268 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.288 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.288 I llm_load_print_meta: arch             = gemma
0.00.273.289 I llm_load_print_meta: vocab type       = SPM
0.00.273.290 I llm_load_print_meta: n_vocab          = 256000
0.00.273.290 I llm_load_print_meta: n_merges         = 0
0.00.273.290 I llm_load_print_meta: vocab_only       = 0
0.00.273.291 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.291 I llm_load_print_meta: n_embd           = 2048
0.00.273.291 I llm_load_print_meta: n_layer          = 18
0.00.273.305 I llm_load_print_meta: n_head           = 8
0.00.273.306 I llm_load_print_meta: n_head_kv        = 1
0.00.273.306 I llm_load_print_meta: n_rot            = 256
0.00.273.307 I llm_load_print_meta: n_swa            = 0
0.00.273.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.307 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.308 I llm_load_print_meta: n_gqa            = 8
0.00.273.309 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.312 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.313 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.314 I llm_load_print_meta: n_ff             = 16384
0.00.273.314 I llm_load_print_meta: n_expert         = 0
0.00.273.315 I llm_load_print_meta: n_expert_used    = 0
0.00.273.315 I llm_load_print_meta: causal attn      = 1
0.00.273.315 I llm_load_print_meta: pooling type     = 0
0.00.273.316 I llm_load_print_meta: rope type        = 2
0.00.273.316 I llm_load_print_meta: rope scaling     = linear
0.00.273.317 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.318 I llm_load_print_meta: freq_scale_train = 1
0.00.273.318 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.319 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.319 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.319 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.320 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.320 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.320 I llm_load_print_meta: model type       = 2B
0.00.273.321 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.322 I llm_load_print_meta: model params     = 2.51 B
0.00.273.322 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.324 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.325 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.325 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.326 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.326 I llm_load_print_meta: max token length = 93
0.00.345.104 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.111 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.168 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.176 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.176 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.177 I llama_new_context_with_model: n_batch       = 2048
0.00.350.177 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.178 I llama_new_context_with_model: flash_attn    = 0
0.00.350.180 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.181 I llama_new_context_with_model: freq_scale    = 1
0.00.350.182 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.667 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.681 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.773 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.091 I llama_new_context_with_model: graph nodes  = 601
0.00.366.091 I llama_new_context_with_model: graph splits = 1
0.00.366.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.878 I main: llama threadpool init, n_threads = 4
0.00.455.893 I 
0.00.455.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.966 I 
0.00.456.008 I sampler seed: 2476408428
0.00.456.018 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.021 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.022 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.022 I 
 increasities? [end of text]


0.00.766.363 I llama_perf_sampler_print:    sampling time =       0.68 ms /     5 runs   (    0.14 ms per token,  7342.14 tokens per second)
0.00.766.365 I llama_perf_context_print:        load time =     455.08 ms
0.00.766.366 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.766.368 I llama_perf_context_print:        eval time =     307.25 ms /     4 runs   (   76.81 ms per token,    13.02 tokens per second)
0.00.766.368 I llama_perf_context_print:       total time =     310.49 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.009s
user	0m22.936s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4285 (3573fa8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40216.97 ms
main:    total time = 40216.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.291 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.301 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.310 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.314 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.320 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.321 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.326 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.206 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.274 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.282 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.282 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.283 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.285 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.286 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.288 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.288 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.289 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.292 I llama_model_loader: - type  f32:   37 tensors
0.00.131.293 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.293 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.804 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.700 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.183 I llm_load_vocab: special tokens cache size = 5
0.00.260.784 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.800 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.801 I llm_load_print_meta: arch             = gemma
0.00.260.801 I llm_load_print_meta: vocab type       = SPM
0.00.260.802 I llm_load_print_meta: n_vocab          = 256000
0.00.260.802 I llm_load_print_meta: n_merges         = 0
0.00.260.802 I llm_load_print_meta: vocab_only       = 0
0.00.260.803 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.803 I llm_load_print_meta: n_embd           = 2048
0.00.260.803 I llm_load_print_meta: n_layer          = 18
0.00.260.815 I llm_load_print_meta: n_head           = 8
0.00.260.815 I llm_load_print_meta: n_head_kv        = 1
0.00.260.816 I llm_load_print_meta: n_rot            = 256
0.00.260.816 I llm_load_print_meta: n_swa            = 0
0.00.260.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.817 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.818 I llm_load_print_meta: n_gqa            = 8
0.00.260.819 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.820 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.820 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.822 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.822 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.822 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.822 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.823 I llm_load_print_meta: n_ff             = 16384
0.00.260.824 I llm_load_print_meta: n_expert         = 0
0.00.260.824 I llm_load_print_meta: n_expert_used    = 0
0.00.260.824 I llm_load_print_meta: causal attn      = 1
0.00.260.824 I llm_load_print_meta: pooling type     = 0
0.00.260.825 I llm_load_print_meta: rope type        = 2
0.00.260.825 I llm_load_print_meta: rope scaling     = linear
0.00.260.827 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.827 I llm_load_print_meta: freq_scale_train = 1
0.00.260.828 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.828 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.828 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.828 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.829 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.829 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.829 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.830 I llm_load_print_meta: model type       = 2B
0.00.260.830 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.831 I llm_load_print_meta: model params     = 2.51 B
0.00.260.832 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.832 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.832 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.833 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.833 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.833 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.834 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.834 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.834 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.834 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.835 I llm_load_print_meta: max token length = 93
0.00.321.006 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.015 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.016 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.016 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.017 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.017 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.314 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.321 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.321 I llama_new_context_with_model: n_batch       = 2048
0.00.326.322 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.322 I llama_new_context_with_model: flash_attn    = 0
0.00.326.326 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.327 I llama_new_context_with_model: freq_scale    = 1
0.00.326.328 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.521 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.536 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.639 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.955 I llama_new_context_with_model: graph nodes  = 601
0.00.342.955 I llama_new_context_with_model: graph splits = 1
0.00.342.957 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.244 I main: llama threadpool init, n_threads = 4
0.00.419.259 I 
0.00.419.332 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.336 I 
0.00.419.378 I sampler seed: 2772414047
0.00.419.389 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.393 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.396 I 
 increasities. [end of text]


0.00.616.503 I llama_perf_sampler_print:    sampling time =       0.72 ms /     5 runs   (    0.14 ms per token,  6915.63 tokens per second)
0.00.616.505 I llama_perf_context_print:        load time =     418.49 ms
0.00.616.506 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.616.507 I llama_perf_context_print:        eval time =     193.87 ms /     4 runs   (   48.47 ms per token,    20.63 tokens per second)
0.00.616.508 I llama_perf_context_print:       total time =     197.27 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4285 (3573fa8e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40191.01 ms
main:    total time = 40191.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.178 I build: 4285 (3573fa8e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.647 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.664 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.678 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.683 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.684 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.684 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.691 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.691 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.692 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.692 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.693 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.151 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.073 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.075 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.075 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.076 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.077 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.079 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.084 I llama_model_loader: - type  f32:   37 tensors
0.00.130.085 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.085 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.244 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.013 I llm_load_vocab: special tokens cache size = 5
0.00.262.696 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.712 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.713 I llm_load_print_meta: arch             = gemma
0.00.262.714 I llm_load_print_meta: vocab type       = SPM
0.00.262.714 I llm_load_print_meta: n_vocab          = 256000
0.00.262.715 I llm_load_print_meta: n_merges         = 0
0.00.262.715 I llm_load_print_meta: vocab_only       = 0
0.00.262.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.716 I llm_load_print_meta: n_embd           = 2048
0.00.262.716 I llm_load_print_meta: n_layer          = 18
0.00.262.726 I llm_load_print_meta: n_head           = 8
0.00.262.727 I llm_load_print_meta: n_head_kv        = 1
0.00.262.728 I llm_load_print_meta: n_rot            = 256
0.00.262.728 I llm_load_print_meta: n_swa            = 0
0.00.262.728 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.731 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.732 I llm_load_print_meta: n_gqa            = 8
0.00.262.733 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.734 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.735 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.736 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.736 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.737 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.737 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.738 I llm_load_print_meta: n_ff             = 16384
0.00.262.738 I llm_load_print_meta: n_expert         = 0
0.00.262.739 I llm_load_print_meta: n_expert_used    = 0
0.00.262.739 I llm_load_print_meta: causal attn      = 1
0.00.262.739 I llm_load_print_meta: pooling type     = 0
0.00.262.740 I llm_load_print_meta: rope type        = 2
0.00.262.742 I llm_load_print_meta: rope scaling     = linear
0.00.262.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.744 I llm_load_print_meta: freq_scale_train = 1
0.00.262.745 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.745 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.746 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.746 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.746 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.747 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.747 I llm_load_print_meta: model type       = 2B
0.00.262.748 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.748 I llm_load_print_meta: model params     = 2.51 B
0.00.262.749 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.750 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.750 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.751 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.753 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.754 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.754 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.754 I llm_load_print_meta: max token length = 93
0.00.321.489 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.585 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.591 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.592 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.592 I llama_new_context_with_model: n_batch       = 2048
0.00.326.593 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.593 I llama_new_context_with_model: flash_attn    = 0
0.00.326.595 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.596 I llama_new_context_with_model: freq_scale    = 1
0.00.326.597 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.363 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.375 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.698 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.704 I llama_new_context_with_model: graph nodes  = 601
0.00.343.705 I llama_new_context_with_model: graph splits = 1
0.00.343.707 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.402 I main: llama threadpool init, n_threads = 4
0.00.418.420 I 
0.00.418.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.498 I 
0.00.418.540 I sampler seed: 3650909595
0.00.418.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.567 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.568 I 
 squaRED VELVET
## The Velvet Effect: How Storytelling can Transform Data into Insight

**Abstract:**

This paper argues that storytelling can be a powerful tool

0.01.996.888 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5838.64 tokens per second)
0.01.996.891 I llama_perf_context_print:        load time =     418.00 ms
0.01.996.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.894 I llama_perf_context_print:        eval time =    1558.65 ms /    32 runs   (   48.71 ms per token,    20.53 tokens per second)
0.01.996.895 I llama_perf_context_print:       total time =    1578.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.797s
user	10m18.426s
sys	0m7.113s
