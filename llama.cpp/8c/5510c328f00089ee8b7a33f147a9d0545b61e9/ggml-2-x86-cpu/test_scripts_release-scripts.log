+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.523 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.694 I main: llama backend init
0.00.000.702 I main: load the model and apply lora adapter, if any
0.00.021.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.566 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.580 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.585 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.586 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.588 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.589 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.589 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.061 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.062 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.062 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.063 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.063 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.064 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.067 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.067 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.068 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.072 I llama_model_loader: - type  f32:   37 tensors
0.00.131.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.657 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.828 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.307 I llm_load_vocab: special tokens cache size = 5
0.00.265.047 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.060 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.062 I llm_load_print_meta: arch             = gemma
0.00.265.062 I llm_load_print_meta: vocab type       = SPM
0.00.265.063 I llm_load_print_meta: n_vocab          = 256000
0.00.265.063 I llm_load_print_meta: n_merges         = 0
0.00.265.063 I llm_load_print_meta: vocab_only       = 0
0.00.265.064 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.064 I llm_load_print_meta: n_embd           = 2048
0.00.265.064 I llm_load_print_meta: n_layer          = 18
0.00.265.077 I llm_load_print_meta: n_head           = 8
0.00.265.078 I llm_load_print_meta: n_head_kv        = 1
0.00.265.078 I llm_load_print_meta: n_rot            = 256
0.00.265.078 I llm_load_print_meta: n_swa            = 0
0.00.265.079 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.079 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.080 I llm_load_print_meta: n_gqa            = 8
0.00.265.081 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.081 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.082 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.084 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.084 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.085 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.085 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.086 I llm_load_print_meta: n_ff             = 16384
0.00.265.086 I llm_load_print_meta: n_expert         = 0
0.00.265.086 I llm_load_print_meta: n_expert_used    = 0
0.00.265.087 I llm_load_print_meta: causal attn      = 1
0.00.265.087 I llm_load_print_meta: pooling type     = 0
0.00.265.087 I llm_load_print_meta: rope type        = 2
0.00.265.087 I llm_load_print_meta: rope scaling     = linear
0.00.265.089 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.089 I llm_load_print_meta: freq_scale_train = 1
0.00.265.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.090 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.091 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.092 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.092 I llm_load_print_meta: model type       = 2B
0.00.265.094 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.095 I llm_load_print_meta: model params     = 2.51 B
0.00.265.095 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.097 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.097 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.099 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.099 I llm_load_print_meta: max token length = 93
0.00.365.546 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.553 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.554 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.555 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.555 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.556 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.686 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.691 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.692 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.692 I llama_new_context_with_model: n_batch       = 2048
0.00.370.693 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.693 I llama_new_context_with_model: flash_attn    = 0
0.00.370.695 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.696 I llama_new_context_with_model: freq_scale    = 1
0.00.370.697 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.715 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.385.017 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.028 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.417 I llama_new_context_with_model: graph nodes  = 601
0.00.386.417 I llama_new_context_with_model: graph splits = 1
0.00.386.420 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.805 I main: llama threadpool init, n_threads = 4
0.00.470.821 I 
0.00.470.895 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.898 I 
0.00.470.931 I sampler seed: 4075758841
0.00.470.942 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.955 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.959 I 
 increabling,
I'm not sure how to interpret this error.

**Error Message:**

```
Execution error in Interactive.Invoke: method '

0.02.712.263 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7064.87 tokens per second)
0.02.712.265 I llama_perf_context_print:        load time =     470.09 ms
0.02.712.266 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.268 I llama_perf_context_print:        eval time =    2222.41 ms /    32 runs   (   69.45 ms per token,    14.40 tokens per second)
0.02.712.268 I llama_perf_context_print:       total time =    2241.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.166 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.365 I main: load the model and apply lora adapter, if any
0.00.020.713 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.740 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.744 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.745 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.746 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.746 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.747 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.747 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.750 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.751 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.752 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.752 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.753 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.085 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.086 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.087 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.091 I llama_model_loader: - type  f32:   37 tensors
0.00.131.092 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.119 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.740 I llm_load_vocab: special tokens cache size = 5
0.00.277.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.720 I llm_load_print_meta: arch             = gemma
0.00.277.721 I llm_load_print_meta: vocab type       = SPM
0.00.277.721 I llm_load_print_meta: n_vocab          = 256000
0.00.277.722 I llm_load_print_meta: n_merges         = 0
0.00.277.722 I llm_load_print_meta: vocab_only       = 0
0.00.277.722 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.722 I llm_load_print_meta: n_embd           = 2048
0.00.277.723 I llm_load_print_meta: n_layer          = 18
0.00.277.733 I llm_load_print_meta: n_head           = 8
0.00.277.734 I llm_load_print_meta: n_head_kv        = 1
0.00.277.735 I llm_load_print_meta: n_rot            = 256
0.00.277.735 I llm_load_print_meta: n_swa            = 0
0.00.277.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.736 I llm_load_print_meta: n_gqa            = 8
0.00.277.738 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.739 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.741 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.742 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.742 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.743 I llm_load_print_meta: n_ff             = 16384
0.00.277.743 I llm_load_print_meta: n_expert         = 0
0.00.277.743 I llm_load_print_meta: n_expert_used    = 0
0.00.277.744 I llm_load_print_meta: causal attn      = 1
0.00.277.744 I llm_load_print_meta: pooling type     = 0
0.00.277.744 I llm_load_print_meta: rope type        = 2
0.00.277.745 I llm_load_print_meta: rope scaling     = linear
0.00.277.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.747 I llm_load_print_meta: freq_scale_train = 1
0.00.277.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.748 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.748 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.750 I llm_load_print_meta: model type       = 2B
0.00.277.751 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.752 I llm_load_print_meta: model params     = 2.51 B
0.00.277.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.753 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.753 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.754 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.754 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.754 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.755 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.756 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.756 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.757 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.757 I llm_load_print_meta: max token length = 93
0.00.373.288 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.375 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.381 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.382 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.382 I llama_new_context_with_model: n_batch       = 2048
0.00.378.383 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.383 I llama_new_context_with_model: flash_attn    = 0
0.00.378.385 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.386 I llama_new_context_with_model: freq_scale    = 1
0.00.378.387 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.406 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.393.075 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.088 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.181 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.377 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.383 I llama_new_context_with_model: graph nodes  = 601
0.00.394.383 I llama_new_context_with_model: graph splits = 1
0.00.394.386 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.386 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.475 I main: llama threadpool init, n_threads = 4
0.00.475.490 I 
0.00.475.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.571 I 
0.00.475.605 I sampler seed: 4286082579
0.00.475.615 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.627 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.631 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.631 I 
 increably, reaching a crescendo of triumph.

This is the narrative of a triumphant athlete's journey. It embodies the essence of perseverance, dedication, and

0.02.652.629 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6784.54 tokens per second)
0.02.652.631 I llama_perf_context_print:        load time =     475.10 ms
0.02.652.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.652.634 I llama_perf_context_print:        eval time =    2158.55 ms /    32 runs   (   67.45 ms per token,    14.82 tokens per second)
0.02.652.635 I llama_perf_context_print:       total time =    2177.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.856 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.879 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.880 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.888 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.889 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.890 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.890 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.898 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.977 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.763 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.679 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.685 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.687 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.688 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.691 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.691 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.692 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.693 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.696 I llama_model_loader: - type  f32:   37 tensors
0.00.131.697 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.037 I llm_load_vocab: special tokens cache size = 5
0.00.265.703 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.719 I llm_load_print_meta: arch             = gemma
0.00.265.720 I llm_load_print_meta: vocab type       = SPM
0.00.265.721 I llm_load_print_meta: n_vocab          = 256000
0.00.265.721 I llm_load_print_meta: n_merges         = 0
0.00.265.722 I llm_load_print_meta: vocab_only       = 0
0.00.265.722 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.722 I llm_load_print_meta: n_embd           = 2048
0.00.265.722 I llm_load_print_meta: n_layer          = 18
0.00.265.734 I llm_load_print_meta: n_head           = 8
0.00.265.736 I llm_load_print_meta: n_head_kv        = 1
0.00.265.736 I llm_load_print_meta: n_rot            = 256
0.00.265.736 I llm_load_print_meta: n_swa            = 0
0.00.265.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.738 I llm_load_print_meta: n_gqa            = 8
0.00.265.739 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.743 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.744 I llm_load_print_meta: n_ff             = 16384
0.00.265.744 I llm_load_print_meta: n_expert         = 0
0.00.265.745 I llm_load_print_meta: n_expert_used    = 0
0.00.265.745 I llm_load_print_meta: causal attn      = 1
0.00.265.745 I llm_load_print_meta: pooling type     = 0
0.00.265.745 I llm_load_print_meta: rope type        = 2
0.00.265.746 I llm_load_print_meta: rope scaling     = linear
0.00.265.747 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.748 I llm_load_print_meta: freq_scale_train = 1
0.00.265.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.748 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.751 I llm_load_print_meta: model type       = 2B
0.00.265.753 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.754 I llm_load_print_meta: model params     = 2.51 B
0.00.265.755 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.755 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.758 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.758 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.759 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.759 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.770 I llm_load_print_meta: max token length = 93
0.00.342.357 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.363 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.364 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.365 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.366 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.366 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.575 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.582 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.582 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.583 I llama_new_context_with_model: n_batch       = 2048
0.00.347.583 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.584 I llama_new_context_with_model: flash_attn    = 0
0.00.347.586 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.587 I llama_new_context_with_model: freq_scale    = 1
0.00.347.587 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.605 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.362.375 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.387 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.480 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.706 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.712 I llama_new_context_with_model: graph nodes  = 601
0.00.363.712 I llama_new_context_with_model: graph splits = 1
0.00.363.715 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.715 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.368 I main: llama threadpool init, n_threads = 4
0.00.462.383 I 
0.00.462.457 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.461 I 
0.00.462.496 I sampler seed: 2147674506
0.00.462.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.519 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.523 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.523 I 
 increasities, the pinnacle of the human condition.

This statement appears to be making a subjective and subjective claim about the nature of the human condition, implying that

0.02.737.645 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6747.09 tokens per second)
0.02.737.647 I llama_perf_context_print:        load time =     461.60 ms
0.02.737.649 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.650 I llama_perf_context_print:        eval time =    2255.88 ms /    32 runs   (   70.50 ms per token,    14.19 tokens per second)
0.02.737.651 I llama_perf_context_print:       total time =    2275.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.519 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.022.134 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.144 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.156 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.162 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.163 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.163 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.164 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.169 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.170 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.171 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.461 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.603 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.554 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.563 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.564 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.567 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.568 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.569 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.570 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.573 I llama_model_loader: - type  f32:   37 tensors
0.00.132.574 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.989 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.231 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.740 I llm_load_vocab: special tokens cache size = 5
0.00.270.681 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.699 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.700 I llm_load_print_meta: arch             = gemma
0.00.270.701 I llm_load_print_meta: vocab type       = SPM
0.00.270.701 I llm_load_print_meta: n_vocab          = 256000
0.00.270.702 I llm_load_print_meta: n_merges         = 0
0.00.270.702 I llm_load_print_meta: vocab_only       = 0
0.00.270.702 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.703 I llm_load_print_meta: n_embd           = 2048
0.00.270.703 I llm_load_print_meta: n_layer          = 18
0.00.270.715 I llm_load_print_meta: n_head           = 8
0.00.270.716 I llm_load_print_meta: n_head_kv        = 1
0.00.270.716 I llm_load_print_meta: n_rot            = 256
0.00.270.717 I llm_load_print_meta: n_swa            = 0
0.00.270.717 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.717 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.718 I llm_load_print_meta: n_gqa            = 8
0.00.270.719 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.720 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.721 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.723 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.723 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.724 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.724 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.725 I llm_load_print_meta: n_ff             = 16384
0.00.270.725 I llm_load_print_meta: n_expert         = 0
0.00.270.725 I llm_load_print_meta: n_expert_used    = 0
0.00.270.725 I llm_load_print_meta: causal attn      = 1
0.00.270.726 I llm_load_print_meta: pooling type     = 0
0.00.270.726 I llm_load_print_meta: rope type        = 2
0.00.270.726 I llm_load_print_meta: rope scaling     = linear
0.00.270.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.729 I llm_load_print_meta: freq_scale_train = 1
0.00.270.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.729 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.730 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.730 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.731 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.731 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.731 I llm_load_print_meta: model type       = 2B
0.00.270.733 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.734 I llm_load_print_meta: model params     = 2.51 B
0.00.270.735 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.735 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.735 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.736 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.736 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.736 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.737 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.737 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.738 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.738 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.738 I llm_load_print_meta: max token length = 93
0.00.342.682 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.689 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.907 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.913 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.913 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.914 I llama_new_context_with_model: n_batch       = 2048
0.00.347.914 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.915 I llama_new_context_with_model: flash_attn    = 0
0.00.347.916 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.918 I llama_new_context_with_model: freq_scale    = 1
0.00.347.919 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.938 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.362.166 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.183 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.280 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.702 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.708 I llama_new_context_with_model: graph nodes  = 601
0.00.363.708 I llama_new_context_with_model: graph splits = 1
0.00.363.711 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.712 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.284 I main: llama threadpool init, n_threads = 4
0.00.461.300 I 
0.00.461.378 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.381 I 
0.00.461.413 I sampler seed: 3392010009
0.00.461.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.436 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.440 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.440 I 
 maneuvred by a storm.

This is a descriptive paragraph.

Can you rewrite it as a narrative?

The howling wind whipped through the trees,

0.02.891.610 I llama_perf_sampler_print:    sampling time =       5.61 ms /    33 runs   (    0.17 ms per token,  5886.55 tokens per second)
0.02.891.612 I llama_perf_context_print:        load time =     460.54 ms
0.02.891.614 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.891.615 I llama_perf_context_print:        eval time =    2409.82 ms /    32 runs   (   75.31 ms per token,    13.28 tokens per second)
0.02.891.626 I llama_perf_context_print:       total time =    2430.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.434s
user	0m39.423s
sys	0m9.359s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4367 (8c5510c3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40246.02 ms
main:    total time = 40246.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.693 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.702 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.714 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.719 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.722 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.726 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.726 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.727 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.727 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.728 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.729 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.732 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.732 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.733 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.734 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.734 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.483 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.490 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.491 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.492 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.493 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.493 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.495 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.496 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.496 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.497 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.499 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.503 I llama_model_loader: - type  f32:   37 tensors
0.00.130.504 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.505 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.424 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.181 I llm_load_vocab: special tokens cache size = 5
0.00.271.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.980 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.981 I llm_load_print_meta: arch             = gemma
0.00.271.982 I llm_load_print_meta: vocab type       = SPM
0.00.271.982 I llm_load_print_meta: n_vocab          = 256000
0.00.271.983 I llm_load_print_meta: n_merges         = 0
0.00.271.983 I llm_load_print_meta: vocab_only       = 0
0.00.271.983 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.984 I llm_load_print_meta: n_embd           = 2048
0.00.271.984 I llm_load_print_meta: n_layer          = 18
0.00.271.995 I llm_load_print_meta: n_head           = 8
0.00.271.996 I llm_load_print_meta: n_head_kv        = 1
0.00.271.997 I llm_load_print_meta: n_rot            = 256
0.00.271.997 I llm_load_print_meta: n_swa            = 0
0.00.271.997 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.998 I llm_load_print_meta: n_gqa            = 8
0.00.271.999 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.000 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.001 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.002 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.003 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.003 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.004 I llm_load_print_meta: n_ff             = 16384
0.00.272.004 I llm_load_print_meta: n_expert         = 0
0.00.272.005 I llm_load_print_meta: n_expert_used    = 0
0.00.272.005 I llm_load_print_meta: causal attn      = 1
0.00.272.005 I llm_load_print_meta: pooling type     = 0
0.00.272.005 I llm_load_print_meta: rope type        = 2
0.00.272.006 I llm_load_print_meta: rope scaling     = linear
0.00.272.007 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.008 I llm_load_print_meta: freq_scale_train = 1
0.00.272.009 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.009 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.010 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.010 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.010 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.010 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.010 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.011 I llm_load_print_meta: model type       = 2B
0.00.272.013 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.014 I llm_load_print_meta: model params     = 2.51 B
0.00.272.014 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.014 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.015 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.015 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.016 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.016 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.016 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.017 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.017 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.018 I llm_load_print_meta: max token length = 93
0.00.332.454 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.461 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.462 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.462 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.463 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.463 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.832 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.838 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.839 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.839 I llama_new_context_with_model: n_batch       = 2048
0.00.338.839 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.840 I llama_new_context_with_model: flash_attn    = 0
0.00.338.842 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.843 I llama_new_context_with_model: freq_scale    = 1
0.00.338.844 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.861 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.353.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.264 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.353 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.654 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.661 I llama_new_context_with_model: graph nodes  = 601
0.00.354.661 I llama_new_context_with_model: graph splits = 1
0.00.354.663 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.664 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.568 I main: llama threadpool init, n_threads = 4
0.00.429.584 I 
0.00.429.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.661 I 
0.00.429.694 I sampler seed: 2654582097
0.00.429.705 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.715 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.719 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.719 I 
 fufilling with the sound of waves crashing. [end of text]


0.00.929.294 I llama_perf_sampler_print:    sampling time =       1.70 ms /    11 runs   (    0.15 ms per token,  6489.68 tokens per second)
0.00.929.296 I llama_perf_context_print:        load time =     428.83 ms
0.00.929.297 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.929.299 I llama_perf_context_print:        eval time =     492.63 ms /    10 runs   (   49.26 ms per token,    20.30 tokens per second)
0.00.929.300 I llama_perf_context_print:       total time =     499.73 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4367 (8c5510c3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40227.39 ms
main:    total time = 40227.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.531 I build: 4367 (8c5510c3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.655 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.671 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.678 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.685 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.688 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.689 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.689 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.690 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.690 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.694 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.694 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.695 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.395 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.401 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.402 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.402 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.403 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.404 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.405 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.408 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.408 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.413 I llama_model_loader: - type  f32:   37 tensors
0.00.132.414 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.415 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.370 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.857 I llm_load_vocab: special tokens cache size = 5
0.00.271.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.608 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.609 I llm_load_print_meta: arch             = gemma
0.00.271.609 I llm_load_print_meta: vocab type       = SPM
0.00.271.610 I llm_load_print_meta: n_vocab          = 256000
0.00.271.611 I llm_load_print_meta: n_merges         = 0
0.00.271.611 I llm_load_print_meta: vocab_only       = 0
0.00.271.611 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.612 I llm_load_print_meta: n_embd           = 2048
0.00.271.612 I llm_load_print_meta: n_layer          = 18
0.00.271.622 I llm_load_print_meta: n_head           = 8
0.00.271.623 I llm_load_print_meta: n_head_kv        = 1
0.00.271.624 I llm_load_print_meta: n_rot            = 256
0.00.271.624 I llm_load_print_meta: n_swa            = 0
0.00.271.624 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.625 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.626 I llm_load_print_meta: n_gqa            = 8
0.00.271.627 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.628 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.631 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.631 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.632 I llm_load_print_meta: n_ff             = 16384
0.00.271.633 I llm_load_print_meta: n_expert         = 0
0.00.271.633 I llm_load_print_meta: n_expert_used    = 0
0.00.271.633 I llm_load_print_meta: causal attn      = 1
0.00.271.633 I llm_load_print_meta: pooling type     = 0
0.00.271.634 I llm_load_print_meta: rope type        = 2
0.00.271.634 I llm_load_print_meta: rope scaling     = linear
0.00.271.636 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.636 I llm_load_print_meta: freq_scale_train = 1
0.00.271.637 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.637 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.638 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.638 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.638 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.638 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.639 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.639 I llm_load_print_meta: model type       = 2B
0.00.271.641 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.642 I llm_load_print_meta: model params     = 2.51 B
0.00.271.642 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.643 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.643 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.644 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.644 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.644 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.645 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.645 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.646 I llm_load_print_meta: max token length = 93
0.00.329.323 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.426 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.432 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.432 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.433 I llama_new_context_with_model: n_batch       = 2048
0.00.334.433 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.434 I llama_new_context_with_model: flash_attn    = 0
0.00.334.436 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.437 I llama_new_context_with_model: freq_scale    = 1
0.00.334.438 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.457 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.349.102 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.215 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.506 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.512 I llama_new_context_with_model: graph nodes  = 601
0.00.350.512 I llama_new_context_with_model: graph splits = 1
0.00.350.515 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.515 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.374 I main: llama threadpool init, n_threads = 4
0.00.424.389 I 
0.00.424.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.424.467 I 
0.00.424.501 I sampler seed: 2952848162
0.00.424.512 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.523 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.527 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.527 I 
 increasities in your area. I cannot provide personal or sensitive information. [end of text]


0.01.156.106 I llama_perf_sampler_print:    sampling time =       2.52 ms /    16 runs   (    0.16 ms per token,  6356.77 tokens per second)
0.01.156.108 I llama_perf_context_print:        load time =     423.63 ms
0.01.156.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.156.111 I llama_perf_context_print:        eval time =     721.90 ms /    15 runs   (   48.13 ms per token,    20.78 tokens per second)
0.01.156.112 I llama_perf_context_print:       total time =     731.74 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.373s
user	10m16.526s
sys	0m6.965s
