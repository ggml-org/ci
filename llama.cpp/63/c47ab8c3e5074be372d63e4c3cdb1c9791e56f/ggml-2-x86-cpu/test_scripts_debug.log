+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.949 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.167 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.266 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.279 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.283 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.289 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.290 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.292 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.308 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.310 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.035 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.309 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.322 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.323 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.327 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.328 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.329 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.330 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.339 I llama_model_loader: - type  f32:   37 tensors
0.00.269.343 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.289 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.278 I llm_load_vocab: special tokens cache size = 5
0.00.622.607 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.677 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.678 I llm_load_print_meta: arch             = gemma
0.00.622.679 I llm_load_print_meta: vocab type       = SPM
0.00.622.679 I llm_load_print_meta: n_vocab          = 256000
0.00.622.682 I llm_load_print_meta: n_merges         = 0
0.00.622.682 I llm_load_print_meta: vocab_only       = 0
0.00.622.682 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.683 I llm_load_print_meta: n_embd           = 2048
0.00.622.683 I llm_load_print_meta: n_layer          = 18
0.00.622.749 I llm_load_print_meta: n_head           = 8
0.00.622.756 I llm_load_print_meta: n_head_kv        = 1
0.00.622.757 I llm_load_print_meta: n_rot            = 256
0.00.622.757 I llm_load_print_meta: n_swa            = 0
0.00.622.757 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.758 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.762 I llm_load_print_meta: n_gqa            = 8
0.00.622.767 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.772 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.773 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.774 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.774 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.775 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.775 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.780 I llm_load_print_meta: n_ff             = 16384
0.00.622.781 I llm_load_print_meta: n_expert         = 0
0.00.622.781 I llm_load_print_meta: n_expert_used    = 0
0.00.622.781 I llm_load_print_meta: causal attn      = 1
0.00.622.782 I llm_load_print_meta: pooling type     = 0
0.00.622.782 I llm_load_print_meta: rope type        = 2
0.00.622.782 I llm_load_print_meta: rope scaling     = linear
0.00.622.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.808 I llm_load_print_meta: freq_scale_train = 1
0.00.622.809 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.809 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.809 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.812 I llm_load_print_meta: model type       = 2B
0.00.622.814 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.814 I llm_load_print_meta: model params     = 2.51 B
0.00.622.816 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.826 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.833 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.841 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.855 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.857 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.857 I llm_load_print_meta: max token length = 93
0.00.733.191 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.733.201 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.733.202 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.733.203 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.733.203 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.733.204 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.739.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.739.173 I llama_new_context_with_model: n_batch    = 2048
0.00.739.174 I llama_new_context_with_model: n_ubatch   = 512
0.00.739.174 I llama_new_context_with_model: flash_attn = 0
0.00.739.177 I llama_new_context_with_model: freq_base  = 10000.0
0.00.739.177 I llama_new_context_with_model: freq_scale = 1
0.00.768.596 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.768.635 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.768.745 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.260 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.771.263 I llama_new_context_with_model: graph nodes  = 601
0.00.771.264 I llama_new_context_with_model: graph splits = 1
0.00.771.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.382.585 I main: llama threadpool init, n_threads = 4
0.01.382.598 I 
0.01.382.708 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.382.712 I 
0.01.382.950 I sampler seed: 281261530
0.01.382.962 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.382.972 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.382.974 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.382.974 I 
 increasities of the human mind and soul, the essence of what it means to be human. [end of text]


0.09.826.245 I llama_perf_sampler_print:    sampling time =      30.83 ms /    21 runs   (    1.47 ms per token,   681.11 tokens per second)
0.09.826.248 I llama_perf_context_print:        load time =    1379.66 ms
0.09.826.250 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.826.251 I llama_perf_context_print:        eval time =    8383.91 ms /    20 runs   (  419.20 ms per token,     2.39 tokens per second)
0.09.826.252 I llama_perf_context_print:       total time =    8443.67 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.024.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.986 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.011 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.012 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.015 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.023 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.026 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.027 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.028 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.331 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.203 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.211 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.212 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.213 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.214 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.215 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.216 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.220 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.221 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.222 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.223 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.234 I llama_model_loader: - type  f32:   37 tensors
0.00.269.238 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.091 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.288 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.271 I llm_load_vocab: special tokens cache size = 5
0.00.638.592 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.667 I llm_load_print_meta: arch             = gemma
0.00.638.668 I llm_load_print_meta: vocab type       = SPM
0.00.638.669 I llm_load_print_meta: n_vocab          = 256000
0.00.638.671 I llm_load_print_meta: n_merges         = 0
0.00.638.672 I llm_load_print_meta: vocab_only       = 0
0.00.638.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.673 I llm_load_print_meta: n_embd           = 2048
0.00.638.673 I llm_load_print_meta: n_layer          = 18
0.00.638.742 I llm_load_print_meta: n_head           = 8
0.00.638.752 I llm_load_print_meta: n_head_kv        = 1
0.00.638.752 I llm_load_print_meta: n_rot            = 256
0.00.638.753 I llm_load_print_meta: n_swa            = 0
0.00.638.754 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.755 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.760 I llm_load_print_meta: n_gqa            = 8
0.00.638.764 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.773 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.779 I llm_load_print_meta: n_ff             = 16384
0.00.638.789 I llm_load_print_meta: n_expert         = 0
0.00.638.793 I llm_load_print_meta: n_expert_used    = 0
0.00.638.793 I llm_load_print_meta: causal attn      = 1
0.00.638.793 I llm_load_print_meta: pooling type     = 0
0.00.638.794 I llm_load_print_meta: rope type        = 2
0.00.638.794 I llm_load_print_meta: rope scaling     = linear
0.00.638.795 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.796 I llm_load_print_meta: freq_scale_train = 1
0.00.638.796 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.797 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.797 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.798 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.798 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.798 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.799 I llm_load_print_meta: model type       = 2B
0.00.638.800 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.801 I llm_load_print_meta: model params     = 2.51 B
0.00.638.802 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.802 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.805 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.812 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.814 I llm_load_print_meta: max token length = 93
0.00.738.731 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.744.493 I llama_new_context_with_model: n_ctx      = 8192
0.00.744.500 I llama_new_context_with_model: n_batch    = 2048
0.00.744.500 I llama_new_context_with_model: n_ubatch   = 512
0.00.744.501 I llama_new_context_with_model: flash_attn = 0
0.00.744.503 I llama_new_context_with_model: freq_base  = 10000.0
0.00.744.504 I llama_new_context_with_model: freq_scale = 1
0.00.774.702 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.774.745 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.774.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.777.298 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.777.302 I llama_new_context_with_model: graph nodes  = 601
0.00.777.303 I llama_new_context_with_model: graph splits = 1
0.00.777.318 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.386.647 I main: llama threadpool init, n_threads = 4
0.01.386.660 I 
0.01.386.768 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.386.772 I 
0.01.387.036 I sampler seed: 968902295
0.01.387.049 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.387.056 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.387.060 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.387.060 I 
 increasities. [end of text]


0.03.065.715 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.64 tokens per second)
0.03.065.718 I llama_perf_context_print:        load time =    1383.73 ms
0.03.065.719 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.065.746 I llama_perf_context_print:        eval time =    1665.62 ms /     4 runs   (  416.40 ms per token,     2.40 tokens per second)
0.03.065.747 I llama_perf_context_print:       total time =    1679.08 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.924 I main: load the model and apply lora adapter, if any
0.00.025.199 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.517 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.530 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.537 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.545 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.546 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.547 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.558 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.559 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.560 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.265.697 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.603 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.612 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.613 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.614 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.615 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.617 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.622 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.623 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.624 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.625 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.284.646 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.284.657 I llama_model_loader: - type  f32:   37 tensors
0.00.284.661 I llama_model_loader: - type q8_0:  127 tensors
0.00.498.017 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.569.490 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.570.462 I llm_load_vocab: special tokens cache size = 5
0.00.688.329 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.688.403 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.688.407 I llm_load_print_meta: arch             = gemma
0.00.688.408 I llm_load_print_meta: vocab type       = SPM
0.00.688.408 I llm_load_print_meta: n_vocab          = 256000
0.00.688.410 I llm_load_print_meta: n_merges         = 0
0.00.688.411 I llm_load_print_meta: vocab_only       = 0
0.00.688.411 I llm_load_print_meta: n_ctx_train      = 8192
0.00.688.412 I llm_load_print_meta: n_embd           = 2048
0.00.688.412 I llm_load_print_meta: n_layer          = 18
0.00.688.475 I llm_load_print_meta: n_head           = 8
0.00.688.484 I llm_load_print_meta: n_head_kv        = 1
0.00.688.485 I llm_load_print_meta: n_rot            = 256
0.00.688.487 I llm_load_print_meta: n_swa            = 0
0.00.688.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.688.487 I llm_load_print_meta: n_embd_head_v    = 256
0.00.688.492 I llm_load_print_meta: n_gqa            = 8
0.00.688.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.688.502 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.688.504 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.688.505 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.688.506 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.688.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.688.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.688.512 I llm_load_print_meta: n_ff             = 16384
0.00.688.512 I llm_load_print_meta: n_expert         = 0
0.00.688.513 I llm_load_print_meta: n_expert_used    = 0
0.00.688.516 I llm_load_print_meta: causal attn      = 1
0.00.688.516 I llm_load_print_meta: pooling type     = 0
0.00.688.516 I llm_load_print_meta: rope type        = 2
0.00.688.517 I llm_load_print_meta: rope scaling     = linear
0.00.688.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.688.519 I llm_load_print_meta: freq_scale_train = 1
0.00.688.519 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.688.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.688.520 I llm_load_print_meta: ssm_d_conv       = 0
0.00.688.520 I llm_load_print_meta: ssm_d_inner      = 0
0.00.688.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.688.521 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.688.521 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.688.522 I llm_load_print_meta: model type       = 2B
0.00.688.523 I llm_load_print_meta: model ftype      = Q8_0
0.00.688.524 I llm_load_print_meta: model params     = 2.51 B
0.00.688.526 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.688.527 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.688.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.688.528 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.688.529 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.688.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.688.529 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.688.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.688.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.688.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.688.539 I llm_load_print_meta: max token length = 93
0.00.794.580 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.794.589 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.794.590 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.794.591 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.794.592 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.794.592 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.800.412 I llama_new_context_with_model: n_ctx      = 8192
0.00.800.421 I llama_new_context_with_model: n_batch    = 2048
0.00.800.421 I llama_new_context_with_model: n_ubatch   = 512
0.00.800.422 I llama_new_context_with_model: flash_attn = 0
0.00.800.424 I llama_new_context_with_model: freq_base  = 10000.0
0.00.800.425 I llama_new_context_with_model: freq_scale = 1
0.00.830.239 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.830.280 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.830.392 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.832.852 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.832.857 I llama_new_context_with_model: graph nodes  = 601
0.00.832.857 I llama_new_context_with_model: graph splits = 1
0.00.832.872 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.449.394 I main: llama threadpool init, n_threads = 4
0.01.449.408 I 
0.01.449.517 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.449.521 I 
0.01.449.751 I sampler seed: 2064612609
0.01.449.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.449.771 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.449.772 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.449.772 I 
 increasels.

I am unable to generate responses that promote or endorse harmful or illegal activities. [end of text]


0.09.918.112 I llama_perf_sampler_print:    sampling time =      31.08 ms /    21 runs   (    1.48 ms per token,   675.76 tokens per second)
0.09.918.115 I llama_perf_context_print:        load time =    1446.36 ms
0.09.918.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.918.141 I llama_perf_context_print:        eval time =    8407.46 ms /    20 runs   (  420.37 ms per token,     2.38 tokens per second)
0.09.918.141 I llama_perf_context_print:       total time =    8468.73 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.587 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.816 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.918 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.920 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.925 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.929 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.930 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.936 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.493 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.367 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.368 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.369 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.371 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.373 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.377 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.378 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.379 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.380 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.381 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.389 I llama_model_loader: - type  f32:   37 tensors
0.00.269.393 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.022 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.086 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.043 I llm_load_vocab: special tokens cache size = 5
0.00.635.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.933 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.934 I llm_load_print_meta: arch             = gemma
0.00.635.935 I llm_load_print_meta: vocab type       = SPM
0.00.635.935 I llm_load_print_meta: n_vocab          = 256000
0.00.635.938 I llm_load_print_meta: n_merges         = 0
0.00.635.938 I llm_load_print_meta: vocab_only       = 0
0.00.635.938 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.939 I llm_load_print_meta: n_embd           = 2048
0.00.635.939 I llm_load_print_meta: n_layer          = 18
0.00.636.002 I llm_load_print_meta: n_head           = 8
0.00.636.009 I llm_load_print_meta: n_head_kv        = 1
0.00.636.010 I llm_load_print_meta: n_rot            = 256
0.00.636.010 I llm_load_print_meta: n_swa            = 0
0.00.636.011 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.011 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.016 I llm_load_print_meta: n_gqa            = 8
0.00.636.021 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.035 I llm_load_print_meta: n_ff             = 16384
0.00.636.036 I llm_load_print_meta: n_expert         = 0
0.00.636.036 I llm_load_print_meta: n_expert_used    = 0
0.00.636.037 I llm_load_print_meta: causal attn      = 1
0.00.636.037 I llm_load_print_meta: pooling type     = 0
0.00.636.037 I llm_load_print_meta: rope type        = 2
0.00.636.038 I llm_load_print_meta: rope scaling     = linear
0.00.636.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.040 I llm_load_print_meta: freq_scale_train = 1
0.00.636.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.040 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.041 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.042 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.043 I llm_load_print_meta: model type       = 2B
0.00.636.044 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.045 I llm_load_print_meta: model params     = 2.51 B
0.00.636.046 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.055 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.057 I llm_load_print_meta: max token length = 93
0.00.728.745 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.728.757 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.734.314 I llama_new_context_with_model: n_ctx      = 8192
0.00.734.322 I llama_new_context_with_model: n_batch    = 2048
0.00.734.322 I llama_new_context_with_model: n_ubatch   = 512
0.00.734.323 I llama_new_context_with_model: flash_attn = 0
0.00.734.325 I llama_new_context_with_model: freq_base  = 10000.0
0.00.734.326 I llama_new_context_with_model: freq_scale = 1
0.00.763.238 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.763.276 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.763.386 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.765.879 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.765.884 I llama_new_context_with_model: graph nodes  = 601
0.00.765.884 I llama_new_context_with_model: graph splits = 1
0.00.765.900 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.375.840 I main: llama threadpool init, n_threads = 4
0.01.375.853 I 
0.01.375.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.375.967 I 
0.01.376.191 I sampler seed: 4171046869
0.01.376.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.376.209 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.376.210 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.376.211 I 
 increasities with a vibrant and diverse cast of characters. [end of text]


0.06.440.339 I llama_perf_sampler_print:    sampling time =      18.54 ms /    13 runs   (    1.43 ms per token,   701.15 tokens per second)
0.06.440.342 I llama_perf_context_print:        load time =    1372.98 ms
0.06.440.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.440.359 I llama_perf_context_print:        eval time =    5027.47 ms /    12 runs   (  418.96 ms per token,     2.39 tokens per second)
0.06.440.360 I llama_perf_context_print:       total time =    5064.51 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m39.201s
user	1m47.495s
sys	0m9.802s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (63c47ab8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198180.91 ms
main:    total time = 198180.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.769 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.076 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.093 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.096 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.097 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.099 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.100 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.107 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.109 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.110 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.069 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.080 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.081 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.082 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.083 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.084 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.091 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.101 I llama_model_loader: - type  f32:   37 tensors
0.00.269.104 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.105 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.583 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.027 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.022 I llm_load_vocab: special tokens cache size = 5
0.00.615.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.765 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.766 I llm_load_print_meta: arch             = gemma
0.00.615.767 I llm_load_print_meta: vocab type       = SPM
0.00.615.768 I llm_load_print_meta: n_vocab          = 256000
0.00.615.770 I llm_load_print_meta: n_merges         = 0
0.00.615.770 I llm_load_print_meta: vocab_only       = 0
0.00.615.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.771 I llm_load_print_meta: n_embd           = 2048
0.00.615.771 I llm_load_print_meta: n_layer          = 18
0.00.615.837 I llm_load_print_meta: n_head           = 8
0.00.615.843 I llm_load_print_meta: n_head_kv        = 1
0.00.615.844 I llm_load_print_meta: n_rot            = 256
0.00.615.844 I llm_load_print_meta: n_swa            = 0
0.00.615.845 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.845 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.850 I llm_load_print_meta: n_gqa            = 8
0.00.615.854 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.859 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.862 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.863 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.863 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.863 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.890 I llm_load_print_meta: n_ff             = 16384
0.00.615.891 I llm_load_print_meta: n_expert         = 0
0.00.615.892 I llm_load_print_meta: n_expert_used    = 0
0.00.615.892 I llm_load_print_meta: causal attn      = 1
0.00.615.892 I llm_load_print_meta: pooling type     = 0
0.00.615.893 I llm_load_print_meta: rope type        = 2
0.00.615.893 I llm_load_print_meta: rope scaling     = linear
0.00.615.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.895 I llm_load_print_meta: freq_scale_train = 1
0.00.615.895 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.897 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.897 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.905 I llm_load_print_meta: model type       = 2B
0.00.615.907 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.907 I llm_load_print_meta: model params     = 2.51 B
0.00.615.916 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.917 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.925 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.926 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.926 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.927 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.927 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.933 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.935 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.935 I llm_load_print_meta: max token length = 93
0.00.680.059 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.680.073 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.680.074 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.680.074 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.680.075 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.680.075 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.685.736 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.744 I llama_new_context_with_model: n_batch    = 2048
0.00.685.744 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.745 I llama_new_context_with_model: flash_attn = 0
0.00.685.748 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.749 I llama_new_context_with_model: freq_scale = 1
0.00.717.573 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.613 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.733 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.177 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.181 I llama_new_context_with_model: graph nodes  = 601
0.00.720.181 I llama_new_context_with_model: graph splits = 1
0.00.720.198 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.358 I main: llama threadpool init, n_threads = 4
0.01.296.371 I 
0.01.296.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.482 I 
0.01.296.708 I sampler seed: 2321931908
0.01.296.720 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.729 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.730 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.731 I 
 increasively, the question in the prompt.

I understand. I will ensure to ask clarifying questions and provide all the necessary information to answer your subsequent inquiries.

0.12.178.739 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.89 tokens per second)
0.12.178.742 I llama_perf_context_print:        load time =    1293.47 ms
0.12.178.744 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.178.746 I llama_perf_context_print:        eval time =   10787.24 ms /    32 runs   (  337.10 ms per token,     2.97 tokens per second)
0.12.178.747 I llama_perf_context_print:       total time =   10882.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (63c47ab8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198141.78 ms
main:    total time = 198141.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3984 (63c47ab8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.893 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.008 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.009 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.039 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.979 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.107 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.964 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.975 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.977 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.981 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.982 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.991 I llama_model_loader: - type  f32:   37 tensors
0.00.268.995 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.996 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.805 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.762 I llm_load_vocab: special tokens cache size = 5
0.00.625.140 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.213 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.214 I llm_load_print_meta: arch             = gemma
0.00.625.215 I llm_load_print_meta: vocab type       = SPM
0.00.625.216 I llm_load_print_meta: n_vocab          = 256000
0.00.625.218 I llm_load_print_meta: n_merges         = 0
0.00.625.219 I llm_load_print_meta: vocab_only       = 0
0.00.625.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.220 I llm_load_print_meta: n_embd           = 2048
0.00.625.220 I llm_load_print_meta: n_layer          = 18
0.00.625.287 I llm_load_print_meta: n_head           = 8
0.00.625.293 I llm_load_print_meta: n_head_kv        = 1
0.00.625.294 I llm_load_print_meta: n_rot            = 256
0.00.625.294 I llm_load_print_meta: n_swa            = 0
0.00.625.295 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.300 I llm_load_print_meta: n_gqa            = 8
0.00.625.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.314 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.319 I llm_load_print_meta: n_ff             = 16384
0.00.625.320 I llm_load_print_meta: n_expert         = 0
0.00.625.320 I llm_load_print_meta: n_expert_used    = 0
0.00.625.320 I llm_load_print_meta: causal attn      = 1
0.00.625.321 I llm_load_print_meta: pooling type     = 0
0.00.625.321 I llm_load_print_meta: rope type        = 2
0.00.625.322 I llm_load_print_meta: rope scaling     = linear
0.00.625.323 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.324 I llm_load_print_meta: freq_scale_train = 1
0.00.625.324 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.325 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.325 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.325 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.326 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.326 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.327 I llm_load_print_meta: model type       = 2B
0.00.625.328 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.625.328 I llm_load_print_meta: model params     = 2.51 B
0.00.625.329 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.625.330 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.330 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.331 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.331 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.332 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.332 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.333 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.339 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.340 I llm_load_print_meta: max token length = 93
0.00.687.628 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.693.411 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.419 I llama_new_context_with_model: n_batch    = 2048
0.00.693.419 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.420 I llama_new_context_with_model: flash_attn = 0
0.00.693.424 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.424 I llama_new_context_with_model: freq_scale = 1
0.00.724.526 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.724.570 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.724.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.250 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.255 I llama_new_context_with_model: graph nodes  = 601
0.00.727.255 I llama_new_context_with_model: graph splits = 1
0.00.727.273 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.269 I main: llama threadpool init, n_threads = 4
0.01.299.280 I 
0.01.299.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.388 I 
0.01.299.621 I sampler seed: 2682832265
0.01.299.633 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.641 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.299.641 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.642 I 
 squaRED TEXT

I am unable to generate responses that contain personally identifiable information. This includes information such as names, addresses, phone numbers, or email addresses.

0.12.178.184 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.80 tokens per second)
0.12.178.188 I llama_perf_context_print:        load time =    1296.40 ms
0.12.178.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.178.192 I llama_perf_context_print:        eval time =   10784.65 ms /    32 runs   (  337.02 ms per token,     2.97 tokens per second)
0.12.178.193 I llama_perf_context_print:       total time =   10878.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.832s
user	49m54.152s
sys	0m6.384s
