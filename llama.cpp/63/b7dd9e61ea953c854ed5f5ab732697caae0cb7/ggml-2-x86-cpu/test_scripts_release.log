+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.752 I main: load the model and apply lora adapter, if any
0.00.021.222 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.232 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.244 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.253 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.272 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.379 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.533 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.534 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.534 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.535 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.536 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.537 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.540 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.541 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.543 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.548 I llama_model_loader: - type  f32:   37 tensors
0.00.133.549 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.355 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.246 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.834 I llm_load_vocab: special tokens cache size = 5
0.00.294.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.325 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.325 I llm_load_print_meta: arch             = gemma
0.00.294.326 I llm_load_print_meta: vocab type       = SPM
0.00.294.327 I llm_load_print_meta: n_vocab          = 256000
0.00.294.327 I llm_load_print_meta: n_merges         = 0
0.00.294.327 I llm_load_print_meta: vocab_only       = 0
0.00.294.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.328 I llm_load_print_meta: n_embd           = 2048
0.00.294.328 I llm_load_print_meta: n_layer          = 18
0.00.294.340 I llm_load_print_meta: n_head           = 8
0.00.294.341 I llm_load_print_meta: n_head_kv        = 1
0.00.294.342 I llm_load_print_meta: n_rot            = 256
0.00.294.342 I llm_load_print_meta: n_swa            = 0
0.00.294.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.343 I llm_load_print_meta: n_gqa            = 8
0.00.294.345 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.346 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.348 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.348 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.349 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.349 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.350 I llm_load_print_meta: n_ff             = 16384
0.00.294.350 I llm_load_print_meta: n_expert         = 0
0.00.294.351 I llm_load_print_meta: n_expert_used    = 0
0.00.294.351 I llm_load_print_meta: causal attn      = 1
0.00.294.351 I llm_load_print_meta: pooling type     = 0
0.00.294.352 I llm_load_print_meta: rope type        = 2
0.00.294.352 I llm_load_print_meta: rope scaling     = linear
0.00.294.353 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.354 I llm_load_print_meta: freq_scale_train = 1
0.00.294.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.354 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.355 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.356 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.357 I llm_load_print_meta: model type       = 2B
0.00.294.357 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.358 I llm_load_print_meta: model params     = 2.51 B
0.00.294.359 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.359 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.360 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.360 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.360 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.361 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.362 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.362 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.363 I llm_load_print_meta: max token length = 93
0.00.394.729 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.394.737 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.394.738 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.394.739 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.394.739 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.394.740 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.399.829 I llama_new_context_with_model: n_seq_max     = 1
0.00.399.835 I llama_new_context_with_model: n_ctx         = 4096
0.00.399.836 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.399.836 I llama_new_context_with_model: n_batch       = 2048
0.00.399.837 I llama_new_context_with_model: n_ubatch      = 512
0.00.399.837 I llama_new_context_with_model: flash_attn    = 0
0.00.399.840 I llama_new_context_with_model: freq_base     = 10000.0
0.00.399.841 I llama_new_context_with_model: freq_scale    = 1
0.00.399.842 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.862 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.414.619 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.414.632 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.414.721 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.415.983 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.415.988 I llama_new_context_with_model: graph nodes  = 601
0.00.415.989 I llama_new_context_with_model: graph splits = 1
0.00.415.991 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.415.991 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.914 I main: llama threadpool init, n_threads = 4
0.00.502.930 I 
0.00.503.004 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.503.007 I 
0.00.503.048 I sampler seed: 1916874180
0.00.503.059 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.071 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.074 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.075 I 
 increably. [end of text]


0.00.787.911 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8361.20 tokens per second)
0.00.787.915 I llama_perf_context_print:        load time =     502.15 ms
0.00.787.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.787.918 I llama_perf_context_print:        eval time =     281.82 ms /     4 runs   (   70.45 ms per token,    14.19 tokens per second)
0.00.787.919 I llama_perf_context_print:       total time =     285.01 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.020.769 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.802 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.803 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.804 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.805 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.805 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.810 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.811 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.811 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.812 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.025 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.027 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.031 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.031 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.032 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.032 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.039 I llama_model_loader: - type  f32:   37 tensors
0.00.132.040 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.732 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.193 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.800 I llm_load_vocab: special tokens cache size = 5
0.00.294.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.068 I llm_load_print_meta: arch             = gemma
0.00.294.069 I llm_load_print_meta: vocab type       = SPM
0.00.294.069 I llm_load_print_meta: n_vocab          = 256000
0.00.294.070 I llm_load_print_meta: n_merges         = 0
0.00.294.070 I llm_load_print_meta: vocab_only       = 0
0.00.294.071 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.071 I llm_load_print_meta: n_embd           = 2048
0.00.294.071 I llm_load_print_meta: n_layer          = 18
0.00.294.082 I llm_load_print_meta: n_head           = 8
0.00.294.084 I llm_load_print_meta: n_head_kv        = 1
0.00.294.084 I llm_load_print_meta: n_rot            = 256
0.00.294.084 I llm_load_print_meta: n_swa            = 0
0.00.294.085 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.085 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.086 I llm_load_print_meta: n_gqa            = 8
0.00.294.087 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.088 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.089 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.091 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.092 I llm_load_print_meta: n_ff             = 16384
0.00.294.093 I llm_load_print_meta: n_expert         = 0
0.00.294.093 I llm_load_print_meta: n_expert_used    = 0
0.00.294.093 I llm_load_print_meta: causal attn      = 1
0.00.294.094 I llm_load_print_meta: pooling type     = 0
0.00.294.094 I llm_load_print_meta: rope type        = 2
0.00.294.095 I llm_load_print_meta: rope scaling     = linear
0.00.294.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.097 I llm_load_print_meta: freq_scale_train = 1
0.00.294.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.097 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.097 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.098 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.098 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.099 I llm_load_print_meta: model type       = 2B
0.00.294.099 I llm_load_print_meta: model ftype      = Q8_0
0.00.294.101 I llm_load_print_meta: model params     = 2.51 B
0.00.294.101 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.294.102 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.102 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.103 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.103 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.103 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.103 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.104 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.105 I llm_load_print_meta: max token length = 93
0.00.390.606 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.395.714 I llama_new_context_with_model: n_seq_max     = 1
0.00.395.719 I llama_new_context_with_model: n_ctx         = 4096
0.00.395.720 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.395.720 I llama_new_context_with_model: n_batch       = 2048
0.00.395.721 I llama_new_context_with_model: n_ubatch      = 512
0.00.395.721 I llama_new_context_with_model: flash_attn    = 0
0.00.395.724 I llama_new_context_with_model: freq_base     = 10000.0
0.00.395.725 I llama_new_context_with_model: freq_scale    = 1
0.00.395.726 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.744 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.410.224 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.410.238 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.410.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.411.568 I llama_new_context_with_model: graph nodes  = 601
0.00.411.569 I llama_new_context_with_model: graph splits = 1
0.00.411.571 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.411.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.908 I main: llama threadpool init, n_threads = 4
0.00.492.923 I 
0.00.492.997 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.493.001 I 
0.00.493.041 I sampler seed: 879920383
0.00.493.052 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.065 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.068 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.068 I 
 increably, the vibrant tapestry of life unfolding before her. Tiny creatures flitted past, their laughter echoing through the air. The sun warmed her skin, and

0.02.685.582 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6772.01 tokens per second)
0.02.685.585 I llama_perf_context_print:        load time =     492.16 ms
0.02.685.586 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.685.587 I llama_perf_context_print:        eval time =    2173.27 ms /    32 runs   (   67.91 ms per token,    14.72 tokens per second)
0.02.685.588 I llama_perf_context_print:       total time =    2192.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.170 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.456 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.466 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.474 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.485 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.501 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.502 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.889 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.163 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.028 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.037 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.044 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.045 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.046 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.050 I llama_model_loader: - type  f32:   37 tensors
0.00.133.051 I llama_model_loader: - type q8_0:  127 tensors
0.00.233.010 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.285.745 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.286.377 I llm_load_vocab: special tokens cache size = 5
0.00.307.590 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.307.608 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.307.609 I llm_load_print_meta: arch             = gemma
0.00.307.609 I llm_load_print_meta: vocab type       = SPM
0.00.307.610 I llm_load_print_meta: n_vocab          = 256000
0.00.307.610 I llm_load_print_meta: n_merges         = 0
0.00.307.611 I llm_load_print_meta: vocab_only       = 0
0.00.307.611 I llm_load_print_meta: n_ctx_train      = 8192
0.00.307.611 I llm_load_print_meta: n_embd           = 2048
0.00.307.612 I llm_load_print_meta: n_layer          = 18
0.00.307.623 I llm_load_print_meta: n_head           = 8
0.00.307.624 I llm_load_print_meta: n_head_kv        = 1
0.00.307.624 I llm_load_print_meta: n_rot            = 256
0.00.307.625 I llm_load_print_meta: n_swa            = 0
0.00.307.625 I llm_load_print_meta: n_embd_head_k    = 256
0.00.307.625 I llm_load_print_meta: n_embd_head_v    = 256
0.00.307.626 I llm_load_print_meta: n_gqa            = 8
0.00.307.627 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.307.628 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.307.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.307.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.307.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.307.631 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.307.631 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.307.632 I llm_load_print_meta: n_ff             = 16384
0.00.307.633 I llm_load_print_meta: n_expert         = 0
0.00.307.633 I llm_load_print_meta: n_expert_used    = 0
0.00.307.633 I llm_load_print_meta: causal attn      = 1
0.00.307.633 I llm_load_print_meta: pooling type     = 0
0.00.307.634 I llm_load_print_meta: rope type        = 2
0.00.307.634 I llm_load_print_meta: rope scaling     = linear
0.00.307.635 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.307.636 I llm_load_print_meta: freq_scale_train = 1
0.00.307.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.307.636 I llm_load_print_meta: rope_finetuned   = unknown
0.00.307.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.307.637 I llm_load_print_meta: ssm_d_inner      = 0
0.00.307.637 I llm_load_print_meta: ssm_d_state      = 0
0.00.307.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.307.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.307.638 I llm_load_print_meta: model type       = 2B
0.00.307.639 I llm_load_print_meta: model ftype      = Q8_0
0.00.307.639 I llm_load_print_meta: model params     = 2.51 B
0.00.307.640 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.307.640 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.307.641 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.307.641 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.307.642 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.307.642 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.307.642 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.307.642 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.307.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.307.643 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.307.644 I llm_load_print_meta: max token length = 93
0.00.385.213 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.385.222 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.385.223 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.385.223 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.385.224 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.385.224 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.390.239 I llama_new_context_with_model: n_seq_max     = 1
0.00.390.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.390.245 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.390.245 I llama_new_context_with_model: n_batch       = 2048
0.00.390.246 I llama_new_context_with_model: n_ubatch      = 512
0.00.390.246 I llama_new_context_with_model: flash_attn    = 0
0.00.390.249 I llama_new_context_with_model: freq_base     = 10000.0
0.00.390.250 I llama_new_context_with_model: freq_scale    = 1
0.00.390.251 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.270 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.404.404 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.416 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.723 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.729 I llama_new_context_with_model: graph nodes  = 601
0.00.405.729 I llama_new_context_with_model: graph splits = 1
0.00.405.732 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.732 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.995 I main: llama threadpool init, n_threads = 4
0.00.490.011 I 
0.00.490.087 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.490.090 I 
0.00.490.138 I sampler seed: 2485692698
0.00.490.148 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.161 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.490.164 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.164 I 
 increasements in the context of the text:

* **Increase:** Indicates an expansion or growth in something.
* **Decline:** Indicates a decrease or reduction

0.02.796.122 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6533.36 tokens per second)
0.02.796.124 I llama_perf_context_print:        load time =     489.61 ms
0.02.796.125 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.796.127 I llama_perf_context_print:        eval time =    2287.09 ms /    32 runs   (   71.47 ms per token,    13.99 tokens per second)
0.02.796.128 I llama_perf_context_print:       total time =    2306.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.543 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.210 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.231 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.238 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.243 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.250 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.251 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.252 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.259 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.259 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.260 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.146 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.859 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.862 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.863 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.865 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.866 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.866 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.867 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.869 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.874 I llama_model_loader: - type  f32:   37 tensors
0.00.133.875 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.508 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.275.566 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.276.202 I llm_load_vocab: special tokens cache size = 5
0.00.297.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.297.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.297.539 I llm_load_print_meta: arch             = gemma
0.00.297.540 I llm_load_print_meta: vocab type       = SPM
0.00.297.540 I llm_load_print_meta: n_vocab          = 256000
0.00.297.541 I llm_load_print_meta: n_merges         = 0
0.00.297.541 I llm_load_print_meta: vocab_only       = 0
0.00.297.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.297.542 I llm_load_print_meta: n_embd           = 2048
0.00.297.542 I llm_load_print_meta: n_layer          = 18
0.00.297.554 I llm_load_print_meta: n_head           = 8
0.00.297.555 I llm_load_print_meta: n_head_kv        = 1
0.00.297.556 I llm_load_print_meta: n_rot            = 256
0.00.297.556 I llm_load_print_meta: n_swa            = 0
0.00.297.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.297.557 I llm_load_print_meta: n_embd_head_v    = 256
0.00.297.557 I llm_load_print_meta: n_gqa            = 8
0.00.297.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.297.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.297.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.297.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.297.561 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.297.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.297.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.297.563 I llm_load_print_meta: n_ff             = 16384
0.00.297.564 I llm_load_print_meta: n_expert         = 0
0.00.297.564 I llm_load_print_meta: n_expert_used    = 0
0.00.297.564 I llm_load_print_meta: causal attn      = 1
0.00.297.564 I llm_load_print_meta: pooling type     = 0
0.00.297.565 I llm_load_print_meta: rope type        = 2
0.00.297.565 I llm_load_print_meta: rope scaling     = linear
0.00.297.567 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.297.567 I llm_load_print_meta: freq_scale_train = 1
0.00.297.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.297.568 I llm_load_print_meta: rope_finetuned   = unknown
0.00.297.568 I llm_load_print_meta: ssm_d_conv       = 0
0.00.297.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.297.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.297.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.297.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.297.570 I llm_load_print_meta: model type       = 2B
0.00.297.570 I llm_load_print_meta: model ftype      = Q8_0
0.00.297.571 I llm_load_print_meta: model params     = 2.51 B
0.00.297.572 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.297.572 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.297.573 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.297.573 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.297.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.297.574 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.297.574 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.297.574 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.297.575 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.297.575 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.297.575 I llm_load_print_meta: max token length = 93
0.00.368.915 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.368.923 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.374.078 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.085 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.085 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.085 I llama_new_context_with_model: n_batch       = 2048
0.00.374.086 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.086 I llama_new_context_with_model: flash_attn    = 0
0.00.374.089 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.090 I llama_new_context_with_model: freq_scale    = 1
0.00.374.091 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.114 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.388.679 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.693 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.021 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.027 I llama_new_context_with_model: graph nodes  = 601
0.00.390.028 I llama_new_context_with_model: graph splits = 1
0.00.390.031 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.031 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.203 I main: llama threadpool init, n_threads = 4
0.00.480.220 I 
0.00.480.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.317 I 
0.00.480.364 I sampler seed: 426474659
0.00.480.377 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.381 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.382 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.383 I 
 seconormal, but I'm not sure how to interpret it.

The given text does not provide any context or explanation about the meaning of the term "

0.02.952.978 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6233.47 tokens per second)
0.02.952.981 I llama_perf_context_print:        load time =     479.43 ms
0.02.952.982 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.952.983 I llama_perf_context_print:        eval time =    2452.49 ms /    32 runs   (   76.64 ms per token,    13.05 tokens per second)
0.02.952.984 I llama_perf_context_print:       total time =    2472.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.269s
user	0m32.050s
sys	0m9.438s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4362 (63b7dd9e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40292.20 ms
main:    total time = 40292.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.606 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.811 I main: llama backend init
0.00.000.818 I main: load the model and apply lora adapter, if any
0.00.020.984 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.995 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.014 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.021 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.022 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.023 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.028 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.029 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.613 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.425 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.287 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.295 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.295 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.297 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.298 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.301 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.301 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.302 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.303 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.304 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.308 I llama_model_loader: - type  f32:   37 tensors
0.00.133.310 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.310 I llama_model_loader: - type q6_K:   19 tensors
0.00.224.702 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.030 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.711 I llm_load_vocab: special tokens cache size = 5
0.00.298.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.299.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.299.006 I llm_load_print_meta: arch             = gemma
0.00.299.006 I llm_load_print_meta: vocab type       = SPM
0.00.299.007 I llm_load_print_meta: n_vocab          = 256000
0.00.299.008 I llm_load_print_meta: n_merges         = 0
0.00.299.008 I llm_load_print_meta: vocab_only       = 0
0.00.299.008 I llm_load_print_meta: n_ctx_train      = 8192
0.00.299.008 I llm_load_print_meta: n_embd           = 2048
0.00.299.009 I llm_load_print_meta: n_layer          = 18
0.00.299.020 I llm_load_print_meta: n_head           = 8
0.00.299.021 I llm_load_print_meta: n_head_kv        = 1
0.00.299.021 I llm_load_print_meta: n_rot            = 256
0.00.299.022 I llm_load_print_meta: n_swa            = 0
0.00.299.022 I llm_load_print_meta: n_embd_head_k    = 256
0.00.299.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.299.023 I llm_load_print_meta: n_gqa            = 8
0.00.299.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.299.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.299.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.299.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.299.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.299.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.299.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.299.029 I llm_load_print_meta: n_ff             = 16384
0.00.299.029 I llm_load_print_meta: n_expert         = 0
0.00.299.030 I llm_load_print_meta: n_expert_used    = 0
0.00.299.030 I llm_load_print_meta: causal attn      = 1
0.00.299.030 I llm_load_print_meta: pooling type     = 0
0.00.299.030 I llm_load_print_meta: rope type        = 2
0.00.299.031 I llm_load_print_meta: rope scaling     = linear
0.00.299.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.299.033 I llm_load_print_meta: freq_scale_train = 1
0.00.299.033 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.299.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.299.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.299.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.299.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.299.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.299.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.299.036 I llm_load_print_meta: model type       = 2B
0.00.299.037 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.299.038 I llm_load_print_meta: model params     = 2.51 B
0.00.299.039 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.299.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.299.040 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.299.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.299.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.299.041 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.299.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.299.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.299.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.299.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.299.044 I llm_load_print_meta: max token length = 93
0.00.357.618 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.357.626 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.357.627 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.357.628 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.357.628 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.357.629 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.362.864 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.870 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.871 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.871 I llama_new_context_with_model: n_batch       = 2048
0.00.362.872 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.873 I llama_new_context_with_model: flash_attn    = 0
0.00.362.876 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.877 I llama_new_context_with_model: freq_scale    = 1
0.00.362.878 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.898 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.378.462 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.475 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.567 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.819 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.825 I llama_new_context_with_model: graph nodes  = 601
0.00.379.825 I llama_new_context_with_model: graph splits = 1
0.00.379.827 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.379.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.101 I main: llama threadpool init, n_threads = 4
0.00.457.121 I 
0.00.457.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.457.202 I 
0.00.457.249 I sampler seed: 4128863256
0.00.457.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.265 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.265 I 
 fufing the roles of a storyteller, a historian, and an anthropologist.

**The Story of the Ancient Forest**

The ancient forest whispered secrets to those

0.02.124.292 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6390.40 tokens per second)
0.02.124.295 I llama_perf_context_print:        load time =     456.26 ms
0.02.124.296 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.124.297 I llama_perf_context_print:        eval time =    1647.53 ms /    32 runs   (   51.49 ms per token,    19.42 tokens per second)
0.02.124.298 I llama_perf_context_print:       total time =    1667.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4362 (63b7dd9e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40421.86 ms
main:    total time = 40421.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4362 (63b7dd9e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.020.954 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.970 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.985 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.992 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.996 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.552 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.553 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.554 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.558 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.559 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.563 I llama_model_loader: - type  f32:   37 tensors
0.00.131.564 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.565 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.395 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.903 I llm_load_vocab: special tokens cache size = 5
0.00.269.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.924 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.924 I llm_load_print_meta: arch             = gemma
0.00.269.925 I llm_load_print_meta: vocab type       = SPM
0.00.269.925 I llm_load_print_meta: n_vocab          = 256000
0.00.269.926 I llm_load_print_meta: n_merges         = 0
0.00.269.926 I llm_load_print_meta: vocab_only       = 0
0.00.269.926 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.927 I llm_load_print_meta: n_embd           = 2048
0.00.269.927 I llm_load_print_meta: n_layer          = 18
0.00.269.938 I llm_load_print_meta: n_head           = 8
0.00.269.939 I llm_load_print_meta: n_head_kv        = 1
0.00.269.939 I llm_load_print_meta: n_rot            = 256
0.00.269.940 I llm_load_print_meta: n_swa            = 0
0.00.269.940 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.940 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.941 I llm_load_print_meta: n_gqa            = 8
0.00.269.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.943 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.944 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.945 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.945 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.946 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.947 I llm_load_print_meta: n_ff             = 16384
0.00.269.947 I llm_load_print_meta: n_expert         = 0
0.00.269.947 I llm_load_print_meta: n_expert_used    = 0
0.00.269.948 I llm_load_print_meta: causal attn      = 1
0.00.269.948 I llm_load_print_meta: pooling type     = 0
0.00.269.948 I llm_load_print_meta: rope type        = 2
0.00.269.949 I llm_load_print_meta: rope scaling     = linear
0.00.269.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.950 I llm_load_print_meta: freq_scale_train = 1
0.00.269.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.951 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.951 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.951 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.952 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.952 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.952 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.953 I llm_load_print_meta: model type       = 2B
0.00.269.953 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.954 I llm_load_print_meta: model params     = 2.51 B
0.00.269.955 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.956 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.957 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.958 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.958 I llm_load_print_meta: max token length = 93
0.00.328.160 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.114 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.120 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.121 I llama_new_context_with_model: n_batch       = 2048
0.00.333.121 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.122 I llama_new_context_with_model: flash_attn    = 0
0.00.333.124 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.125 I llama_new_context_with_model: freq_scale    = 1
0.00.333.126 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.146 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.347.901 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.000 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.238 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.244 I llama_new_context_with_model: graph nodes  = 601
0.00.349.245 I llama_new_context_with_model: graph splits = 1
0.00.349.247 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.628 I main: llama threadpool init, n_threads = 4
0.00.423.643 I 
0.00.423.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.720 I 
0.00.423.764 I sampler seed: 4274711446
0.00.423.774 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.790 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.790 I 
 seconary.

**Secondary**

The word "secondary" can have two different meanings depending on the context.

**1. Related to a secondary activity

0.02.015.783 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6530.77 tokens per second)
0.02.015.786 I llama_perf_context_print:        load time =     422.88 ms
0.02.015.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.015.788 I llama_perf_context_print:        eval time =    1572.81 ms /    32 runs   (   49.15 ms per token,    20.35 tokens per second)
0.02.015.789 I llama_perf_context_print:       total time =    1592.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.720s
user	10m24.897s
sys	0m7.169s
