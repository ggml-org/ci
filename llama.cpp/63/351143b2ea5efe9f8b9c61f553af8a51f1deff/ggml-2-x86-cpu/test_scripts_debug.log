+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.650 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.025.259 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.562 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.578 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.579 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.580 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.582 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.592 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.597 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.602 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.436 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.687 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.688 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.690 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.691 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.699 I llama_model_loader: - type  f32:   37 tensors
0.00.198.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.680 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.757 I llm_load_vocab: special tokens cache size = 5
0.00.555.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.555.218 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.555.219 I llm_load_print_meta: arch             = gemma
0.00.555.220 I llm_load_print_meta: vocab type       = SPM
0.00.555.221 I llm_load_print_meta: n_vocab          = 256000
0.00.555.223 I llm_load_print_meta: n_merges         = 0
0.00.555.224 I llm_load_print_meta: vocab_only       = 0
0.00.555.224 I llm_load_print_meta: n_ctx_train      = 8192
0.00.555.224 I llm_load_print_meta: n_embd           = 2048
0.00.555.225 I llm_load_print_meta: n_layer          = 18
0.00.555.259 I llm_load_print_meta: n_head           = 8
0.00.555.266 I llm_load_print_meta: n_head_kv        = 1
0.00.555.267 I llm_load_print_meta: n_rot            = 256
0.00.555.267 I llm_load_print_meta: n_swa            = 0
0.00.555.267 I llm_load_print_meta: n_embd_head_k    = 256
0.00.555.268 I llm_load_print_meta: n_embd_head_v    = 256
0.00.555.272 I llm_load_print_meta: n_gqa            = 8
0.00.555.277 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.555.281 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.555.282 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.555.284 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.555.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.555.284 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.555.285 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.555.290 I llm_load_print_meta: n_ff             = 16384
0.00.555.290 I llm_load_print_meta: n_expert         = 0
0.00.555.290 I llm_load_print_meta: n_expert_used    = 0
0.00.555.291 I llm_load_print_meta: causal attn      = 1
0.00.555.291 I llm_load_print_meta: pooling type     = 0
0.00.555.292 I llm_load_print_meta: rope type        = 2
0.00.555.292 I llm_load_print_meta: rope scaling     = linear
0.00.555.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.555.294 I llm_load_print_meta: freq_scale_train = 1
0.00.555.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.555.294 I llm_load_print_meta: rope_finetuned   = unknown
0.00.555.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.555.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.555.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.555.296 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.555.296 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.555.297 I llm_load_print_meta: model type       = 2B
0.00.555.298 I llm_load_print_meta: model ftype      = Q8_0
0.00.555.299 I llm_load_print_meta: model params     = 2.51 B
0.00.555.300 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.555.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.555.301 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.555.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.555.302 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.555.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.555.303 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.555.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.555.303 I llm_load_print_meta: max token length = 93
0.00.555.477 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.655.649 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.655.662 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.655.662 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.655.663 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.655.664 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.655.664 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.661.442 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.452 I llama_new_context_with_model: n_batch    = 2048
0.00.661.453 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.453 I llama_new_context_with_model: flash_attn = 0
0.00.661.457 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.457 I llama_new_context_with_model: freq_scale = 1
0.00.692.532 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.576 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.697 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.694.172 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.178 I llama_new_context_with_model: graph nodes  = 601
0.00.694.179 I llama_new_context_with_model: graph splits = 1
0.00.694.195 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.069 I main: llama threadpool init, n_threads = 4
0.01.311.082 I 
0.01.311.179 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.183 I 
0.01.311.347 I sampler seed: 793941074
0.01.311.357 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.362 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.311.363 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in her eyes.

The scene opens in a dimly lit tavern, shrouded in a thick fog. A lone figure sits alone, lost in contemplation.

0.14.880.244 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.23 tokens per second)
0.14.880.247 I llama_perf_context_print:        load time =    1308.17 ms
0.14.880.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.880.250 I llama_perf_context_print:        eval time =   13486.14 ms /    32 runs   (  421.44 ms per token,     2.37 tokens per second)
0.14.880.251 I llama_perf_context_print:       total time =   13569.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.665 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.820 I main: load the model and apply lora adapter, if any
0.00.027.030 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.027.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.147 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.153 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.155 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.164 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.165 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.166 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.725 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.055 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.348 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.349 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.350 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.350 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.352 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.352 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.356 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.357 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.358 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.358 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.200.359 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.370 I llama_model_loader: - type  f32:   37 tensors
0.00.200.375 I llama_model_loader: - type q8_0:  127 tensors
0.00.508.213 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.265 I llm_load_vocab: special tokens cache size = 5
0.00.567.482 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.540 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.541 I llm_load_print_meta: arch             = gemma
0.00.567.542 I llm_load_print_meta: vocab type       = SPM
0.00.567.543 I llm_load_print_meta: n_vocab          = 256000
0.00.567.545 I llm_load_print_meta: n_merges         = 0
0.00.567.546 I llm_load_print_meta: vocab_only       = 0
0.00.567.546 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.546 I llm_load_print_meta: n_embd           = 2048
0.00.567.547 I llm_load_print_meta: n_layer          = 18
0.00.567.580 I llm_load_print_meta: n_head           = 8
0.00.567.587 I llm_load_print_meta: n_head_kv        = 1
0.00.567.587 I llm_load_print_meta: n_rot            = 256
0.00.567.587 I llm_load_print_meta: n_swa            = 0
0.00.567.588 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.588 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.593 I llm_load_print_meta: n_gqa            = 8
0.00.567.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.605 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.610 I llm_load_print_meta: n_ff             = 16384
0.00.567.610 I llm_load_print_meta: n_expert         = 0
0.00.567.611 I llm_load_print_meta: n_expert_used    = 0
0.00.567.611 I llm_load_print_meta: causal attn      = 1
0.00.567.611 I llm_load_print_meta: pooling type     = 0
0.00.567.612 I llm_load_print_meta: rope type        = 2
0.00.567.612 I llm_load_print_meta: rope scaling     = linear
0.00.567.614 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.614 I llm_load_print_meta: freq_scale_train = 1
0.00.567.615 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.617 I llm_load_print_meta: model type       = 2B
0.00.567.618 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.619 I llm_load_print_meta: model params     = 2.51 B
0.00.567.619 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.621 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.623 I llm_load_print_meta: max token length = 93
0.00.567.799 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.289 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.668.188 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.196 I llama_new_context_with_model: n_batch    = 2048
0.00.668.197 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.198 I llama_new_context_with_model: flash_attn = 0
0.00.668.202 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.203 I llama_new_context_with_model: freq_scale = 1
0.00.699.758 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.801 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.913 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.701.278 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.283 I llama_new_context_with_model: graph nodes  = 601
0.00.701.284 I llama_new_context_with_model: graph splits = 1
0.00.701.299 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.380 I main: llama threadpool init, n_threads = 4
0.01.314.394 I 
0.01.314.485 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.489 I 
0.01.314.651 I sampler seed: 3095449146
0.01.314.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.668 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.671 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the allure of the forbidden.

I'm working on a creative writing piece and I need some inspiration for the theme.

**Possible Themes

0.14.864.895 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.88 tokens per second)
0.14.864.898 I llama_perf_context_print:        load time =    1311.47 ms
0.14.864.919 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.864.921 I llama_perf_context_print:        eval time =   13466.60 ms /    32 runs   (  420.83 ms per token,     2.38 tokens per second)
0.14.864.932 I llama_perf_context_print:       total time =   13550.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.635 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.025.546 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.737 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.844 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.852 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.855 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.856 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.856 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.864 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.865 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.866 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.867 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.868 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.993 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.244 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.245 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.246 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.247 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.248 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.249 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.253 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.254 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.255 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.256 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.199.257 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.266 I llama_model_loader: - type  f32:   37 tensors
0.00.199.270 I llama_model_loader: - type q8_0:  127 tensors
0.00.504.345 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.426 I llm_load_vocab: special tokens cache size = 5
0.00.563.531 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.601 I llm_load_print_meta: arch             = gemma
0.00.563.602 I llm_load_print_meta: vocab type       = SPM
0.00.563.603 I llm_load_print_meta: n_vocab          = 256000
0.00.563.606 I llm_load_print_meta: n_merges         = 0
0.00.563.606 I llm_load_print_meta: vocab_only       = 0
0.00.563.607 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.607 I llm_load_print_meta: n_embd           = 2048
0.00.563.607 I llm_load_print_meta: n_layer          = 18
0.00.563.644 I llm_load_print_meta: n_head           = 8
0.00.563.653 I llm_load_print_meta: n_head_kv        = 1
0.00.563.654 I llm_load_print_meta: n_rot            = 256
0.00.563.654 I llm_load_print_meta: n_swa            = 0
0.00.563.654 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.656 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.661 I llm_load_print_meta: n_gqa            = 8
0.00.563.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.672 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.674 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.675 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.676 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.677 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.683 I llm_load_print_meta: n_ff             = 16384
0.00.563.683 I llm_load_print_meta: n_expert         = 0
0.00.563.684 I llm_load_print_meta: n_expert_used    = 0
0.00.563.685 I llm_load_print_meta: causal attn      = 1
0.00.563.686 I llm_load_print_meta: pooling type     = 0
0.00.563.686 I llm_load_print_meta: rope type        = 2
0.00.563.687 I llm_load_print_meta: rope scaling     = linear
0.00.563.689 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.689 I llm_load_print_meta: freq_scale_train = 1
0.00.563.690 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.690 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.691 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.691 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.692 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.692 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.693 I llm_load_print_meta: model type       = 2B
0.00.563.694 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.694 I llm_load_print_meta: model params     = 2.51 B
0.00.563.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.701 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.701 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.702 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.703 I llm_load_print_meta: max token length = 93
0.00.563.882 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.640.513 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.640.521 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.640.522 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.640.523 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.640.524 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.640.524 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.646.331 I llama_new_context_with_model: n_ctx      = 8192
0.00.646.339 I llama_new_context_with_model: n_batch    = 2048
0.00.646.340 I llama_new_context_with_model: n_ubatch   = 512
0.00.646.340 I llama_new_context_with_model: flash_attn = 0
0.00.646.344 I llama_new_context_with_model: freq_base  = 10000.0
0.00.646.345 I llama_new_context_with_model: freq_scale = 1
0.00.677.250 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.291 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.402 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.678.831 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.839 I llama_new_context_with_model: graph nodes  = 601
0.00.678.839 I llama_new_context_with_model: graph splits = 1
0.00.678.855 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.581 I main: llama threadpool init, n_threads = 4
0.01.299.593 I 
0.01.299.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.695 I 
0.01.299.853 I sampler seed: 1084586756
0.01.299.864 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.870 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.299.872 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements. [end of text]


0.02.998.664 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.98 tokens per second)
0.02.998.667 I llama_perf_context_print:        load time =    1296.74 ms
0.02.998.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.998.670 I llama_perf_context_print:        eval time =    1686.94 ms /     4 runs   (  421.74 ms per token,     2.37 tokens per second)
0.02.998.670 I llama_perf_context_print:       total time =    1699.09 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.684 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.002.860 I main: load the model and apply lora adapter, if any
0.00.025.005 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.208 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.308 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.321 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.331 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.337 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.340 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.342 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.351 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.363 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.365 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.366 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.419 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.934 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.199.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.311 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.312 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.313 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.315 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.322 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.199.323 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.333 I llama_model_loader: - type  f32:   37 tensors
0.00.199.338 I llama_model_loader: - type q8_0:  127 tensors
0.00.505.159 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.232 I llm_load_vocab: special tokens cache size = 5
0.00.564.408 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.470 I llm_load_print_meta: arch             = gemma
0.00.564.471 I llm_load_print_meta: vocab type       = SPM
0.00.564.472 I llm_load_print_meta: n_vocab          = 256000
0.00.564.474 I llm_load_print_meta: n_merges         = 0
0.00.564.475 I llm_load_print_meta: vocab_only       = 0
0.00.564.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.476 I llm_load_print_meta: n_embd           = 2048
0.00.564.476 I llm_load_print_meta: n_layer          = 18
0.00.564.513 I llm_load_print_meta: n_head           = 8
0.00.564.520 I llm_load_print_meta: n_head_kv        = 1
0.00.564.521 I llm_load_print_meta: n_rot            = 256
0.00.564.521 I llm_load_print_meta: n_swa            = 0
0.00.564.521 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.522 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.527 I llm_load_print_meta: n_gqa            = 8
0.00.564.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.541 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.541 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.542 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.542 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.547 I llm_load_print_meta: n_ff             = 16384
0.00.564.548 I llm_load_print_meta: n_expert         = 0
0.00.564.548 I llm_load_print_meta: n_expert_used    = 0
0.00.564.548 I llm_load_print_meta: causal attn      = 1
0.00.564.549 I llm_load_print_meta: pooling type     = 0
0.00.564.549 I llm_load_print_meta: rope type        = 2
0.00.564.550 I llm_load_print_meta: rope scaling     = linear
0.00.564.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.552 I llm_load_print_meta: freq_scale_train = 1
0.00.564.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.552 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.553 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.553 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.555 I llm_load_print_meta: model type       = 2B
0.00.564.556 I llm_load_print_meta: model ftype      = Q8_0
0.00.564.557 I llm_load_print_meta: model params     = 2.51 B
0.00.564.558 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.564.560 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.561 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.570 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.570 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.572 I llm_load_print_meta: max token length = 93
0.00.564.772 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.560 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.635.572 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.641.363 I llama_new_context_with_model: n_ctx      = 8192
0.00.641.371 I llama_new_context_with_model: n_batch    = 2048
0.00.641.371 I llama_new_context_with_model: n_ubatch   = 512
0.00.641.372 I llama_new_context_with_model: flash_attn = 0
0.00.641.375 I llama_new_context_with_model: freq_base  = 10000.0
0.00.641.376 I llama_new_context_with_model: freq_scale = 1
0.00.672.298 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.343 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.920 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.927 I llama_new_context_with_model: graph nodes  = 601
0.00.673.928 I llama_new_context_with_model: graph splits = 1
0.00.673.949 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.287.263 I main: llama threadpool init, n_threads = 4
0.01.287.276 I 
0.01.287.384 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.287.388 I 
0.01.287.556 I sampler seed: 4142558187
0.01.287.567 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.287.573 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.287.574 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities can occur with the use of which medication class?

Answer: Antihistamines.

Antihistamines are commonly used to relieve symptoms associated with allergies

0.14.852.555 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.17 tokens per second)
0.14.852.578 I llama_perf_context_print:        load time =    1284.31 ms
0.14.852.580 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.583 I llama_perf_context_print:        eval time =   13483.31 ms /    32 runs   (  421.35 ms per token,     2.37 tokens per second)
0.14.852.584 I llama_perf_context_print:       total time =   13565.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.508s
user	3m2.043s
sys	0m9.699s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3796 (63351143)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199968.99 ms
main:    total time = 199968.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.657 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.836 I main: load the model and apply lora adapter, if any
0.00.025.213 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.514 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.516 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.524 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.525 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.526 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.527 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.527 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.535 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.536 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.540 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.573 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.574 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.575 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.576 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.577 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.578 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.581 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.584 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.585 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.593 I llama_model_loader: - type  f32:   37 tensors
0.00.198.597 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.598 I llama_model_loader: - type q6_K:   19 tensors
0.00.503.032 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.056 I llm_load_vocab: special tokens cache size = 5
0.00.562.082 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.562.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.562.148 I llm_load_print_meta: arch             = gemma
0.00.562.149 I llm_load_print_meta: vocab type       = SPM
0.00.562.149 I llm_load_print_meta: n_vocab          = 256000
0.00.562.152 I llm_load_print_meta: n_merges         = 0
0.00.562.152 I llm_load_print_meta: vocab_only       = 0
0.00.562.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.562.153 I llm_load_print_meta: n_embd           = 2048
0.00.562.154 I llm_load_print_meta: n_layer          = 18
0.00.562.190 I llm_load_print_meta: n_head           = 8
0.00.562.197 I llm_load_print_meta: n_head_kv        = 1
0.00.562.198 I llm_load_print_meta: n_rot            = 256
0.00.562.198 I llm_load_print_meta: n_swa            = 0
0.00.562.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.562.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.562.203 I llm_load_print_meta: n_gqa            = 8
0.00.562.208 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.562.213 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.562.214 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.562.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.562.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.562.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.562.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.562.244 I llm_load_print_meta: n_ff             = 16384
0.00.562.253 I llm_load_print_meta: n_expert         = 0
0.00.562.254 I llm_load_print_meta: n_expert_used    = 0
0.00.562.255 I llm_load_print_meta: causal attn      = 1
0.00.562.262 I llm_load_print_meta: pooling type     = 0
0.00.562.262 I llm_load_print_meta: rope type        = 2
0.00.562.270 I llm_load_print_meta: rope scaling     = linear
0.00.562.272 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.562.272 I llm_load_print_meta: freq_scale_train = 1
0.00.562.280 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.562.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.562.288 I llm_load_print_meta: ssm_d_conv       = 0
0.00.562.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.562.299 I llm_load_print_meta: ssm_d_state      = 0
0.00.562.300 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.562.300 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.562.301 I llm_load_print_meta: model type       = 2B
0.00.562.302 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.562.303 I llm_load_print_meta: model params     = 2.51 B
0.00.562.311 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.562.311 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.562.312 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.562.312 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.562.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.562.320 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.322 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.322 I llm_load_print_meta: max token length = 93
0.00.562.494 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.332 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.622.345 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.622.346 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.622.347 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.622.348 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.622.348 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.628.064 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.073 I llama_new_context_with_model: n_batch    = 2048
0.00.628.074 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.074 I llama_new_context_with_model: flash_attn = 0
0.00.628.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.079 I llama_new_context_with_model: freq_scale = 1
0.00.659.550 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.591 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.707 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.077 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.083 I llama_new_context_with_model: graph nodes  = 601
0.00.661.084 I llama_new_context_with_model: graph splits = 1
0.00.661.100 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.242.925 I main: llama threadpool init, n_threads = 4
0.01.242.937 I 
0.01.243.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.243.033 I 
0.01.243.195 I sampler seed: 3541878935
0.01.243.205 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.243.209 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.243.210 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling with the melody and rhythm of a specific song.

The challenge is to create a personalized playlist that incorporates a selection of songs that align with your personal

0.12.270.853 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.85 tokens per second)
0.12.270.857 I llama_perf_context_print:        load time =    1239.99 ms
0.12.270.858 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.270.860 I llama_perf_context_print:        eval time =   10945.09 ms /    32 runs   (  342.03 ms per token,     2.92 tokens per second)
0.12.270.861 I llama_perf_context_print:       total time =   11027.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3796 (63351143)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199739.00 ms
main:    total time = 199739.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.632 I build: 3796 (63351143) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.804 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.927 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.933 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.934 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.935 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.936 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.944 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.945 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.949 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.057 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.515 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.704 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.715 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.716 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.717 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.718 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.719 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.720 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.722 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.723 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.732 I llama_model_loader: - type  f32:   37 tensors
0.00.197.737 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.737 I llama_model_loader: - type q6_K:   19 tensors
0.00.504.690 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.746 I llm_load_vocab: special tokens cache size = 5
0.00.563.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.844 I llm_load_print_meta: arch             = gemma
0.00.563.845 I llm_load_print_meta: vocab type       = SPM
0.00.563.845 I llm_load_print_meta: n_vocab          = 256000
0.00.563.848 I llm_load_print_meta: n_merges         = 0
0.00.563.849 I llm_load_print_meta: vocab_only       = 0
0.00.563.849 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.849 I llm_load_print_meta: n_embd           = 2048
0.00.563.850 I llm_load_print_meta: n_layer          = 18
0.00.563.883 I llm_load_print_meta: n_head           = 8
0.00.563.890 I llm_load_print_meta: n_head_kv        = 1
0.00.563.890 I llm_load_print_meta: n_rot            = 256
0.00.563.891 I llm_load_print_meta: n_swa            = 0
0.00.563.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.891 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.896 I llm_load_print_meta: n_gqa            = 8
0.00.563.900 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.918 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.920 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.921 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.922 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.922 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.923 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.927 I llm_load_print_meta: n_ff             = 16384
0.00.563.928 I llm_load_print_meta: n_expert         = 0
0.00.563.928 I llm_load_print_meta: n_expert_used    = 0
0.00.563.929 I llm_load_print_meta: causal attn      = 1
0.00.563.929 I llm_load_print_meta: pooling type     = 0
0.00.563.929 I llm_load_print_meta: rope type        = 2
0.00.563.930 I llm_load_print_meta: rope scaling     = linear
0.00.563.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.931 I llm_load_print_meta: freq_scale_train = 1
0.00.563.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.947 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.956 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.964 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.965 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.966 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.967 I llm_load_print_meta: model type       = 2B
0.00.563.968 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.563.969 I llm_load_print_meta: model params     = 2.51 B
0.00.563.970 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.563.970 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.971 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.972 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.972 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.973 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.974 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.974 I llm_load_print_meta: max token length = 93
0.00.564.154 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.979 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.626.502 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.509 I llama_new_context_with_model: n_batch    = 2048
0.00.626.509 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.510 I llama_new_context_with_model: flash_attn = 0
0.00.626.513 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.514 I llama_new_context_with_model: freq_scale = 1
0.00.657.571 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.616 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.657.736 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.120 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.127 I llama_new_context_with_model: graph nodes  = 601
0.00.659.127 I llama_new_context_with_model: graph splits = 1
0.00.659.144 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.243.684 I main: llama threadpool init, n_threads = 4
0.01.243.697 I 
0.01.243.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.243.799 I 
0.01.243.962 I sampler seed: 299788430
0.01.243.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.243.977 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.243.978 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the mechanisms driving them.

**Introduction**

The human reproductive system is a complex network of interconnected systems that enables the production, storage, and

0.12.288.228 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.29 tokens per second)
0.12.288.232 I llama_perf_context_print:        load time =    1240.80 ms
0.12.288.233 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.288.234 I llama_perf_context_print:        eval time =   10961.67 ms /    32 runs   (  342.55 ms per token,     2.92 tokens per second)
0.12.288.235 I llama_perf_context_print:       total time =   11044.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.143s
user	50m23.858s
sys	0m6.477s
