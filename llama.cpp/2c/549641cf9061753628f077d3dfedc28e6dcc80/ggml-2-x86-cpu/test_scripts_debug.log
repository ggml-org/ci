+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.673 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.889 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.181 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.182 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.186 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.187 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.191 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.198 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.199 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.200 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.201 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.878 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.399 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.408 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.410 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.410 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.411 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.412 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.413 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.417 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.417 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.419 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.419 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.420 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.429 I llama_model_loader: - type  f32:   37 tensors
0.00.198.433 I llama_model_loader: - type q8_0:  127 tensors
0.00.504.057 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.518 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.652 I llm_load_vocab: special tokens cache size = 5
0.00.592.999 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.056 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.057 I llm_load_print_meta: arch             = gemma
0.00.593.058 I llm_load_print_meta: vocab type       = SPM
0.00.593.058 I llm_load_print_meta: n_vocab          = 256000
0.00.593.061 I llm_load_print_meta: n_merges         = 0
0.00.593.061 I llm_load_print_meta: vocab_only       = 0
0.00.593.062 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.062 I llm_load_print_meta: n_embd           = 2048
0.00.593.062 I llm_load_print_meta: n_layer          = 18
0.00.593.099 I llm_load_print_meta: n_head           = 8
0.00.593.106 I llm_load_print_meta: n_head_kv        = 1
0.00.593.106 I llm_load_print_meta: n_rot            = 256
0.00.593.107 I llm_load_print_meta: n_swa            = 0
0.00.593.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.112 I llm_load_print_meta: n_gqa            = 8
0.00.593.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.121 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.122 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.154 I llm_load_print_meta: n_ff             = 16384
0.00.593.155 I llm_load_print_meta: n_expert         = 0
0.00.593.155 I llm_load_print_meta: n_expert_used    = 0
0.00.593.156 I llm_load_print_meta: causal attn      = 1
0.00.593.165 I llm_load_print_meta: pooling type     = 0
0.00.593.165 I llm_load_print_meta: rope type        = 2
0.00.593.167 I llm_load_print_meta: rope scaling     = linear
0.00.593.168 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.170 I llm_load_print_meta: freq_scale_train = 1
0.00.593.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.171 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.171 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.171 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.180 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.181 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.182 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.182 I llm_load_print_meta: model type       = 2B
0.00.593.183 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.184 I llm_load_print_meta: model params     = 2.51 B
0.00.593.185 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.185 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.186 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.193 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.194 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.194 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.202 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.203 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.208 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.217 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.218 I llm_load_print_meta: max token length = 93
0.00.593.403 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.658 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.692.670 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.692.671 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.692.672 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.692.673 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.692.673 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.698.377 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.385 I llama_new_context_with_model: n_batch    = 2048
0.00.698.386 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.386 I llama_new_context_with_model: flash_attn = 0
0.00.698.389 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.390 I llama_new_context_with_model: freq_scale = 1
0.00.727.476 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.522 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.631 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.729.021 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.027 I llama_new_context_with_model: graph nodes  = 601
0.00.729.028 I llama_new_context_with_model: graph splits = 1
0.00.729.042 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.475 I main: llama threadpool init, n_threads = 4
0.01.340.486 I 
0.01.340.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.586 I 
0.01.340.752 I sampler seed: 1126591519
0.01.340.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.770 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.340.770 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.771 I 
 maneuvously. I'm not sure what I should do.

I am experiencing some distressing thoughts and emotions, and I am feeling overwhelmed. I need

0.14.910.861 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.91 tokens per second)
0.14.910.864 I llama_perf_context_print:        load time =    1337.57 ms
0.14.910.866 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.910.878 I llama_perf_context_print:        eval time =   13488.18 ms /    32 runs   (  421.51 ms per token,     2.37 tokens per second)
0.14.910.880 I llama_perf_context_print:       total time =   13570.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.624 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.964 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.062 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.079 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.088 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.089 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.092 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.099 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.101 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.110 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.112 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.052 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.234 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.635 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.642 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.643 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.644 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.198.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.653 I llama_model_loader: - type  f32:   37 tensors
0.00.198.657 I llama_model_loader: - type q8_0:  127 tensors
0.00.507.497 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.741 I llm_load_vocab: special tokens cache size = 5
0.00.596.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.200 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.203 I llm_load_print_meta: arch             = gemma
0.00.596.204 I llm_load_print_meta: vocab type       = SPM
0.00.596.205 I llm_load_print_meta: n_vocab          = 256000
0.00.596.208 I llm_load_print_meta: n_merges         = 0
0.00.596.208 I llm_load_print_meta: vocab_only       = 0
0.00.596.209 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.209 I llm_load_print_meta: n_embd           = 2048
0.00.596.209 I llm_load_print_meta: n_layer          = 18
0.00.596.245 I llm_load_print_meta: n_head           = 8
0.00.596.256 I llm_load_print_meta: n_head_kv        = 1
0.00.596.257 I llm_load_print_meta: n_rot            = 256
0.00.596.258 I llm_load_print_meta: n_swa            = 0
0.00.596.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.265 I llm_load_print_meta: n_gqa            = 8
0.00.596.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.278 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.279 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.281 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.281 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.282 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.288 I llm_load_print_meta: n_ff             = 16384
0.00.596.289 I llm_load_print_meta: n_expert         = 0
0.00.596.289 I llm_load_print_meta: n_expert_used    = 0
0.00.596.290 I llm_load_print_meta: causal attn      = 1
0.00.596.290 I llm_load_print_meta: pooling type     = 0
0.00.596.291 I llm_load_print_meta: rope type        = 2
0.00.596.292 I llm_load_print_meta: rope scaling     = linear
0.00.596.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.294 I llm_load_print_meta: freq_scale_train = 1
0.00.596.295 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.295 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.295 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.296 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.297 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.297 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.297 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.298 I llm_load_print_meta: model type       = 2B
0.00.596.300 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.300 I llm_load_print_meta: model params     = 2.51 B
0.00.596.301 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.302 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.305 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.305 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.305 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.306 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.306 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.307 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.312 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.314 I llm_load_print_meta: max token length = 93
0.00.596.490 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.810 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.695.506 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.515 I llama_new_context_with_model: n_batch    = 2048
0.00.695.515 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.516 I llama_new_context_with_model: flash_attn = 0
0.00.695.518 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.519 I llama_new_context_with_model: freq_scale = 1
0.00.726.900 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.944 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.060 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.728.485 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.491 I llama_new_context_with_model: graph nodes  = 601
0.00.728.492 I llama_new_context_with_model: graph splits = 1
0.00.728.508 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.257 I main: llama threadpool init, n_threads = 4
0.01.341.269 I 
0.01.341.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.365 I 
0.01.341.524 I sampler seed: 3255022353
0.01.341.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.539 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.341.540 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.540 I 
 increasities?

I cannot find the requested information in the provided context. Please provide more context or specify the relevant information you need. [end of text]


0.13.194.115 I llama_perf_sampler_print:    sampling time =      43.28 ms /    29 runs   (    1.49 ms per token,   670.09 tokens per second)
0.13.194.118 I llama_perf_context_print:        load time =    1338.40 ms
0.13.194.119 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.194.121 I llama_perf_context_print:        eval time =   11779.56 ms /    28 runs   (  420.70 ms per token,     2.38 tokens per second)
0.13.194.122 I llama_perf_context_print:       total time =   11852.87 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.646 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.860 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.178 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.185 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.198 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.199 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.200 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.201 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.821 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.273 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.282 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.283 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.287 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.290 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.292 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.293 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.294 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.303 I llama_model_loader: - type  f32:   37 tensors
0.00.198.306 I llama_model_loader: - type q8_0:  127 tensors
0.00.516.111 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.545.598 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.802 I llm_load_vocab: special tokens cache size = 5
0.00.604.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.843 I llm_load_print_meta: arch             = gemma
0.00.604.844 I llm_load_print_meta: vocab type       = SPM
0.00.604.845 I llm_load_print_meta: n_vocab          = 256000
0.00.604.849 I llm_load_print_meta: n_merges         = 0
0.00.604.849 I llm_load_print_meta: vocab_only       = 0
0.00.604.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.851 I llm_load_print_meta: n_embd           = 2048
0.00.604.851 I llm_load_print_meta: n_layer          = 18
0.00.604.886 I llm_load_print_meta: n_head           = 8
0.00.604.896 I llm_load_print_meta: n_head_kv        = 1
0.00.604.897 I llm_load_print_meta: n_rot            = 256
0.00.604.897 I llm_load_print_meta: n_swa            = 0
0.00.604.898 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.898 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.903 I llm_load_print_meta: n_gqa            = 8
0.00.604.908 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.913 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.915 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.916 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.923 I llm_load_print_meta: n_ff             = 16384
0.00.604.923 I llm_load_print_meta: n_expert         = 0
0.00.604.924 I llm_load_print_meta: n_expert_used    = 0
0.00.604.925 I llm_load_print_meta: causal attn      = 1
0.00.604.925 I llm_load_print_meta: pooling type     = 0
0.00.604.926 I llm_load_print_meta: rope type        = 2
0.00.604.927 I llm_load_print_meta: rope scaling     = linear
0.00.604.928 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.929 I llm_load_print_meta: freq_scale_train = 1
0.00.604.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.930 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.931 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.932 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.934 I llm_load_print_meta: model type       = 2B
0.00.604.936 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.937 I llm_load_print_meta: model params     = 2.51 B
0.00.604.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.951 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.968 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.970 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.970 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.971 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.972 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.978 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.980 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.988 I llm_load_print_meta: max token length = 93
0.00.605.172 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.491 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.682.498 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.682.499 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.682.500 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.682.500 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.682.501 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.688.101 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.108 I llama_new_context_with_model: n_batch    = 2048
0.00.688.108 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.109 I llama_new_context_with_model: flash_attn = 0
0.00.688.111 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.112 I llama_new_context_with_model: freq_scale = 1
0.00.717.919 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.963 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.719.476 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.483 I llama_new_context_with_model: graph nodes  = 601
0.00.719.483 I llama_new_context_with_model: graph splits = 1
0.00.719.499 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.268 I main: llama threadpool init, n_threads = 4
0.01.333.282 I 
0.01.333.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.385 I 
0.01.333.544 I sampler seed: 2207209023
0.01.333.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.559 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.333.560 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.560 I 
 increadibly diverse range of species from all over the world.

Answer: The statement provided contains a factual inaccuracy. While the Earth does contain a wide variety of

0.14.936.435 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.92 tokens per second)
0.14.936.438 I llama_perf_context_print:        load time =    1330.38 ms
0.14.936.440 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.936.450 I llama_perf_context_print:        eval time =   13520.87 ms /    32 runs   (  422.53 ms per token,     2.37 tokens per second)
0.14.936.452 I llama_perf_context_print:       total time =   13603.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.618 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.024.659 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.855 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.970 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.971 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.978 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.980 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.981 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.982 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.984 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.994 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.001 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.001 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.002 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.315 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.769 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.778 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.781 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.782 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.783 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.787 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.788 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.790 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.790 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.791 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.802 I llama_model_loader: - type  f32:   37 tensors
0.00.197.808 I llama_model_loader: - type q8_0:  127 tensors
0.00.502.131 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.930 I llm_load_vocab: special tokens cache size = 5
0.00.592.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.363 I llm_load_print_meta: arch             = gemma
0.00.592.365 I llm_load_print_meta: vocab type       = SPM
0.00.592.366 I llm_load_print_meta: n_vocab          = 256000
0.00.592.368 I llm_load_print_meta: n_merges         = 0
0.00.592.369 I llm_load_print_meta: vocab_only       = 0
0.00.592.370 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.370 I llm_load_print_meta: n_embd           = 2048
0.00.592.373 I llm_load_print_meta: n_layer          = 18
0.00.592.418 I llm_load_print_meta: n_head           = 8
0.00.592.428 I llm_load_print_meta: n_head_kv        = 1
0.00.592.429 I llm_load_print_meta: n_rot            = 256
0.00.592.429 I llm_load_print_meta: n_swa            = 0
0.00.592.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.449 I llm_load_print_meta: n_gqa            = 8
0.00.592.459 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.464 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.468 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.470 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.471 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.478 I llm_load_print_meta: n_ff             = 16384
0.00.592.479 I llm_load_print_meta: n_expert         = 0
0.00.592.479 I llm_load_print_meta: n_expert_used    = 0
0.00.592.480 I llm_load_print_meta: causal attn      = 1
0.00.592.481 I llm_load_print_meta: pooling type     = 0
0.00.592.482 I llm_load_print_meta: rope type        = 2
0.00.592.482 I llm_load_print_meta: rope scaling     = linear
0.00.592.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.486 I llm_load_print_meta: freq_scale_train = 1
0.00.592.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.489 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.491 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.492 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.496 I llm_load_print_meta: model type       = 2B
0.00.592.497 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.499 I llm_load_print_meta: model params     = 2.51 B
0.00.592.505 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.506 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.519 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.522 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.525 I llm_load_print_meta: max token length = 93
0.00.592.716 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.960 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.663.970 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.669.858 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.866 I llama_new_context_with_model: n_batch    = 2048
0.00.669.866 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.867 I llama_new_context_with_model: flash_attn = 0
0.00.669.871 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.871 I llama_new_context_with_model: freq_scale = 1
0.00.699.622 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.666 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.701.178 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.186 I llama_new_context_with_model: graph nodes  = 601
0.00.701.186 I llama_new_context_with_model: graph splits = 1
0.00.701.204 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.665 I main: llama threadpool init, n_threads = 4
0.01.318.679 I 
0.01.318.805 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.809 I 
0.01.318.976 I sampler seed: 3171902302
0.01.318.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.991 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.318.994 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.994 I 
 increadibly. [end of text]


0.03.033.027 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.64 tokens per second)
0.03.033.030 I llama_perf_context_print:        load time =    1315.74 ms
0.03.033.031 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.033.033 I llama_perf_context_print:        eval time =    1702.55 ms /     4 runs   (  425.64 ms per token,     2.35 tokens per second)
0.03.033.033 I llama_perf_context_print:       total time =    1714.37 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.910s
user	2m55.533s
sys	0m9.697s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3829 (2c549641)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199263.26 ms
main:    total time = 199263.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.678 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.024.694 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.989 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.010 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.011 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.012 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.013 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.014 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.332 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.027 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.390 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.398 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.399 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.400 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.401 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.403 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.406 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.407 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.408 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.409 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.410 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.418 I llama_model_loader: - type  f32:   37 tensors
0.00.197.422 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.423 I llama_model_loader: - type q6_K:   19 tensors
0.00.494.975 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.689 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.669 I llm_load_vocab: special tokens cache size = 5
0.00.581.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.961 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.962 I llm_load_print_meta: arch             = gemma
0.00.581.963 I llm_load_print_meta: vocab type       = SPM
0.00.581.964 I llm_load_print_meta: n_vocab          = 256000
0.00.581.966 I llm_load_print_meta: n_merges         = 0
0.00.581.967 I llm_load_print_meta: vocab_only       = 0
0.00.581.967 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.968 I llm_load_print_meta: n_embd           = 2048
0.00.581.968 I llm_load_print_meta: n_layer          = 18
0.00.582.002 I llm_load_print_meta: n_head           = 8
0.00.582.009 I llm_load_print_meta: n_head_kv        = 1
0.00.582.009 I llm_load_print_meta: n_rot            = 256
0.00.582.010 I llm_load_print_meta: n_swa            = 0
0.00.582.010 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.010 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.015 I llm_load_print_meta: n_gqa            = 8
0.00.582.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.025 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.033 I llm_load_print_meta: n_ff             = 16384
0.00.582.034 I llm_load_print_meta: n_expert         = 0
0.00.582.034 I llm_load_print_meta: n_expert_used    = 0
0.00.582.034 I llm_load_print_meta: causal attn      = 1
0.00.582.035 I llm_load_print_meta: pooling type     = 0
0.00.582.035 I llm_load_print_meta: rope type        = 2
0.00.582.036 I llm_load_print_meta: rope scaling     = linear
0.00.582.037 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.038 I llm_load_print_meta: freq_scale_train = 1
0.00.582.038 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.038 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.039 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.039 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.039 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.040 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.040 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.041 I llm_load_print_meta: model type       = 2B
0.00.582.042 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.582.042 I llm_load_print_meta: model params     = 2.51 B
0.00.582.044 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.582.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.045 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.045 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.045 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.046 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.046 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.052 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.053 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.054 I llm_load_print_meta: max token length = 93
0.00.582.233 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.642.454 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.642.465 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.642.466 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.642.467 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.642.467 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.642.468 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.648.149 I llama_new_context_with_model: n_ctx      = 8192
0.00.648.158 I llama_new_context_with_model: n_batch    = 2048
0.00.648.159 I llama_new_context_with_model: n_ubatch   = 512
0.00.648.160 I llama_new_context_with_model: flash_attn = 0
0.00.648.163 I llama_new_context_with_model: freq_base  = 10000.0
0.00.648.164 I llama_new_context_with_model: freq_scale = 1
0.00.678.879 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.678.921 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.029 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.680.434 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.680.440 I llama_new_context_with_model: graph nodes  = 601
0.00.680.441 I llama_new_context_with_model: graph splits = 1
0.00.680.457 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.261.417 I main: llama threadpool init, n_threads = 4
0.01.261.429 I 
0.01.261.524 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.261.528 I 
0.01.261.698 I sampler seed: 75453874
0.01.261.710 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.716 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.261.717 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.261.718 I 
 seconals.

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information within the boundaries

0.12.297.447 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.96 tokens per second)
0.12.297.452 I llama_perf_context_print:        load time =    1258.51 ms
0.12.297.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.297.456 I llama_perf_context_print:        eval time =   10954.03 ms /    32 runs   (  342.31 ms per token,     2.92 tokens per second)
0.12.297.457 I llama_perf_context_print:       total time =   11036.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3829 (2c549641)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200899.26 ms
main:    total time = 200899.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.695 I build: 3829 (2c549641) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.024.774 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.869 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.888 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.894 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.895 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.897 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.911 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.916 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.917 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.488 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.535 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.016 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.026 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.027 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.029 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.030 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.031 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.044 I llama_model_loader: - type  f32:   37 tensors
0.00.198.048 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.049 I llama_model_loader: - type q6_K:   19 tensors
0.00.520.697 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.690 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.703 I llm_load_vocab: special tokens cache size = 5
0.00.607.967 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.039 I llm_load_print_meta: arch             = gemma
0.00.608.040 I llm_load_print_meta: vocab type       = SPM
0.00.608.041 I llm_load_print_meta: n_vocab          = 256000
0.00.608.043 I llm_load_print_meta: n_merges         = 0
0.00.608.043 I llm_load_print_meta: vocab_only       = 0
0.00.608.044 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.044 I llm_load_print_meta: n_embd           = 2048
0.00.608.044 I llm_load_print_meta: n_layer          = 18
0.00.608.080 I llm_load_print_meta: n_head           = 8
0.00.608.090 I llm_load_print_meta: n_head_kv        = 1
0.00.608.091 I llm_load_print_meta: n_rot            = 256
0.00.608.091 I llm_load_print_meta: n_swa            = 0
0.00.608.094 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.094 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.100 I llm_load_print_meta: n_gqa            = 8
0.00.608.104 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.109 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.112 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.113 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.114 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.114 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.120 I llm_load_print_meta: n_ff             = 16384
0.00.608.121 I llm_load_print_meta: n_expert         = 0
0.00.608.121 I llm_load_print_meta: n_expert_used    = 0
0.00.608.121 I llm_load_print_meta: causal attn      = 1
0.00.608.124 I llm_load_print_meta: pooling type     = 0
0.00.608.125 I llm_load_print_meta: rope type        = 2
0.00.608.126 I llm_load_print_meta: rope scaling     = linear
0.00.608.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.128 I llm_load_print_meta: freq_scale_train = 1
0.00.608.128 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.131 I llm_load_print_meta: model type       = 2B
0.00.608.133 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.133 I llm_load_print_meta: model params     = 2.51 B
0.00.608.134 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.134 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.135 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.135 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.136 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.138 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.145 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.147 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.147 I llm_load_print_meta: max token length = 93
0.00.608.327 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.692 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.671.280 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.289 I llama_new_context_with_model: n_batch    = 2048
0.00.671.289 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.290 I llama_new_context_with_model: flash_attn = 0
0.00.671.294 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.295 I llama_new_context_with_model: freq_scale = 1
0.00.702.096 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.145 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.256 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.629 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.635 I llama_new_context_with_model: graph nodes  = 601
0.00.703.635 I llama_new_context_with_model: graph splits = 1
0.00.703.651 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.327 I main: llama threadpool init, n_threads = 4
0.01.281.338 I 
0.01.281.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.438 I 
0.01.281.607 I sampler seed: 2146371183
0.01.281.618 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.623 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.624 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.624 I 
 squaRED, an AI-powered platform that uses natural language processing (NLP) to generate personalized insights and predictions, announced the launch of its new feature called "

0.12.243.343 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.62 tokens per second)
0.12.243.358 I llama_perf_context_print:        load time =    1278.41 ms
0.12.243.360 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.243.362 I llama_perf_context_print:        eval time =   10880.48 ms /    32 runs   (  340.02 ms per token,     2.94 tokens per second)
0.12.243.363 I llama_perf_context_print:       total time =   10962.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.597s
user	50m32.773s
sys	0m6.558s
