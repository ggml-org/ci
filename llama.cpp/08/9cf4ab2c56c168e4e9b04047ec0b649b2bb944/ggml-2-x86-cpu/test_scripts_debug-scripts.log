+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.184 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.193 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.290 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.292 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.302 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.311 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.312 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.934 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.684 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.694 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.695 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.696 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.698 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.699 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.703 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.704 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.706 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.707 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.709 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.718 I llama_model_loader: - type  f32:   37 tensors
0.00.349.720 I llama_model_loader: - type q8_0:  127 tensors
0.00.555.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.615.018 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.615.987 I llm_load_vocab: special tokens cache size = 5
0.00.838.972 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.043 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.047 I llm_load_print_meta: arch             = gemma
0.00.839.048 I llm_load_print_meta: vocab type       = SPM
0.00.839.049 I llm_load_print_meta: n_vocab          = 256000
0.00.839.051 I llm_load_print_meta: n_merges         = 0
0.00.839.052 I llm_load_print_meta: vocab_only       = 0
0.00.839.052 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.053 I llm_load_print_meta: n_embd           = 2048
0.00.839.053 I llm_load_print_meta: n_layer          = 18
0.00.839.129 I llm_load_print_meta: n_head           = 8
0.00.839.137 I llm_load_print_meta: n_head_kv        = 1
0.00.839.141 I llm_load_print_meta: n_rot            = 256
0.00.839.141 I llm_load_print_meta: n_swa            = 0
0.00.839.141 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.146 I llm_load_print_meta: n_gqa            = 8
0.00.839.151 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.157 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.158 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.159 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.160 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.161 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.166 I llm_load_print_meta: n_ff             = 16384
0.00.839.167 I llm_load_print_meta: n_expert         = 0
0.00.839.168 I llm_load_print_meta: n_expert_used    = 0
0.00.839.168 I llm_load_print_meta: causal attn      = 1
0.00.839.169 I llm_load_print_meta: pooling type     = 0
0.00.839.170 I llm_load_print_meta: rope type        = 2
0.00.839.170 I llm_load_print_meta: rope scaling     = linear
0.00.839.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.172 I llm_load_print_meta: freq_scale_train = 1
0.00.839.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.179 I llm_load_print_meta: model type       = 2B
0.00.839.181 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.181 I llm_load_print_meta: model params     = 2.51 B
0.00.839.182 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.183 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.185 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.185 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.186 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.192 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.194 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.194 I llm_load_print_meta: max token length = 93
0.00.944.839 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.944.849 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.944.850 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.944.851 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.944.851 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.944.852 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.951.589 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.595 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.596 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.596 I llama_new_context_with_model: n_batch       = 2048
0.00.951.597 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.598 I llama_new_context_with_model: flash_attn    = 0
0.00.951.600 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.601 I llama_new_context_with_model: freq_scale    = 1
0.00.951.601 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.683 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.966.262 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.305 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.992 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.995 I llama_new_context_with_model: graph nodes  = 601
0.00.968.996 I llama_new_context_with_model: graph splits = 1
0.00.969.020 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.969.023 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.416 I main: llama threadpool init, n_threads = 4
0.01.579.433 I 
0.01.579.574 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.579 I 
0.01.579.836 I sampler seed: 3142621549
0.01.579.852 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.861 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.865 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.865 I 
 increasities, and other related issues.

**Problem Statement:**

The primary concern is the impact of climate change on the social fabric of our communities. Climate

0.15.031.125 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.56 tokens per second)
0.15.031.150 I llama_perf_context_print:        load time =    1578.48 ms
0.15.031.152 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.031.154 I llama_perf_context_print:        eval time =   13366.37 ms /    32 runs   (  417.70 ms per token,     2.39 tokens per second)
0.15.031.155 I llama_perf_context_print:       total time =   13451.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.527 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.544 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.548 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.549 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.554 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.556 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.562 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.564 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.565 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.568 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.631 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.641 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.642 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.648 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.652 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.653 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.656 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.666 I llama_model_loader: - type  f32:   37 tensors
0.00.357.668 I llama_model_loader: - type q8_0:  127 tensors
0.00.573.349 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.251 I llm_load_vocab: special tokens cache size = 5
0.00.853.117 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.199 I llm_load_print_meta: arch             = gemma
0.00.853.200 I llm_load_print_meta: vocab type       = SPM
0.00.853.201 I llm_load_print_meta: n_vocab          = 256000
0.00.853.203 I llm_load_print_meta: n_merges         = 0
0.00.853.204 I llm_load_print_meta: vocab_only       = 0
0.00.853.204 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.204 I llm_load_print_meta: n_embd           = 2048
0.00.853.205 I llm_load_print_meta: n_layer          = 18
0.00.853.277 I llm_load_print_meta: n_head           = 8
0.00.853.288 I llm_load_print_meta: n_head_kv        = 1
0.00.853.289 I llm_load_print_meta: n_rot            = 256
0.00.853.290 I llm_load_print_meta: n_swa            = 0
0.00.853.290 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.290 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.316 I llm_load_print_meta: n_gqa            = 8
0.00.853.325 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.333 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.335 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.340 I llm_load_print_meta: n_ff             = 16384
0.00.853.341 I llm_load_print_meta: n_expert         = 0
0.00.853.342 I llm_load_print_meta: n_expert_used    = 0
0.00.853.342 I llm_load_print_meta: causal attn      = 1
0.00.853.351 I llm_load_print_meta: pooling type     = 0
0.00.853.352 I llm_load_print_meta: rope type        = 2
0.00.853.352 I llm_load_print_meta: rope scaling     = linear
0.00.853.354 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.354 I llm_load_print_meta: freq_scale_train = 1
0.00.853.355 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.355 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.356 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.356 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.356 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.357 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.357 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.360 I llm_load_print_meta: model type       = 2B
0.00.853.362 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.364 I llm_load_print_meta: model params     = 2.51 B
0.00.853.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.367 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.368 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.377 I llm_load_print_meta: max token length = 93
0.00.952.366 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.958.317 I llama_new_context_with_model: n_seq_max     = 1
0.00.958.325 I llama_new_context_with_model: n_ctx         = 4096
0.00.958.326 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.958.326 I llama_new_context_with_model: n_batch       = 2048
0.00.958.327 I llama_new_context_with_model: n_ubatch      = 512
0.00.958.327 I llama_new_context_with_model: flash_attn    = 0
0.00.958.329 I llama_new_context_with_model: freq_base     = 10000.0
0.00.958.330 I llama_new_context_with_model: freq_scale    = 1
0.00.958.331 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.415 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.973.361 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.402 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.554 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.182 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.187 I llama_new_context_with_model: graph nodes  = 601
0.00.976.187 I llama_new_context_with_model: graph splits = 1
0.00.976.212 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.976.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.051 I main: llama threadpool init, n_threads = 4
0.01.584.067 I 
0.01.584.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.194 I 
0.01.584.434 I sampler seed: 2508128917
0.01.584.447 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.457 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.461 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.461 I 
 increasels,
I weave a web of words, a tangled maze.
My thoughts, like spiders, spin and twist and sway.

What am I

0.15.085.926 I llama_perf_sampler_print:    sampling time =      49.89 ms /    33 runs   (    1.51 ms per token,   661.43 tokens per second)
0.15.085.941 I llama_perf_context_print:        load time =    1583.12 ms
0.15.085.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.085.944 I llama_perf_context_print:        eval time =   13415.78 ms /    32 runs   (  419.24 ms per token,     2.39 tokens per second)
0.15.085.945 I llama_perf_context_print:       total time =   13501.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.029.581 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.029.592 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.029.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.688 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.690 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.694 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.696 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.697 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.699 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.701 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.702 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.708 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.709 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.711 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.712 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.713 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.414 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.415 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.416 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.419 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.420 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.424 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.425 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.427 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.428 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.430 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.439 I llama_model_loader: - type  f32:   37 tensors
0.00.357.442 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.767 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.630.659 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.631.625 I llm_load_vocab: special tokens cache size = 5
0.00.852.161 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.233 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.241 I llm_load_print_meta: arch             = gemma
0.00.852.242 I llm_load_print_meta: vocab type       = SPM
0.00.852.243 I llm_load_print_meta: n_vocab          = 256000
0.00.852.245 I llm_load_print_meta: n_merges         = 0
0.00.852.246 I llm_load_print_meta: vocab_only       = 0
0.00.852.246 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.247 I llm_load_print_meta: n_embd           = 2048
0.00.852.247 I llm_load_print_meta: n_layer          = 18
0.00.852.319 I llm_load_print_meta: n_head           = 8
0.00.852.328 I llm_load_print_meta: n_head_kv        = 1
0.00.852.329 I llm_load_print_meta: n_rot            = 256
0.00.852.329 I llm_load_print_meta: n_swa            = 0
0.00.852.330 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.331 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.336 I llm_load_print_meta: n_gqa            = 8
0.00.852.341 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.348 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.349 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.351 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.351 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.352 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.352 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.357 I llm_load_print_meta: n_ff             = 16384
0.00.852.358 I llm_load_print_meta: n_expert         = 0
0.00.852.359 I llm_load_print_meta: n_expert_used    = 0
0.00.852.359 I llm_load_print_meta: causal attn      = 1
0.00.852.360 I llm_load_print_meta: pooling type     = 0
0.00.852.361 I llm_load_print_meta: rope type        = 2
0.00.852.361 I llm_load_print_meta: rope scaling     = linear
0.00.852.363 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.364 I llm_load_print_meta: freq_scale_train = 1
0.00.852.364 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.364 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.365 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.365 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.365 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.366 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.366 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.369 I llm_load_print_meta: model type       = 2B
0.00.852.371 I llm_load_print_meta: model ftype      = Q8_0
0.00.852.372 I llm_load_print_meta: model params     = 2.51 B
0.00.852.372 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.852.373 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.375 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.383 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.384 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.385 I llm_load_print_meta: max token length = 93
0.00.932.222 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.932.231 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.932.232 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.932.232 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.932.233 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.932.234 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.938.227 I llama_new_context_with_model: n_seq_max     = 1
0.00.938.235 I llama_new_context_with_model: n_ctx         = 4096
0.00.938.236 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.938.236 I llama_new_context_with_model: n_batch       = 2048
0.00.938.237 I llama_new_context_with_model: n_ubatch      = 512
0.00.938.237 I llama_new_context_with_model: flash_attn    = 0
0.00.938.240 I llama_new_context_with_model: freq_base     = 10000.0
0.00.938.241 I llama_new_context_with_model: freq_scale    = 1
0.00.938.241 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.327 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.953.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.403 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.527 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.310 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.314 I llama_new_context_with_model: graph nodes  = 601
0.00.956.314 I llama_new_context_with_model: graph splits = 1
0.00.956.339 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.956.342 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.597.284 I main: llama threadpool init, n_threads = 4
0.01.597.301 I 
0.01.597.421 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.597.425 I 
0.01.597.662 I sampler seed: 2108757906
0.01.597.677 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.597.687 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.597.696 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.597.697 I 
 increasively. [end of text]


0.03.294.399 I llama_perf_sampler_print:    sampling time =       6.32 ms /     5 runs   (    1.26 ms per token,   791.51 tokens per second)
0.03.294.413 I llama_perf_context_print:        load time =    1596.37 ms
0.03.294.415 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.294.417 I llama_perf_context_print:        eval time =    1684.43 ms /     4 runs   (  421.11 ms per token,     2.37 tokens per second)
0.03.294.418 I llama_perf_context_print:       total time =    1697.13 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.023.243 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.254 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.351 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.369 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.371 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.374 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.377 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.392 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.394 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.395 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.363 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.925 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.945 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.946 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.948 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.956 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.966 I llama_model_loader: - type  f32:   37 tensors
0.00.358.969 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.469 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.165 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.149 I llm_load_vocab: special tokens cache size = 5
0.00.860.136 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.214 I llm_load_print_meta: arch             = gemma
0.00.860.215 I llm_load_print_meta: vocab type       = SPM
0.00.860.216 I llm_load_print_meta: n_vocab          = 256000
0.00.860.218 I llm_load_print_meta: n_merges         = 0
0.00.860.219 I llm_load_print_meta: vocab_only       = 0
0.00.860.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.220 I llm_load_print_meta: n_embd           = 2048
0.00.860.220 I llm_load_print_meta: n_layer          = 18
0.00.860.295 I llm_load_print_meta: n_head           = 8
0.00.860.313 I llm_load_print_meta: n_head_kv        = 1
0.00.860.316 I llm_load_print_meta: n_rot            = 256
0.00.860.316 I llm_load_print_meta: n_swa            = 0
0.00.860.316 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.321 I llm_load_print_meta: n_gqa            = 8
0.00.860.328 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.344 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.346 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.353 I llm_load_print_meta: n_ff             = 16384
0.00.860.354 I llm_load_print_meta: n_expert         = 0
0.00.860.355 I llm_load_print_meta: n_expert_used    = 0
0.00.860.356 I llm_load_print_meta: causal attn      = 1
0.00.860.356 I llm_load_print_meta: pooling type     = 0
0.00.860.358 I llm_load_print_meta: rope type        = 2
0.00.860.358 I llm_load_print_meta: rope scaling     = linear
0.00.860.360 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.361 I llm_load_print_meta: freq_scale_train = 1
0.00.860.362 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.362 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.362 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.363 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.366 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.366 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.366 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.369 I llm_load_print_meta: model type       = 2B
0.00.860.371 I llm_load_print_meta: model ftype      = Q8_0
0.00.860.372 I llm_load_print_meta: model params     = 2.51 B
0.00.860.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.860.383 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.384 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.385 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.388 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.388 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.388 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.389 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.395 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.396 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.399 I llm_load_print_meta: max token length = 93
0.00.933.652 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.933.662 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.939.784 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.791 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.791 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.791 I llama_new_context_with_model: n_batch       = 2048
0.00.939.792 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.792 I llama_new_context_with_model: flash_attn    = 0
0.00.939.795 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.796 I llama_new_context_with_model: freq_scale    = 1
0.00.939.796 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.939.884 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.954.473 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.954.512 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.957.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.957.223 I llama_new_context_with_model: graph nodes  = 601
0.00.957.224 I llama_new_context_with_model: graph splits = 1
0.00.957.250 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.957.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.567.797 I main: llama threadpool init, n_threads = 4
0.01.567.815 I 
0.01.567.945 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.567.950 I 
0.01.568.192 I sampler seed: 813630187
0.01.568.207 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.568.217 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.568.221 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.568.221 I 
 increably.

I am unable to generate a response because the provided context does not contain any information regarding text generation or language processing tasks. [end of text]


0.13.766.878 I llama_perf_sampler_print:    sampling time =      44.96 ms /    30 runs   (    1.50 ms per token,   667.23 tokens per second)
0.13.766.883 I llama_perf_context_print:        load time =    1566.80 ms
0.13.766.885 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.766.887 I llama_perf_context_print:        eval time =   12121.38 ms /    29 runs   (  417.98 ms per token,     2.39 tokens per second)
0.13.766.888 I llama_perf_context_print:       total time =   12199.09 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.028s
user	2m57.217s
sys	0m9.354s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4429 (089cf4ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185603.23 ms
main:    total time = 185603.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.727 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.933 I main: llama backend init
0.00.000.941 I main: load the model and apply lora adapter, if any
0.00.023.688 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.702 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.801 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.818 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.828 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.829 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.830 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.831 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.833 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.841 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.843 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.845 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.846 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.848 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.270 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.271 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.274 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.278 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.280 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.281 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.356.283 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.291 I llama_model_loader: - type  f32:   37 tensors
0.00.356.293 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.294 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.274 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.980 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.841 I llm_load_vocab: special tokens cache size = 5
0.00.846.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.063 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.068 I llm_load_print_meta: arch             = gemma
0.00.847.069 I llm_load_print_meta: vocab type       = SPM
0.00.847.070 I llm_load_print_meta: n_vocab          = 256000
0.00.847.072 I llm_load_print_meta: n_merges         = 0
0.00.847.073 I llm_load_print_meta: vocab_only       = 0
0.00.847.073 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.074 I llm_load_print_meta: n_embd           = 2048
0.00.847.074 I llm_load_print_meta: n_layer          = 18
0.00.847.149 I llm_load_print_meta: n_head           = 8
0.00.847.155 I llm_load_print_meta: n_head_kv        = 1
0.00.847.156 I llm_load_print_meta: n_rot            = 256
0.00.847.157 I llm_load_print_meta: n_swa            = 0
0.00.847.158 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.158 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.163 I llm_load_print_meta: n_gqa            = 8
0.00.847.169 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.174 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.178 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.180 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.180 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.181 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.181 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.186 I llm_load_print_meta: n_ff             = 16384
0.00.847.187 I llm_load_print_meta: n_expert         = 0
0.00.847.187 I llm_load_print_meta: n_expert_used    = 0
0.00.847.188 I llm_load_print_meta: causal attn      = 1
0.00.847.189 I llm_load_print_meta: pooling type     = 0
0.00.847.189 I llm_load_print_meta: rope type        = 2
0.00.847.190 I llm_load_print_meta: rope scaling     = linear
0.00.847.192 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.193 I llm_load_print_meta: freq_scale_train = 1
0.00.847.194 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.194 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.195 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.195 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.198 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.198 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.201 I llm_load_print_meta: model type       = 2B
0.00.847.203 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.847.204 I llm_load_print_meta: model params     = 2.51 B
0.00.847.205 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.847.205 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.206 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.207 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.207 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.208 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.208 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.216 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.216 I llm_load_print_meta: max token length = 93
0.00.909.906 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.909.914 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.909.915 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.909.915 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.909.916 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.909.917 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.915.776 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.783 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.784 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.784 I llama_new_context_with_model: n_batch       = 2048
0.00.915.785 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.785 I llama_new_context_with_model: flash_attn    = 0
0.00.915.787 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.788 I llama_new_context_with_model: freq_scale    = 1
0.00.915.789 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.878 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.930.084 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.930.119 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.239 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.816 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.820 I llama_new_context_with_model: graph nodes  = 601
0.00.932.821 I llama_new_context_with_model: graph splits = 1
0.00.932.845 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.932.848 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.510.507 I main: llama threadpool init, n_threads = 4
0.01.510.523 I 
0.01.510.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.510.654 I 
0.01.510.900 I sampler seed: 1766110350
0.01.510.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.510.924 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.510.927 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.510.928 I 
 seconally. I am unable to find the requested information.

Please provide the following information:

- The specific question you were trying to answer.
-

0.12.605.123 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.89 tokens per second)
0.12.605.136 I llama_perf_context_print:        load time =    1509.46 ms
0.12.605.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.605.140 I llama_perf_context_print:        eval time =   11009.07 ms /    32 runs   (  344.03 ms per token,     2.91 tokens per second)
0.12.605.141 I llama_perf_context_print:       total time =   11094.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4429 (089cf4ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185623.80 ms
main:    total time = 185623.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.547 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.654 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.672 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.687 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.689 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.690 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.702 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.908 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.925 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.926 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.927 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.937 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.946 I llama_model_loader: - type  f32:   37 tensors
0.00.349.948 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.949 I llama_model_loader: - type q6_K:   19 tensors
0.00.563.810 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.622.161 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.002 I llm_load_vocab: special tokens cache size = 5
0.00.830.040 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.121 I llm_load_print_meta: arch             = gemma
0.00.830.121 I llm_load_print_meta: vocab type       = SPM
0.00.830.123 I llm_load_print_meta: n_vocab          = 256000
0.00.830.125 I llm_load_print_meta: n_merges         = 0
0.00.830.126 I llm_load_print_meta: vocab_only       = 0
0.00.830.126 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.127 I llm_load_print_meta: n_embd           = 2048
0.00.830.127 I llm_load_print_meta: n_layer          = 18
0.00.830.205 I llm_load_print_meta: n_head           = 8
0.00.830.215 I llm_load_print_meta: n_head_kv        = 1
0.00.830.216 I llm_load_print_meta: n_rot            = 256
0.00.830.216 I llm_load_print_meta: n_swa            = 0
0.00.830.217 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.218 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.223 I llm_load_print_meta: n_gqa            = 8
0.00.830.228 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.233 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.235 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.242 I llm_load_print_meta: n_ff             = 16384
0.00.830.243 I llm_load_print_meta: n_expert         = 0
0.00.830.244 I llm_load_print_meta: n_expert_used    = 0
0.00.830.245 I llm_load_print_meta: causal attn      = 1
0.00.830.245 I llm_load_print_meta: pooling type     = 0
0.00.830.245 I llm_load_print_meta: rope type        = 2
0.00.830.247 I llm_load_print_meta: rope scaling     = linear
0.00.830.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.249 I llm_load_print_meta: freq_scale_train = 1
0.00.830.250 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.251 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.259 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.260 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.261 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.264 I llm_load_print_meta: model type       = 2B
0.00.830.266 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.830.267 I llm_load_print_meta: model params     = 2.51 B
0.00.830.268 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.830.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.269 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.271 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.279 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.280 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.280 I llm_load_print_meta: max token length = 93
0.00.891.221 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.896.951 I llama_new_context_with_model: n_seq_max     = 1
0.00.896.957 I llama_new_context_with_model: n_ctx         = 4096
0.00.896.958 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.896.958 I llama_new_context_with_model: n_batch       = 2048
0.00.896.959 I llama_new_context_with_model: n_ubatch      = 512
0.00.896.959 I llama_new_context_with_model: flash_attn    = 0
0.00.896.962 I llama_new_context_with_model: freq_base     = 10000.0
0.00.896.962 I llama_new_context_with_model: freq_scale    = 1
0.00.896.963 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.897.048 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.913.455 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.497 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.621 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.916.230 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.916.234 I llama_new_context_with_model: graph nodes  = 601
0.00.916.235 I llama_new_context_with_model: graph splits = 1
0.00.916.259 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.916.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.493.779 I main: llama threadpool init, n_threads = 4
0.01.493.797 I 
0.01.493.981 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.493.985 I 
0.01.494.221 I sampler seed: 4100177947
0.01.494.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.247 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.247 I 
 seconary to the main body of the text.

**Assistant**

I am unable to generate text that is misleading or misleading in nature. My purpose is

0.12.585.319 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.84 tokens per second)
0.12.585.322 I llama_perf_context_print:        load time =    1492.79 ms
0.12.585.346 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.585.348 I llama_perf_context_print:        eval time =   11006.36 ms /    32 runs   (  343.95 ms per token,     2.91 tokens per second)
0.12.585.350 I llama_perf_context_print:       total time =   11091.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.387s
user	46m41.670s
sys	0m6.438s
