+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.193 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.383 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.021.016 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.027 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.035 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.041 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.045 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.048 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.049 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.050 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.050 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.051 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.055 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.056 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.057 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.058 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.471 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.442 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.320 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.332 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.332 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.333 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.333 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.334 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.338 I llama_model_loader: - type  f32:   37 tensors
0.00.131.338 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.417 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.413 I llm_load_vocab: special tokens cache size = 5
0.00.267.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.159 I llm_load_print_meta: arch             = gemma
0.00.267.159 I llm_load_print_meta: vocab type       = SPM
0.00.267.160 I llm_load_print_meta: n_vocab          = 256000
0.00.267.160 I llm_load_print_meta: n_merges         = 0
0.00.267.161 I llm_load_print_meta: vocab_only       = 0
0.00.267.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.161 I llm_load_print_meta: n_embd           = 2048
0.00.267.162 I llm_load_print_meta: n_layer          = 18
0.00.267.173 I llm_load_print_meta: n_head           = 8
0.00.267.175 I llm_load_print_meta: n_head_kv        = 1
0.00.267.175 I llm_load_print_meta: n_rot            = 256
0.00.267.175 I llm_load_print_meta: n_swa            = 0
0.00.267.176 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.176 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.177 I llm_load_print_meta: n_gqa            = 8
0.00.267.179 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.180 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.185 I llm_load_print_meta: n_ff             = 16384
0.00.267.186 I llm_load_print_meta: n_expert         = 0
0.00.267.186 I llm_load_print_meta: n_expert_used    = 0
0.00.267.186 I llm_load_print_meta: causal attn      = 1
0.00.267.186 I llm_load_print_meta: pooling type     = 0
0.00.267.187 I llm_load_print_meta: rope type        = 2
0.00.267.187 I llm_load_print_meta: rope scaling     = linear
0.00.267.188 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.189 I llm_load_print_meta: freq_scale_train = 1
0.00.267.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.190 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.190 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.193 I llm_load_print_meta: model type       = 2B
0.00.267.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.195 I llm_load_print_meta: model params     = 2.51 B
0.00.267.195 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.196 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.197 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.197 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.199 I llm_load_print_meta: max token length = 93
0.00.368.714 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.720 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.721 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.721 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.722 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.722 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.849 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.856 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.856 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.857 I llama_new_context_with_model: n_batch       = 2048
0.00.373.857 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.858 I llama_new_context_with_model: flash_attn    = 0
0.00.373.859 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.860 I llama_new_context_with_model: freq_scale    = 1
0.00.373.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.879 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.388.245 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.258 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.628 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.635 I llama_new_context_with_model: graph nodes  = 601
0.00.389.635 I llama_new_context_with_model: graph splits = 1
0.00.389.638 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.007 I main: llama threadpool init, n_threads = 4
0.00.475.024 I 
0.00.475.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.100 I 
0.00.475.135 I sampler seed: 631326180
0.00.475.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.163 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.163 I 
 increasities from the past. [end of text]


0.00.970.306 I llama_perf_sampler_print:    sampling time =       1.06 ms /     8 runs   (    0.13 ms per token,  7525.87 tokens per second)
0.00.970.308 I llama_perf_context_print:        load time =     474.60 ms
0.00.970.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.970.311 I llama_perf_context_print:        eval time =     490.38 ms /     7 runs   (   70.05 ms per token,    14.27 tokens per second)
0.00.970.311 I llama_perf_context_print:       total time =     495.31 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.531 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.727 I main: load the model and apply lora adapter, if any
0.00.021.080 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.100 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.101 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.108 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.115 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.116 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.539 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.180 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.047 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.053 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.054 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.054 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.055 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.055 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.057 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.059 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.059 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.062 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.063 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.066 I llama_model_loader: - type  f32:   37 tensors
0.00.131.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.882 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.478 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.942 I llm_load_vocab: special tokens cache size = 5
0.00.261.542 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.559 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.560 I llm_load_print_meta: arch             = gemma
0.00.261.561 I llm_load_print_meta: vocab type       = SPM
0.00.261.561 I llm_load_print_meta: n_vocab          = 256000
0.00.261.562 I llm_load_print_meta: n_merges         = 0
0.00.261.562 I llm_load_print_meta: vocab_only       = 0
0.00.261.562 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.563 I llm_load_print_meta: n_embd           = 2048
0.00.261.563 I llm_load_print_meta: n_layer          = 18
0.00.261.575 I llm_load_print_meta: n_head           = 8
0.00.261.577 I llm_load_print_meta: n_head_kv        = 1
0.00.261.577 I llm_load_print_meta: n_rot            = 256
0.00.261.577 I llm_load_print_meta: n_swa            = 0
0.00.261.578 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.580 I llm_load_print_meta: n_gqa            = 8
0.00.261.582 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.583 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.585 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.585 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.586 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.586 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.588 I llm_load_print_meta: n_ff             = 16384
0.00.261.588 I llm_load_print_meta: n_expert         = 0
0.00.261.588 I llm_load_print_meta: n_expert_used    = 0
0.00.261.589 I llm_load_print_meta: causal attn      = 1
0.00.261.589 I llm_load_print_meta: pooling type     = 0
0.00.261.589 I llm_load_print_meta: rope type        = 2
0.00.261.590 I llm_load_print_meta: rope scaling     = linear
0.00.261.591 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.592 I llm_load_print_meta: freq_scale_train = 1
0.00.261.592 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.592 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.593 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.593 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.593 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.593 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.593 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.595 I llm_load_print_meta: model type       = 2B
0.00.261.596 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.597 I llm_load_print_meta: model params     = 2.51 B
0.00.261.598 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.598 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.598 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.599 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.599 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.599 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.600 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.600 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.600 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.600 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.601 I llm_load_print_meta: max token length = 93
0.00.357.304 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.472 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.473 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.473 I llama_new_context_with_model: n_batch       = 2048
0.00.362.474 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.474 I llama_new_context_with_model: flash_attn    = 0
0.00.362.476 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.477 I llama_new_context_with_model: freq_scale    = 1
0.00.362.478 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.498 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.377.224 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.237 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.326 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.596 I llama_new_context_with_model: graph nodes  = 601
0.00.378.597 I llama_new_context_with_model: graph splits = 1
0.00.378.599 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.849 I main: llama threadpool init, n_threads = 4
0.00.459.862 I 
0.00.459.935 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.938 I 
0.00.459.970 I sampler seed: 1088984955
0.00.459.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.985 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.985 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.986 I 
 increasively and unpredictably, mirroring the unpredictable nature of life itself.

This is how life is. A continuous dance of chance and consequence, a tapestry woven

0.02.648.008 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7060.33 tokens per second)
0.02.648.012 I llama_perf_context_print:        load time =     459.10 ms
0.02.648.014 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.648.016 I llama_perf_context_print:        eval time =    2169.58 ms /    32 runs   (   67.80 ms per token,    14.75 tokens per second)
0.02.648.017 I llama_perf_context_print:       total time =    2188.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.177 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.622 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.634 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.647 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.650 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.653 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.653 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.158 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.822 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.720 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.727 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.727 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.728 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.728 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.729 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.730 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.732 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.733 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.734 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.735 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.739 I llama_model_loader: - type  f32:   37 tensors
0.00.130.740 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.576 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.496 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.129 I llm_load_vocab: special tokens cache size = 5
0.00.270.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.037 I llm_load_print_meta: arch             = gemma
0.00.270.037 I llm_load_print_meta: vocab type       = SPM
0.00.270.038 I llm_load_print_meta: n_vocab          = 256000
0.00.270.038 I llm_load_print_meta: n_merges         = 0
0.00.270.038 I llm_load_print_meta: vocab_only       = 0
0.00.270.039 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.039 I llm_load_print_meta: n_embd           = 2048
0.00.270.039 I llm_load_print_meta: n_layer          = 18
0.00.270.050 I llm_load_print_meta: n_head           = 8
0.00.270.052 I llm_load_print_meta: n_head_kv        = 1
0.00.270.052 I llm_load_print_meta: n_rot            = 256
0.00.270.053 I llm_load_print_meta: n_swa            = 0
0.00.270.053 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.053 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.055 I llm_load_print_meta: n_gqa            = 8
0.00.270.056 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.058 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.060 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.060 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.062 I llm_load_print_meta: n_ff             = 16384
0.00.270.062 I llm_load_print_meta: n_expert         = 0
0.00.270.063 I llm_load_print_meta: n_expert_used    = 0
0.00.270.063 I llm_load_print_meta: causal attn      = 1
0.00.270.063 I llm_load_print_meta: pooling type     = 0
0.00.270.064 I llm_load_print_meta: rope type        = 2
0.00.270.064 I llm_load_print_meta: rope scaling     = linear
0.00.270.065 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.066 I llm_load_print_meta: freq_scale_train = 1
0.00.270.066 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.067 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.067 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.067 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.068 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.068 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.068 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.070 I llm_load_print_meta: model type       = 2B
0.00.270.071 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.072 I llm_load_print_meta: model params     = 2.51 B
0.00.270.073 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.073 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.074 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.074 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.075 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.075 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.076 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.076 I llm_load_print_meta: max token length = 93
0.00.348.135 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.142 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.144 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.144 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.145 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.145 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.238 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.245 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.245 I llama_new_context_with_model: n_batch       = 2048
0.00.353.245 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.246 I llama_new_context_with_model: flash_attn    = 0
0.00.353.248 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.250 I llama_new_context_with_model: freq_scale    = 1
0.00.353.251 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.269 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.368.492 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.507 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.836 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.843 I llama_new_context_with_model: graph nodes  = 601
0.00.369.843 I llama_new_context_with_model: graph splits = 1
0.00.369.847 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.369.847 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.589 I main: llama threadpool init, n_threads = 4
0.00.454.605 I 
0.00.454.682 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.686 I 
0.00.454.718 I sampler seed: 636552488
0.00.454.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.742 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.745 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.746 I 
 increably, and now I am left with a gaping maw and a throbbing pain in my chest.

I am not sure what happened, but I believe I

0.02.703.853 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6346.15 tokens per second)
0.02.703.856 I llama_perf_context_print:        load time =     454.20 ms
0.02.703.857 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.859 I llama_perf_context_print:        eval time =    2229.93 ms /    32 runs   (   69.69 ms per token,    14.35 tokens per second)
0.02.703.860 I llama_perf_context_print:       total time =    2249.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.544 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.244 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.255 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.263 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.268 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.272 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.273 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.273 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.275 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.279 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.281 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.281 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.250 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.252 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.252 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.258 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.259 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.264 I llama_model_loader: - type  f32:   37 tensors
0.00.132.264 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.878 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.405 I llm_load_vocab: special tokens cache size = 5
0.00.273.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.976 I llm_load_print_meta: arch             = gemma
0.00.273.976 I llm_load_print_meta: vocab type       = SPM
0.00.273.977 I llm_load_print_meta: n_vocab          = 256000
0.00.273.977 I llm_load_print_meta: n_merges         = 0
0.00.273.977 I llm_load_print_meta: vocab_only       = 0
0.00.273.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.978 I llm_load_print_meta: n_embd           = 2048
0.00.273.978 I llm_load_print_meta: n_layer          = 18
0.00.273.989 I llm_load_print_meta: n_head           = 8
0.00.273.991 I llm_load_print_meta: n_head_kv        = 1
0.00.273.991 I llm_load_print_meta: n_rot            = 256
0.00.273.991 I llm_load_print_meta: n_swa            = 0
0.00.273.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.993 I llm_load_print_meta: n_gqa            = 8
0.00.273.995 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.996 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.997 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.999 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.999 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.001 I llm_load_print_meta: n_ff             = 16384
0.00.274.002 I llm_load_print_meta: n_expert         = 0
0.00.274.002 I llm_load_print_meta: n_expert_used    = 0
0.00.274.002 I llm_load_print_meta: causal attn      = 1
0.00.274.003 I llm_load_print_meta: pooling type     = 0
0.00.274.003 I llm_load_print_meta: rope type        = 2
0.00.274.003 I llm_load_print_meta: rope scaling     = linear
0.00.274.005 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.005 I llm_load_print_meta: freq_scale_train = 1
0.00.274.006 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.006 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.006 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.007 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.007 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.007 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.010 I llm_load_print_meta: model type       = 2B
0.00.274.011 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.011 I llm_load_print_meta: model params     = 2.51 B
0.00.274.012 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.013 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.013 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.013 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.014 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.015 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.015 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.015 I llm_load_print_meta: max token length = 93
0.00.345.034 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.040 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.210 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.217 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.217 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.218 I llama_new_context_with_model: n_batch       = 2048
0.00.350.218 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.219 I llama_new_context_with_model: flash_attn    = 0
0.00.350.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.222 I llama_new_context_with_model: freq_scale    = 1
0.00.350.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.242 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.364.733 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.744 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.835 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.089 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.097 I llama_new_context_with_model: graph nodes  = 601
0.00.366.097 I llama_new_context_with_model: graph splits = 1
0.00.366.100 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.101 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.437 I main: llama threadpool init, n_threads = 4
0.00.455.457 I 
0.00.455.547 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.552 I 
0.00.455.592 I sampler seed: 3694653518
0.00.455.656 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.667 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.668 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.668 I 
 increasities in a manner that does not incite or promote inappropriate or harmful content. [end of text]


0.01.744.059 I llama_perf_sampler_print:    sampling time =       2.74 ms /    18 runs   (    0.15 ms per token,  6574.14 tokens per second)
0.01.744.061 I llama_perf_context_print:        load time =     454.66 ms
0.01.744.063 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.744.065 I llama_perf_context_print:        eval time =    1277.72 ms /    17 runs   (   75.16 ms per token,    13.30 tokens per second)
0.01.744.067 I llama_perf_context_print:       total time =    1288.63 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.986s
user	0m27.745s
sys	0m9.361s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4429 (089cf4ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40245.68 ms
main:    total time = 40245.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.172 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.021.641 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.651 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.659 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.665 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.666 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.669 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.670 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.670 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.671 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.677 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.678 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.048 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.049 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.049 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.050 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.053 I llama_model_loader: - type  f32:   37 tensors
0.00.132.054 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.055 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.061 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.913 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.520 I llm_load_vocab: special tokens cache size = 5
0.00.274.463 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.479 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.481 I llm_load_print_meta: arch             = gemma
0.00.274.481 I llm_load_print_meta: vocab type       = SPM
0.00.274.482 I llm_load_print_meta: n_vocab          = 256000
0.00.274.482 I llm_load_print_meta: n_merges         = 0
0.00.274.482 I llm_load_print_meta: vocab_only       = 0
0.00.274.483 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.483 I llm_load_print_meta: n_embd           = 2048
0.00.274.483 I llm_load_print_meta: n_layer          = 18
0.00.274.494 I llm_load_print_meta: n_head           = 8
0.00.274.496 I llm_load_print_meta: n_head_kv        = 1
0.00.274.496 I llm_load_print_meta: n_rot            = 256
0.00.274.496 I llm_load_print_meta: n_swa            = 0
0.00.274.497 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.497 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.498 I llm_load_print_meta: n_gqa            = 8
0.00.274.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.502 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.503 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.504 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.507 I llm_load_print_meta: n_ff             = 16384
0.00.274.507 I llm_load_print_meta: n_expert         = 0
0.00.274.507 I llm_load_print_meta: n_expert_used    = 0
0.00.274.508 I llm_load_print_meta: causal attn      = 1
0.00.274.508 I llm_load_print_meta: pooling type     = 0
0.00.274.508 I llm_load_print_meta: rope type        = 2
0.00.274.509 I llm_load_print_meta: rope scaling     = linear
0.00.274.510 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.511 I llm_load_print_meta: freq_scale_train = 1
0.00.274.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.512 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.512 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.512 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.515 I llm_load_print_meta: model type       = 2B
0.00.274.517 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.517 I llm_load_print_meta: model params     = 2.51 B
0.00.274.518 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.520 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.520 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.520 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.520 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.521 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.521 I llm_load_print_meta: max token length = 93
0.00.334.708 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.714 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.715 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.715 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.716 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.717 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.751 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.757 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.757 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.758 I llama_new_context_with_model: n_batch       = 2048
0.00.339.758 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.759 I llama_new_context_with_model: flash_attn    = 0
0.00.339.761 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.762 I llama_new_context_with_model: freq_scale    = 1
0.00.339.763 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.781 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.353.970 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.983 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.073 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.347 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.354 I llama_new_context_with_model: graph nodes  = 601
0.00.355.354 I llama_new_context_with_model: graph splits = 1
0.00.355.358 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.355.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.842 I main: llama threadpool init, n_threads = 4
0.00.430.858 I 
0.00.430.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.933 I 
0.00.430.966 I sampler seed: 388228900
0.00.430.977 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.989 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.993 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.993 I 
 squaRELLI, a leading provider of cloud-based data management solutions, has partnered with SAP to offer an integrated solution that combines SAP ERP and SAP Analytics on

0.02.002.449 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6386.68 tokens per second)
0.02.002.452 I llama_perf_context_print:        load time =     430.45 ms
0.02.002.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.002.455 I llama_perf_context_print:        eval time =    1551.60 ms /    32 runs   (   48.49 ms per token,    20.62 tokens per second)
0.02.002.458 I llama_perf_context_print:       total time =    1571.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4429 (089cf4ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.79 ms
main:    total time = 40223.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.577 I build: 4429 (089cf4ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.614 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.631 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.639 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.640 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.643 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.644 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.645 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.645 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.646 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.649 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.650 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.651 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.652 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.652 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.997 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.998 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.999 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.003 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.003 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.007 I llama_model_loader: - type  f32:   37 tensors
0.00.132.007 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.008 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.236 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.268 I llm_load_vocab: special tokens cache size = 5
0.00.266.999 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.015 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.017 I llm_load_print_meta: arch             = gemma
0.00.267.017 I llm_load_print_meta: vocab type       = SPM
0.00.267.018 I llm_load_print_meta: n_vocab          = 256000
0.00.267.018 I llm_load_print_meta: n_merges         = 0
0.00.267.019 I llm_load_print_meta: vocab_only       = 0
0.00.267.019 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.019 I llm_load_print_meta: n_embd           = 2048
0.00.267.020 I llm_load_print_meta: n_layer          = 18
0.00.267.030 I llm_load_print_meta: n_head           = 8
0.00.267.032 I llm_load_print_meta: n_head_kv        = 1
0.00.267.032 I llm_load_print_meta: n_rot            = 256
0.00.267.033 I llm_load_print_meta: n_swa            = 0
0.00.267.033 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.033 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.035 I llm_load_print_meta: n_gqa            = 8
0.00.267.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.040 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.041 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.041 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.041 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.043 I llm_load_print_meta: n_ff             = 16384
0.00.267.043 I llm_load_print_meta: n_expert         = 0
0.00.267.044 I llm_load_print_meta: n_expert_used    = 0
0.00.267.044 I llm_load_print_meta: causal attn      = 1
0.00.267.044 I llm_load_print_meta: pooling type     = 0
0.00.267.044 I llm_load_print_meta: rope type        = 2
0.00.267.045 I llm_load_print_meta: rope scaling     = linear
0.00.267.046 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.047 I llm_load_print_meta: freq_scale_train = 1
0.00.267.047 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.048 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.048 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.049 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.049 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.051 I llm_load_print_meta: model type       = 2B
0.00.267.052 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.052 I llm_load_print_meta: model params     = 2.51 B
0.00.267.053 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.054 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.054 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.056 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.056 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.057 I llm_load_print_meta: max token length = 93
0.00.325.966 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.119 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.126 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.127 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.127 I llama_new_context_with_model: n_batch       = 2048
0.00.331.128 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.128 I llama_new_context_with_model: flash_attn    = 0
0.00.331.131 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.132 I llama_new_context_with_model: freq_scale    = 1
0.00.331.132 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.152 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.345.830 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.842 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.935 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.172 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.179 I llama_new_context_with_model: graph nodes  = 601
0.00.347.179 I llama_new_context_with_model: graph splits = 1
0.00.347.182 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.182 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.823 I main: llama threadpool init, n_threads = 4
0.00.421.839 I 
0.00.421.913 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.917 I 
0.00.421.949 I sampler seed: 478806438
0.00.421.960 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.963 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.963 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.964 I 
 increasities, and other types of offensive behavior that violate workplace policies.

**Procedure for Reporting Workplace Harassment**

**1. Gather Information**

- Identify

0.01.984.708 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6312.17 tokens per second)
0.01.984.710 I llama_perf_context_print:        load time =     421.03 ms
0.01.984.711 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.713 I llama_perf_context_print:        eval time =    1543.47 ms /    32 runs   (   48.23 ms per token,    20.73 tokens per second)
0.01.984.713 I llama_perf_context_print:       total time =    1562.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.287s
user	10m23.932s
sys	0m6.899s
