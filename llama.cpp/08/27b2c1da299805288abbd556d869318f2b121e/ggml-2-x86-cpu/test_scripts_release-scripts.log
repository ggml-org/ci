+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.372 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.381 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.396 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.397 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.399 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.400 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.401 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.402 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.402 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.406 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.406 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.407 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.408 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.656 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.438 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.444 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.445 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.446 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.448 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.449 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.451 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.452 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.453 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.454 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.455 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.457 I llama_model_loader: - type  f32:   37 tensors
0.00.130.458 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.378 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.237 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.842 I llm_load_vocab: special tokens cache size = 5
0.00.265.830 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.848 I llm_load_print_meta: arch             = gemma
0.00.265.848 I llm_load_print_meta: vocab type       = SPM
0.00.265.849 I llm_load_print_meta: n_vocab          = 256000
0.00.265.849 I llm_load_print_meta: n_merges         = 0
0.00.265.850 I llm_load_print_meta: vocab_only       = 0
0.00.265.850 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.850 I llm_load_print_meta: n_embd           = 2048
0.00.265.851 I llm_load_print_meta: n_layer          = 18
0.00.265.862 I llm_load_print_meta: n_head           = 8
0.00.265.863 I llm_load_print_meta: n_head_kv        = 1
0.00.265.863 I llm_load_print_meta: n_rot            = 256
0.00.265.863 I llm_load_print_meta: n_swa            = 0
0.00.265.863 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.864 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.865 I llm_load_print_meta: n_gqa            = 8
0.00.265.866 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.867 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.869 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.870 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.870 I llm_load_print_meta: n_ff             = 16384
0.00.265.871 I llm_load_print_meta: n_expert         = 0
0.00.265.871 I llm_load_print_meta: n_expert_used    = 0
0.00.265.871 I llm_load_print_meta: causal attn      = 1
0.00.265.872 I llm_load_print_meta: pooling type     = 0
0.00.265.872 I llm_load_print_meta: rope type        = 2
0.00.265.872 I llm_load_print_meta: rope scaling     = linear
0.00.265.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.874 I llm_load_print_meta: freq_scale_train = 1
0.00.265.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.875 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.875 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.876 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.877 I llm_load_print_meta: model type       = 2B
0.00.265.877 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.878 I llm_load_print_meta: model params     = 2.51 B
0.00.265.879 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.879 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.880 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.880 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.881 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.882 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.882 I llm_load_print_meta: max token length = 93
0.00.367.111 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.121 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.121 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.122 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.122 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.123 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.526 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.534 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.535 I llama_new_context_with_model: n_batch       = 2048
0.00.372.535 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.536 I llama_new_context_with_model: flash_attn    = 0
0.00.372.539 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.540 I llama_new_context_with_model: freq_scale    = 1
0.00.372.541 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.563 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.859 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.239 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.247 I llama_new_context_with_model: graph nodes  = 601
0.00.389.247 I llama_new_context_with_model: graph splits = 1
0.00.389.249 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.249 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.213 I main: llama threadpool init, n_threads = 4
0.00.477.227 I 
0.00.477.301 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.304 I 
0.00.477.346 I sampler seed: 3951309691
0.00.477.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.365 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.369 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.369 I 
 increasities, the allure of the unknown, and the promise of endless possibilities. 

These are the qualities that attract people to the idea of cryptocurrency.



0.02.735.104 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6505.03 tokens per second)
0.02.735.106 I llama_perf_context_print:        load time =     476.44 ms
0.02.735.108 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.735.109 I llama_perf_context_print:        eval time =    2238.22 ms /    32 runs   (   69.94 ms per token,    14.30 tokens per second)
0.02.735.110 I llama_perf_context_print:       total time =    2257.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.632 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.651 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.658 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.662 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.663 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.664 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.665 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.670 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.985 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.506 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.245 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.251 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.251 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.256 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.257 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.258 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.258 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.263 I llama_model_loader: - type  f32:   37 tensors
0.00.130.264 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.109 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.665 I llm_load_vocab: special tokens cache size = 5
0.00.269.708 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.724 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.725 I llm_load_print_meta: arch             = gemma
0.00.269.725 I llm_load_print_meta: vocab type       = SPM
0.00.269.726 I llm_load_print_meta: n_vocab          = 256000
0.00.269.726 I llm_load_print_meta: n_merges         = 0
0.00.269.727 I llm_load_print_meta: vocab_only       = 0
0.00.269.727 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.727 I llm_load_print_meta: n_embd           = 2048
0.00.269.727 I llm_load_print_meta: n_layer          = 18
0.00.269.739 I llm_load_print_meta: n_head           = 8
0.00.269.741 I llm_load_print_meta: n_head_kv        = 1
0.00.269.741 I llm_load_print_meta: n_rot            = 256
0.00.269.741 I llm_load_print_meta: n_swa            = 0
0.00.269.742 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.742 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.743 I llm_load_print_meta: n_gqa            = 8
0.00.269.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.745 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.746 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.747 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.748 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.748 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.748 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.749 I llm_load_print_meta: n_ff             = 16384
0.00.269.749 I llm_load_print_meta: n_expert         = 0
0.00.269.750 I llm_load_print_meta: n_expert_used    = 0
0.00.269.750 I llm_load_print_meta: causal attn      = 1
0.00.269.750 I llm_load_print_meta: pooling type     = 0
0.00.269.751 I llm_load_print_meta: rope type        = 2
0.00.269.751 I llm_load_print_meta: rope scaling     = linear
0.00.269.752 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.753 I llm_load_print_meta: freq_scale_train = 1
0.00.269.753 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.754 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.754 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.754 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.755 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.756 I llm_load_print_meta: model type       = 2B
0.00.269.756 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.757 I llm_load_print_meta: model params     = 2.51 B
0.00.269.758 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.758 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.760 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.760 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.761 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.761 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.762 I llm_load_print_meta: max token length = 93
0.00.366.260 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.432 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.438 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.438 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.439 I llama_new_context_with_model: n_batch       = 2048
0.00.371.439 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.440 I llama_new_context_with_model: flash_attn    = 0
0.00.371.442 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.443 I llama_new_context_with_model: freq_scale    = 1
0.00.371.444 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.464 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.386.101 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.115 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.450 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.456 I llama_new_context_with_model: graph nodes  = 601
0.00.387.456 I llama_new_context_with_model: graph splits = 1
0.00.387.459 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.459 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.010 I main: llama threadpool init, n_threads = 4
0.00.469.025 I 
0.00.469.099 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.102 I 
0.00.469.144 I sampler seed: 2001435661
0.00.469.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.169 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.173 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.173 I 
 increasities that could be exploited for gain or power.

**Answer:**

**Exploitative practices that could lead to privacy violations and data breaches:**

*

0.02.662.285 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6615.88 tokens per second)
0.02.662.288 I llama_perf_context_print:        load time =     468.25 ms
0.02.662.289 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.662.290 I llama_perf_context_print:        eval time =    2173.69 ms /    32 runs   (   67.93 ms per token,    14.72 tokens per second)
0.02.662.291 I llama_perf_context_print:       total time =    2193.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.540 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.001 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.010 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.017 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.028 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.029 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.843 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.047 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.860 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.865 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.866 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.867 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.871 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.873 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.873 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.877 I llama_model_loader: - type  f32:   37 tensors
0.00.130.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.115 I llm_load_vocab: special tokens cache size = 5
0.00.281.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.181 I llm_load_print_meta: arch             = gemma
0.00.281.182 I llm_load_print_meta: vocab type       = SPM
0.00.281.182 I llm_load_print_meta: n_vocab          = 256000
0.00.281.183 I llm_load_print_meta: n_merges         = 0
0.00.281.183 I llm_load_print_meta: vocab_only       = 0
0.00.281.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.184 I llm_load_print_meta: n_embd           = 2048
0.00.281.184 I llm_load_print_meta: n_layer          = 18
0.00.281.197 I llm_load_print_meta: n_head           = 8
0.00.281.198 I llm_load_print_meta: n_head_kv        = 1
0.00.281.198 I llm_load_print_meta: n_rot            = 256
0.00.281.199 I llm_load_print_meta: n_swa            = 0
0.00.281.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.200 I llm_load_print_meta: n_gqa            = 8
0.00.281.201 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.202 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.203 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.205 I llm_load_print_meta: n_ff             = 16384
0.00.281.206 I llm_load_print_meta: n_expert         = 0
0.00.281.206 I llm_load_print_meta: n_expert_used    = 0
0.00.281.207 I llm_load_print_meta: causal attn      = 1
0.00.281.207 I llm_load_print_meta: pooling type     = 0
0.00.281.207 I llm_load_print_meta: rope type        = 2
0.00.281.208 I llm_load_print_meta: rope scaling     = linear
0.00.281.210 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.210 I llm_load_print_meta: freq_scale_train = 1
0.00.281.211 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.211 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.211 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.212 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.212 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.212 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.213 I llm_load_print_meta: model type       = 2B
0.00.281.213 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.214 I llm_load_print_meta: model params     = 2.51 B
0.00.281.215 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.215 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.217 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.217 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.217 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.218 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.218 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.219 I llm_load_print_meta: max token length = 93
0.00.360.266 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.360.274 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.275 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.360.275 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.360.276 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.276 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.506 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.507 I llama_new_context_with_model: n_batch       = 2048
0.00.365.507 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.508 I llama_new_context_with_model: flash_attn    = 0
0.00.365.512 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.513 I llama_new_context_with_model: freq_scale    = 1
0.00.365.514 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.534 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.381.106 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.119 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.218 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.490 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.497 I llama_new_context_with_model: graph nodes  = 601
0.00.382.497 I llama_new_context_with_model: graph splits = 1
0.00.382.501 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.650 I main: llama threadpool init, n_threads = 4
0.00.468.672 I 
0.00.468.762 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.766 I 
0.00.468.814 I sampler seed: 1266223124
0.00.468.828 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.837 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.841 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.841 I 
 increably.

I am unable to find the requested information in the provided context. Please provide additional context or specify the information you are looking for. [end of text]


0.02.646.874 I llama_perf_sampler_print:    sampling time =       4.71 ms /    32 runs   (    0.15 ms per token,  6792.61 tokens per second)
0.02.646.877 I llama_perf_context_print:        load time =     467.89 ms
0.02.646.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.646.881 I llama_perf_context_print:        eval time =    2159.93 ms /    31 runs   (   69.68 ms per token,    14.35 tokens per second)
0.02.646.882 I llama_perf_context_print:       total time =    2178.23 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.524 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.026.785 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.026.796 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.026.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.819 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.823 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.824 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.825 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.826 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.829 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.830 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.830 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.831 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.832 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.187 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.066 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.067 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.067 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.073 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.073 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.144.074 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.078 I llama_model_loader: - type  f32:   37 tensors
0.00.144.079 I llama_model_loader: - type q8_0:  127 tensors
0.00.242.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.285.700 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.286.241 I llm_load_vocab: special tokens cache size = 5
0.00.307.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.307.032 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.307.032 I llm_load_print_meta: arch             = gemma
0.00.307.033 I llm_load_print_meta: vocab type       = SPM
0.00.307.033 I llm_load_print_meta: n_vocab          = 256000
0.00.307.034 I llm_load_print_meta: n_merges         = 0
0.00.307.034 I llm_load_print_meta: vocab_only       = 0
0.00.307.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.307.035 I llm_load_print_meta: n_embd           = 2048
0.00.307.035 I llm_load_print_meta: n_layer          = 18
0.00.307.048 I llm_load_print_meta: n_head           = 8
0.00.307.049 I llm_load_print_meta: n_head_kv        = 1
0.00.307.050 I llm_load_print_meta: n_rot            = 256
0.00.307.050 I llm_load_print_meta: n_swa            = 0
0.00.307.050 I llm_load_print_meta: n_embd_head_k    = 256
0.00.307.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.307.052 I llm_load_print_meta: n_gqa            = 8
0.00.307.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.307.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.307.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.307.056 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.307.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.307.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.307.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.307.057 I llm_load_print_meta: n_ff             = 16384
0.00.307.058 I llm_load_print_meta: n_expert         = 0
0.00.307.058 I llm_load_print_meta: n_expert_used    = 0
0.00.307.058 I llm_load_print_meta: causal attn      = 1
0.00.307.059 I llm_load_print_meta: pooling type     = 0
0.00.307.059 I llm_load_print_meta: rope type        = 2
0.00.307.059 I llm_load_print_meta: rope scaling     = linear
0.00.307.061 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.307.061 I llm_load_print_meta: freq_scale_train = 1
0.00.307.062 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.307.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.307.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.307.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.307.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.307.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.307.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.307.065 I llm_load_print_meta: model type       = 2B
0.00.307.069 I llm_load_print_meta: model ftype      = Q8_0
0.00.307.070 I llm_load_print_meta: model params     = 2.51 B
0.00.307.071 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.307.071 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.307.072 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.307.072 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.307.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.307.073 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.307.073 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.307.073 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.307.074 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.307.074 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.307.074 I llm_load_print_meta: max token length = 93
0.00.384.311 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.384.318 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.389.469 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.475 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.475 I llama_new_context_with_model: n_batch       = 2048
0.00.389.476 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.476 I llama_new_context_with_model: flash_attn    = 0
0.00.389.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.479 I llama_new_context_with_model: freq_scale    = 1
0.00.389.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.498 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.404.154 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.172 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.265 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.966 I llama_new_context_with_model: graph nodes  = 601
0.00.405.967 I llama_new_context_with_model: graph splits = 1
0.00.405.970 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.971 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.493.266 I main: llama threadpool init, n_threads = 4
0.00.493.281 I 
0.00.493.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.493.357 I 
0.00.493.397 I sampler seed: 1023398748
0.00.493.409 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.412 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.413 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.414 I 
 increadibly close to a truth, but I lack the experience and wisdom to definitively confirm or deny it.

**Is there evidence to suggest that social media platforms

0.02.909.576 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6298.91 tokens per second)
0.02.909.579 I llama_perf_context_print:        load time =     492.52 ms
0.02.909.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.909.583 I llama_perf_context_print:        eval time =    2396.22 ms /    32 runs   (   74.88 ms per token,    13.35 tokens per second)
0.02.909.584 I llama_perf_context_print:       total time =    2416.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.502s
user	0m39.036s
sys	0m9.489s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4404 (0827b2c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40246.85 ms
main:    total time = 40246.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.400 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.418 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.430 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.432 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.433 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.435 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.440 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.440 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.441 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.442 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.999 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.006 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.007 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.007 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.008 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.009 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.010 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.013 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.014 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.014 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.015 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.017 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.020 I llama_model_loader: - type  f32:   37 tensors
0.00.131.022 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.022 I llama_model_loader: - type q6_K:   19 tensors
0.00.222.430 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.841 I llm_load_vocab: special tokens cache size = 5
0.00.289.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.683 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.684 I llm_load_print_meta: arch             = gemma
0.00.289.684 I llm_load_print_meta: vocab type       = SPM
0.00.289.685 I llm_load_print_meta: n_vocab          = 256000
0.00.289.685 I llm_load_print_meta: n_merges         = 0
0.00.289.686 I llm_load_print_meta: vocab_only       = 0
0.00.289.686 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.686 I llm_load_print_meta: n_embd           = 2048
0.00.289.687 I llm_load_print_meta: n_layer          = 18
0.00.289.698 I llm_load_print_meta: n_head           = 8
0.00.289.700 I llm_load_print_meta: n_head_kv        = 1
0.00.289.700 I llm_load_print_meta: n_rot            = 256
0.00.289.701 I llm_load_print_meta: n_swa            = 0
0.00.289.701 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.701 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.702 I llm_load_print_meta: n_gqa            = 8
0.00.289.703 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.704 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.705 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.707 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.707 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.707 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.708 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.709 I llm_load_print_meta: n_ff             = 16384
0.00.289.709 I llm_load_print_meta: n_expert         = 0
0.00.289.709 I llm_load_print_meta: n_expert_used    = 0
0.00.289.710 I llm_load_print_meta: causal attn      = 1
0.00.289.710 I llm_load_print_meta: pooling type     = 0
0.00.289.710 I llm_load_print_meta: rope type        = 2
0.00.289.711 I llm_load_print_meta: rope scaling     = linear
0.00.289.713 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.713 I llm_load_print_meta: freq_scale_train = 1
0.00.289.714 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.714 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.714 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.715 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.715 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.715 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.715 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.716 I llm_load_print_meta: model type       = 2B
0.00.289.716 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.717 I llm_load_print_meta: model params     = 2.51 B
0.00.289.718 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.718 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.719 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.719 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.719 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.720 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.720 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.720 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.721 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.721 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.722 I llm_load_print_meta: max token length = 93
0.00.350.704 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.350.711 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.350.712 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.350.712 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.350.713 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.350.714 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.355.952 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.958 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.959 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.959 I llama_new_context_with_model: n_batch       = 2048
0.00.355.960 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.960 I llama_new_context_with_model: flash_attn    = 0
0.00.355.962 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.963 I llama_new_context_with_model: freq_scale    = 1
0.00.355.964 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.983 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.370.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.455 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.860 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.866 I llama_new_context_with_model: graph nodes  = 601
0.00.371.867 I llama_new_context_with_model: graph splits = 1
0.00.371.869 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.869 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.239 I main: llama threadpool init, n_threads = 4
0.00.447.254 I 
0.00.447.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.331 I 
0.00.447.373 I sampler seed: 623101416
0.00.447.385 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.389 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.390 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.392 I 
 increamically. [end of text]


0.00.646.493 I llama_perf_sampler_print:    sampling time =       0.69 ms /     5 runs   (    0.14 ms per token,  7235.89 tokens per second)
0.00.646.495 I llama_perf_context_print:        load time =     446.48 ms
0.00.646.497 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.646.498 I llama_perf_context_print:        eval time =     196.00 ms /     4 runs   (   49.00 ms per token,    20.41 tokens per second)
0.00.646.510 I llama_perf_context_print:       total time =     199.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4404 (0827b2c1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40231.28 ms
main:    total time = 40231.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4404 (0827b2c1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.712 I main: llama backend init
0.00.000.718 I main: load the model and apply lora adapter, if any
0.00.021.531 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.559 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.560 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.561 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.562 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.562 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.566 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.566 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.567 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.568 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.569 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.892 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.705 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.715 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.716 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.719 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.720 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.723 I llama_model_loader: - type  f32:   37 tensors
0.00.130.725 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.726 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.870 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.417 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.939 I llm_load_vocab: special tokens cache size = 5
0.00.270.827 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.843 I llm_load_print_meta: arch             = gemma
0.00.270.843 I llm_load_print_meta: vocab type       = SPM
0.00.270.844 I llm_load_print_meta: n_vocab          = 256000
0.00.270.844 I llm_load_print_meta: n_merges         = 0
0.00.270.845 I llm_load_print_meta: vocab_only       = 0
0.00.270.845 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.845 I llm_load_print_meta: n_embd           = 2048
0.00.270.846 I llm_load_print_meta: n_layer          = 18
0.00.270.857 I llm_load_print_meta: n_head           = 8
0.00.270.858 I llm_load_print_meta: n_head_kv        = 1
0.00.270.858 I llm_load_print_meta: n_rot            = 256
0.00.270.859 I llm_load_print_meta: n_swa            = 0
0.00.270.859 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.859 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.860 I llm_load_print_meta: n_gqa            = 8
0.00.270.861 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.862 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.864 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.866 I llm_load_print_meta: n_ff             = 16384
0.00.270.866 I llm_load_print_meta: n_expert         = 0
0.00.270.866 I llm_load_print_meta: n_expert_used    = 0
0.00.270.867 I llm_load_print_meta: causal attn      = 1
0.00.270.867 I llm_load_print_meta: pooling type     = 0
0.00.270.867 I llm_load_print_meta: rope type        = 2
0.00.270.868 I llm_load_print_meta: rope scaling     = linear
0.00.270.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.869 I llm_load_print_meta: freq_scale_train = 1
0.00.270.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.870 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.871 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.871 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.871 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.872 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.872 I llm_load_print_meta: model type       = 2B
0.00.270.873 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.873 I llm_load_print_meta: model params     = 2.51 B
0.00.270.874 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.877 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.878 I llm_load_print_meta: max token length = 93
0.00.328.819 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.000 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.001 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.001 I llama_new_context_with_model: n_batch       = 2048
0.00.334.002 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.002 I llama_new_context_with_model: flash_attn    = 0
0.00.334.004 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.005 I llama_new_context_with_model: freq_scale    = 1
0.00.334.006 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.025 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.348.621 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.636 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.727 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.963 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.970 I llama_new_context_with_model: graph nodes  = 601
0.00.349.970 I llama_new_context_with_model: graph splits = 1
0.00.349.972 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.349.973 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.230 I main: llama threadpool init, n_threads = 4
0.00.425.246 I 
0.00.425.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.327 I 
0.00.425.369 I sampler seed: 3119207888
0.00.425.380 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.388 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.391 I 
 squaRED BULLS 

I am sorry, I am unable to generate responses that promote or suggest hate speech or harmful content. [end of text]


0.01.754.681 I llama_perf_sampler_print:    sampling time =       4.13 ms /    28 runs   (    0.15 ms per token,  6779.66 tokens per second)
0.01.754.684 I llama_perf_context_print:        load time =     424.50 ms
0.01.754.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.754.687 I llama_perf_context_print:        eval time =    1313.26 ms /    27 runs   (   48.64 ms per token,    20.56 tokens per second)
0.01.754.688 I llama_perf_context_print:       total time =    1329.46 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.645s
user	10m17.824s
sys	0m6.718s
