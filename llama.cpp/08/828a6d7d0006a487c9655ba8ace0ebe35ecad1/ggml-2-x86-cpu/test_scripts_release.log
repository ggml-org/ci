+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.485 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.685 I main: llama backend init
0.00.001.786 I main: load the model and apply lora adapter, if any
0.00.024.221 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.231 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.239 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.245 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.251 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.253 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.254 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.254 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.255 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.260 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.261 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.941 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.367 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.373 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.374 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.374 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.375 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.376 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.379 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.380 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.380 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.381 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.385 I llama_model_loader: - type  f32:   37 tensors
0.00.134.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.857 I llm_load_vocab: special tokens cache size = 5
0.00.274.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.810 I llm_load_print_meta: arch             = gemma
0.00.274.810 I llm_load_print_meta: vocab type       = SPM
0.00.274.811 I llm_load_print_meta: n_vocab          = 256000
0.00.274.811 I llm_load_print_meta: n_merges         = 0
0.00.274.812 I llm_load_print_meta: vocab_only       = 0
0.00.274.812 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.812 I llm_load_print_meta: n_embd           = 2048
0.00.274.813 I llm_load_print_meta: n_layer          = 18
0.00.274.825 I llm_load_print_meta: n_head           = 8
0.00.274.826 I llm_load_print_meta: n_head_kv        = 1
0.00.274.826 I llm_load_print_meta: n_rot            = 256
0.00.274.826 I llm_load_print_meta: n_swa            = 0
0.00.274.827 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.827 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.828 I llm_load_print_meta: n_gqa            = 8
0.00.274.829 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.833 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.833 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.834 I llm_load_print_meta: n_ff             = 16384
0.00.274.834 I llm_load_print_meta: n_expert         = 0
0.00.274.835 I llm_load_print_meta: n_expert_used    = 0
0.00.274.835 I llm_load_print_meta: causal attn      = 1
0.00.274.835 I llm_load_print_meta: pooling type     = 0
0.00.274.836 I llm_load_print_meta: rope type        = 2
0.00.274.836 I llm_load_print_meta: rope scaling     = linear
0.00.274.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.838 I llm_load_print_meta: freq_scale_train = 1
0.00.274.839 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.840 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.840 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.841 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.841 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.842 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.842 I llm_load_print_meta: model type       = 2B
0.00.274.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.845 I llm_load_print_meta: model params     = 2.51 B
0.00.274.846 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.850 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.850 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.851 I llm_load_print_meta: max token length = 93
0.00.374.930 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.374.939 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.374.940 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.374.941 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.374.941 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.374.942 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.245 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.252 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.252 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.253 I llama_new_context_with_model: n_batch       = 2048
0.00.380.253 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.253 I llama_new_context_with_model: flash_attn    = 0
0.00.380.256 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.257 I llama_new_context_with_model: freq_scale    = 1
0.00.380.258 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.089 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.104 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.194 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.464 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.469 I llama_new_context_with_model: graph nodes  = 601
0.00.396.470 I llama_new_context_with_model: graph splits = 1
0.00.396.472 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.011 I main: llama threadpool init, n_threads = 4
0.00.482.022 I 
0.00.482.095 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.098 I 
0.00.482.138 I sampler seed: 1495313836
0.00.482.149 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.154 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.154 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.155 I 
 increasively.

I am unable to generate a response as I am unable to access real-time information. Therefore, I am unable to provide an answer to

0.02.733.684 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6972.32 tokens per second)
0.02.733.687 I llama_perf_context_print:        load time =     480.20 ms
0.02.733.688 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.689 I llama_perf_context_print:        eval time =    2233.15 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.733.690 I llama_perf_context_print:       total time =    2251.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.001.825 I main: load the model and apply lora adapter, if any
0.00.022.002 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.023 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.028 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.029 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.030 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.030 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.031 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.036 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.482 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.333 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.346 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.347 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.349 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.354 I llama_model_loader: - type  f32:   37 tensors
0.00.132.355 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.239 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.346 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.019 I llm_load_vocab: special tokens cache size = 5
0.00.270.863 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.879 I llm_load_print_meta: arch             = gemma
0.00.270.880 I llm_load_print_meta: vocab type       = SPM
0.00.270.880 I llm_load_print_meta: n_vocab          = 256000
0.00.270.881 I llm_load_print_meta: n_merges         = 0
0.00.270.881 I llm_load_print_meta: vocab_only       = 0
0.00.270.881 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.882 I llm_load_print_meta: n_embd           = 2048
0.00.270.882 I llm_load_print_meta: n_layer          = 18
0.00.270.894 I llm_load_print_meta: n_head           = 8
0.00.270.894 I llm_load_print_meta: n_head_kv        = 1
0.00.270.895 I llm_load_print_meta: n_rot            = 256
0.00.270.895 I llm_load_print_meta: n_swa            = 0
0.00.270.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.897 I llm_load_print_meta: n_gqa            = 8
0.00.270.898 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.901 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.901 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.901 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.902 I llm_load_print_meta: n_ff             = 16384
0.00.270.903 I llm_load_print_meta: n_expert         = 0
0.00.270.903 I llm_load_print_meta: n_expert_used    = 0
0.00.270.903 I llm_load_print_meta: causal attn      = 1
0.00.270.904 I llm_load_print_meta: pooling type     = 0
0.00.270.904 I llm_load_print_meta: rope type        = 2
0.00.270.904 I llm_load_print_meta: rope scaling     = linear
0.00.270.906 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.906 I llm_load_print_meta: freq_scale_train = 1
0.00.270.907 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.907 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.907 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.908 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.908 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.908 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.909 I llm_load_print_meta: model type       = 2B
0.00.270.909 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.910 I llm_load_print_meta: model params     = 2.51 B
0.00.270.911 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.912 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.912 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.913 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.913 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.914 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.914 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.915 I llm_load_print_meta: max token length = 93
0.00.367.542 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.748 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.754 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.754 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.755 I llama_new_context_with_model: n_batch       = 2048
0.00.372.755 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.756 I llama_new_context_with_model: flash_attn    = 0
0.00.372.758 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.759 I llama_new_context_with_model: freq_scale    = 1
0.00.372.760 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.498 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.514 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.606 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.859 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.864 I llama_new_context_with_model: graph nodes  = 601
0.00.388.864 I llama_new_context_with_model: graph splits = 1
0.00.388.866 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.733 I main: llama threadpool init, n_threads = 4
0.00.471.747 I 
0.00.471.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.471.826 I 
0.00.471.873 I sampler seed: 1404720109
0.00.471.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.887 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.890 I 
 seconary and tertiary lymphoid organs are distinguished from each other by:

a) Location
b) Structure
c) Function
d) Number of afferent

0.02.685.579 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6802.72 tokens per second)
0.02.685.582 I llama_perf_context_print:        load time =     469.89 ms
0.02.685.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.685.585 I llama_perf_context_print:        eval time =    2194.87 ms /    32 runs   (   68.59 ms per token,    14.58 tokens per second)
0.02.685.586 I llama_perf_context_print:       total time =    2213.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.564 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.001.846 I main: load the model and apply lora adapter, if any
0.00.022.479 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.491 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.502 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.513 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.518 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.518 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.521 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.522 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.523 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.524 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.530 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.531 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.532 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.533 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.761 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.653 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.656 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.660 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.665 I llama_model_loader: - type  f32:   37 tensors
0.00.132.666 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.717 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.266 I llm_load_vocab: special tokens cache size = 5
0.00.265.959 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.974 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.974 I llm_load_print_meta: arch             = gemma
0.00.265.975 I llm_load_print_meta: vocab type       = SPM
0.00.265.975 I llm_load_print_meta: n_vocab          = 256000
0.00.265.976 I llm_load_print_meta: n_merges         = 0
0.00.265.976 I llm_load_print_meta: vocab_only       = 0
0.00.265.976 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.977 I llm_load_print_meta: n_embd           = 2048
0.00.265.977 I llm_load_print_meta: n_layer          = 18
0.00.265.987 I llm_load_print_meta: n_head           = 8
0.00.265.988 I llm_load_print_meta: n_head_kv        = 1
0.00.265.989 I llm_load_print_meta: n_rot            = 256
0.00.265.989 I llm_load_print_meta: n_swa            = 0
0.00.265.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.991 I llm_load_print_meta: n_gqa            = 8
0.00.265.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.997 I llm_load_print_meta: n_ff             = 16384
0.00.265.998 I llm_load_print_meta: n_expert         = 0
0.00.265.998 I llm_load_print_meta: n_expert_used    = 0
0.00.265.998 I llm_load_print_meta: causal attn      = 1
0.00.265.999 I llm_load_print_meta: pooling type     = 0
0.00.265.999 I llm_load_print_meta: rope type        = 2
0.00.265.999 I llm_load_print_meta: rope scaling     = linear
0.00.266.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.001 I llm_load_print_meta: freq_scale_train = 1
0.00.266.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.002 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.002 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.002 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.003 I llm_load_print_meta: model type       = 2B
0.00.266.004 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.005 I llm_load_print_meta: model params     = 2.51 B
0.00.266.006 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.008 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.009 I llm_load_print_meta: max token length = 93
0.00.361.314 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.361.321 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.361.322 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.361.323 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.361.323 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.361.324 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.366.579 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.585 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.586 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.586 I llama_new_context_with_model: n_batch       = 2048
0.00.366.586 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.587 I llama_new_context_with_model: flash_attn    = 0
0.00.366.589 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.590 I llama_new_context_with_model: freq_scale    = 1
0.00.366.591 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.901 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.914 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.012 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.296 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.300 I llama_new_context_with_model: graph nodes  = 601
0.00.382.300 I llama_new_context_with_model: graph splits = 1
0.00.382.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.402 I main: llama threadpool init, n_threads = 4
0.00.473.416 I 
0.00.473.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.492 I 
0.00.473.534 I sampler seed: 3116568953
0.00.473.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.547 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.547 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.549 I 
 increably.

I am not sure what the meaning of "incredibly" is in this context. Can you please explain what it means?

**Context

0.02.636.997 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6395.35 tokens per second)
0.02.637.000 I llama_perf_context_print:        load time =     471.53 ms
0.02.637.001 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.637.002 I llama_perf_context_print:        eval time =    2144.42 ms /    32 runs   (   67.01 ms per token,    14.92 tokens per second)
0.02.637.003 I llama_perf_context_print:       total time =    2163.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.022.345 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.353 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.361 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.366 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.370 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.371 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.373 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.379 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.951 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.792 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.799 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.801 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.802 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.806 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.807 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.810 I llama_model_loader: - type  f32:   37 tensors
0.00.132.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.060 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.041 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.556 I llm_load_vocab: special tokens cache size = 5
0.00.263.971 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.987 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.987 I llm_load_print_meta: arch             = gemma
0.00.263.988 I llm_load_print_meta: vocab type       = SPM
0.00.263.988 I llm_load_print_meta: n_vocab          = 256000
0.00.263.989 I llm_load_print_meta: n_merges         = 0
0.00.263.989 I llm_load_print_meta: vocab_only       = 0
0.00.263.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.990 I llm_load_print_meta: n_embd           = 2048
0.00.263.990 I llm_load_print_meta: n_layer          = 18
0.00.264.001 I llm_load_print_meta: n_head           = 8
0.00.264.002 I llm_load_print_meta: n_head_kv        = 1
0.00.264.003 I llm_load_print_meta: n_rot            = 256
0.00.264.003 I llm_load_print_meta: n_swa            = 0
0.00.264.003 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.004 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.004 I llm_load_print_meta: n_gqa            = 8
0.00.264.005 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.008 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.009 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.009 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.010 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.010 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.011 I llm_load_print_meta: n_ff             = 16384
0.00.264.011 I llm_load_print_meta: n_expert         = 0
0.00.264.011 I llm_load_print_meta: n_expert_used    = 0
0.00.264.012 I llm_load_print_meta: causal attn      = 1
0.00.264.012 I llm_load_print_meta: pooling type     = 0
0.00.264.012 I llm_load_print_meta: rope type        = 2
0.00.264.013 I llm_load_print_meta: rope scaling     = linear
0.00.264.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.015 I llm_load_print_meta: freq_scale_train = 1
0.00.264.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.017 I llm_load_print_meta: model type       = 2B
0.00.264.018 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.019 I llm_load_print_meta: model params     = 2.51 B
0.00.264.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.020 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.020 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.021 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.021 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.021 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.022 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.022 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.022 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.023 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.023 I llm_load_print_meta: max token length = 93
0.00.335.713 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.720 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.881 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.888 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.888 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.888 I llama_new_context_with_model: n_batch       = 2048
0.00.340.889 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.889 I llama_new_context_with_model: flash_attn    = 0
0.00.340.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.892 I llama_new_context_with_model: freq_scale    = 1
0.00.340.893 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.097 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.111 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.201 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.401 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.407 I llama_new_context_with_model: graph nodes  = 601
0.00.356.408 I llama_new_context_with_model: graph splits = 1
0.00.356.410 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.773 I main: llama threadpool init, n_threads = 4
0.00.441.784 I 
0.00.441.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.862 I 
0.00.441.901 I sampler seed: 1317361852
0.00.441.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.920 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.924 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.924 I 
 increasels with a penchant for mischief.

The mischievous creatures were known for their playful pranks and mischievous antics. They would often steal toys, cause chaos in the

0.02.752.844 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6637.17 tokens per second)
0.02.752.846 I llama_perf_context_print:        load time =     439.86 ms
0.02.752.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.752.849 I llama_perf_context_print:        eval time =    2291.41 ms /    32 runs   (   71.61 ms per token,    13.97 tokens per second)
0.02.752.850 I llama_perf_context_print:       total time =    2311.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.482s
user	0m38.582s
sys	0m9.546s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4019 (08828a6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31998.18 ms
main:    total time = 31998.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.838 I main: load the model and apply lora adapter, if any
0.00.022.415 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.441 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.443 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.449 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.451 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.456 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.456 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.457 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.163 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.044 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.045 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.046 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.050 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.055 I llama_model_loader: - type  f32:   37 tensors
0.00.132.055 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.056 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.865 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.569 I llm_load_vocab: special tokens cache size = 5
0.00.263.124 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.138 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.139 I llm_load_print_meta: arch             = gemma
0.00.263.139 I llm_load_print_meta: vocab type       = SPM
0.00.263.140 I llm_load_print_meta: n_vocab          = 256000
0.00.263.140 I llm_load_print_meta: n_merges         = 0
0.00.263.140 I llm_load_print_meta: vocab_only       = 0
0.00.263.141 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.141 I llm_load_print_meta: n_embd           = 2048
0.00.263.141 I llm_load_print_meta: n_layer          = 18
0.00.263.153 I llm_load_print_meta: n_head           = 8
0.00.263.154 I llm_load_print_meta: n_head_kv        = 1
0.00.263.154 I llm_load_print_meta: n_rot            = 256
0.00.263.154 I llm_load_print_meta: n_swa            = 0
0.00.263.155 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.155 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.156 I llm_load_print_meta: n_gqa            = 8
0.00.263.157 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.158 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.160 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.160 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.161 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.161 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.162 I llm_load_print_meta: n_ff             = 16384
0.00.263.162 I llm_load_print_meta: n_expert         = 0
0.00.263.163 I llm_load_print_meta: n_expert_used    = 0
0.00.263.163 I llm_load_print_meta: causal attn      = 1
0.00.263.164 I llm_load_print_meta: pooling type     = 0
0.00.263.164 I llm_load_print_meta: rope type        = 2
0.00.263.165 I llm_load_print_meta: rope scaling     = linear
0.00.263.166 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.166 I llm_load_print_meta: freq_scale_train = 1
0.00.263.167 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.167 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.167 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.168 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.168 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.169 I llm_load_print_meta: model type       = 2B
0.00.263.169 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.170 I llm_load_print_meta: model params     = 2.51 B
0.00.263.171 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.174 I llm_load_print_meta: max token length = 93
0.00.324.212 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.324.219 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.324.220 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.324.220 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.324.221 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.324.221 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.484 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.491 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.491 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.492 I llama_new_context_with_model: n_batch       = 2048
0.00.329.492 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.493 I llama_new_context_with_model: flash_attn    = 0
0.00.329.496 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.497 I llama_new_context_with_model: freq_scale    = 1
0.00.329.498 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.616 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.632 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.958 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.963 I llama_new_context_with_model: graph nodes  = 601
0.00.345.964 I llama_new_context_with_model: graph splits = 1
0.00.345.965 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.773 I main: llama threadpool init, n_threads = 4
0.00.421.787 I 
0.00.421.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.871 I 
0.00.421.914 I sampler seed: 1018158843
0.00.421.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.934 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.935 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.935 I 
 seconded by the wind to create a whirlwind.

This is a metaphor for:

A. The power of emotions
B. The unpredictable nature of life

0.02.085.483 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6611.90 tokens per second)
0.02.085.486 I llama_perf_context_print:        load time =     419.92 ms
0.02.085.486 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.085.488 I llama_perf_context_print:        eval time =    1644.78 ms /    32 runs   (   51.40 ms per token,    19.46 tokens per second)
0.02.085.488 I llama_perf_context_print:       total time =    1663.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4019 (08828a6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32033.34 ms
main:    total time = 32033.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.516 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.708 I main: llama backend init
0.00.001.813 I main: load the model and apply lora adapter, if any
0.00.022.242 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.254 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.265 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.266 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.266 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.267 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.721 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.723 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.724 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.728 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.730 I llama_model_loader: - type  f32:   37 tensors
0.00.131.731 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.732 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.753 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.400 I llm_load_vocab: special tokens cache size = 5
0.00.263.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.967 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.968 I llm_load_print_meta: arch             = gemma
0.00.263.968 I llm_load_print_meta: vocab type       = SPM
0.00.263.969 I llm_load_print_meta: n_vocab          = 256000
0.00.263.969 I llm_load_print_meta: n_merges         = 0
0.00.263.970 I llm_load_print_meta: vocab_only       = 0
0.00.263.970 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.970 I llm_load_print_meta: n_embd           = 2048
0.00.263.971 I llm_load_print_meta: n_layer          = 18
0.00.263.983 I llm_load_print_meta: n_head           = 8
0.00.263.984 I llm_load_print_meta: n_head_kv        = 1
0.00.263.985 I llm_load_print_meta: n_rot            = 256
0.00.263.985 I llm_load_print_meta: n_swa            = 0
0.00.263.985 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.986 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.987 I llm_load_print_meta: n_gqa            = 8
0.00.263.988 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.989 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.991 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.991 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.992 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.992 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.993 I llm_load_print_meta: n_ff             = 16384
0.00.263.993 I llm_load_print_meta: n_expert         = 0
0.00.263.993 I llm_load_print_meta: n_expert_used    = 0
0.00.263.994 I llm_load_print_meta: causal attn      = 1
0.00.263.994 I llm_load_print_meta: pooling type     = 0
0.00.263.994 I llm_load_print_meta: rope type        = 2
0.00.263.995 I llm_load_print_meta: rope scaling     = linear
0.00.263.996 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.997 I llm_load_print_meta: freq_scale_train = 1
0.00.263.997 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.998 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.998 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.998 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.999 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.999 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.000 I llm_load_print_meta: model type       = 2B
0.00.264.000 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.001 I llm_load_print_meta: model params     = 2.51 B
0.00.264.002 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.002 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.002 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.003 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.003 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.003 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.004 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.004 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.004 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.005 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.005 I llm_load_print_meta: max token length = 93
0.00.324.721 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.864 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.870 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.871 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.871 I llama_new_context_with_model: n_batch       = 2048
0.00.329.871 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.872 I llama_new_context_with_model: flash_attn    = 0
0.00.329.875 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.876 I llama_new_context_with_model: freq_scale    = 1
0.00.329.877 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.657 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.673 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.768 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.068 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.074 I llama_new_context_with_model: graph nodes  = 601
0.00.347.075 I llama_new_context_with_model: graph splits = 1
0.00.347.077 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.306 I main: llama threadpool init, n_threads = 4
0.00.422.320 I 
0.00.422.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.394 I 
0.00.422.434 I sampler seed: 1260908236
0.00.422.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.447 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.448 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.449 I 
 seconal to the species Homo erectus.

**Answer:** Homo erectus

Explanation: The given text states that the species Homo erectus is one of

0.01.994.218 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6822.41 tokens per second)
0.01.994.220 I llama_perf_context_print:        load time =     420.47 ms
0.01.994.221 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.994.224 I llama_perf_context_print:        eval time =    1553.20 ms /    32 runs   (   48.54 ms per token,    20.60 tokens per second)
0.01.994.225 I llama_perf_context_print:       total time =    1571.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.906s
user	8m14.541s
sys	0m6.670s
