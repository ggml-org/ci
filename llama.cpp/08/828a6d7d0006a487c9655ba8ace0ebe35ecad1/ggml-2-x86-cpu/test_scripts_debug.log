+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.583 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.595 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.684 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.696 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.698 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.703 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.707 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.708 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.709 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.710 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.711 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.718 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.723 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.651 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.312 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.842 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.847 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.854 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.855 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.863 I llama_model_loader: - type  f32:   37 tensors
0.00.265.866 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.081 I llm_load_vocab: special tokens cache size = 5
0.00.632.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.976 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.977 I llm_load_print_meta: arch             = gemma
0.00.632.977 I llm_load_print_meta: vocab type       = SPM
0.00.632.978 I llm_load_print_meta: n_vocab          = 256000
0.00.632.981 I llm_load_print_meta: n_merges         = 0
0.00.632.981 I llm_load_print_meta: vocab_only       = 0
0.00.632.981 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.982 I llm_load_print_meta: n_embd           = 2048
0.00.632.982 I llm_load_print_meta: n_layer          = 18
0.00.633.048 I llm_load_print_meta: n_head           = 8
0.00.633.055 I llm_load_print_meta: n_head_kv        = 1
0.00.633.060 I llm_load_print_meta: n_rot            = 256
0.00.633.060 I llm_load_print_meta: n_swa            = 0
0.00.633.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.061 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.066 I llm_load_print_meta: n_gqa            = 8
0.00.633.070 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.077 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.078 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.085 I llm_load_print_meta: n_ff             = 16384
0.00.633.085 I llm_load_print_meta: n_expert         = 0
0.00.633.086 I llm_load_print_meta: n_expert_used    = 0
0.00.633.087 I llm_load_print_meta: causal attn      = 1
0.00.633.087 I llm_load_print_meta: pooling type     = 0
0.00.633.087 I llm_load_print_meta: rope type        = 2
0.00.633.089 I llm_load_print_meta: rope scaling     = linear
0.00.633.091 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.091 I llm_load_print_meta: freq_scale_train = 1
0.00.633.092 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.092 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.093 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.093 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.093 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.097 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.098 I llm_load_print_meta: model type       = 2B
0.00.633.099 I llm_load_print_meta: model ftype      = Q8_0
0.00.633.100 I llm_load_print_meta: model params     = 2.51 B
0.00.633.110 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.633.111 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.111 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.112 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.112 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.113 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.120 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.122 I llm_load_print_meta: max token length = 93
0.00.737.172 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.737.179 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.737.180 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.737.181 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.737.181 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.737.182 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.743.047 I llama_new_context_with_model: n_seq_max     = 1
0.00.743.053 I llama_new_context_with_model: n_ctx         = 4096
0.00.743.054 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.743.054 I llama_new_context_with_model: n_batch       = 2048
0.00.743.055 I llama_new_context_with_model: n_ubatch      = 512
0.00.743.055 I llama_new_context_with_model: flash_attn    = 0
0.00.743.058 I llama_new_context_with_model: freq_base     = 10000.0
0.00.743.058 I llama_new_context_with_model: freq_scale    = 1
0.00.743.059 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.757.735 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.757.772 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.757.897 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.760.507 I llama_new_context_with_model: graph nodes  = 601
0.00.760.507 I llama_new_context_with_model: graph splits = 1
0.00.760.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.917 I main: llama threadpool init, n_threads = 4
0.01.364.930 I 
0.01.365.035 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.039 I 
0.01.365.280 I sampler seed: 1485358255
0.01.365.293 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.300 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.303 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.303 I 
 increasities, and the like.

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.11.097.641 I llama_perf_sampler_print:    sampling time =      35.39 ms /    24 runs   (    1.47 ms per token,   678.22 tokens per second)
0.11.097.664 I llama_perf_context_print:        load time =    1362.05 ms
0.11.097.666 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.097.668 I llama_perf_context_print:        eval time =    9667.80 ms /    23 runs   (  420.34 ms per token,     2.38 tokens per second)
0.11.097.669 I llama_perf_context_print:       total time =    9732.73 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.025.158 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.253 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.266 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.278 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.288 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.299 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.303 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.304 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.305 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.306 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.839 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.126 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.127 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.128 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.129 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.138 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.139 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.140 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.148 I llama_model_loader: - type  f32:   37 tensors
0.00.266.150 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.742 I llm_load_vocab: special tokens cache size = 5
0.00.600.419 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.488 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.489 I llm_load_print_meta: arch             = gemma
0.00.600.489 I llm_load_print_meta: vocab type       = SPM
0.00.600.491 I llm_load_print_meta: n_vocab          = 256000
0.00.600.493 I llm_load_print_meta: n_merges         = 0
0.00.600.493 I llm_load_print_meta: vocab_only       = 0
0.00.600.494 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.494 I llm_load_print_meta: n_embd           = 2048
0.00.600.495 I llm_load_print_meta: n_layer          = 18
0.00.600.561 I llm_load_print_meta: n_head           = 8
0.00.600.568 I llm_load_print_meta: n_head_kv        = 1
0.00.600.569 I llm_load_print_meta: n_rot            = 256
0.00.600.573 I llm_load_print_meta: n_swa            = 0
0.00.600.574 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.574 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.579 I llm_load_print_meta: n_gqa            = 8
0.00.600.584 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.589 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.590 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.593 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.594 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.594 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.599 I llm_load_print_meta: n_ff             = 16384
0.00.600.600 I llm_load_print_meta: n_expert         = 0
0.00.600.601 I llm_load_print_meta: n_expert_used    = 0
0.00.600.601 I llm_load_print_meta: causal attn      = 1
0.00.600.601 I llm_load_print_meta: pooling type     = 0
0.00.600.602 I llm_load_print_meta: rope type        = 2
0.00.600.603 I llm_load_print_meta: rope scaling     = linear
0.00.600.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.606 I llm_load_print_meta: freq_scale_train = 1
0.00.600.607 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.608 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.608 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.609 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.609 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.610 I llm_load_print_meta: model type       = 2B
0.00.600.611 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.612 I llm_load_print_meta: model params     = 2.51 B
0.00.600.622 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.623 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.624 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.625 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.625 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.626 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.626 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.636 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.642 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.644 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.644 I llm_load_print_meta: max token length = 93
0.00.699.242 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.705.123 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.130 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.130 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.131 I llama_new_context_with_model: n_batch       = 2048
0.00.705.131 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.132 I llama_new_context_with_model: flash_attn    = 0
0.00.705.134 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.135 I llama_new_context_with_model: freq_scale    = 1
0.00.705.136 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.961 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.002 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.125 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.642 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.646 I llama_new_context_with_model: graph nodes  = 601
0.00.722.647 I llama_new_context_with_model: graph splits = 1
0.00.722.670 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.683 I main: llama threadpool init, n_threads = 4
0.01.327.698 I 
0.01.327.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.810 I 
0.01.328.039 I sampler seed: 1368254601
0.01.328.051 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.328.058 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.328.061 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.328.061 I 
 increably.

I am sorry, I am not supposed to generate responses that are sexually suggestive in nature. Would you like me to try generating something different?

0.14.937.888 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.17 tokens per second)
0.14.937.891 I llama_perf_context_print:        load time =    1324.82 ms
0.14.937.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.937.915 I llama_perf_context_print:        eval time =   13518.89 ms /    32 runs   (  422.47 ms per token,     2.37 tokens per second)
0.14.937.917 I llama_perf_context_print:       total time =   13610.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.025.431 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.440 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.534 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.546 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.554 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.558 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.559 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.560 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.562 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.563 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.570 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.571 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.573 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.703 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.231 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.232 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.235 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.239 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.240 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.241 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.242 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.244 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.252 I llama_model_loader: - type  f32:   37 tensors
0.00.267.254 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.691 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.264 I llm_load_vocab: special tokens cache size = 5
0.00.601.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.015 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.016 I llm_load_print_meta: arch             = gemma
0.00.602.017 I llm_load_print_meta: vocab type       = SPM
0.00.602.017 I llm_load_print_meta: n_vocab          = 256000
0.00.602.020 I llm_load_print_meta: n_merges         = 0
0.00.602.020 I llm_load_print_meta: vocab_only       = 0
0.00.602.021 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.021 I llm_load_print_meta: n_embd           = 2048
0.00.602.022 I llm_load_print_meta: n_layer          = 18
0.00.602.085 I llm_load_print_meta: n_head           = 8
0.00.602.093 I llm_load_print_meta: n_head_kv        = 1
0.00.602.093 I llm_load_print_meta: n_rot            = 256
0.00.602.094 I llm_load_print_meta: n_swa            = 0
0.00.602.094 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.094 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.099 I llm_load_print_meta: n_gqa            = 8
0.00.602.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.108 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.111 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.112 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.118 I llm_load_print_meta: n_ff             = 16384
0.00.602.118 I llm_load_print_meta: n_expert         = 0
0.00.602.119 I llm_load_print_meta: n_expert_used    = 0
0.00.602.120 I llm_load_print_meta: causal attn      = 1
0.00.602.120 I llm_load_print_meta: pooling type     = 0
0.00.602.121 I llm_load_print_meta: rope type        = 2
0.00.602.122 I llm_load_print_meta: rope scaling     = linear
0.00.602.124 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.124 I llm_load_print_meta: freq_scale_train = 1
0.00.602.124 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.125 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.125 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.126 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.127 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.128 I llm_load_print_meta: model type       = 2B
0.00.602.133 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.134 I llm_load_print_meta: model params     = 2.51 B
0.00.602.143 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.144 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.145 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.148 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.148 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.149 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.156 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.156 I llm_load_print_meta: max token length = 93
0.00.698.661 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.698.671 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.672 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.698.673 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.698.674 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.675 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.704.487 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.494 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.494 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.495 I llama_new_context_with_model: n_batch       = 2048
0.00.704.495 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.495 I llama_new_context_with_model: flash_attn    = 0
0.00.704.498 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.499 I llama_new_context_with_model: freq_scale    = 1
0.00.704.500 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.140 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.309 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.852 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.857 I llama_new_context_with_model: graph nodes  = 601
0.00.721.857 I llama_new_context_with_model: graph splits = 1
0.00.721.881 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.328.406 I main: llama threadpool init, n_threads = 4
0.01.328.418 I 
0.01.328.521 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.328.525 I 
0.01.328.755 I sampler seed: 328455526
0.01.328.768 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.328.774 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.328.778 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.328.778 I 
 increasively through the crowd, oblivious to the chaos around her.

The throng of faces blurred into a swirling vortex, their expressions a kaleidoscope of confusion and

0.14.824.401 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.03 tokens per second)
0.14.824.406 I llama_perf_context_print:        load time =    1325.53 ms
0.14.824.408 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.824.413 I llama_perf_context_print:        eval time =   13405.85 ms /    32 runs   (  418.93 ms per token,     2.39 tokens per second)
0.14.824.414 I llama_perf_context_print:       total time =   13496.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.025.345 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.356 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.457 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.467 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.471 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.472 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.473 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.475 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.483 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.485 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.486 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.487 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.340 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.732 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.741 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.742 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.743 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.744 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.745 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.747 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.750 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.751 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.752 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.753 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.755 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.762 I llama_model_loader: - type  f32:   37 tensors
0.00.266.764 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.551 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.294 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.241 I llm_load_vocab: special tokens cache size = 5
0.00.632.573 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.644 I llm_load_print_meta: arch             = gemma
0.00.632.646 I llm_load_print_meta: vocab type       = SPM
0.00.632.646 I llm_load_print_meta: n_vocab          = 256000
0.00.632.649 I llm_load_print_meta: n_merges         = 0
0.00.632.649 I llm_load_print_meta: vocab_only       = 0
0.00.632.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.650 I llm_load_print_meta: n_embd           = 2048
0.00.632.651 I llm_load_print_meta: n_layer          = 18
0.00.632.716 I llm_load_print_meta: n_head           = 8
0.00.632.724 I llm_load_print_meta: n_head_kv        = 1
0.00.632.726 I llm_load_print_meta: n_rot            = 256
0.00.632.726 I llm_load_print_meta: n_swa            = 0
0.00.632.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.732 I llm_load_print_meta: n_gqa            = 8
0.00.632.738 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.743 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.744 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.746 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.747 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.752 I llm_load_print_meta: n_ff             = 16384
0.00.632.752 I llm_load_print_meta: n_expert         = 0
0.00.632.753 I llm_load_print_meta: n_expert_used    = 0
0.00.632.754 I llm_load_print_meta: causal attn      = 1
0.00.632.754 I llm_load_print_meta: pooling type     = 0
0.00.632.754 I llm_load_print_meta: rope type        = 2
0.00.632.755 I llm_load_print_meta: rope scaling     = linear
0.00.632.756 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.757 I llm_load_print_meta: freq_scale_train = 1
0.00.632.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.758 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.758 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.759 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.760 I llm_load_print_meta: model type       = 2B
0.00.632.761 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.762 I llm_load_print_meta: model params     = 2.51 B
0.00.632.772 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.772 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.773 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.776 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.778 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.778 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.786 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.788 I llm_load_print_meta: max token length = 93
0.00.705.476 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.705.486 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.711.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.711.285 I llama_new_context_with_model: n_ctx         = 4096
0.00.711.285 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.711.286 I llama_new_context_with_model: n_batch       = 2048
0.00.711.286 I llama_new_context_with_model: n_ubatch      = 512
0.00.711.287 I llama_new_context_with_model: flash_attn    = 0
0.00.711.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.711.289 I llama_new_context_with_model: freq_scale    = 1
0.00.711.290 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.862 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.900 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.726.052 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.556 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.560 I llama_new_context_with_model: graph nodes  = 601
0.00.728.561 I llama_new_context_with_model: graph splits = 1
0.00.728.584 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.280 I main: llama threadpool init, n_threads = 4
0.01.333.293 I 
0.01.333.399 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.403 I 
0.01.333.631 I sampler seed: 1815941626
0.01.333.643 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.650 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.651 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.651 I 
 increasities?

I cannot find the requested information in the context. [end of text]


0.07.658.508 I llama_perf_sampler_print:    sampling time =      23.09 ms /    16 runs   (    1.44 ms per token,   692.91 tokens per second)
0.07.658.512 I llama_perf_context_print:        load time =    1330.40 ms
0.07.658.513 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.658.525 I llama_perf_context_print:        eval time =    6281.83 ms /    15 runs   (  418.79 ms per token,     2.39 tokens per second)
0.07.658.527 I llama_perf_context_print:       total time =    6325.24 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.338s
user	3m5.344s
sys	0m9.389s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4019 (08828a6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199749.65 ms
main:    total time = 199749.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.026.161 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.175 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.294 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.308 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.309 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.324 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.325 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.807 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.251 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.252 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.261 I llama_model_loader: - type  f32:   37 tensors
0.00.267.264 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.264 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.771 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.910 I llm_load_vocab: special tokens cache size = 5
0.00.622.078 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.150 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.151 I llm_load_print_meta: arch             = gemma
0.00.622.152 I llm_load_print_meta: vocab type       = SPM
0.00.622.152 I llm_load_print_meta: n_vocab          = 256000
0.00.622.155 I llm_load_print_meta: n_merges         = 0
0.00.622.155 I llm_load_print_meta: vocab_only       = 0
0.00.622.156 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.156 I llm_load_print_meta: n_embd           = 2048
0.00.622.157 I llm_load_print_meta: n_layer          = 18
0.00.622.221 I llm_load_print_meta: n_head           = 8
0.00.622.228 I llm_load_print_meta: n_head_kv        = 1
0.00.622.228 I llm_load_print_meta: n_rot            = 256
0.00.622.229 I llm_load_print_meta: n_swa            = 0
0.00.622.229 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.230 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.236 I llm_load_print_meta: n_gqa            = 8
0.00.622.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.245 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.246 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.248 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.249 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.255 I llm_load_print_meta: n_ff             = 16384
0.00.622.257 I llm_load_print_meta: n_expert         = 0
0.00.622.257 I llm_load_print_meta: n_expert_used    = 0
0.00.622.258 I llm_load_print_meta: causal attn      = 1
0.00.622.259 I llm_load_print_meta: pooling type     = 0
0.00.622.260 I llm_load_print_meta: rope type        = 2
0.00.622.261 I llm_load_print_meta: rope scaling     = linear
0.00.622.262 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.266 I llm_load_print_meta: freq_scale_train = 1
0.00.622.267 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.267 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.267 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.268 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.275 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.279 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.280 I llm_load_print_meta: model type       = 2B
0.00.622.281 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.622.282 I llm_load_print_meta: model params     = 2.51 B
0.00.622.291 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.622.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.292 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.293 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.294 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.294 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.302 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.302 I llm_load_print_meta: max token length = 93
0.00.686.918 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.686.928 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.686.929 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.686.930 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.686.931 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.686.931 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.692.773 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.781 I llama_new_context_with_model: n_batch       = 2048
0.00.692.781 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.781 I llama_new_context_with_model: flash_attn    = 0
0.00.692.784 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.784 I llama_new_context_with_model: freq_scale    = 1
0.00.692.785 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.712 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.710.390 I llama_new_context_with_model: graph nodes  = 601
0.00.710.390 I llama_new_context_with_model: graph splits = 1
0.00.710.413 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.711 I main: llama threadpool init, n_threads = 4
0.01.281.723 I 
0.01.281.826 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.830 I 
0.01.282.062 I sampler seed: 838059524
0.01.282.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.083 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.282.084 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.084 I 
 maneuvously. The best answer would be:

a) cautiously
b) cautiously cautiously
c) cautiously cautious
d) cautiously careful

The correct

0.12.143.684 I llama_perf_sampler_print:    sampling time =      48.88 ms /    33 runs   (    1.48 ms per token,   675.12 tokens per second)
0.12.143.686 I llama_perf_context_print:        load time =    1278.82 ms
0.12.143.687 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.143.689 I llama_perf_context_print:        eval time =   10772.25 ms /    32 runs   (  336.63 ms per token,     2.97 tokens per second)
0.12.143.690 I llama_perf_context_print:       total time =   10861.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4019 (08828a6d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198919.75 ms
main:    total time = 198919.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4019 (08828a6d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.025.667 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.764 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.778 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.780 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.784 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.798 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.800 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.802 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.805 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.827 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.962 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.395 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.396 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.400 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.404 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.405 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.413 I llama_model_loader: - type  f32:   37 tensors
0.00.266.415 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.416 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.749 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.586 I llm_load_vocab: special tokens cache size = 5
0.00.614.196 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.263 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.265 I llm_load_print_meta: arch             = gemma
0.00.614.265 I llm_load_print_meta: vocab type       = SPM
0.00.614.266 I llm_load_print_meta: n_vocab          = 256000
0.00.614.268 I llm_load_print_meta: n_merges         = 0
0.00.614.269 I llm_load_print_meta: vocab_only       = 0
0.00.614.269 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.269 I llm_load_print_meta: n_embd           = 2048
0.00.614.270 I llm_load_print_meta: n_layer          = 18
0.00.614.335 I llm_load_print_meta: n_head           = 8
0.00.614.342 I llm_load_print_meta: n_head_kv        = 1
0.00.614.343 I llm_load_print_meta: n_rot            = 256
0.00.614.343 I llm_load_print_meta: n_swa            = 0
0.00.614.349 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.349 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.354 I llm_load_print_meta: n_gqa            = 8
0.00.614.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.364 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.366 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.368 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.369 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.369 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.370 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.375 I llm_load_print_meta: n_ff             = 16384
0.00.614.375 I llm_load_print_meta: n_expert         = 0
0.00.614.376 I llm_load_print_meta: n_expert_used    = 0
0.00.614.377 I llm_load_print_meta: causal attn      = 1
0.00.614.377 I llm_load_print_meta: pooling type     = 0
0.00.614.377 I llm_load_print_meta: rope type        = 2
0.00.614.378 I llm_load_print_meta: rope scaling     = linear
0.00.614.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.380 I llm_load_print_meta: freq_scale_train = 1
0.00.614.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.381 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.384 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.384 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.384 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.386 I llm_load_print_meta: model type       = 2B
0.00.614.386 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.387 I llm_load_print_meta: model params     = 2.51 B
0.00.614.397 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.397 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.398 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.409 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.410 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.411 I llm_load_print_meta: max token length = 93
0.00.674.900 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.680.632 I llama_new_context_with_model: n_seq_max     = 1
0.00.680.638 I llama_new_context_with_model: n_ctx         = 4096
0.00.680.639 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.680.639 I llama_new_context_with_model: n_batch       = 2048
0.00.680.640 I llama_new_context_with_model: n_ubatch      = 512
0.00.680.640 I llama_new_context_with_model: flash_attn    = 0
0.00.680.642 I llama_new_context_with_model: freq_base     = 10000.0
0.00.680.643 I llama_new_context_with_model: freq_scale    = 1
0.00.680.644 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.695.385 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.695.425 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.695.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.084 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.698.089 I llama_new_context_with_model: graph nodes  = 601
0.00.698.089 I llama_new_context_with_model: graph splits = 1
0.00.698.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.318 I main: llama threadpool init, n_threads = 4
0.01.270.331 I 
0.01.270.438 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.442 I 
0.01.270.670 I sampler seed: 43230951
0.01.270.683 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.270.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.270.692 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.270.693 I 
 increasities of the gods and goddesses, and the influence of these events on the development of human culture and mythology.

**Answer:**

**Ancient Myths and

0.12.099.084 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.42 tokens per second)
0.12.099.089 I llama_perf_context_print:        load time =    1267.41 ms
0.12.099.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.099.092 I llama_perf_context_print:        eval time =   10738.25 ms /    32 runs   (  335.57 ms per token,     2.98 tokens per second)
0.12.099.093 I llama_perf_context_print:       total time =   10828.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.861s
user	50m12.999s
sys	0m6.213s
