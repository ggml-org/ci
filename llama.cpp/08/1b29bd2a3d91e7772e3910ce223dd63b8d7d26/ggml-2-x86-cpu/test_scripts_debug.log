+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.350 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.362 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.448 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.462 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.467 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.471 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.473 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.475 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.476 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.477 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.483 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.484 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.486 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.487 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.488 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.563 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.564 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.565 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.567 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.568 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.587 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.589 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.590 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.592 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.601 I llama_model_loader: - type  f32:   37 tensors
0.00.348.603 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.792 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.190 I llm_load_vocab: special tokens cache size = 5
0.00.839.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.671 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.672 I llm_load_print_meta: arch             = gemma
0.00.839.673 I llm_load_print_meta: vocab type       = SPM
0.00.839.674 I llm_load_print_meta: n_vocab          = 256000
0.00.839.677 I llm_load_print_meta: n_merges         = 0
0.00.839.677 I llm_load_print_meta: vocab_only       = 0
0.00.839.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.678 I llm_load_print_meta: n_embd           = 2048
0.00.839.679 I llm_load_print_meta: n_layer          = 18
0.00.839.744 I llm_load_print_meta: n_head           = 8
0.00.839.751 I llm_load_print_meta: n_head_kv        = 1
0.00.839.752 I llm_load_print_meta: n_rot            = 256
0.00.839.753 I llm_load_print_meta: n_swa            = 0
0.00.839.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.755 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.759 I llm_load_print_meta: n_gqa            = 8
0.00.839.784 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.792 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.797 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.802 I llm_load_print_meta: n_ff             = 16384
0.00.839.803 I llm_load_print_meta: n_expert         = 0
0.00.839.804 I llm_load_print_meta: n_expert_used    = 0
0.00.839.804 I llm_load_print_meta: causal attn      = 1
0.00.839.805 I llm_load_print_meta: pooling type     = 0
0.00.839.805 I llm_load_print_meta: rope type        = 2
0.00.839.806 I llm_load_print_meta: rope scaling     = linear
0.00.839.808 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.809 I llm_load_print_meta: freq_scale_train = 1
0.00.839.809 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.811 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.812 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.814 I llm_load_print_meta: model type       = 2B
0.00.839.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.816 I llm_load_print_meta: model params     = 2.51 B
0.00.839.819 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.830 I llm_load_print_meta: max token length = 93
0.00.941.802 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.941.813 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.941.814 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.941.815 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.941.815 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.941.816 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.947.724 I llama_new_context_with_model: n_seq_max     = 1
0.00.947.731 I llama_new_context_with_model: n_ctx         = 4096
0.00.947.731 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.947.732 I llama_new_context_with_model: n_batch       = 2048
0.00.947.732 I llama_new_context_with_model: n_ubatch      = 512
0.00.947.733 I llama_new_context_with_model: flash_attn    = 0
0.00.947.735 I llama_new_context_with_model: freq_base     = 10000.0
0.00.947.736 I llama_new_context_with_model: freq_scale    = 1
0.00.947.737 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.395 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.509 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.116 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.120 I llama_new_context_with_model: graph nodes  = 601
0.00.965.120 I llama_new_context_with_model: graph splits = 1
0.00.965.146 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.965.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.579 I main: llama threadpool init, n_threads = 4
0.01.571.595 I 
0.01.571.714 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.571.715 I 
0.01.571.971 I sampler seed: 3246048203
0.01.571.984 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.996 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.997 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.997 I 
 increasively.

I'm not sure what you're asking. Can you please rephrase your question? [end of text]


0.11.636.273 I llama_perf_sampler_print:    sampling time =      37.10 ms /    25 runs   (    1.48 ms per token,   673.89 tokens per second)
0.11.636.276 I llama_perf_context_print:        load time =    1570.64 ms
0.11.636.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.636.279 I llama_perf_context_print:        eval time =    9997.24 ms /    24 runs   (  416.55 ms per token,     2.40 tokens per second)
0.11.636.280 I llama_perf_context_print:       total time =   10064.70 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.736 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.948 I main: llama backend init
0.00.000.957 I main: load the model and apply lora adapter, if any
0.00.023.606 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.745 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.750 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.759 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.761 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.764 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.766 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.769 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.775 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.784 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.795 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.797 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.349 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.215 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.216 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.226 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.227 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.228 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.230 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.242 I llama_model_loader: - type  f32:   37 tensors
0.00.349.245 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.684 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.972 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.960 I llm_load_vocab: special tokens cache size = 5
0.00.851.358 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.433 I llm_load_print_meta: arch             = gemma
0.00.851.434 I llm_load_print_meta: vocab type       = SPM
0.00.851.435 I llm_load_print_meta: n_vocab          = 256000
0.00.851.437 I llm_load_print_meta: n_merges         = 0
0.00.851.438 I llm_load_print_meta: vocab_only       = 0
0.00.851.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.438 I llm_load_print_meta: n_embd           = 2048
0.00.851.439 I llm_load_print_meta: n_layer          = 18
0.00.851.503 I llm_load_print_meta: n_head           = 8
0.00.851.510 I llm_load_print_meta: n_head_kv        = 1
0.00.851.511 I llm_load_print_meta: n_rot            = 256
0.00.851.512 I llm_load_print_meta: n_swa            = 0
0.00.851.512 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.512 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.517 I llm_load_print_meta: n_gqa            = 8
0.00.851.522 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.528 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.531 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.532 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.533 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.534 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.540 I llm_load_print_meta: n_ff             = 16384
0.00.851.541 I llm_load_print_meta: n_expert         = 0
0.00.851.541 I llm_load_print_meta: n_expert_used    = 0
0.00.851.552 I llm_load_print_meta: causal attn      = 1
0.00.851.553 I llm_load_print_meta: pooling type     = 0
0.00.851.554 I llm_load_print_meta: rope type        = 2
0.00.851.555 I llm_load_print_meta: rope scaling     = linear
0.00.851.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.557 I llm_load_print_meta: freq_scale_train = 1
0.00.851.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.558 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.559 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.560 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.561 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.561 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.562 I llm_load_print_meta: model type       = 2B
0.00.851.564 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.577 I llm_load_print_meta: model params     = 2.51 B
0.00.851.582 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.583 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.591 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.592 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.604 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.606 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.606 I llm_load_print_meta: max token length = 93
0.00.947.765 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.954.090 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.099 I llama_new_context_with_model: n_batch       = 2048
0.00.954.099 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.100 I llama_new_context_with_model: flash_attn    = 0
0.00.954.103 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.104 I llama_new_context_with_model: freq_scale    = 1
0.00.954.105 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.969.774 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.934 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.627 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.630 I llama_new_context_with_model: graph nodes  = 601
0.00.972.631 I llama_new_context_with_model: graph splits = 1
0.00.972.656 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.660 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.578.384 I main: llama threadpool init, n_threads = 4
0.01.578.403 I 
0.01.578.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.578.532 I 
0.01.578.790 I sampler seed: 3219084478
0.01.578.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.578.814 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.578.815 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.578.815 I 
 increasities with a vibrant blend of dance, acrobatics, and music.

**What is the genre of the performance?**

a) Contemporary
b

0.15.276.497 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   666.06 tokens per second)
0.15.276.500 I llama_perf_context_print:        load time =    1577.32 ms
0.15.276.502 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.276.503 I llama_perf_context_print:        eval time =   13608.79 ms /    32 runs   (  425.27 ms per token,     2.35 tokens per second)
0.15.276.504 I llama_perf_context_print:       total time =   13698.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.441 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.542 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.557 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.584 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.585 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.334 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.336 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.337 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.338 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.341 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.348 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.349 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.352 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.361 I llama_model_loader: - type  f32:   37 tensors
0.00.348.363 I llama_model_loader: - type q8_0:  127 tensors
0.00.595.417 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.773 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.765 I llm_load_vocab: special tokens cache size = 5
0.00.845.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.521 I llm_load_print_meta: arch             = gemma
0.00.845.522 I llm_load_print_meta: vocab type       = SPM
0.00.845.522 I llm_load_print_meta: n_vocab          = 256000
0.00.845.525 I llm_load_print_meta: n_merges         = 0
0.00.845.525 I llm_load_print_meta: vocab_only       = 0
0.00.845.525 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.526 I llm_load_print_meta: n_embd           = 2048
0.00.845.526 I llm_load_print_meta: n_layer          = 18
0.00.845.591 I llm_load_print_meta: n_head           = 8
0.00.845.598 I llm_load_print_meta: n_head_kv        = 1
0.00.845.599 I llm_load_print_meta: n_rot            = 256
0.00.845.599 I llm_load_print_meta: n_swa            = 0
0.00.845.600 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.600 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.605 I llm_load_print_meta: n_gqa            = 8
0.00.845.609 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.614 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.616 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.618 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.619 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.625 I llm_load_print_meta: n_ff             = 16384
0.00.845.626 I llm_load_print_meta: n_expert         = 0
0.00.845.626 I llm_load_print_meta: n_expert_used    = 0
0.00.845.627 I llm_load_print_meta: causal attn      = 1
0.00.845.627 I llm_load_print_meta: pooling type     = 0
0.00.845.629 I llm_load_print_meta: rope type        = 2
0.00.845.630 I llm_load_print_meta: rope scaling     = linear
0.00.845.631 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.632 I llm_load_print_meta: freq_scale_train = 1
0.00.845.641 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.643 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.643 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.643 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.649 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.649 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.650 I llm_load_print_meta: model type       = 2B
0.00.845.651 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.652 I llm_load_print_meta: model params     = 2.51 B
0.00.845.653 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.654 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.654 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.655 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.655 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.657 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.664 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.665 I llm_load_print_meta: max token length = 93
0.00.924.327 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.924.338 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.924.339 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.924.339 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.924.340 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.924.341 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.930.248 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.256 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.256 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.257 I llama_new_context_with_model: n_batch       = 2048
0.00.930.257 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.258 I llama_new_context_with_model: flash_attn    = 0
0.00.930.260 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.261 I llama_new_context_with_model: freq_scale    = 1
0.00.930.262 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.115 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.156 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.882 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.886 I llama_new_context_with_model: graph nodes  = 601
0.00.947.887 I llama_new_context_with_model: graph splits = 1
0.00.947.910 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.913 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.562.555 I main: llama threadpool init, n_threads = 4
0.01.562.572 I 
0.01.562.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.562.695 I 
0.01.562.935 I sampler seed: 3404304539
0.01.562.950 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.562.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.562.962 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.562.962 I 
 increasities with a new wave sensibility.

This phrase is describing:

a) A genre of electronic music
b) A fashion trend
c) A

0.15.042.176 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.26 tokens per second)
0.15.042.180 I llama_perf_context_print:        load time =    1561.59 ms
0.15.042.182 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.042.184 I llama_perf_context_print:        eval time =   13389.50 ms /    32 runs   (  418.42 ms per token,     2.39 tokens per second)
0.15.042.185 I llama_perf_context_print:       total time =   13479.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.023.306 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.317 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.412 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.438 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.446 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.464 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.467 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.469 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.035 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.267 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.149 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.150 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.151 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.153 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.159 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.161 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.356.162 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.173 I llama_model_loader: - type  f32:   37 tensors
0.00.356.176 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.164 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.262 I llm_load_vocab: special tokens cache size = 5
0.00.856.583 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.661 I llm_load_print_meta: arch             = gemma
0.00.856.662 I llm_load_print_meta: vocab type       = SPM
0.00.856.663 I llm_load_print_meta: n_vocab          = 256000
0.00.856.665 I llm_load_print_meta: n_merges         = 0
0.00.856.666 I llm_load_print_meta: vocab_only       = 0
0.00.856.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.667 I llm_load_print_meta: n_embd           = 2048
0.00.856.667 I llm_load_print_meta: n_layer          = 18
0.00.856.732 I llm_load_print_meta: n_head           = 8
0.00.856.739 I llm_load_print_meta: n_head_kv        = 1
0.00.856.740 I llm_load_print_meta: n_rot            = 256
0.00.856.741 I llm_load_print_meta: n_swa            = 0
0.00.856.741 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.741 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.746 I llm_load_print_meta: n_gqa            = 8
0.00.856.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.756 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.757 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.759 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.760 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.760 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.761 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.768 I llm_load_print_meta: n_ff             = 16384
0.00.856.769 I llm_load_print_meta: n_expert         = 0
0.00.856.769 I llm_load_print_meta: n_expert_used    = 0
0.00.856.770 I llm_load_print_meta: causal attn      = 1
0.00.856.770 I llm_load_print_meta: pooling type     = 0
0.00.856.770 I llm_load_print_meta: rope type        = 2
0.00.856.771 I llm_load_print_meta: rope scaling     = linear
0.00.856.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.773 I llm_load_print_meta: freq_scale_train = 1
0.00.856.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.777 I llm_load_print_meta: model type       = 2B
0.00.856.778 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.778 I llm_load_print_meta: model params     = 2.51 B
0.00.856.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.791 I llm_load_print_meta: max token length = 93
0.00.929.472 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.929.482 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.935.550 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.557 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.557 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.558 I llama_new_context_with_model: n_batch       = 2048
0.00.935.559 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.559 I llama_new_context_with_model: flash_attn    = 0
0.00.935.561 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.562 I llama_new_context_with_model: freq_scale    = 1
0.00.935.563 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.241 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.280 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.409 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.010 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.014 I llama_new_context_with_model: graph nodes  = 601
0.00.953.014 I llama_new_context_with_model: graph splits = 1
0.00.953.038 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.953.042 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.791 I main: llama threadpool init, n_threads = 4
0.01.556.807 I 
0.01.556.945 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.556.950 I 
0.01.557.189 I sampler seed: 163919213
0.01.557.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.213 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.217 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.218 I 
 increably. [end of text]


0.03.234.170 I llama_perf_sampler_print:    sampling time =       6.34 ms /     5 runs   (    1.27 ms per token,   788.64 tokens per second)
0.03.234.173 I llama_perf_context_print:        load time =    1555.79 ms
0.03.234.174 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.234.176 I llama_perf_context_print:        eval time =    1664.50 ms /     4 runs   (  416.12 ms per token,     2.40 tokens per second)
0.03.234.177 I llama_perf_context_print:       total time =    1677.39 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.978s
user	2m49.395s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4349 (081b29bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185927.85 ms
main:    total time = 185927.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.023.217 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.229 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.335 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.337 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.343 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.352 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.353 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.362 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.367 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.244 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.093 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.948 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.959 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.960 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.961 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.967 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.971 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.972 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.974 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.976 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.347.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.986 I llama_model_loader: - type  f32:   37 tensors
0.00.347.998 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.000 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.965 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.361 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.378 I llm_load_vocab: special tokens cache size = 5
0.00.836.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.808 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.809 I llm_load_print_meta: arch             = gemma
0.00.836.810 I llm_load_print_meta: vocab type       = SPM
0.00.836.811 I llm_load_print_meta: n_vocab          = 256000
0.00.836.814 I llm_load_print_meta: n_merges         = 0
0.00.836.815 I llm_load_print_meta: vocab_only       = 0
0.00.836.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.815 I llm_load_print_meta: n_embd           = 2048
0.00.836.816 I llm_load_print_meta: n_layer          = 18
0.00.836.880 I llm_load_print_meta: n_head           = 8
0.00.836.888 I llm_load_print_meta: n_head_kv        = 1
0.00.836.888 I llm_load_print_meta: n_rot            = 256
0.00.836.889 I llm_load_print_meta: n_swa            = 0
0.00.836.889 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.890 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.894 I llm_load_print_meta: n_gqa            = 8
0.00.836.899 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.906 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.907 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.915 I llm_load_print_meta: n_ff             = 16384
0.00.836.916 I llm_load_print_meta: n_expert         = 0
0.00.836.916 I llm_load_print_meta: n_expert_used    = 0
0.00.836.917 I llm_load_print_meta: causal attn      = 1
0.00.836.917 I llm_load_print_meta: pooling type     = 0
0.00.836.928 I llm_load_print_meta: rope type        = 2
0.00.836.929 I llm_load_print_meta: rope scaling     = linear
0.00.836.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.932 I llm_load_print_meta: freq_scale_train = 1
0.00.836.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.939 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.939 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.940 I llm_load_print_meta: model type       = 2B
0.00.836.941 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.836.942 I llm_load_print_meta: model params     = 2.51 B
0.00.836.943 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.836.943 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.944 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.945 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.946 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.946 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.947 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.958 I llm_load_print_meta: max token length = 93
0.00.900.515 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.900.524 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.900.525 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.900.525 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.900.526 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.900.527 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.906.332 I llama_new_context_with_model: n_seq_max     = 1
0.00.906.340 I llama_new_context_with_model: n_ctx         = 4096
0.00.906.340 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.906.341 I llama_new_context_with_model: n_batch       = 2048
0.00.906.341 I llama_new_context_with_model: n_ubatch      = 512
0.00.906.342 I llama_new_context_with_model: flash_attn    = 0
0.00.906.345 I llama_new_context_with_model: freq_base     = 10000.0
0.00.906.346 I llama_new_context_with_model: freq_scale    = 1
0.00.906.346 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.921.447 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.921.486 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.921.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.182 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.187 I llama_new_context_with_model: graph nodes  = 601
0.00.924.188 I llama_new_context_with_model: graph splits = 1
0.00.924.212 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.924.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.511.932 I main: llama threadpool init, n_threads = 4
0.01.511.949 I 
0.01.512.076 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.512.081 I 
0.01.512.320 I sampler seed: 193490658
0.01.512.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.512.344 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.512.346 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.512.346 I 
 squaRED text.

I am unable to generate a response as I am unable to access the necessary information. Please provide the necessary context and I will generate a

0.12.700.724 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.58 tokens per second)
0.12.700.727 I llama_perf_context_print:        load time =    1510.94 ms
0.12.700.728 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.700.730 I llama_perf_context_print:        eval time =   11098.71 ms /    32 runs   (  346.83 ms per token,     2.88 tokens per second)
0.12.700.744 I llama_perf_context_print:       total time =   11188.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4349 (081b29bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185939.81 ms
main:    total time = 185939.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.779 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.010 I main: llama backend init
0.00.001.018 I main: load the model and apply lora adapter, if any
0.00.026.208 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.319 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.336 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.348 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.364 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.368 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.371 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.372 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.431 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.651 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.662 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.664 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.665 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.673 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.674 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.684 I llama_model_loader: - type  f32:   37 tensors
0.00.354.686 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.687 I llama_model_loader: - type q6_K:   19 tensors
0.00.617.327 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.689.324 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.690.295 I llm_load_vocab: special tokens cache size = 5
0.00.875.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.694 I llm_load_print_meta: arch             = gemma
0.00.875.696 I llm_load_print_meta: vocab type       = SPM
0.00.875.696 I llm_load_print_meta: n_vocab          = 256000
0.00.875.699 I llm_load_print_meta: n_merges         = 0
0.00.875.699 I llm_load_print_meta: vocab_only       = 0
0.00.875.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.700 I llm_load_print_meta: n_embd           = 2048
0.00.875.700 I llm_load_print_meta: n_layer          = 18
0.00.875.765 I llm_load_print_meta: n_head           = 8
0.00.875.772 I llm_load_print_meta: n_head_kv        = 1
0.00.875.773 I llm_load_print_meta: n_rot            = 256
0.00.875.773 I llm_load_print_meta: n_swa            = 0
0.00.875.774 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.774 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.779 I llm_load_print_meta: n_gqa            = 8
0.00.875.783 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.788 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.790 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.792 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.798 I llm_load_print_meta: n_ff             = 16384
0.00.875.798 I llm_load_print_meta: n_expert         = 0
0.00.875.799 I llm_load_print_meta: n_expert_used    = 0
0.00.875.799 I llm_load_print_meta: causal attn      = 1
0.00.875.800 I llm_load_print_meta: pooling type     = 0
0.00.875.800 I llm_load_print_meta: rope type        = 2
0.00.875.800 I llm_load_print_meta: rope scaling     = linear
0.00.875.802 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.802 I llm_load_print_meta: freq_scale_train = 1
0.00.875.803 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.803 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.803 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.803 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.804 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.804 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.804 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.805 I llm_load_print_meta: model type       = 2B
0.00.875.806 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.875.807 I llm_load_print_meta: model params     = 2.51 B
0.00.875.808 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.875.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.818 I llm_load_print_meta: max token length = 93
0.00.935.617 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.941.451 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.459 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.459 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.460 I llama_new_context_with_model: n_batch       = 2048
0.00.941.460 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.461 I llama_new_context_with_model: flash_attn    = 0
0.00.941.464 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.465 I llama_new_context_with_model: freq_scale    = 1
0.00.941.466 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.956.640 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.686 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.358 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.362 I llama_new_context_with_model: graph nodes  = 601
0.00.959.363 I llama_new_context_with_model: graph splits = 1
0.00.959.387 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.959.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.940 I main: llama threadpool init, n_threads = 4
0.01.538.957 I 
0.01.539.077 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.081 I 
0.01.539.317 I sampler seed: 254713960
0.01.539.331 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.539.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.539.344 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.539.344 I 
 increasities. [end of text]


0.02.935.978 I llama_perf_sampler_print:    sampling time =       6.38 ms /     5 runs   (    1.28 ms per token,   784.19 tokens per second)
0.02.935.983 I llama_perf_context_print:        load time =    1537.80 ms
0.02.935.985 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.935.986 I llama_perf_context_print:        eval time =    1384.29 ms /     4 runs   (  346.07 ms per token,     2.89 tokens per second)
0.02.935.987 I llama_perf_context_print:       total time =    1397.05 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.428s
user	46m7.914s
sys	0m6.253s
