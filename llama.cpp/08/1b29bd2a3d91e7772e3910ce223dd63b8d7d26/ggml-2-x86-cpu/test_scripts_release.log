+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.385 I main: llama backend init
0.00.000.391 I main: load the model and apply lora adapter, if any
0.00.020.927 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.947 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.957 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.963 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.963 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.964 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.967 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.971 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.974 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.974 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.730 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.657 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.620 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.629 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.630 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.631 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.633 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.634 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.635 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.635 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.636 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.640 I llama_model_loader: - type  f32:   37 tensors
0.00.131.641 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.543 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.972 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.642 I llm_load_vocab: special tokens cache size = 5
0.00.270.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.913 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.913 I llm_load_print_meta: arch             = gemma
0.00.270.914 I llm_load_print_meta: vocab type       = SPM
0.00.270.915 I llm_load_print_meta: n_vocab          = 256000
0.00.270.915 I llm_load_print_meta: n_merges         = 0
0.00.270.915 I llm_load_print_meta: vocab_only       = 0
0.00.270.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.916 I llm_load_print_meta: n_embd           = 2048
0.00.270.916 I llm_load_print_meta: n_layer          = 18
0.00.270.927 I llm_load_print_meta: n_head           = 8
0.00.270.928 I llm_load_print_meta: n_head_kv        = 1
0.00.270.928 I llm_load_print_meta: n_rot            = 256
0.00.270.928 I llm_load_print_meta: n_swa            = 0
0.00.270.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.931 I llm_load_print_meta: n_gqa            = 8
0.00.270.932 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.933 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.934 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.935 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.935 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.936 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.936 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.940 I llm_load_print_meta: n_ff             = 16384
0.00.270.940 I llm_load_print_meta: n_expert         = 0
0.00.270.940 I llm_load_print_meta: n_expert_used    = 0
0.00.270.941 I llm_load_print_meta: causal attn      = 1
0.00.270.941 I llm_load_print_meta: pooling type     = 0
0.00.270.941 I llm_load_print_meta: rope type        = 2
0.00.270.942 I llm_load_print_meta: rope scaling     = linear
0.00.270.943 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.944 I llm_load_print_meta: freq_scale_train = 1
0.00.270.944 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.945 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.946 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.947 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.948 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.949 I llm_load_print_meta: model type       = 2B
0.00.270.949 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.951 I llm_load_print_meta: model params     = 2.51 B
0.00.270.951 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.952 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.953 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.953 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.953 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.954 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.955 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.955 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.956 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.957 I llm_load_print_meta: max token length = 93
0.00.370.393 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.402 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.403 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.403 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.404 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.404 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.641 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.647 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.648 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.648 I llama_new_context_with_model: n_batch       = 2048
0.00.375.649 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.649 I llama_new_context_with_model: flash_attn    = 0
0.00.375.652 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.653 I llama_new_context_with_model: freq_scale    = 1
0.00.375.654 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.391 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.746 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.752 I llama_new_context_with_model: graph nodes  = 601
0.00.391.753 I llama_new_context_with_model: graph splits = 1
0.00.391.755 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.755 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.063 I main: llama threadpool init, n_threads = 4
0.00.477.076 I 
0.00.477.150 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.154 I 
0.00.477.197 I sampler seed: 3476315118
0.00.477.208 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.220 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.224 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.224 I 
 increably. [end of text]


0.00.763.447 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8183.31 tokens per second)
0.00.763.449 I llama_perf_context_print:        load time =     476.66 ms
0.00.763.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.763.452 I llama_perf_context_print:        eval time =     283.18 ms /     4 runs   (   70.79 ms per token,    14.13 tokens per second)
0.00.763.453 I llama_perf_context_print:       total time =     286.39 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.549 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.296 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.305 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.309 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.310 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.311 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.313 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.970 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.261 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.267 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.268 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.270 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.273 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.273 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.275 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.276 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.277 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.282 I llama_model_loader: - type  f32:   37 tensors
0.00.131.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.279 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.267 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.866 I llm_load_vocab: special tokens cache size = 5
0.00.272.842 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.859 I llm_load_print_meta: arch             = gemma
0.00.272.859 I llm_load_print_meta: vocab type       = SPM
0.00.272.860 I llm_load_print_meta: n_vocab          = 256000
0.00.272.861 I llm_load_print_meta: n_merges         = 0
0.00.272.861 I llm_load_print_meta: vocab_only       = 0
0.00.272.861 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.862 I llm_load_print_meta: n_embd           = 2048
0.00.272.862 I llm_load_print_meta: n_layer          = 18
0.00.272.873 I llm_load_print_meta: n_head           = 8
0.00.272.874 I llm_load_print_meta: n_head_kv        = 1
0.00.272.874 I llm_load_print_meta: n_rot            = 256
0.00.272.874 I llm_load_print_meta: n_swa            = 0
0.00.272.875 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.875 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.876 I llm_load_print_meta: n_gqa            = 8
0.00.272.877 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.878 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.879 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.880 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.880 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.881 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.881 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.882 I llm_load_print_meta: n_ff             = 16384
0.00.272.882 I llm_load_print_meta: n_expert         = 0
0.00.272.883 I llm_load_print_meta: n_expert_used    = 0
0.00.272.883 I llm_load_print_meta: causal attn      = 1
0.00.272.883 I llm_load_print_meta: pooling type     = 0
0.00.272.884 I llm_load_print_meta: rope type        = 2
0.00.272.884 I llm_load_print_meta: rope scaling     = linear
0.00.272.885 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.886 I llm_load_print_meta: freq_scale_train = 1
0.00.272.886 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.886 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.887 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.887 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.887 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.888 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.888 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.888 I llm_load_print_meta: model type       = 2B
0.00.272.889 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.890 I llm_load_print_meta: model params     = 2.51 B
0.00.272.891 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.891 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.891 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.891 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.892 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.892 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.892 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.893 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.893 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.894 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.894 I llm_load_print_meta: max token length = 93
0.00.368.426 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.793 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.800 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.800 I llama_new_context_with_model: n_batch       = 2048
0.00.373.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.801 I llama_new_context_with_model: flash_attn    = 0
0.00.373.804 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.805 I llama_new_context_with_model: freq_scale    = 1
0.00.373.806 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.867 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.881 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.976 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.230 I llama_new_context_with_model: graph nodes  = 601
0.00.390.230 I llama_new_context_with_model: graph splits = 1
0.00.390.232 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.390.233 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.704 I main: llama threadpool init, n_threads = 4
0.00.472.720 I 
0.00.472.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.798 I 
0.00.472.841 I sampler seed: 3098328051
0.00.472.852 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.854 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.855 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.856 I 
 increably, not as the pompous pronouncements of yore.

I am not pompous. I am simply seeking the truth, the essence of existence.

I

0.02.684.720 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6925.50 tokens per second)
0.02.684.723 I llama_perf_context_print:        load time =     471.94 ms
0.02.684.724 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.684.726 I llama_perf_context_print:        eval time =    2193.21 ms /    32 runs   (   68.54 ms per token,    14.59 tokens per second)
0.02.684.727 I llama_perf_context_print:       total time =    2212.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.581 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.803 I main: llama backend init
0.00.000.810 I main: load the model and apply lora adapter, if any
0.00.021.188 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.220 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.224 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.235 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.651 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.818 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.826 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.827 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.828 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.831 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.833 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.835 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.839 I llama_model_loader: - type  f32:   37 tensors
0.00.132.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.602 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.264 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.872 I llm_load_vocab: special tokens cache size = 5
0.00.270.174 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.191 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.191 I llm_load_print_meta: arch             = gemma
0.00.270.192 I llm_load_print_meta: vocab type       = SPM
0.00.270.193 I llm_load_print_meta: n_vocab          = 256000
0.00.270.193 I llm_load_print_meta: n_merges         = 0
0.00.270.193 I llm_load_print_meta: vocab_only       = 0
0.00.270.194 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.194 I llm_load_print_meta: n_embd           = 2048
0.00.270.194 I llm_load_print_meta: n_layer          = 18
0.00.270.205 I llm_load_print_meta: n_head           = 8
0.00.270.206 I llm_load_print_meta: n_head_kv        = 1
0.00.270.207 I llm_load_print_meta: n_rot            = 256
0.00.270.207 I llm_load_print_meta: n_swa            = 0
0.00.270.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.208 I llm_load_print_meta: n_gqa            = 8
0.00.270.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.210 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.212 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.215 I llm_load_print_meta: n_ff             = 16384
0.00.270.215 I llm_load_print_meta: n_expert         = 0
0.00.270.215 I llm_load_print_meta: n_expert_used    = 0
0.00.270.216 I llm_load_print_meta: causal attn      = 1
0.00.270.216 I llm_load_print_meta: pooling type     = 0
0.00.270.216 I llm_load_print_meta: rope type        = 2
0.00.270.217 I llm_load_print_meta: rope scaling     = linear
0.00.270.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.219 I llm_load_print_meta: freq_scale_train = 1
0.00.270.220 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.221 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.222 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.222 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.223 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.224 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.225 I llm_load_print_meta: model type       = 2B
0.00.270.226 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.227 I llm_load_print_meta: model params     = 2.51 B
0.00.270.228 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.229 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.231 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.231 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.232 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.233 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.237 I llm_load_print_meta: max token length = 93
0.00.347.634 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.347.640 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.641 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.347.642 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.347.642 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.347.643 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.352.813 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.820 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.820 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.821 I llama_new_context_with_model: n_batch       = 2048
0.00.352.821 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.822 I llama_new_context_with_model: flash_attn    = 0
0.00.352.824 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.825 I llama_new_context_with_model: freq_scale    = 1
0.00.352.826 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.064 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.077 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.487 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.497 I llama_new_context_with_model: graph nodes  = 601
0.00.368.498 I llama_new_context_with_model: graph splits = 1
0.00.368.501 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.368.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.769 I main: llama threadpool init, n_threads = 4
0.00.453.783 I 
0.00.453.869 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.873 I 
0.00.453.918 I sampler seed: 1985873857
0.00.453.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.934 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.935 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.936 I 
 increasities with a sense of humor and self-deprecation.

I am unable to provide a response as it would involve making sexually suggestive or inappropriate comments. [end of text]


0.02.789.546 I llama_perf_sampler_print:    sampling time =       5.22 ms /    33 runs   (    0.16 ms per token,  6323.05 tokens per second)
0.02.789.548 I llama_perf_context_print:        load time =     452.94 ms
0.02.789.549 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.789.550 I llama_perf_context_print:        eval time =    2316.36 ms /    32 runs   (   72.39 ms per token,    13.81 tokens per second)
0.02.789.551 I llama_perf_context_print:       total time =    2335.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.020.920 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.930 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.943 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.949 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.951 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.952 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.958 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.960 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.250 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.065 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.020 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.028 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.031 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.032 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.033 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.038 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.039 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.040 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.041 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.042 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.046 I llama_model_loader: - type  f32:   37 tensors
0.00.131.048 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.091 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.637 I llm_load_vocab: special tokens cache size = 5
0.00.267.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.712 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.713 I llm_load_print_meta: arch             = gemma
0.00.267.713 I llm_load_print_meta: vocab type       = SPM
0.00.267.714 I llm_load_print_meta: n_vocab          = 256000
0.00.267.715 I llm_load_print_meta: n_merges         = 0
0.00.267.715 I llm_load_print_meta: vocab_only       = 0
0.00.267.716 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.716 I llm_load_print_meta: n_embd           = 2048
0.00.267.717 I llm_load_print_meta: n_layer          = 18
0.00.267.730 I llm_load_print_meta: n_head           = 8
0.00.267.732 I llm_load_print_meta: n_head_kv        = 1
0.00.267.732 I llm_load_print_meta: n_rot            = 256
0.00.267.733 I llm_load_print_meta: n_swa            = 0
0.00.267.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.735 I llm_load_print_meta: n_gqa            = 8
0.00.267.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.738 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.739 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.745 I llm_load_print_meta: n_ff             = 16384
0.00.267.749 I llm_load_print_meta: n_expert         = 0
0.00.267.749 I llm_load_print_meta: n_expert_used    = 0
0.00.267.750 I llm_load_print_meta: causal attn      = 1
0.00.267.751 I llm_load_print_meta: pooling type     = 0
0.00.267.752 I llm_load_print_meta: rope type        = 2
0.00.267.753 I llm_load_print_meta: rope scaling     = linear
0.00.267.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.758 I llm_load_print_meta: freq_scale_train = 1
0.00.267.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.762 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.764 I llm_load_print_meta: model type       = 2B
0.00.267.766 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.767 I llm_load_print_meta: model params     = 2.51 B
0.00.267.768 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.769 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.769 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.770 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.770 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.771 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.771 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.773 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.775 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.776 I llm_load_print_meta: max token length = 93
0.00.339.117 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.124 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.368 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.374 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.374 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.374 I llama_new_context_with_model: n_batch       = 2048
0.00.344.375 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.376 I llama_new_context_with_model: flash_attn    = 0
0.00.344.379 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.380 I llama_new_context_with_model: freq_scale    = 1
0.00.344.381 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.889 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.906 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.014 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.330 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.336 I llama_new_context_with_model: graph nodes  = 601
0.00.360.336 I llama_new_context_with_model: graph splits = 1
0.00.360.339 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.339 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.805 I main: llama threadpool init, n_threads = 4
0.00.456.824 I 
0.00.456.905 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.907 I 
0.00.456.958 I sampler seed: 3010137693
0.00.456.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.975 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.976 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.978 I 
 increasities.

I am unable to access the requested text. [end of text]


0.01.545.821 I llama_perf_sampler_print:    sampling time =       2.35 ms /    15 runs   (    0.16 ms per token,  6385.70 tokens per second)
0.01.545.823 I llama_perf_context_print:        load time =     456.06 ms
0.01.545.825 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.545.826 I llama_perf_context_print:        eval time =    1079.21 ms /    14 runs   (   77.09 ms per token,    12.97 tokens per second)
0.01.545.827 I llama_perf_context_print:       total time =    1089.02 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.073s
user	0m26.587s
sys	0m9.540s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4349 (081b29bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40298.74 ms
main:    total time = 40298.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.020.954 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.966 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.975 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.981 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.988 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.990 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.996 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.997 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.998 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.196 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.635 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.640 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.641 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.642 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.643 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.644 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.645 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.650 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.651 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.652 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.653 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.657 I llama_model_loader: - type  f32:   37 tensors
0.00.131.658 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.659 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.462 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.066 I llm_load_vocab: special tokens cache size = 5
0.00.276.460 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.478 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.479 I llm_load_print_meta: arch             = gemma
0.00.276.480 I llm_load_print_meta: vocab type       = SPM
0.00.276.480 I llm_load_print_meta: n_vocab          = 256000
0.00.276.480 I llm_load_print_meta: n_merges         = 0
0.00.276.481 I llm_load_print_meta: vocab_only       = 0
0.00.276.481 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.481 I llm_load_print_meta: n_embd           = 2048
0.00.276.482 I llm_load_print_meta: n_layer          = 18
0.00.276.492 I llm_load_print_meta: n_head           = 8
0.00.276.493 I llm_load_print_meta: n_head_kv        = 1
0.00.276.494 I llm_load_print_meta: n_rot            = 256
0.00.276.494 I llm_load_print_meta: n_swa            = 0
0.00.276.494 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.494 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.495 I llm_load_print_meta: n_gqa            = 8
0.00.276.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.499 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.501 I llm_load_print_meta: n_ff             = 16384
0.00.276.502 I llm_load_print_meta: n_expert         = 0
0.00.276.502 I llm_load_print_meta: n_expert_used    = 0
0.00.276.502 I llm_load_print_meta: causal attn      = 1
0.00.276.503 I llm_load_print_meta: pooling type     = 0
0.00.276.503 I llm_load_print_meta: rope type        = 2
0.00.276.503 I llm_load_print_meta: rope scaling     = linear
0.00.276.505 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.505 I llm_load_print_meta: freq_scale_train = 1
0.00.276.505 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.506 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.506 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.507 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.507 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.508 I llm_load_print_meta: model type       = 2B
0.00.276.508 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.509 I llm_load_print_meta: model params     = 2.51 B
0.00.276.510 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.511 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.513 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.513 I llm_load_print_meta: max token length = 93
0.00.336.361 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.368 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.368 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.369 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.370 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.370 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.510 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.517 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.517 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.517 I llama_new_context_with_model: n_batch       = 2048
0.00.341.518 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.519 I llama_new_context_with_model: flash_attn    = 0
0.00.341.521 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.522 I llama_new_context_with_model: freq_scale    = 1
0.00.341.524 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.103 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.116 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.206 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.454 I llama_new_context_with_model: graph nodes  = 601
0.00.357.454 I llama_new_context_with_model: graph splits = 1
0.00.357.457 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.804 I main: llama threadpool init, n_threads = 4
0.00.433.821 I 
0.00.433.895 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.433.898 I 
0.00.433.942 I sampler seed: 3297404325
0.00.433.953 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.965 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.969 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.969 I 
 seconally, using the digits 1 through 9. How many possible four digit numbers can be formed?

A) 362
B)

0.02.069.207 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6678.81 tokens per second)
0.02.069.209 I llama_perf_context_print:        load time =     433.03 ms
0.02.069.210 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.069.212 I llama_perf_context_print:        eval time =    1615.93 ms /    32 runs   (   50.50 ms per token,    19.80 tokens per second)
0.02.069.212 I llama_perf_context_print:       total time =    1635.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4349 (081b29bd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40249.41 ms
main:    total time = 40249.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 4349 (081b29bd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.020.736 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.752 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.765 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.766 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.767 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.767 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.768 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.772 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.773 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.774 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.762 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.963 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.854 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.855 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.857 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.860 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.863 I llama_model_loader: - type  f32:   37 tensors
0.00.130.864 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.865 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.467 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.599 I llm_load_vocab: special tokens cache size = 5
0.00.267.708 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.725 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.725 I llm_load_print_meta: arch             = gemma
0.00.267.726 I llm_load_print_meta: vocab type       = SPM
0.00.267.727 I llm_load_print_meta: n_vocab          = 256000
0.00.267.727 I llm_load_print_meta: n_merges         = 0
0.00.267.728 I llm_load_print_meta: vocab_only       = 0
0.00.267.728 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.728 I llm_load_print_meta: n_embd           = 2048
0.00.267.729 I llm_load_print_meta: n_layer          = 18
0.00.267.740 I llm_load_print_meta: n_head           = 8
0.00.267.741 I llm_load_print_meta: n_head_kv        = 1
0.00.267.741 I llm_load_print_meta: n_rot            = 256
0.00.267.741 I llm_load_print_meta: n_swa            = 0
0.00.267.742 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.742 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.743 I llm_load_print_meta: n_gqa            = 8
0.00.267.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.745 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.746 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.747 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.747 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.748 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.748 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.749 I llm_load_print_meta: n_ff             = 16384
0.00.267.749 I llm_load_print_meta: n_expert         = 0
0.00.267.749 I llm_load_print_meta: n_expert_used    = 0
0.00.267.750 I llm_load_print_meta: causal attn      = 1
0.00.267.750 I llm_load_print_meta: pooling type     = 0
0.00.267.750 I llm_load_print_meta: rope type        = 2
0.00.267.751 I llm_load_print_meta: rope scaling     = linear
0.00.267.752 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.752 I llm_load_print_meta: freq_scale_train = 1
0.00.267.753 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.754 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.755 I llm_load_print_meta: model type       = 2B
0.00.267.755 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.756 I llm_load_print_meta: model params     = 2.51 B
0.00.267.757 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.758 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.758 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.759 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.759 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.760 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.760 I llm_load_print_meta: max token length = 93
0.00.325.130 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.173 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.179 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.179 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.180 I llama_new_context_with_model: n_batch       = 2048
0.00.330.180 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.181 I llama_new_context_with_model: flash_attn    = 0
0.00.330.182 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.183 I llama_new_context_with_model: freq_scale    = 1
0.00.330.184 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.011 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.352 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.356 I llama_new_context_with_model: graph nodes  = 601
0.00.346.356 I llama_new_context_with_model: graph splits = 1
0.00.346.358 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.346.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.081 I main: llama threadpool init, n_threads = 4
0.00.421.097 I 
0.00.421.171 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.174 I 
0.00.421.215 I sampler seed: 2050511011
0.00.421.227 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.238 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.242 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.242 I 
 seconally, and with appropriate punctuations.

I am writing to inquire about the possibility of scheduling a meeting with you to discuss the potential for collaborating on a

0.02.032.153 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6530.77 tokens per second)
0.02.032.156 I llama_perf_context_print:        load time =     420.31 ms
0.02.032.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.032.160 I llama_perf_context_print:        eval time =    1591.61 ms /    32 runs   (   49.74 ms per token,    20.11 tokens per second)
0.02.032.161 I llama_perf_context_print:       total time =    1611.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.474s
user	10m24.516s
sys	0m7.138s
